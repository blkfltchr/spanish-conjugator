// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/object-assign/index.js":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
'use strict';
/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};
},{}],"../node_modules/prop-types/lib/ReactPropTypesSecret.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],"../node_modules/prop-types/checkPropTypes.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var printWarning = function () {};

if ("development" !== 'production') {
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */


function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ("development" !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }

        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }

        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */


checkPropTypes.resetWarningCache = function () {
  if ("development" !== 'production') {
    loggedTypeFailures = {};
  }
};

module.exports = checkPropTypes;
},{"./lib/ReactPropTypesSecret":"../node_modules/prop-types/lib/ReactPropTypesSecret.js"}],"../node_modules/react/cjs/react.development.js":[function(require,module,exports) {
/** @license React v16.8.6
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    var _assign = require('object-assign');

    var checkPropTypes = require('prop-types/checkPropTypes'); // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.8.6'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */


    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610

          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;

        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }

        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */


    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */

    function Component(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */


    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */


    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };

      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };

      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}

    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */

    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    _assign(pureComponentPrototype, Component.prototype);

    pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    /**
     * Keeps track of the current dispatcher.
     */


    var ReactCurrentDispatcher = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */

    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var Resolved = 1;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = {};
    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = ''; // Add an extra top frame while an element is being validated

        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        } // Delegate to the injected renderer-specific implementation


        var impl = ReactDebugCurrentFrame.getCurrentStack;

        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }
    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };
    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */


    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */


    function createElement(type, config, children) {
      var propName = void 0; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      } // Resolve default props


      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;

        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }

      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }

          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */


    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */


    function cloneElement(element, config, children) {
      !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;
      var propName = void 0; // Original props are copied

      var props = _assign({}, element.props); // Reserved names are extracted


      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        } // Remaining properties override existing props


        var defaultProps = void 0;

        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */


    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */


    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;

    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];

    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;

      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;

          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }

        }
      }

      if (invokeCallback) {
        callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child = void 0;
      var nextName = void 0;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(children);
          var step = void 0;
          var ii = 0;

          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */


    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      } // Implicit key determined by the index in the set


      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;
      func.call(context, child, bookKeeping.count++);
    }
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */


    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }

      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;
      var mappedChild = func.call(context, child, bookKeeping.count++);

      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }

        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';

      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }

      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */


    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }

      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */


    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */


    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */


    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;
      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }

              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function () {
              return context._threadCount;
            },
            set: function (_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }

              return context.Consumer;
            }
          }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

        context.Consumer = Consumer;
      }
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }

    function lazy(ctor) {
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _ctor: ctor,
        // React uses these fields to store the result.
        _status: -1,
        _result: null
      };
      {
        // In production, this would just set it on the object.
        var defaultProps = void 0;
        var propTypes = void 0;
        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function () {
              return defaultProps;
            },
            set: function (newDefaultProps) {
              warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              defaultProps = newDefaultProps; // Match production behavior more closely:

              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function () {
              return propTypes;
            },
            set: function (newPropTypes) {
              warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              propTypes = newPropTypes; // Match production behavior more closely:

              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }
      return lazyType;
    }

    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
          render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
        }

        if (render != null) {
          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
        }
      }
      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }
      return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
    }

    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      !(dispatcher !== null) ? invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.') : void 0;
      return dispatcher;
    }

    function useContext(Context, unstable_observedBits) {
      var dispatcher = resolveDispatcher();
      {
        !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.

        if (Context._context !== undefined) {
          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.

          if (realContext.Consumer === Context) {
            warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }
      return dispatcher.useContext(Context, unstable_observedBits);
    }

    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }

    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }

    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }

    function useEffect(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, inputs);
    }

    function useLayoutEffect(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, inputs);
    }

    function useCallback(callback, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, inputs);
    }

    function useMemo(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, inputs);
    }

    function useImperativeHandle(ref, create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, inputs);
    }

    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }
    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */


    var propTypesMisspellWarningShown = void 0;
    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);

        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }

      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }

      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */


    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }

      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */


    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }

      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';

      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
      }

      setCurrentlyValidatingElement(element);
      {
        warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }
      setCurrentlyValidatingElement(null);
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */


    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }

      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];

          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);

        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step = void 0;

            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */


    function validatePropTypes(element) {
      var type = element.type;

      if (type === null || type === undefined || typeof type === 'string') {
        return;
      }

      var name = getComponentName(type);
      var propTypes = void 0;

      if (typeof type === 'function') {
        propTypes = type.propTypes;
      } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
      // Inner props are checked in the reconciler.
      type.$$typeof === REACT_MEMO_TYPE)) {
        propTypes = type.propTypes;
      } else {
        return;
      }

      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }

      if (typeof type.getDefaultProps === 'function') {
        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */


    function validateFragmentProps(fragment) {
      setCurrentlyValidatingElement(fragment);
      var keys = Object.keys(fragment.props);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (key !== 'children' && key !== 'key') {
          warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }

      if (fragment.ref !== null) {
        warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
      }

      setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';

        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);

        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString = void 0;

        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }

        warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)


      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type; // Legacy hook: remove it

      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);

      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }

      validatePropTypes(newElement);
      return newElement;
    } // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.
    // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


    var enableStableConcurrentModeAPIs = false;
    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },
      createRef: createRef,
      Component: Component,
      PureComponent: PureComponent,
      createContext: createContext,
      forwardRef: forwardRef,
      lazy: lazy,
      memo: memo,
      useCallback: useCallback,
      useContext: useContext,
      useEffect: useEffect,
      useImperativeHandle: useImperativeHandle,
      useDebugValue: useDebugValue,
      useLayoutEffect: useLayoutEffect,
      useMemo: useMemo,
      useReducer: useReducer,
      useRef: useRef,
      useState: useState,
      Fragment: REACT_FRAGMENT_TYPE,
      StrictMode: REACT_STRICT_MODE_TYPE,
      Suspense: REACT_SUSPENSE_TYPE,
      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,
      version: ReactVersion,
      unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
      unstable_Profiler: REACT_PROFILER_TYPE,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    }; // Note: some APIs are added with feature flags.
    // Make sure that stable builds for open source
    // don't modify the React object to avoid deopts.
    // Also let's not expose their names in stable builds.

    if (enableStableConcurrentModeAPIs) {
      React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      React.Profiler = REACT_PROFILER_TYPE;
      React.unstable_ConcurrentMode = undefined;
      React.unstable_Profiler = undefined;
    }

    var React$2 = Object.freeze({
      default: React
    });
    var React$3 = React$2 && React || React$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var react = React$3.default || React$3;
    module.exports = react;
  })();
}
},{"object-assign":"../node_modules/object-assign/index.js","prop-types/checkPropTypes":"../node_modules/prop-types/checkPropTypes.js"}],"../node_modules/react/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}
},{"./cjs/react.development.js":"../node_modules/react/cjs/react.development.js"}],"../node_modules/scheduler/cjs/scheduler.development.js":[function(require,module,exports) {
var global = arguments[3];
/** @license React v0.13.6
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var enableSchedulerDebugging = false;
    /* eslint-disable no-var */
    // TODO: Use symbols?

    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111

    var maxSigned31BitInt = 1073741823; // Times out immediately

    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

    var IDLE_PRIORITY = maxSigned31BitInt; // Callbacks are stored as a circular, doubly linked list.

    var firstCallbackNode = null;
    var currentDidTimeout = false; // Pausing the scheduler is useful for debugging.

    var isSchedulerPaused = false;
    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1; // This is set when a callback is being executed, to prevent re-entrancy.

    var isExecutingCallback = false;
    var isHostCallbackScheduled = false;
    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

    function ensureHostCallbackIsScheduled() {
      if (isExecutingCallback) {
        // Don't schedule work yet; wait until the next time we yield.
        return;
      } // Schedule the host callback using the earliest expiration in the list.


      var expirationTime = firstCallbackNode.expirationTime;

      if (!isHostCallbackScheduled) {
        isHostCallbackScheduled = true;
      } else {
        // Cancel the existing host callback.
        cancelHostCallback();
      }

      requestHostCallback(flushWork, expirationTime);
    }

    function flushFirstCallback() {
      var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the
      // list is in a consistent state even if the callback throws.

      var next = firstCallbackNode.next;

      if (firstCallbackNode === next) {
        // This is the last callback in the list.
        firstCallbackNode = null;
        next = null;
      } else {
        var lastCallbackNode = firstCallbackNode.previous;
        firstCallbackNode = lastCallbackNode.next = next;
        next.previous = lastCallbackNode;
      }

      flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.

      var callback = flushedNode.callback;
      var expirationTime = flushedNode.expirationTime;
      var priorityLevel = flushedNode.priorityLevel;
      var previousPriorityLevel = currentPriorityLevel;
      var previousExpirationTime = currentExpirationTime;
      currentPriorityLevel = priorityLevel;
      currentExpirationTime = expirationTime;
      var continuationCallback;

      try {
        continuationCallback = callback();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentExpirationTime = previousExpirationTime;
      } // A callback may return a continuation. The continuation should be scheduled
      // with the same priority and expiration as the just-finished callback.


      if (typeof continuationCallback === 'function') {
        var continuationNode = {
          callback: continuationCallback,
          priorityLevel: priorityLevel,
          expirationTime: expirationTime,
          next: null,
          previous: null
        }; // Insert the new callback into the list, sorted by its expiration. This is
        // almost the same as the code in `scheduleCallback`, except the callback
        // is inserted into the list *before* callbacks of equal expiration instead
        // of after.

        if (firstCallbackNode === null) {
          // This is the first callback in the list.
          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
        } else {
          var nextAfterContinuation = null;
          var node = firstCallbackNode;

          do {
            if (node.expirationTime >= expirationTime) {
              // This callback expires at or after the continuation. We will insert
              // the continuation *before* this callback.
              nextAfterContinuation = node;
              break;
            }

            node = node.next;
          } while (node !== firstCallbackNode);

          if (nextAfterContinuation === null) {
            // No equal or lower priority callback was found, which means the new
            // callback is the lowest priority callback in the list.
            nextAfterContinuation = firstCallbackNode;
          } else if (nextAfterContinuation === firstCallbackNode) {
            // The new callback is the highest priority callback in the list.
            firstCallbackNode = continuationNode;
            ensureHostCallbackIsScheduled();
          }

          var previous = nextAfterContinuation.previous;
          previous.next = nextAfterContinuation.previous = continuationNode;
          continuationNode.next = nextAfterContinuation;
          continuationNode.previous = previous;
        }
      }
    }

    function flushImmediateWork() {
      if ( // Confirm we've exited the outer most event handler
      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
        isExecutingCallback = true;

        try {
          do {
            flushFirstCallback();
          } while ( // Keep flushing until there are no more immediate callbacks
          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
        } finally {
          isExecutingCallback = false;

          if (firstCallbackNode !== null) {
            // There's still work remaining. Request another callback.
            ensureHostCallbackIsScheduled();
          } else {
            isHostCallbackScheduled = false;
          }
        }
      }
    }

    function flushWork(didTimeout) {
      // Exit right away if we're currently paused
      if (enableSchedulerDebugging && isSchedulerPaused) {
        return;
      }

      isExecutingCallback = true;
      var previousDidTimeout = currentDidTimeout;
      currentDidTimeout = didTimeout;

      try {
        if (didTimeout) {
          // Flush all the expired callbacks without yielding.
          while (firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
            // TODO Wrap in feature flag
            // Read the current time. Flush all the callbacks that expire at or
            // earlier than that time. Then read the current time again and repeat.
            // This optimizes for as few performance.now calls as possible.
            var currentTime = exports.unstable_now();

            if (firstCallbackNode.expirationTime <= currentTime) {
              do {
                flushFirstCallback();
              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused));

              continue;
            }

            break;
          }
        } else {
          // Keep flushing callbacks until we run out of time in the frame.
          if (firstCallbackNode !== null) {
            do {
              if (enableSchedulerDebugging && isSchedulerPaused) {
                break;
              }

              flushFirstCallback();
            } while (firstCallbackNode !== null && !shouldYieldToHost());
          }
        }
      } finally {
        isExecutingCallback = false;
        currentDidTimeout = previousDidTimeout;

        if (firstCallbackNode !== null) {
          // There's still work remaining. Request another callback.
          ensureHostCallbackIsScheduled();
        } else {
          isHostCallbackScheduled = false;
        } // Before exiting, flush all the immediate work that was scheduled.


        flushImmediateWork();
      }
    }

    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case LowPriority:
        case IdlePriority:
          break;

        default:
          priorityLevel = NormalPriority;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.

        flushImmediateWork();
      }
    }

    function unstable_next(eventHandler) {
      var priorityLevel = void 0;

      switch (currentPriorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
          // Shift down to normal priority
          priorityLevel = NormalPriority;
          break;

        default:
          // Anything lower than normal priority should remain at the current level.
          priorityLevel = currentPriorityLevel;
          break;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.

        flushImmediateWork();
      }
    }

    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = parentPriorityLevel;
        currentEventStartTime = exports.unstable_now();

        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
          currentEventStartTime = previousEventStartTime;
          flushImmediateWork();
        }
      };
    }

    function unstable_scheduleCallback(callback, deprecated_options) {
      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();
      var expirationTime;

      if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
        // FIXME: Remove this branch once we lift expiration times out of React.
        expirationTime = startTime + deprecated_options.timeout;
      } else {
        switch (currentPriorityLevel) {
          case ImmediatePriority:
            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
            break;

          case UserBlockingPriority:
            expirationTime = startTime + USER_BLOCKING_PRIORITY;
            break;

          case IdlePriority:
            expirationTime = startTime + IDLE_PRIORITY;
            break;

          case LowPriority:
            expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
            break;

          case NormalPriority:
          default:
            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
        }
      }

      var newNode = {
        callback: callback,
        priorityLevel: currentPriorityLevel,
        expirationTime: expirationTime,
        next: null,
        previous: null
      }; // Insert the new callback into the list, ordered first by expiration, then
      // by insertion. So the new callback is inserted any other callback with
      // equal expiration.

      if (firstCallbackNode === null) {
        // This is the first callback in the list.
        firstCallbackNode = newNode.next = newNode.previous = newNode;
        ensureHostCallbackIsScheduled();
      } else {
        var next = null;
        var node = firstCallbackNode;

        do {
          if (node.expirationTime > expirationTime) {
            // The new callback expires before this one.
            next = node;
            break;
          }

          node = node.next;
        } while (node !== firstCallbackNode);

        if (next === null) {
          // No callback with a later expiration was found, which means the new
          // callback has the latest expiration in the list.
          next = firstCallbackNode;
        } else if (next === firstCallbackNode) {
          // The new callback has the earliest expiration in the entire list.
          firstCallbackNode = newNode;
          ensureHostCallbackIsScheduled();
        }

        var previous = next.previous;
        previous.next = next.previous = newNode;
        newNode.next = next;
        newNode.previous = previous;
      }

      return newNode;
    }

    function unstable_pauseExecution() {
      isSchedulerPaused = true;
    }

    function unstable_continueExecution() {
      isSchedulerPaused = false;

      if (firstCallbackNode !== null) {
        ensureHostCallbackIsScheduled();
      }
    }

    function unstable_getFirstCallbackNode() {
      return firstCallbackNode;
    }

    function unstable_cancelCallback(callbackNode) {
      var next = callbackNode.next;

      if (next === null) {
        // Already cancelled.
        return;
      }

      if (next === callbackNode) {
        // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
      } else {
        // Remove the callback from its position in the list.
        if (callbackNode === firstCallbackNode) {
          firstCallbackNode = next;
        }

        var previous = callbackNode.previous;
        previous.next = next;
        next.previous = previous;
      }

      callbackNode.next = callbackNode.previous = null;
    }

    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }

    function unstable_shouldYield() {
      return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
    } // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.
    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.


    var localDate = Date; // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088

    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.

    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.

    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;

    var requestAnimationFrameWithTimeout = function (callback) {
      // schedule rAF and also a setTimeout
      rAFID = localRequestAnimationFrame(function (timestamp) {
        // cancel the setTimeout
        localClearTimeout(rAFTimeoutID);
        callback(timestamp);
      });
      rAFTimeoutID = localSetTimeout(function () {
        // cancel the requestAnimationFrame
        localCancelAnimationFrame(rAFID);
        callback(exports.unstable_now());
      }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
      var Performance = performance;

      exports.unstable_now = function () {
        return Performance.now();
      };
    } else {
      exports.unstable_now = function () {
        return localDate.now();
      };
    }

    var requestHostCallback;
    var cancelHostCallback;
    var shouldYieldToHost;
    var globalValue = null;

    if (typeof window !== 'undefined') {
      globalValue = window;
    } else if (typeof global !== 'undefined') {
      globalValue = global;
    }

    if (globalValue && globalValue._schedMock) {
      // Dynamic injection, only for testing purposes.
      var globalImpl = globalValue._schedMock;
      requestHostCallback = globalImpl[0];
      cancelHostCallback = globalImpl[1];
      shouldYieldToHost = globalImpl[2];
      exports.unstable_now = globalImpl[3];
    } else if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' || // Check if MessageChannel is supported, too.
    typeof MessageChannel !== 'function') {
      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
      // fallback to a naive implementation.
      var _callback = null;

      var _flushCallback = function (didTimeout) {
        if (_callback !== null) {
          try {
            _callback(didTimeout);
          } finally {
            _callback = null;
          }
        }
      };

      requestHostCallback = function (cb, ms) {
        if (_callback !== null) {
          // Protect against re-entrancy.
          setTimeout(requestHostCallback, 0, cb);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, 0, false);
        }
      };

      cancelHostCallback = function () {
        _callback = null;
      };

      shouldYieldToHost = function () {
        return false;
      };
    } else {
      if (typeof console !== 'undefined') {
        // TODO: Remove fb.me link
        if (typeof localRequestAnimationFrame !== 'function') {
          console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }

        if (typeof localCancelAnimationFrame !== 'function') {
          console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
      }

      var scheduledHostCallback = null;
      var isMessageEventScheduled = false;
      var timeoutTime = -1;
      var isAnimationFrameScheduled = false;
      var isFlushingHostCallback = false;
      var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.

      var previousFrameTime = 33;
      var activeFrameTime = 33;

      shouldYieldToHost = function () {
        return frameDeadline <= exports.unstable_now();
      }; // We use the postMessage trick to defer idle work until after the repaint.


      var channel = new MessageChannel();
      var port = channel.port2;

      channel.port1.onmessage = function (event) {
        isMessageEventScheduled = false;
        var prevScheduledCallback = scheduledHostCallback;
        var prevTimeoutTime = timeoutTime;
        scheduledHostCallback = null;
        timeoutTime = -1;
        var currentTime = exports.unstable_now();
        var didTimeout = false;

        if (frameDeadline - currentTime <= 0) {
          // There's no time left in this idle period. Check if the callback has
          // a timeout and whether it's been exceeded.
          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
            // Exceeded the timeout. Invoke the callback even though there's no
            // time left.
            didTimeout = true;
          } else {
            // No timeout.
            if (!isAnimationFrameScheduled) {
              // Schedule another animation callback so we retry later.
              isAnimationFrameScheduled = true;
              requestAnimationFrameWithTimeout(animationTick);
            } // Exit without invoking the callback.


            scheduledHostCallback = prevScheduledCallback;
            timeoutTime = prevTimeoutTime;
            return;
          }
        }

        if (prevScheduledCallback !== null) {
          isFlushingHostCallback = true;

          try {
            prevScheduledCallback(didTimeout);
          } finally {
            isFlushingHostCallback = false;
          }
        }
      };

      var animationTick = function (rafTime) {
        if (scheduledHostCallback !== null) {
          // Eagerly schedule the next animation callback at the beginning of the
          // frame. If the scheduler queue is not empty at the end of the frame, it
          // will continue flushing inside that callback. If the queue *is* empty,
          // then it will exit immediately. Posting the callback at the start of the
          // frame ensures it's fired within the earliest possible frame. If we
          // waited until the end of the frame to post the callback, we risk the
          // browser skipping a frame and not firing the callback until the frame
          // after that.
          requestAnimationFrameWithTimeout(animationTick);
        } else {
          // No pending work. Exit.
          isAnimationFrameScheduled = false;
          return;
        }

        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;

        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame time gets lower than 8, it is probably a bug.
            nextFrameTime = 8;
          } // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.


          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }

        frameDeadline = rafTime + activeFrameTime;

        if (!isMessageEventScheduled) {
          isMessageEventScheduled = true;
          port.postMessage(undefined);
        }
      };

      requestHostCallback = function (callback, absoluteTimeout) {
        scheduledHostCallback = callback;
        timeoutTime = absoluteTimeout;

        if (isFlushingHostCallback || absoluteTimeout < 0) {
          // Don't wait for the next frame. Continue working ASAP, in a new event.
          port.postMessage(undefined);
        } else if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
      };

      cancelHostCallback = function () {
        scheduledHostCallback = null;
        isMessageEventScheduled = false;
        timeoutTime = -1;
      };
    }

    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_next = unstable_next;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_shouldYield = unstable_shouldYield;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
  })();
}
},{}],"../node_modules/scheduler/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/scheduler.production.min.js');
} else {
  module.exports = require('./cjs/scheduler.development.js');
}
},{"./cjs/scheduler.development.js":"../node_modules/scheduler/cjs/scheduler.development.js"}],"../node_modules/scheduler/cjs/scheduler-tracing.development.js":[function(require,module,exports) {
/** @license React v0.13.6
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.

    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

    exports.__subscriberRef = null;

    if (enableSchedulerTracing) {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }

    function unstable_clear(callback) {
      if (!enableSchedulerTracing) {
        return callback();
      }

      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();

      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }

    function unstable_getCurrent() {
      if (!enableSchedulerTracing) {
        return null;
      } else {
        return exports.__interactionsRef.current;
      }
    }

    function unstable_getThreadID() {
      return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback();
      }

      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };
      var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.

      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;
      var subscriber = exports.__subscriberRef.current;
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--; // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }

      return returnValue;
    }

    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback;
      }

      var wrappedInteractions = exports.__interactionsRef.current;
      var subscriber = exports.__subscriberRef.current;

      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      } // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.


      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });
      var hasRun = false;

      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;
        subscriber = exports.__subscriberRef.current;

        try {
          var returnValue = void 0;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }

          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true; // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.

            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }

      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;

        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };

      return wrapped;
    }

    var subscribers = null;

    if (enableSchedulerTracing) {
      subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.add(subscriber);

        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }

    function unstable_unsubscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.delete(subscriber);

        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }

    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}
},{}],"../node_modules/scheduler/tracing.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/scheduler-tracing.production.min.js');
} else {
  module.exports = require('./cjs/scheduler-tracing.development.js');
}
},{"./cjs/scheduler-tracing.development.js":"../node_modules/scheduler/cjs/scheduler-tracing.development.js"}],"../node_modules/react-dom/cjs/react-dom.development.js":[function(require,module,exports) {
/** @license React v16.8.6
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    var React = require('react');

    var _assign = require('object-assign');

    var checkPropTypes = require('prop-types/checkPropTypes');

    var scheduler = require('scheduler');

    var tracing = require('scheduler/tracing');
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */


    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.


    !React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

    var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);

      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    };

    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // unintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      //
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!
      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');

        var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
          // If document doesn't exist we know for sure we will crash in this method
          // when we call document.createEvent(). However this can cause confusing
          // errors: https://github.com/facebookincubator/create-react-app/issues/3482
          // So we preemptively throw with a better message instead.
          !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
          var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.

          var didError = true; // Keeps track of the value of window.event so that we can reset it
          // during the callback to let user code access window.event in the
          // browsers that support it.

          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
          // dispatching: https://github.com/facebook/react/issues/13688

          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.

          var funcArgs = Array.prototype.slice.call(arguments, 3);

          function callCallback() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
            // window.event assignment in both IE <= 10 as they throw an error
            // "Member not found" in strict mode, and in Firefox which does not
            // support window.event.

            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
              window.event = windowEvent;
            }

            func.apply(context, funcArgs);
            didError = false;
          } // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.


          var error = void 0; // Use this to track whether the error event is ever called.

          var didSetError = false;
          var isCrossOriginError = false;

          function handleWindowError(event) {
            error = event.error;
            didSetError = true;

            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }

            if (event.defaultPrevented) {
              // Some other error handler has prevented default.
              // Browsers silence the error report if this happens.
              // We'll remember this to later decide whether to log it or not.
              if (error != null && typeof error === 'object') {
                try {
                  error._suppressLogging = true;
                } catch (inner) {// Ignore.
                }
              }
            }
          } // Create a fake event type.


          var evtType = 'react-' + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

          window.addEventListener('error', handleWindowError);
          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.

          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);

          if (windowEventDescriptor) {
            Object.defineProperty(window, 'event', windowEventDescriptor);
          }

          if (didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
            }

            this.onError(error);
          } // Remove our event listeners


          window.removeEventListener('error', handleWindowError);
        };

        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl; // Used by Fiber to simulate a try-catch.

    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.

    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };
    /**
     * Call a function while guarding against errors that happens within it.
     * Returns an error if it throws, otherwise null.
     *
     * In production, this is implemented using a try-catch. The reason we don't
     * use a try-catch directly is so that we can swap out a different
     * implementation in DEV mode.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */

    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
     * Same as invokeGuardedCallback, but instead of returning an error, it stores
     * it in a global so it can be rethrown by `rethrowCaughtError` later.
     * TODO: See if caughtError and rethrowError can be unified.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */


    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);

      if (hasError) {
        var error = clearCaughtError();

        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error;
        }
      }
    }
    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */


    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error;
      }
    }

    function hasCaughtError() {
      return hasError;
    }

    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
        return error;
      } else {
        invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
      }
    }
    /**
     * Injectable ordering of event plugins.
     */


    var eventPluginOrder = null;
    /**
     * Injectable mapping from names to event plugin modules.
     */

    var namesToPlugins = {};
    /**
     * Recomputes the plugin list using the injected plugins and plugin ordering.
     *
     * @private
     */

    function recomputePluginOrdering() {
      if (!eventPluginOrder) {
        // Wait until an `eventPluginOrder` is injected.
        return;
      }

      for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName];
        var pluginIndex = eventPluginOrder.indexOf(pluginName);
        !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;

        if (plugins[pluginIndex]) {
          continue;
        }

        !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
        plugins[pluginIndex] = pluginModule;
        var publishedEvents = pluginModule.eventTypes;

        for (var eventName in publishedEvents) {
          !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
        }
      }
    }
    /**
     * Publishes an event so that it can be dispatched by the supplied plugin.
     *
     * @param {object} dispatchConfig Dispatch configuration for the event.
     * @param {object} PluginModule Plugin publishing the event.
     * @return {boolean} True if the event was successfully published.
     * @private
     */


    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
      !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
      eventNameDispatchConfigs[eventName] = dispatchConfig;
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
            var phasedRegistrationName = phasedRegistrationNames[phaseName];
            publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
          }
        }

        return true;
      } else if (dispatchConfig.registrationName) {
        publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
        return true;
      }

      return false;
    }
    /**
     * Publishes a registration name that is used to identify dispatched events.
     *
     * @param {string} registrationName Registration name to add.
     * @param {object} PluginModule Plugin publishing the event.
     * @private
     */


    function publishRegistrationName(registrationName, pluginModule, eventName) {
      !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
      registrationNameModules[registrationName] = pluginModule;
      registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;

        if (registrationName === 'onDoubleClick') {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
    }
    /**
     * Registers plugins so that they can extract and dispatch events.
     *
     * @see {EventPluginHub}
     */

    /**
     * Ordered list of injected plugins.
     */


    var plugins = [];
    /**
     * Mapping from event name to dispatch config
     */

    var eventNameDispatchConfigs = {};
    /**
     * Mapping from registration name to plugin module
     */

    var registrationNameModules = {};
    /**
     * Mapping from registration name to event name
     */

    var registrationNameDependencies = {};
    /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in true.
     * @type {Object}
     */

    var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */

    function injectEventPluginOrder(injectedEventPluginOrder) {
      !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0; // Clone the ordering so it cannot be dynamically mutated.

      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    }
    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */


    function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false;

      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }

        var pluginModule = injectedNamesToPlugins[pluginName];

        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
          !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
          namesToPlugins[pluginName] = pluginModule;
          isOrderingDirty = true;
        }
      }

      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610

          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;

    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
      getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
      getInstanceFromNode = getInstanceFromNodeImpl;
      getNodeFromInstance = getNodeFromInstanceImpl;
      {
        !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
      }
    }

    var validateEventDispatches = void 0;
    {
      validateEventDispatches = function (event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
        !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
      };
    }
    /**
     * Dispatch the event to the listener.
     * @param {SyntheticEvent} event SyntheticEvent to handle
     * @param {function} listener Application-level callback
     * @param {*} inst Internal component instance
     */

    function executeDispatch(event, listener, inst) {
      var type = event.type || 'unknown-event';
      event.currentTarget = getNodeFromInstance(inst);
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }
    /**
     * Standard/simple iteration through an event's collected dispatches.
     */


    function executeDispatchesInOrder(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }

      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          } // Listeners and Instances are two parallel arrays that are always in sync.


          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
        }
      } else if (dispatchListeners) {
        executeDispatch(event, dispatchListeners, dispatchInstances);
      }

      event._dispatchListeners = null;
      event._dispatchInstances = null;
    }
    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */

    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return {*} The return value of executing the single dispatch.
     */

    /**
     * @param {SyntheticEvent} event
     * @return {boolean} True iff number of dispatches accumulated is greater than 0.
     */

    /**
     * Accumulates items that must not be null or undefined into the first one. This
     * is used to conserve memory by avoiding array allocations, and thus sacrifices
     * API cleanness. Since `current` can be null before being passed in and not
     * null after this function, make sure to assign it back to `current`:
     *
     * `a = accumulateInto(a, b);`
     *
     * This API should be sparingly used. Try `accumulate` for something cleaner.
     *
     * @return {*|array<*>} An accumulation of items.
     */


    function accumulateInto(current, next) {
      !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

      if (current == null) {
        return next;
      } // Both are not empty. Warning: Never call x.concat(y) when you are not
      // certain that x is an Array (x could be a string with concat method).


      if (Array.isArray(current)) {
        if (Array.isArray(next)) {
          current.push.apply(current, next);
          return current;
        }

        current.push(next);
        return current;
      }

      if (Array.isArray(next)) {
        // A bit too dangerous to mutate `next`.
        return [current].concat(next);
      }

      return [current, next];
    }
    /**
     * @param {array} arr an "accumulation" of items which is either an Array or
     * a single item. Useful when paired with the `accumulate` module. This is a
     * simple utility that allows us to reason about a collection of items, but
     * handling the case when there is exactly one item (and we do not need to
     * allocate an array).
     * @param {function} cb Callback invoked with each element or a collection.
     * @param {?} [scope] Scope used as `this` in a callback.
     */


    function forEachAccumulated(arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    }
    /**
     * Internal queue of events that have accumulated their dispatches and are
     * waiting to have their dispatches executed.
     */


    var eventQueue = null;
    /**
     * Dispatches an event and releases it back into the pool, unless persistent.
     *
     * @param {?object} event Synthetic event to be dispatched.
     * @private
     */

    var executeDispatchesAndRelease = function (event) {
      if (event) {
        executeDispatchesInOrder(event);

        if (!event.isPersistent()) {
          event.constructor.release(event);
        }
      }
    };

    var executeDispatchesAndReleaseTopLevel = function (e) {
      return executeDispatchesAndRelease(e);
    };

    function isInteractive(tag) {
      return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }

    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
          return !!(props.disabled && isInteractive(type));

        default:
          return false;
      }
    }
    /**
     * This is a unified interface for event plugins to be installed and configured.
     *
     * Event plugins can implement the following properties:
     *
     *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
     *     Required. When a top-level event is fired, this method is expected to
     *     extract synthetic events that will in turn be queued and dispatched.
     *
     *   `eventTypes` {object}
     *     Optional, plugins that fire events must publish a mapping of registration
     *     names that are used to register listeners. Values of this mapping must
     *     be objects that contain `registrationName` or `phasedRegistrationNames`.
     *
     *   `executeDispatch` {function(object, function, string)}
     *     Optional, allows plugins to override how an event gets dispatched. By
     *     default, the listener is simply invoked.
     *
     * Each plugin that is injected into `EventsPluginHub` is immediately operable.
     *
     * @public
     */

    /**
     * Methods for injecting dependencies.
     */


    var injection = {
      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: injectEventPluginOrder,

      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: injectEventPluginsByName
    };
    /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */

    function getListener(inst, registrationName) {
      var listener = void 0; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
      // live here; needs to be moved to a better place soon

      var stateNode = inst.stateNode;

      if (!stateNode) {
        // Work in progress (ex: onload events in incremental mode).
        return null;
      }

      var props = getFiberCurrentPropsFromNode(stateNode);

      if (!props) {
        // Work in progress.
        return null;
      }

      listener = props[registrationName];

      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }

      !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
      return listener;
    }
    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @return {*} An accumulation of synthetic events.
     * @internal
     */


    function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = null;

      for (var i = 0; i < plugins.length; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];

        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }

      return events;
    }

    function runEventsInBatch(events) {
      if (events !== null) {
        eventQueue = accumulateInto(eventQueue, events);
      } // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.


      var processingEventQueue = eventQueue;
      eventQueue = null;

      if (!processingEventQueue) {
        return;
      }

      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0; // This would be a good time to rethrow if any of the event handlers threw.

      rethrowCaughtError();
    }

    function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      runEventsInBatch(events);
    }

    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class

    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedSuspenseComponent = 18;
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactInternalInstance$' + randomKey;
    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    /**
     * Given a DOM node, return the closest ReactDOMComponent or
     * ReactDOMTextComponent instance ancestor.
     */


    function getClosestInstanceFromNode(node) {
      if (node[internalInstanceKey]) {
        return node[internalInstanceKey];
      }

      while (!node[internalInstanceKey]) {
        if (node.parentNode) {
          node = node.parentNode;
        } else {
          // Top of the tree. This node must not be part of a React tree (or is
          // unmounted, potentially).
          return null;
        }
      }

      var inst = node[internalInstanceKey];

      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber, this will always be the deepest root.
        return inst;
      }

      return null;
    }
    /**
     * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
     * instance, or null if the node was not rendered by this React.
     */


    function getInstanceFromNode$1(node) {
      var inst = node[internalInstanceKey];

      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst;
        } else {
          return null;
        }
      }

      return null;
    }
    /**
     * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
     * DOM node.
     */


    function getNodeFromInstance$1(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
      } // Without this first invariant, passing a non-DOM-component triggers the next
      // invariant for a missing parent, which is super confusing.


      invariant(false, 'getNodeFromInstance: Invalid argument.');
    }

    function getFiberCurrentPropsFromNode$1(node) {
      return node[internalEventHandlersKey] || null;
    }

    function updateFiberProps(node, props) {
      node[internalEventHandlersKey] = props;
    }

    function getParent(inst) {
      do {
        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        // That is depending on if we want nested subtrees (layers) to bubble
        // events to their parent. We could also go through parentNode on the
        // host node but that wouldn't work for React Native and doesn't let us
        // do the portal feature.
      } while (inst && inst.tag !== HostComponent);

      if (inst) {
        return inst;
      }

      return null;
    }
    /**
     * Return the lowest common ancestor of A and B, or null if they are in
     * different trees.
     */


    function getLowestCommonAncestor(instA, instB) {
      var depthA = 0;

      for (var tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }

      var depthB = 0;

      for (var tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
      } // If A is deeper, crawl up.


      while (depthA - depthB > 0) {
        instA = getParent(instA);
        depthA--;
      } // If B is deeper, crawl up.


      while (depthB - depthA > 0) {
        instB = getParent(instB);
        depthB--;
      } // Walk in lockstep until we find a match.


      var depth = depthA;

      while (depth--) {
        if (instA === instB || instA === instB.alternate) {
          return instA;
        }

        instA = getParent(instA);
        instB = getParent(instB);
      }

      return null;
    }
    /**
     * Return if A is an ancestor of B.
     */

    /**
     * Return the parent instance of the passed-in instance.
     */

    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     */


    function traverseTwoPhase(inst, fn, arg) {
      var path = [];

      while (inst) {
        path.push(inst);
        inst = getParent(inst);
      }

      var i = void 0;

      for (i = path.length; i-- > 0;) {
        fn(path[i], 'captured', arg);
      }

      for (i = 0; i < path.length; i++) {
        fn(path[i], 'bubbled', arg);
      }
    }
    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * Does not invoke the callback on the nearest common ancestor because nothing
     * "entered" or "left" that element.
     */


    function traverseEnterLeave(from, to, fn, argFrom, argTo) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      var pathFrom = [];

      while (true) {
        if (!from) {
          break;
        }

        if (from === common) {
          break;
        }

        var alternate = from.alternate;

        if (alternate !== null && alternate === common) {
          break;
        }

        pathFrom.push(from);
        from = getParent(from);
      }

      var pathTo = [];

      while (true) {
        if (!to) {
          break;
        }

        if (to === common) {
          break;
        }

        var _alternate = to.alternate;

        if (_alternate !== null && _alternate === common) {
          break;
        }

        pathTo.push(to);
        to = getParent(to);
      }

      for (var i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], 'bubbled', argFrom);
      }

      for (var _i = pathTo.length; _i-- > 0;) {
        fn(pathTo[_i], 'captured', argTo);
      }
    }
    /**
     * Some event types have a notion of different registration names for different
     * "phases" of propagation. This finds listeners by a given phase.
     */


    function listenerAtPhase(inst, event, propagationPhase) {
      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
      return getListener(inst, registrationName);
    }
    /**
     * A small set of propagation patterns, each of which will accept a small amount
     * of information, and generate a set of "dispatch ready event objects" - which
     * are sets of events that have already been annotated with a set of dispatched
     * listener functions/ids. The API is designed this way to discourage these
     * propagation strategies from actually executing the dispatches, since we
     * always want to collect the entire set of dispatches before executing even a
     * single one.
     */

    /**
     * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
     * here, allows us to not have to bind or create functions for each event.
     * Mutating the event's members allows us to not have to create a wrapping
     * "dispatch" object that pairs the event with the listener.
     */


    function accumulateDirectionalDispatches(inst, phase, event) {
      {
        !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
      }
      var listener = listenerAtPhase(inst, event, phase);

      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }
    /**
     * Collect dispatches (must be entirely collected before dispatching - see unit
     * tests). Lazily allocate the array to conserve memory.  We must loop through
     * each event and perform the traversal for each one. We cannot perform a
     * single traversal for the entire collection of events because each event may
     * have a different target.
     */


    function accumulateTwoPhaseDispatchesSingle(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
      }
    }
    /**
     * Accumulates without regard to direction, does not look for phased
     * registration names. Same as `accumulateDirectDispatchesSingle` but without
     * requiring that the `dispatchMarker` be the same as the dispatched ID.
     */


    function accumulateDispatches(inst, ignoredDirection, event) {
      if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName;
        var listener = getListener(inst, registrationName);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }
    }
    /**
     * Accumulates dispatches on an `SyntheticEvent`, but only for the
     * `dispatchMarker`.
     * @param {SyntheticEvent} event
     */


    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        accumulateDispatches(event._targetInst, null, event);
      }
    }

    function accumulateTwoPhaseDispatches(events) {
      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }

    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
      traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }

    function accumulateDirectDispatches(events) {
      forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }

    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement); // Do not uses the below two methods directly!
    // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
    // (It is the only module that is allowed to access these methods.)

    function unsafeCastStringToDOMTopLevelType(topLevelType) {
      return topLevelType;
    }

    function unsafeCastDOMTopLevelTypeToString(topLevelType) {
      return topLevelType;
    }
    /**
     * Generate a mapping of standard vendor prefixes using the defined style property and event name.
     *
     * @param {string} styleProp
     * @param {string} eventName
     * @returns {object}
     */


    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes['Webkit' + styleProp] = 'webkit' + eventName;
      prefixes['Moz' + styleProp] = 'moz' + eventName;
      return prefixes;
    }
    /**
     * A list of event names to a configurable list of vendor prefixes.
     */


    var vendorPrefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
      animationstart: makePrefixMap('Animation', 'AnimationStart'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
     * Event names that have already been detected and prefixed (if applicable).
     */

    var prefixedEventNames = {};
    /**
     * Element to check for prefixes on.
     */

    var style = {};
    /**
     * Bootstrap if a DOM exists.
     */

    if (canUseDOM) {
      style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
      // the un-prefixed "animation" and "transition" properties are defined on the
      // style object but the events that fire will still be prefixed, so we need
      // to check if the un-prefixed events are usable, and if not remove them from the map.

      if (!('AnimationEvent' in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      } // Same as above


      if (!('TransitionEvent' in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    /**
     * Attempts to determine the correct vendor prefixed event name.
     *
     * @param {string} eventName
     * @returns {string}
     */


    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }

      var prefixMap = vendorPrefixes[eventName];

      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }

      return eventName;
    }
    /**
     * To identify top level events in ReactDOM, we use constants defined by this
     * module. This is the only module that uses the unsafe* methods to express
     * that the constants actually correspond to the browser event names. This lets
     * us save some bundle size by avoiding a top level type -> event name map.
     * The rest of ReactDOM code should import top level types from this file.
     */


    var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
    var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
    var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
    var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
    var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
    var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
    var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
    var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
    var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
    var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
    var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
    var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
    var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
    var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
    var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
    var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
    var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
    var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
    var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
    var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
    var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
    var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
    var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
    var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
    var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
    var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
    var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
    var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
    var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
    var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
    var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
    var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
    var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
    var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
    var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
    var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
    var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
    var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
    var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
    var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
    var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
    var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
    var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
    var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
    var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
    var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
    var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
    var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
    var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
    var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
    var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
    var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
    var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
    var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
    var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
    var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
    var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
    var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
    var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
    var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
    var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
    var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
    var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
    var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
    var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
    var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
    var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
    var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
    var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
    var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
    var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
    var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
    var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
    var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
    var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
    var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
    var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
    var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
    var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
    var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
    // Note that events in this list will *not* be listened to at the top level
    // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

    var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

    function getRawEventName(topLevelType) {
      return unsafeCastDOMTopLevelTypeToString(topLevelType);
    }
    /**
     * These variables store information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     *
     *
     */


    var root = null;
    var startText = null;
    var fallbackText = null;

    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }

    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }

    function getData() {
      if (fallbackText) {
        return fallbackText;
      }

      var start = void 0;
      var startValue = startText;
      var startLength = startValue.length;
      var end = void 0;
      var endValue = getText();
      var endLength = endValue.length;

      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }

      var minEnd = startLength - start;

      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }

      var sliceTail = end > 1 ? 1 - end : undefined;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }

    function getText() {
      if ('value' in root) {
        return root.value;
      }

      return root.textContent;
    }
    /* eslint valid-typeof: 0 */


    var EVENT_POOL_SIZE = 10;
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var EventInterface = {
      type: null,
      target: null,
      // currentTarget is set when dispatching; no use in copying it here
      currentTarget: function () {
        return null;
      },
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function (event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };

    function functionThatReturnsTrue() {
      return true;
    }

    function functionThatReturnsFalse() {
      return false;
    }
    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     *
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {*} targetInst Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @param {DOMEventTarget} nativeEventTarget Target node.
     */


    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
      {
        // these have a getter/setter for warnings
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
        delete this.isDefaultPrevented;
        delete this.isPropagationStopped;
      }
      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;
      var Interface = this.constructor.Interface;

      for (var propName in Interface) {
        if (!Interface.hasOwnProperty(propName)) {
          continue;
        }

        {
          delete this[propName]; // this has a getter/setter for warnings
        }
        var normalize = Interface[propName];

        if (normalize) {
          this[propName] = normalize(nativeEvent);
        } else {
          if (propName === 'target') {
            this.target = nativeEventTarget;
          } else {
            this[propName] = nativeEvent[propName];
          }
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

      if (defaultPrevented) {
        this.isDefaultPrevented = functionThatReturnsTrue;
      } else {
        this.isDefaultPrevented = functionThatReturnsFalse;
      }

      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    _assign(SyntheticEvent.prototype, {
      preventDefault: function () {
        this.defaultPrevented = true;
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.preventDefault) {
          event.preventDefault();
        } else if (typeof event.returnValue !== 'unknown') {
          event.returnValue = false;
        }

        this.isDefaultPrevented = functionThatReturnsTrue;
      },
      stopPropagation: function () {
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.stopPropagation) {
          event.stopPropagation();
        } else if (typeof event.cancelBubble !== 'unknown') {
          // The ChangeEventPlugin registers a "propertychange" event for
          // IE. This event does not support bubbling or cancelling, and
          // any references to cancelBubble throw "Member not found".  A
          // typeof check of "unknown" circumvents this issue (and is also
          // IE specific).
          event.cancelBubble = true;
        }

        this.isPropagationStopped = functionThatReturnsTrue;
      },

      /**
       * We release all dispatched `SyntheticEvent`s after each event loop, adding
       * them back into the pool. This allows a way to hold onto a reference that
       * won't be added back into the pool.
       */
      persist: function () {
        this.isPersistent = functionThatReturnsTrue;
      },

      /**
       * Checks if this event should be released back into the pool.
       *
       * @return {boolean} True if this should not be released, false otherwise.
       */
      isPersistent: functionThatReturnsFalse,

      /**
       * `PooledClass` looks for `destructor` on each instance it releases.
       */
      destructor: function () {
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
          }
        }

        this.dispatchConfig = null;
        this._targetInst = null;
        this.nativeEvent = null;
        this.isDefaultPrevented = functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        this._dispatchListeners = null;
        this._dispatchInstances = null;
        {
          Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
          Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
          Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
          Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
          Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
        }
      }
    });

    SyntheticEvent.Interface = EventInterface;
    /**
     * Helper to reduce boilerplate when creating subclasses.
     */

    SyntheticEvent.extend = function (Interface) {
      var Super = this;

      var E = function () {};

      E.prototype = Super.prototype;
      var prototype = new E();

      function Class() {
        return Super.apply(this, arguments);
      }

      _assign(prototype, Class.prototype);

      Class.prototype = prototype;
      Class.prototype.constructor = Class;
      Class.Interface = _assign({}, Super.Interface, Interface);
      Class.extend = Super.extend;
      addEventPoolingTo(Class);
      return Class;
    };

    addEventPoolingTo(SyntheticEvent);
    /**
     * Helper to nullify syntheticEvent instance properties when destructing
     *
     * @param {String} propName
     * @param {?object} getVal
     * @return {object} defineProperty object
     */

    function getPooledWarningPropertyDefinition(propName, getVal) {
      var isFunction = typeof getVal === 'function';
      return {
        configurable: true,
        set: set,
        get: get
      };

      function set(val) {
        var action = isFunction ? 'setting the method' : 'setting the property';
        warn(action, 'This is effectively a no-op');
        return val;
      }

      function get() {
        var action = isFunction ? 'accessing the method' : 'accessing the property';
        var result = isFunction ? 'This is a no-op function' : 'This is set to null';
        warn(action, result);
        return getVal;
      }

      function warn(action, result) {
        var warningCondition = false;
        !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
      }
    }

    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
      var EventConstructor = this;

      if (EventConstructor.eventPool.length) {
        var instance = EventConstructor.eventPool.pop();
        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
      }

      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      var EventConstructor = this;
      !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
      event.destructor();

      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
        EventConstructor.eventPool.push(event);
      }
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.eventPool = [];
      EventConstructor.getPooled = getPooledEvent;
      EventConstructor.release = releasePooledEvent;
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */


    var SyntheticCompositionEvent = SyntheticEvent.extend({
      data: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */

    var SyntheticInputEvent = SyntheticEvent.extend({
      data: null
    });
    var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;

    if (canUseDOM && 'documentMode' in document) {
      documentMode = document.documentMode;
    } // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.


    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.

    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

    var eventTypes = {
      beforeInput: {
        phasedRegistrationNames: {
          bubbled: 'onBeforeInput',
          captured: 'onBeforeInputCapture'
        },
        dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
      },
      compositionEnd: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionEnd',
          captured: 'onCompositionEndCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionStart: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionStart',
          captured: 'onCompositionStartCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionUpdate: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionUpdate',
          captured: 'onCompositionUpdateCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      }
    }; // Track whether we've ever handled a keypress on the space key.

    var hasSpaceKeypress = false;
    /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */

    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
     * Translate native top level events into event types.
     *
     * @param {string} topLevelType
     * @return {object}
     */


    function getCompositionEventType(topLevelType) {
      switch (topLevelType) {
        case TOP_COMPOSITION_START:
          return eventTypes.compositionStart;

        case TOP_COMPOSITION_END:
          return eventTypes.compositionEnd;

        case TOP_COMPOSITION_UPDATE:
          return eventTypes.compositionUpdate;
      }
    }
    /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isFallbackCompositionStart(topLevelType, nativeEvent) {
      return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
     * Does our fallback mode think that this event is the end of composition?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_KEY_UP:
          // Command keys insert or clear IME input.
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

        case TOP_KEY_DOWN:
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return nativeEvent.keyCode !== START_KEYCODE;

        case TOP_KEY_PRESS:
        case TOP_MOUSE_DOWN:
        case TOP_BLUR:
          // Events are not possible without cancelling IME.
          return true;

        default:
          return false;
      }
    }
    /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */


    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;

      if (typeof detail === 'object' && 'data' in detail) {
        return detail.data;
      }

      return null;
    }
    /**
     * Check if a composition event was triggered by Korean IME.
     * Our fallback mode does not work well with IE's Korean IME,
     * so just use native composition events when Korean IME is used.
     * Although CompositionEvent.locale property is deprecated,
     * it is available in IE, where our fallback mode is enabled.
     *
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.


    var isComposing = false;
    /**
     * @return {?object} A SyntheticCompositionEvent.
     */

    function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var eventType = void 0;
      var fallbackData = void 0;

      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(topLevelType);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
          eventType = eventTypes.compositionStart;
        }
      } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionEnd;
      }

      if (!eventType) {
        return null;
      }

      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!isComposing && eventType === eventTypes.compositionStart) {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === eventTypes.compositionEnd) {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }

      var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);

        if (customData !== null) {
          event.data = customData;
        }
      }

      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * @param {TopLevelType} topLevelType Number from `TopLevelType`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The string corresponding to this `beforeInput` event.
     */


    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_COMPOSITION_END:
          return getDataFromCustomEvent(nativeEvent);

        case TOP_KEY_PRESS:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;

          if (which !== SPACEBAR_CODE) {
            return null;
          }

          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;

        case TOP_TEXT_INPUT:
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to ignore it.

          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }

          return chars;

        default:
          // For other native event types, do nothing.
          return null;
      }
    }
    /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The fallback string for this `beforeInput` event.
     */


    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      // If composition event is available, we extract a string only at
      // compositionevent, otherwise extract it at fallback events.
      if (isComposing) {
        if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }

        return null;
      }

      switch (topLevelType) {
        case TOP_PASTE:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;

        case TOP_KEY_PRESS:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (!isKeypressCommand(nativeEvent)) {
            // IE fires the `keypress` event when a user types an emoji via
            // Touch keyboard of Windows.  In such a case, the `char` property
            // holds an emoji character like `\uD83D\uDE0A`.  Because its length
            // is 2, the property `which` does not represent an emoji correctly.
            // In such a case, we directly return the `char` property instead of
            // using `which`.
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }

          return null;

        case TOP_COMPOSITION_END:
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

        default:
          return null;
      }
    }
    /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @return {?object} A SyntheticInputEvent.
     */


    function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var chars = void 0;

      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
      } // If no characters are being inserted, no BeforeInput event should
      // be fired.


      if (!chars) {
        return null;
      }

      var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
      event.data = chars;
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */


    var BeforeInputEventPlugin = {
      eventTypes: eventTypes,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

        if (composition === null) {
          return beforeInput;
        }

        if (beforeInput === null) {
          return composition;
        }

        return [composition, beforeInput];
      }
    }; // Use to restore controlled state after a change event has fired.

    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;

    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = getInstanceFromNode(target);

      if (!internalInstance) {
        // Unmounted
        return;
      }

      !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
      restoreImpl(internalInstance.stateNode, internalInstance.type, props);
    }

    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }

    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }

    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }

    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }

      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);

      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    } // Used as a way to call batchedUpdates when we don't have a reference to
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults


    var _batchedUpdatesImpl = function (fn, bookkeeping) {
      return fn(bookkeeping);
    };

    var _interactiveUpdatesImpl = function (fn, a, b) {
      return fn(a, b);
    };

    var _flushInteractiveUpdatesImpl = function () {};

    var isBatching = false;

    function batchedUpdates(fn, bookkeeping) {
      if (isBatching) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
      }

      isBatching = true;

      try {
        return _batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        isBatching = false;
        var controlledComponentsHavePendingUpdates = needsStateRestore();

        if (controlledComponentsHavePendingUpdates) {
          // If a controlled event was fired, we may need to restore the state of
          // the DOM node back to the controlled value. This is necessary when React
          // bails out of the update without touching the DOM.
          _flushInteractiveUpdatesImpl();

          restoreStateIfNeeded();
        }
      }
    }

    function interactiveUpdates(fn, a, b) {
      return _interactiveUpdatesImpl(fn, a, b);
    }

    function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
      _batchedUpdatesImpl = batchedUpdatesImpl;
      _interactiveUpdatesImpl = interactiveUpdatesImpl;
      _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
    }
    /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */


    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      'datetime-local': true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };

    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

      if (nodeName === 'input') {
        return !!supportedInputTypes[elem.type];
      }

      if (nodeName === 'textarea') {
        return true;
      }

      return false;
    }
    /**
     * HTML nodeType values that represent the type of the node
     */


    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */

    function getEventTarget(nativeEvent) {
      // Fallback to nativeEvent.srcElement for IE9
      // https://github.com/facebook/react/issues/12506
      var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html


      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */


    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }

      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;

      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }

      return isSupported;
    }

    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }

    function getTracker(node) {
      return node._valueTracker;
    }

    function detachTracker(node) {
      node._valueTracker = null;
    }

    function getValueFromNode(node) {
      var value = '';

      if (!node) {
        return value;
      }

      if (isCheckable(node)) {
        value = node.checked ? 'true' : 'false';
      } else {
        value = node.value;
      }

      return value;
    }

    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)

      if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }

      var get = descriptor.get,
          set = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function () {
          return get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          set.call(this, value);
        }
      }); // We could've passed this the first time
      // but it triggers a bug in IE11 and Edge 14/15.
      // Calling defineProperty() again should be equivalent.
      // https://github.com/facebook/react/issues/11768

      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }

    function track(node) {
      if (getTracker(node)) {
        return;
      } // TODO: Once it's just Fiber we can move this to node._wrapperState


      node._valueTracker = trackValueOnNode(node);
    }

    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }

      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
      // that trying again will succeed

      if (!tracker) {
        return true;
      }

      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);

      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }

      return false;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
    // Current owner and dispatcher used to share the same ref,
    // but PR #14548 split them out to better support the react-debug-tools package.

    if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
      ReactSharedInternals.ReactCurrentDispatcher = {
        current: null
      };
    }

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    }; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.


    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }

    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case HostRoot:
        case HostPortal:
        case HostText:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
          return '';

        default:
          var owner = fiber._debugOwner;
          var source = fiber._debugSource;
          var name = getComponentName(fiber.type);
          var ownerName = null;

          if (owner) {
            ownerName = getComponentName(owner.type);
          }

          return describeComponentFrame(name, source, ownerName);
      }
    }

    function getStackByFiberInDevAndProd(workInProgress) {
      var info = '';
      var node = workInProgress;

      do {
        info += describeFiber(node);
        node = node.return;
      } while (node);

      return info;
    }

    var current = null;
    var phase = null;

    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }

        var owner = current._debugOwner;

        if (owner !== null && typeof owner !== 'undefined') {
          return getComponentName(owner.type);
        }
      }
      return null;
    }

    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return '';
        } // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.


        return getStackByFiberInDevAndProd(current);
      }
      return '';
    }

    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        phase = null;
      }
    }

    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        phase = null;
      }
    }

    function setCurrentPhase(lifeCyclePhase) {
      {
        phase = lifeCyclePhase;
      }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning; // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.

    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the whitelist are presumed to have this type.

    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.

    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.

    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.

    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.

    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.

    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */

    var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    /* eslint-enable max-len */

    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};

    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }

      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }

      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }

      illegalAttributeNameCache[attributeName] = true;
      {
        warning$1(false, 'Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }

    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
        return true;
      }

      return false;
    }

    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }

      switch (typeof value) {
        case 'function': // $FlowIssue symbol is perfectly valid here

        case 'symbol':
          // eslint-disable-line
          return true;

        case 'boolean':
          {
            if (isCustomComponentTag) {
              return false;
            }

            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }

        default:
          return false;
      }
    }

    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === 'undefined') {
        return true;
      }

      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;

          case OVERLOADED_BOOLEAN:
            return value === false;

          case NUMERIC:
            return isNaN(value);

          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }

      return false;
    }

    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }

    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.


    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

    ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
    // elements (not just inputs). Now that ReactDOMInput assigns to the
    // defaultValue property -- do we need this?
    'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.

    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
      var name = _ref[0],
          attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, // attributeName
      null);
    } // attributeNamespace
    ); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).

    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    ); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.

    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML boolean attributes.

    ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
    'itemScope'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    ); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.

    ['checked', // Note: `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`. We have special logic for handling this.
    'multiple', 'muted', 'selected'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.

    ['capture', 'download'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that must be positive numbers.

    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that must be numbers.

    ['rowSpan', 'start'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );
    var CAMELIZE = /[\-\:]([a-z])/g;

    var capitalize = function (token) {
      return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML whitelist.
    // Some of these attributes can be hard to find. This list was created by
    // scrapping the MDN documentation.


    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, null);
    } // attributeNamespace
    ); // String SVG attributes with the xlink namespace.

    ['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/1999/xlink');
    }); // String SVG attributes with the xml namespace.

    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/XML/1998/namespace');
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.

    ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
      attributeName.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );
    /**
     * Get the value for a property on a node. Only used in DEV for SSR validation.
     * The "expected" argument is used as a hint of what the expected value is.
     * Some properties have multiple equivalent values.
     */

    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;

          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);

              if (value === '') {
                return true;
              }

              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }

              if (value === '' + expected) {
                return expected;
              }

              return value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              // We had an attribute but shouldn't have had one, so read it
              // for the error message.
              return node.getAttribute(attributeName);
            }

            if (propertyInfo.type === BOOLEAN) {
              // If this was a boolean, it doesn't matter what the value is
              // the fact that we have it is the same as the expected.
              return expected;
            } // Even if this property uses a namespace we use getAttribute
            // because we assume its namespaced name is the same as our config.
            // To use getAttributeNS we need the local name which we don't have
            // in our config atm.


            stringValue = node.getAttribute(attributeName);
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === '' + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    /**
     * Get the value for a attribute on a node. Only used in DEV for SSR validation.
     * The third argument is used as a hint of what the expected value is. Some
     * attributes have multiple equivalent values.
     */


    function getValueForAttribute(node, name, expected) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }

        if (!node.hasAttribute(name)) {
          return expected === undefined ? undefined : null;
        }

        var value = node.getAttribute(name);

        if (value === '' + expected) {
          return expected;
        }

        return value;
      }
    }
    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */


    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);

      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }

      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      } // If the prop isn't in the special list, treat it as a simple attribute.


      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;

          if (value === null) {
            node.removeAttribute(_attributeName);
          } else {
            node.setAttribute(_attributeName, '' + value);
          }
        }

        return;
      }

      var mustUseProperty = propertyInfo.mustUseProperty;

      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;

        if (value === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? false : '';
        } else {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propertyName] = value;
        }

        return;
      } // The rest are treated as attributes with special cases.


      var attributeName = propertyInfo.attributeName,
          attributeNamespace = propertyInfo.attributeNamespace;

      if (value === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue = void 0;

        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          attributeValue = '';
        } else {
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          attributeValue = '' + value;
        }

        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    } // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.


    function toString(value) {
      return '' + value;
    }

    function getToStringValue(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
        case 'object':
        case 'string':
        case 'undefined':
          return value;

        default:
          // function, symbol are assigned as empty strings
          return '';
      }
    }

    var ReactDebugCurrentFrame$1 = null;
    var ReactControlledValuePropTypes = {
      checkPropTypes: null
    };
    {
      ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      var propTypes = {
        value: function (props, propName, componentName) {
          if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }

          return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        },
        checked: function (props, propName, componentName) {
          if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }

          return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
      };
      /**
       * Provide a linked `value` attribute for controlled forms. You should not use
       * this outside of the ReactDOM controlled form components.
       */

      ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
        checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
      };
    }
    var enableUserTimingAPI = true; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

    var debugRenderPhaseSideEffects = false; // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:

    var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.

    var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

    var warnAboutDeprecatedLifecycles = false; // Gather advanced timing metrics for Profiler subtrees.

    var enableProfilerTimer = true; // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.

    var enableSuspenseServerRenderer = false; // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    var disableInputAttributeSyncing = false; // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

    var enableStableConcurrentModeAPIs = false;
    var warnAboutShorthandPropertyCollision = false; // TODO: direct imports like some-package/src/* are bad. Fix me.

    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;

    function isControlled(props) {
      var usesChecked = props.type === 'checkbox' || props.type === 'radio';
      return usesChecked ? props.checked != null : props.value != null;
    }
    /**
     * Implements an <input> host component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */


    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;

      var hostProps = _assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: undefined,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });

      return hostProps;
    }

    function initWrapperState(element, props) {
      {
        ReactControlledValuePropTypes.checkPropTypes('input', props);

        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
          warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnCheckedDefaultChecked = true;
        }

        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
          warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node = element;
      var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }

    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;

      if (checked != null) {
        setValueForProperty(node, 'checked', checked, false);
      }
    }

    function updateWrapper(element, props) {
      var node = element;
      {
        var _controlled = isControlled(props);

        if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
          warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnUncontrolledToControlled = true;
        }

        if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
          warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;

      if (value != null) {
        if (type === 'number') {
          if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) {
            node.value = toString(value);
          }
        } else if (node.value !== toString(value)) {
          node.value = toString(value);
        }
      } else if (type === 'submit' || type === 'reset') {
        // Submit/reset inputs need the attribute removed completely to avoid
        // blank-text buttons.
        node.removeAttribute('value');
        return;
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the value attribute, React only assigns a new value
        // whenever the defaultValue React prop has changed. When not present,
        // React does nothing
        if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      } else {
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) {
          setDefaultValue(node, props.type, value);
        } else if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the checked attribute, the attribute is directly
        // controllable from the defaultValue React property. It needs to be
        // updated as new props come in.
        if (props.defaultChecked == null) {
          node.removeAttribute('checked');
        } else {
          node.defaultChecked = !!props.defaultChecked;
        }
      } else {
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }

    function postMountWrapper(element, props, isHydrating) {
      var node = element; // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.

      if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
        var type = props.type;
        var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
        // default value provided by the browser. See: #12872

        if (isButton && (props.value === undefined || props.value === null)) {
          return;
        }

        var _initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.


        if (!isHydrating) {
          if (disableInputAttributeSyncing) {
            var value = getToStringValue(props.value); // When not syncing the value attribute, the value property points
            // directly to the React prop. Only assign it if it exists.

            if (value != null) {
              // Always assign on buttons so that it is possible to assign an
              // empty string to clear button text.
              //
              // Otherwise, do not re-assign the value property if is empty. This
              // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
              // prematurely marking required inputs as invalid. Equality is compared
              // to the current value in case the browser provided value is not an
              // empty string.
              if (isButton || value !== node.value) {
                node.value = toString(value);
              }
            }
          } else {
            // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            if (_initialValue !== node.value) {
              node.value = _initialValue;
            }
          }
        }

        if (disableInputAttributeSyncing) {
          // When not syncing the value attribute, assign the value attribute
          // directly from the defaultValue React property (when present)
          var defaultValue = getToStringValue(props.defaultValue);

          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        } else {
          // Otherwise, the value attribute is synchronized to the property,
          // so we assign defaultValue to the same thing as the value property
          // assignment step above.
          node.defaultValue = _initialValue;
        }
      } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
      // this is needed to work around a chrome bug where setting defaultChecked
      // will sometimes influence the value of checked (even after detachment).
      // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
      // We need to temporarily unset name to avoid disrupting radio button groups.


      var name = node.name;

      if (name !== '') {
        node.name = '';
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the checked attribute, the checked property
        // never gets assigned. It must be manually set. We don't want
        // to do this when hydrating so that existing user input isn't
        // modified
        if (!isHydrating) {
          updateChecked(element, props);
        } // Only assign the checked attribute if it is defined. This saves
        // a DOM write when controlling the checked attribute isn't needed
        // (text inputs, submit/reset)


        if (props.hasOwnProperty('defaultChecked')) {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!props.defaultChecked;
        }
      } else {
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }

      if (name !== '') {
        node.name = name;
      }
    }

    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }

    function updateNamedCousins(rootNode, props) {
      var name = props.name;

      if (props.type === 'radio' && name != null) {
        var queryRoot = rootNode;

        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        } // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form. It might not even be in the
        // document. Let's just use the local `querySelectorAll` to ensure we don't
        // miss anything.


        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];

          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          } // This will throw if radio buttons rendered by different copies of React
          // and the same name are rendered into the same form (same as #1939).
          // That's probably okay; we don't support it just as we don't support
          // mixing React radio buttons with non-React ones.


          var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
          !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0; // We need update the tracked value on the named cousin since the value
          // was changed but the input saw no event or value set

          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.

          updateWrapper(otherNode, otherProps);
        }
      }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253


    function setDefaultValue(node, type, value) {
      if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
      type !== 'number' || node.ownerDocument.activeElement !== node) {
        if (value == null) {
          node.defaultValue = toString(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString(value)) {
          node.defaultValue = toString(value);
        }
      }
    }

    var eventTypes$1 = {
      change: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        },
        dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
      }
    };

    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
      var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
      event.type = 'change'; // Flag this event loop as needing state restore.

      enqueueStateRestore(target);
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * For IE shims
     */


    var activeElement = null;
    var activeElementInst = null;
    /**
     * SECTION: handle `change` event
     */

    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }

    function manualDispatchChangeEvent(nativeEvent) {
      var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      //
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.

      batchedUpdates(runEventInBatch, event);
    }

    function runEventInBatch(event) {
      runEventsInBatch(event);
    }

    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance$1(targetInst);

      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }

    function getTargetInstForChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CHANGE) {
        return targetInst;
      }
    }
    /**
     * SECTION: handle `input` event
     */


    var isInputEventSupported = false;

    if (canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events.
      isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    }
    /**
     * (For IE <=9) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */


    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
     * (For IE <=9) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */


    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }

      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    /**
     * (For IE <=9) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */


    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }

      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }

    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
      if (topLevelType === TOP_FOCUS) {
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        //
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (topLevelType === TOP_BLUR) {
        stopWatchingForValueChange();
      }
    } // For IE8 and IE9.


    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
      if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
      }
    }
    /**
     * SECTION: handle `click` event
     */


    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }

    function getTargetInstForClickEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CLICK) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function handleControlledInputBlur(node) {
      var state = node._wrapperState;

      if (!state || !state.controlled || node.type !== 'number') {
        return;
      }

      if (!disableInputAttributeSyncing) {
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
      }
    }
    /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */


    var ChangeEventPlugin = {
      eventTypes: eventTypes$1,
      _isInputEventSupported: isInputEventSupported,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
        var getTargetInstFunc = void 0,
            handleEventFunc = void 0;

        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }

        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(topLevelType, targetInst);

          if (inst) {
            var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
            return event;
          }
        }

        if (handleEventFunc) {
          handleEventFunc(topLevelType, targetNode, targetInst);
        } // When blurring, set the value attribute for number inputs


        if (topLevelType === TOP_BLUR) {
          handleControlledInputBlur(targetNode);
        }
      }
    };
    /**
     * Module that is injectable into `EventPluginHub`, that specifies a
     * deterministic ordering of `EventPlugin`s. A convenient way to reason about
     * plugins, without having to package every one of them. This is better than
     * having plugins be ordered in the same order that they are injected because
     * that ordering would be influenced by the packaging order.
     * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
     * preventing default on events is convenient in `SimpleEventPlugin` handlers.
     */

    var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
    var SyntheticUIEvent = SyntheticEvent.extend({
      view: null,
      detail: null
    });
    var modifierKeyToProp = {
      Alt: 'altKey',
      Control: 'ctrlKey',
      Meta: 'metaKey',
      Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.

    /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */

    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;

      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }

      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }

    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }

    var previousScreenX = 0;
    var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

    var isMovementXSet = false;
    var isMovementYSet = false;
    /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticMouseEvent = SyntheticUIEvent.extend({
      screenX: null,
      screenY: null,
      clientX: null,
      clientY: null,
      pageX: null,
      pageY: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      getModifierState: getEventModifierState,
      button: null,
      buttons: null,
      relatedTarget: function (event) {
        return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
      },
      movementX: function (event) {
        if ('movementX' in event) {
          return event.movementX;
        }

        var screenX = previousScreenX;
        previousScreenX = event.screenX;

        if (!isMovementXSet) {
          isMovementXSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenX - screenX : 0;
      },
      movementY: function (event) {
        if ('movementY' in event) {
          return event.movementY;
        }

        var screenY = previousScreenY;
        previousScreenY = event.screenY;

        if (!isMovementYSet) {
          isMovementYSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenY - screenY : 0;
      }
    });
    /**
     * @interface PointerEvent
     * @see http://www.w3.org/TR/pointerevents/
     */

    var SyntheticPointerEvent = SyntheticMouseEvent.extend({
      pointerId: null,
      width: null,
      height: null,
      pressure: null,
      tangentialPressure: null,
      tiltX: null,
      tiltY: null,
      twist: null,
      pointerType: null,
      isPrimary: null
    });
    var eventTypes$2 = {
      mouseEnter: {
        registrationName: 'onMouseEnter',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      mouseLeave: {
        registrationName: 'onMouseLeave',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      pointerEnter: {
        registrationName: 'onPointerEnter',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      },
      pointerLeave: {
        registrationName: 'onPointerLeave',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      }
    };
    var EnterLeaveEventPlugin = {
      eventTypes: eventTypes$2,

      /**
       * For almost every interaction we care about, there will be both a top-level
       * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
       * we do not extract duplicate events. However, moving the mouse into the
       * browser from outside will not fire a `mouseout` event. In this case, we use
       * the `mouseover` top-level event.
       */
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
        var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

        if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
          return null;
        }

        if (!isOutEvent && !isOverEvent) {
          // Must not be a mouse or pointer in or out - ignoring.
          return null;
        }

        var win = void 0;

        if (nativeEventTarget.window === nativeEventTarget) {
          // `nativeEventTarget` is probably a window object.
          win = nativeEventTarget;
        } else {
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          var doc = nativeEventTarget.ownerDocument;

          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }

        var from = void 0;
        var to = void 0;

        if (isOutEvent) {
          from = targetInst;
          var related = nativeEvent.relatedTarget || nativeEvent.toElement;
          to = related ? getClosestInstanceFromNode(related) : null;
        } else {
          // Moving to a node from outside the window.
          from = null;
          to = targetInst;
        }

        if (from === to) {
          // Nothing pertains to our managed components.
          return null;
        }

        var eventInterface = void 0,
            leaveEventType = void 0,
            enterEventType = void 0,
            eventTypePrefix = void 0;

        if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
          eventInterface = SyntheticMouseEvent;
          leaveEventType = eventTypes$2.mouseLeave;
          enterEventType = eventTypes$2.mouseEnter;
          eventTypePrefix = 'mouse';
        } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
          eventInterface = SyntheticPointerEvent;
          leaveEventType = eventTypes$2.pointerLeave;
          enterEventType = eventTypes$2.pointerEnter;
          eventTypePrefix = 'pointer';
        }

        var fromNode = from == null ? win : getNodeFromInstance$1(from);
        var toNode = to == null ? win : getNodeFromInstance$1(to);
        var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
        leave.type = eventTypePrefix + 'leave';
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
        enter.type = eventTypePrefix + 'enter';
        enter.target = toNode;
        enter.relatedTarget = fromNode;
        accumulateEnterLeaveDispatches(leave, enter, from, to);
        return [leave, enter];
      }
    };
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */

    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
      ;
    }

    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    /**
     * Performs equality by iterating through keys on an object and returning false
     * when any key has values which are not strictly equal between the arguments.
     * Returns true when the values of all keys are strictly equal.
     */

    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }

      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      } // Test for A's keys different from B.


      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }
    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     *
     * Note that this module is currently shared and assumed to be stateless.
     * If this becomes an actual Map, that will break.
     */

    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */


    function get(key) {
      return key._reactInternalFiber;
    }

    function has(key) {
      return key._reactInternalFiber !== undefined;
    }

    function set(key, value) {
      key._reactInternalFiber = value;
    } // Don't change these two values. They're used by React Dev Tools.


    var NoEffect =
    /*              */
    0;
    var PerformedWork =
    /*         */
    1; // You can change the rest (and add more).

    var Placement =
    /*             */
    2;
    var Update =
    /*                */
    4;
    var PlacementAndUpdate =
    /*    */
    6;
    var Deletion =
    /*              */
    8;
    var ContentReset =
    /*          */
    16;
    var Callback =
    /*              */
    32;
    var DidCapture =
    /*            */
    64;
    var Ref =
    /*                   */
    128;
    var Snapshot =
    /*              */
    256;
    var Passive =
    /*               */
    512; // Passive & Update & Callback & Ref & Snapshot

    var LifecycleEffectMask =
    /*   */
    932; // Union of all host effects

    var HostEffectMask =
    /*        */
    1023;
    var Incomplete =
    /*            */
    1024;
    var ShouldCapture =
    /*         */
    2048;
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;

    function isFiberMountedImpl(fiber) {
      var node = fiber;

      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }

        while (node.return) {
          node = node.return;

          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }
        }
      } else {
        while (node.return) {
          node = node.return;
        }
      }

      if (node.tag === HostRoot) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return MOUNTED;
      } // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.


      return UNMOUNTED;
    }

    function isFiberMounted(fiber) {
      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function isMounted(component) {
      {
        var owner = ReactCurrentOwner$1.current;

        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);

      if (!fiber) {
        return false;
      }

      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function assertIsMounted(fiber) {
      !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;

      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var state = isFiberMountedImpl(fiber);
        !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

        if (state === MOUNTING) {
          return null;
        }

        return fiber;
      } // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.


      var a = fiber;
      var b = alternate;

      while (true) {
        var parentA = a.return;
        var parentB = parentA ? parentA.alternate : null;

        if (!parentA || !parentB) {
          // We're at the root.
          break;
        } // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.


        if (parentA.child === parentB.child) {
          var child = parentA.child;

          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }

            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }

            child = child.sibling;
          } // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.


          invariant(false, 'Unable to find node on an unmounted component.');
        }

        if (a.return !== b.return) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          //
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;

          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }

              _child = _child.sibling;
            }

            !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
          }
        }

        !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      } // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.


      !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      } // Otherwise B has to be current branch.


      return alternate;
    }

    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function addEventBubbleListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, false);
    }

    function addEventCaptureListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, true);
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
     */


    var SyntheticAnimationEvent = SyntheticEvent.extend({
      animationName: null,
      elapsedTime: null,
      pseudoElement: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */

    var SyntheticClipboardEvent = SyntheticEvent.extend({
      clipboardData: function (event) {
        return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
      }
    });
    /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticFocusEvent = SyntheticUIEvent.extend({
      relatedTarget: null
    });
    /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {number} Normalized `charCode` property.
     */

    function getEventCharCode(nativeEvent) {
      var charCode = void 0;
      var keyCode = nativeEvent.keyCode;

      if ('charCode' in nativeEvent) {
        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
      // report Enter as charCode 10 when ctrl is pressed.


      if (charCode === 10) {
        charCode = 13;
      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.


      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }

      return 0;
    }
    /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */


    var normalizeKey = {
      Esc: 'Escape',
      Spacebar: ' ',
      Left: 'ArrowLeft',
      Up: 'ArrowUp',
      Right: 'ArrowRight',
      Down: 'ArrowDown',
      Del: 'Delete',
      Win: 'OS',
      Menu: 'ContextMenu',
      Apps: 'ContextMenu',
      Scroll: 'ScrollLock',
      MozPrintableKey: 'Unidentified'
    };
    /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */

    var translateToKey = {
      '8': 'Backspace',
      '9': 'Tab',
      '12': 'Clear',
      '13': 'Enter',
      '16': 'Shift',
      '17': 'Control',
      '18': 'Alt',
      '19': 'Pause',
      '20': 'CapsLock',
      '27': 'Escape',
      '32': ' ',
      '33': 'PageUp',
      '34': 'PageDown',
      '35': 'End',
      '36': 'Home',
      '37': 'ArrowLeft',
      '38': 'ArrowUp',
      '39': 'ArrowRight',
      '40': 'ArrowDown',
      '45': 'Insert',
      '46': 'Delete',
      '112': 'F1',
      '113': 'F2',
      '114': 'F3',
      '115': 'F4',
      '116': 'F5',
      '117': 'F6',
      '118': 'F7',
      '119': 'F8',
      '120': 'F9',
      '121': 'F10',
      '122': 'F11',
      '123': 'F12',
      '144': 'NumLock',
      '145': 'ScrollLock',
      '224': 'Meta'
    };
    /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */

    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.
        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

        if (key !== 'Unidentified') {
          return key;
        }
      } // Browser does not implement `key`, polyfill as much of it as we can.


      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.

        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }

      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }

      return '';
    }
    /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */


    var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
      key: getEventKey,
      location: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      repeat: null,
      locale: null,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function (event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.
        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }

        return 0;
      },
      keyCode: function (event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.
        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }

        return 0;
      },
      which: function (event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }

        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }

        return 0;
      }
    });
    /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticDragEvent = SyntheticMouseEvent.extend({
      dataTransfer: null
    });
    /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */

    var SyntheticTouchEvent = SyntheticUIEvent.extend({
      touches: null,
      targetTouches: null,
      changedTouches: null,
      altKey: null,
      metaKey: null,
      ctrlKey: null,
      shiftKey: null,
      getModifierState: getEventModifierState
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
     */

    var SyntheticTransitionEvent = SyntheticEvent.extend({
      propertyName: null,
      elapsedTime: null,
      pseudoElement: null
    });
    /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticWheelEvent = SyntheticMouseEvent.extend({
      deltaX: function (event) {
        return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
        'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
      },
      deltaY: function (event) {
        return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
        'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
        'wheelDelta' in event ? -event.wheelDelta : 0;
      },
      deltaZ: null,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: null
    });
    /**
     * Turns
     * ['abort', ...]
     * into
     * eventTypes = {
     *   'abort': {
     *     phasedRegistrationNames: {
     *       bubbled: 'onAbort',
     *       captured: 'onAbortCapture',
     *     },
     *     dependencies: [TOP_ABORT],
     *   },
     *   ...
     * };
     * topLevelEventsToDispatchConfig = new Map([
     *   [TOP_ABORT, { sameConfig }],
     * ]);
     */

    var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
    var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];
    var eventTypes$4 = {};
    var topLevelEventsToDispatchConfig = {};

    function addEventTypeNameToConfig(_ref, isInteractive) {
      var topEvent = _ref[0],
          event = _ref[1];
      var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
      var onEvent = 'on' + capitalizedEvent;
      var type = {
        phasedRegistrationNames: {
          bubbled: onEvent,
          captured: onEvent + 'Capture'
        },
        dependencies: [topEvent],
        isInteractive: isInteractive
      };
      eventTypes$4[event] = type;
      topLevelEventsToDispatchConfig[topEvent] = type;
    }

    interactiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, true);
    });
    nonInteractiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, false);
    }); // Only used in DEV for exhaustiveness validation.

    var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
    var SimpleEventPlugin = {
      eventTypes: eventTypes$4,
      isInteractiveTopLevelEventType: function (topLevelType) {
        var config = topLevelEventsToDispatchConfig[topLevelType];
        return config !== undefined && config.isInteractive === true;
      },
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];

        if (!dispatchConfig) {
          return null;
        }

        var EventConstructor = void 0;

        switch (topLevelType) {
          case TOP_KEY_PRESS:
            // Firefox creates a keypress event for function keys too. This removes
            // the unwanted keypress events. Enter is however both printable and
            // non-printable. One would expect Tab to be as well (but it isn't).
            if (getEventCharCode(nativeEvent) === 0) {
              return null;
            }

          /* falls through */

          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            EventConstructor = SyntheticKeyboardEvent;
            break;

          case TOP_BLUR:
          case TOP_FOCUS:
            EventConstructor = SyntheticFocusEvent;
            break;

          case TOP_CLICK:
            // Firefox creates a click event on right mouse clicks. This removes the
            // unwanted click events.
            if (nativeEvent.button === 2) {
              return null;
            }

          /* falls through */

          case TOP_AUX_CLICK:
          case TOP_DOUBLE_CLICK:
          case TOP_MOUSE_DOWN:
          case TOP_MOUSE_MOVE:
          case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

          /* falls through */

          case TOP_MOUSE_OUT:
          case TOP_MOUSE_OVER:
          case TOP_CONTEXT_MENU:
            EventConstructor = SyntheticMouseEvent;
            break;

          case TOP_DRAG:
          case TOP_DRAG_END:
          case TOP_DRAG_ENTER:
          case TOP_DRAG_EXIT:
          case TOP_DRAG_LEAVE:
          case TOP_DRAG_OVER:
          case TOP_DRAG_START:
          case TOP_DROP:
            EventConstructor = SyntheticDragEvent;
            break;

          case TOP_TOUCH_CANCEL:
          case TOP_TOUCH_END:
          case TOP_TOUCH_MOVE:
          case TOP_TOUCH_START:
            EventConstructor = SyntheticTouchEvent;
            break;

          case TOP_ANIMATION_END:
          case TOP_ANIMATION_ITERATION:
          case TOP_ANIMATION_START:
            EventConstructor = SyntheticAnimationEvent;
            break;

          case TOP_TRANSITION_END:
            EventConstructor = SyntheticTransitionEvent;
            break;

          case TOP_SCROLL:
            EventConstructor = SyntheticUIEvent;
            break;

          case TOP_WHEEL:
            EventConstructor = SyntheticWheelEvent;
            break;

          case TOP_COPY:
          case TOP_CUT:
          case TOP_PASTE:
            EventConstructor = SyntheticClipboardEvent;
            break;

          case TOP_GOT_POINTER_CAPTURE:
          case TOP_LOST_POINTER_CAPTURE:
          case TOP_POINTER_CANCEL:
          case TOP_POINTER_DOWN:
          case TOP_POINTER_MOVE:
          case TOP_POINTER_OUT:
          case TOP_POINTER_OVER:
          case TOP_POINTER_UP:
            EventConstructor = SyntheticPointerEvent;
            break;

          default:
            {
              if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
              }
            } // HTML Events
            // @see http://www.w3.org/TR/html5/index.html#events-0

            EventConstructor = SyntheticEvent;
            break;
        }

        var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        accumulateTwoPhaseDispatches(event);
        return event;
      }
    };
    var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;
    var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];
    /**
     * Find the deepest React component completely containing the root of the
     * passed-in instance (for use when entire React trees are nested within each
     * other). If React trees are not nested, returns null.
     */

    function findRootContainerNode(inst) {
      // TODO: It may be a good idea to cache this to prevent unnecessary DOM
      // traversal, but caching is difficult to do correctly without using a
      // mutation observer to listen for all DOM changes.
      while (inst.return) {
        inst = inst.return;
      }

      if (inst.tag !== HostRoot) {
        // This can happen if we're in a detached tree.
        return null;
      }

      return inst.stateNode.containerInfo;
    } // Used to store ancestor hierarchy in top level callback


    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
      if (callbackBookkeepingPool.length) {
        var instance = callbackBookkeepingPool.pop();
        instance.topLevelType = topLevelType;
        instance.nativeEvent = nativeEvent;
        instance.targetInst = targetInst;
        return instance;
      }

      return {
        topLevelType: topLevelType,
        nativeEvent: nativeEvent,
        targetInst: targetInst,
        ancestors: []
      };
    }

    function releaseTopLevelCallbackBookKeeping(instance) {
      instance.topLevelType = null;
      instance.nativeEvent = null;
      instance.targetInst = null;
      instance.ancestors.length = 0;

      if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
        callbackBookkeepingPool.push(instance);
      }
    }

    function handleTopLevel(bookKeeping) {
      var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
      // It's important that we build the array of ancestors before calling any
      // event handlers, because event handlers can modify the DOM, leading to
      // inconsistencies with ReactMount's node cache. See #1105.

      var ancestor = targetInst;

      do {
        if (!ancestor) {
          bookKeeping.ancestors.push(ancestor);
          break;
        }

        var root = findRootContainerNode(ancestor);

        if (!root) {
          break;
        }

        bookKeeping.ancestors.push(ancestor);
        ancestor = getClosestInstanceFromNode(root);
      } while (ancestor);

      for (var i = 0; i < bookKeeping.ancestors.length; i++) {
        targetInst = bookKeeping.ancestors[i];
        runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
      }
    } // TODO: can we stop exporting these?


    var _enabled = true;

    function setEnabled(enabled) {
      _enabled = !!enabled;
    }

    function isEnabled() {
      return _enabled;
    }
    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */


    function trapBubbledEvent(topLevelType, element) {
      if (!element) {
        return null;
      }

      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
      addEventBubbleListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }
    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */


    function trapCapturedEvent(topLevelType, element) {
      if (!element) {
        return null;
      }

      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
      addEventCaptureListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }

    function dispatchInteractiveEvent(topLevelType, nativeEvent) {
      interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
    }

    function dispatchEvent(topLevelType, nativeEvent) {
      if (!_enabled) {
        return;
      }

      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);

      if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }

      var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        batchedUpdates(handleTopLevel, bookKeeping);
      } finally {
        releaseTopLevelCallbackBookKeeping(bookKeeping);
      }
    }
    /**
     * Summary of `ReactBrowserEventEmitter` event handling:
     *
     *  - Top-level delegation is used to trap most native browser events. This
     *    may only occur in the main thread and is the responsibility of
     *    ReactDOMEventListener, which is injected and can therefore support
     *    pluggable event sources. This is the only work that occurs in the main
     *    thread.
     *
     *  - We normalize and de-duplicate events to account for browser quirks. This
     *    may be done in the worker thread.
     *
     *  - Forward these native events (with the associated top-level type used to
     *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
     *    to extract any synthetic events.
     *
     *  - The `EventPluginHub` will then process each event by annotating them with
     *    "dispatches", a sequence of listeners and IDs that care about that event.
     *
     *  - The `EventPluginHub` then dispatches the events.
     *
     * Overview of React and the event system:
     *
     * +------------+    .
     * |    DOM     |    .
     * +------------+    .
     *       |           .
     *       v           .
     * +------------+    .
     * | ReactEvent |    .
     * |  Listener  |    .
     * +------------+    .                         +-----------+
     *       |           .               +--------+|SimpleEvent|
     *       |           .               |         |Plugin     |
     * +-----|------+    .               v         +-----------+
     * |     |      |    .    +--------------+                    +------------+
     * |     +-----------.--->|EventPluginHub|                    |    Event   |
     * |            |    .    |              |     +-----------+  | Propagators|
     * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
     * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
     * |            |    .    |              |     +-----------+  |  utilities |
     * |     +-----------.--->|              |                    +------------+
     * |     |      |    .    +--------------+
     * +-----|------+    .                ^        +-----------+
     *       |           .                |        |Enter/Leave|
     *       +           .                +-------+|Plugin     |
     * +-------------+   .                         +-----------+
     * | application |   .
     * |-------------|   .
     * |             |   .
     * |             |   .
     * +-------------+   .
     *                   .
     *    React Core     .  General Purpose Event Plugin System
     */


    var alreadyListeningTo = {};
    var reactTopListenersCounter = 0;
    /**
     * To ensure no conflicts with other potential React instances on the page
     */

    var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

    function getListeningForDocument(mountAt) {
      // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
      // directly.
      if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
        mountAt[topListenersIDKey] = reactTopListenersCounter++;
        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
      }

      return alreadyListeningTo[mountAt[topListenersIDKey]];
    }
    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} mountAt Container where to mount the listener
     */


    function listenTo(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];

        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          switch (dependency) {
            case TOP_SCROLL:
              trapCapturedEvent(TOP_SCROLL, mountAt);
              break;

            case TOP_FOCUS:
            case TOP_BLUR:
              trapCapturedEvent(TOP_FOCUS, mountAt);
              trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
              // but this ensures we mark both as attached rather than just one.

              isListening[TOP_BLUR] = true;
              isListening[TOP_FOCUS] = true;
              break;

            case TOP_CANCEL:
            case TOP_CLOSE:
              if (isEventSupported(getRawEventName(dependency))) {
                trapCapturedEvent(dependency, mountAt);
              }

              break;

            case TOP_INVALID:
            case TOP_SUBMIT:
            case TOP_RESET:
              // We listen to them on the target DOM elements.
              // Some of them bubble so we don't want them to fire twice.
              break;

            default:
              // By default, listen on the top level to all non-media events.
              // Media events don't bubble so adding the listener wouldn't do anything.
              var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;

              if (!isMediaEvent) {
                trapBubbledEvent(dependency, mountAt);
              }

              break;
          }

          isListening[dependency] = true;
        }
      }
    }

    function isListeningToAllDependencies(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];

        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          return false;
        }
      }

      return true;
    }

    function getActiveElement(doc) {
      doc = doc || (typeof document !== 'undefined' ? document : undefined);

      if (typeof doc === 'undefined') {
        return null;
      }

      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */


    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }

      return node;
    }
    /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */


    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }

        node = node.parentNode;
      }
    }
    /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */


    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;

      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;

          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }

          nodeStart = nodeEnd;
        }

        node = getLeafNode(getSiblingNode(node));
      }
    }
    /**
     * @param {DOMElement} outerNode
     * @return {?object}
     */


    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();

      if (!selection || selection.rangeCount === 0) {
        return null;
      }

      var anchorNode = selection.anchorNode,
          anchorOffset = selection.anchorOffset,
          focusNode = selection.focusNode,
          focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
      // up/down buttons on an <input type="number">. Anonymous divs do not seem to
      // expose properties, triggering a "Permission denied error" if any of its
      // properties are accessed. The only seemingly possible way to avoid erroring
      // is to access a property that typically works for non-anonymous divs and
      // catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

      try {
        /* eslint-disable no-unused-expressions */
        anchorNode.nodeType;
        focusNode.nodeType;
        /* eslint-enable no-unused-expressions */
      } catch (e) {
        return null;
      }

      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
     * Returns {start, end} where `start` is the character/codepoint index of
     * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
     * `end` is the index of (focusNode, focusOffset).
     *
     * Returns null if you pass in garbage input but we should probably just crash.
     *
     * Exported only for testing.
     */


    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;

      outer: while (true) {
        var next = null;

        while (true) {
          if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
            start = length + anchorOffset;
          }

          if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
            end = length + focusOffset;
          }

          if (node.nodeType === TEXT_NODE) {
            length += node.nodeValue.length;
          }

          if ((next = node.firstChild) === null) {
            break;
          } // Moving from `node` to its first child `next`.


          parentNode = node;
          node = next;
        }

        while (true) {
          if (node === outerNode) {
            // If `outerNode` has children, this is always the second time visiting
            // it. If it has no children, this is still the first loop, and the only
            // valid selection is anchorNode and focusNode both equal to this node
            // and both offsets 0, in which case we will have handled above.
            break outer;
          }

          if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
            start = length;
          }

          if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
            end = length;
          }

          if ((next = node.nextSibling) !== null) {
            break;
          }

          node = parentNode;
          parentNode = node.parentNode;
        } // Moving from `node` to its next sibling `next`.


        node = next;
      }

      if (start === -1 || end === -1) {
        // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
      }

      return {
        start: start,
        end: end
      };
    }
    /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programmatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */


    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
      // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
      // fails when pasting 100+ items)

      if (!win.getSelection) {
        return;
      }

      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.

      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }

      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);

      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }

        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();

        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }

    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }

    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ('contains' in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }

    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }

    function isSameOriginFrame(iframe) {
      try {
        // Accessing the contentDocument of a HTMLIframeElement can cause the browser
        // to throw, e.g. if it has a cross-origin src attribute.
        // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
        // iframe.contentDocument.defaultView;
        // A safety way is to access one of the cross origin properties: Window or Location
        // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
        // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
        return typeof iframe.contentWindow.location.href === 'string';
      } catch (err) {
        return false;
      }
    }

    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();

      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win = element.contentWindow;
        } else {
          return element;
        }

        element = getActiveElement(win.document);
      }

      return element;
    }
    /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */

    /**
     * @hasSelectionCapabilities: we get the element types that support selection
     * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
     * and `selectionEnd` rows.
     */


    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }

    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem: focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
      };
    }
    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */


    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;

      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        } // Focusing a node can change the scroll position, which is undesirable


        var ancestors = [];
        var ancestor = priorFocusedElem;

        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }

        if (typeof priorFocusedElem.focus === 'function') {
          priorFocusedElem.focus();
        }

        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */


    function getSelection$1(input) {
      var selection = void 0;

      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        // Content editable or old IE textarea.
        selection = getOffsets(input);
      }

      return selection || {
        start: 0,
        end: 0
      };
    }
    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */


    function setSelection(input, offsets) {
      var start = offsets.start,
          end = offsets.end;

      if (end === undefined) {
        end = start;
      }

      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }

    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    var eventTypes$3 = {
      select: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        },
        dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
      }
    };
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     *
     * @param {DOMElement} node
     * @return {object}
     */

    function getSelection(node) {
      if ('selectionStart' in node && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    /**
     * Get document associated with the event target.
     *
     * @param {object} nativeEventTarget
     * @return {Document}
     */


    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @param {object} nativeEventTarget
     * @return {?SyntheticEvent}
     */


    function constructSelectEvent(nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      var doc = getEventTargetDocument(nativeEventTarget);

      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return null;
      } // Only fire when selection has actually changed.


      var currentSelection = getSelection(activeElement$1);

      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
        syntheticEvent.type = 'select';
        syntheticEvent.target = activeElement$1;
        accumulateTwoPhaseDispatches(syntheticEvent);
        return syntheticEvent;
      }

      return null;
    }
    /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */


    var SelectEventPlugin = {
      eventTypes: eventTypes$3,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
        // not extract events. See #3639.

        if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
          return null;
        }

        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

        switch (topLevelType) {
          // Track the input node that has focus.
          case TOP_FOCUS:
            if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }

            break;

          case TOP_BLUR:
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          // Don't fire the event while the user is dragging. This matches the
          // semantics of the native select event.

          case TOP_MOUSE_DOWN:
            mouseDown = true;
            break;

          case TOP_CONTEXT_MENU:
          case TOP_MOUSE_UP:
          case TOP_DRAG_END:
            mouseDown = false;
            return constructSelectEvent(nativeEvent, nativeEventTarget);
          // Chrome and IE fire non-standard event when selection is changed (and
          // sometimes when it hasn't). IE's event fires out of order with respect
          // to key and input events on deletion, so we discard it.
          //
          // Firefox doesn't support selectionchange, so check selection status
          // after each key entry. The selection changes after keydown and before
          // keyup, but we check on keydown as well in the case of holding down a
          // key, when multiple keydown events are fired but only one keyup is.
          // This is also our approach for IE handling, for the reason above.

          case TOP_SELECTION_CHANGE:
            if (skipSelectionChangeEvent) {
              break;
            }

          // falls through

          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            return constructSelectEvent(nativeEvent, nativeEventTarget);
        }

        return null;
      }
    };
    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */

    injection.injectEventPluginOrder(DOMEventPluginOrder);
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
    /**
     * Some important event plugins included by default (without having to require
     * them).
     */

    injection.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;

    function flattenChildren(children) {
      var content = ''; // Flatten children. We'll warn if they are invalid
      // during validateProps() which runs for hydration too.
      // Note that this would throw on non-element objects.
      // Elements are stringified (which is normally irrelevant
      // but matters for <fbt>).

      React.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }

        content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration codepath too.
      });
      return content;
    }
    /**
     * Implements an <option> host component that warns when `selected` is set.
     */


    function validateProps(element, props) {
      {
        // This mirrors the codepath above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) {
          React.Children.forEach(props.children, function (child) {
            if (child == null) {
              return;
            }

            if (typeof child === 'string' || typeof child === 'number') {
              return;
            }

            if (typeof child.type !== 'string') {
              return;
            }

            if (!didWarnInvalidChild) {
              didWarnInvalidChild = true;
              warning$1(false, 'Only strings and numbers are supported as <option> children.');
            }
          });
        } // TODO: Remove support for `selected` in <option>.


        if (props.selected != null && !didWarnSelectedSetOnOption) {
          warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
          didWarnSelectedSetOnOption = true;
        }
      }
    }

    function postMountWrapper$1(element, props) {
      // value="" should make a value attribute (#6219)
      if (props.value != null) {
        element.setAttribute('value', toString(getToStringValue(props.value)));
      }
    }

    function getHostProps$1(element, props) {
      var hostProps = _assign({
        children: undefined
      }, props);

      var content = flattenChildren(props.children);

      if (content) {
        hostProps.children = content;
      }

      return hostProps;
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var didWarnValueDefaultValue$1 = void 0;
    {
      didWarnValueDefaultValue$1 = false;
    }

    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        return '\n\nCheck the render method of `' + ownerName + '`.';
      }

      return '';
    }

    var valuePropNames = ['value', 'defaultValue'];
    /**
     * Validation function for `value` and `defaultValue`.
     */

    function checkSelectPropTypes(props) {
      ReactControlledValuePropTypes.checkPropTypes('select', props);

      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];

        if (props[propName] == null) {
          continue;
        }

        var isArray = Array.isArray(props[propName]);

        if (props.multiple && !isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
        } else if (!props.multiple && isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
        }
      }
    }

    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options = node.options;

      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};

        for (var i = 0; i < selectedValues.length; i++) {
          // Prefix to avoid chaos with special keys.
          selectedValue['$' + selectedValues[i]] = true;
        }

        for (var _i = 0; _i < options.length; _i++) {
          var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

          if (options[_i].selected !== selected) {
            options[_i].selected = selected;
          }

          if (selected && setDefaultSelected) {
            options[_i].defaultSelected = true;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        var _selectedValue = toString(getToStringValue(propValue));

        var defaultSelected = null;

        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (options[_i2].value === _selectedValue) {
            options[_i2].selected = true;

            if (setDefaultSelected) {
              options[_i2].defaultSelected = true;
            }

            return;
          }

          if (defaultSelected === null && !options[_i2].disabled) {
            defaultSelected = options[_i2];
          }
        }

        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    /**
     * Implements a <select> host component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */


    function getHostProps$2(element, props) {
      return _assign({}, props, {
        value: undefined
      });
    }

    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }
      node._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
          warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
          didWarnValueDefaultValue$1 = true;
        }
      }
    }

    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }

    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
      }
    }

    function restoreControlledState$2(element, props) {
      var node = element;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      }
    }

    var didWarnValDefaultVal = false;
    /**
     * Implements a <textarea> host component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */

    function getHostProps$3(element, props) {
      var node = element;
      !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0; // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.  We could add a check in setTextContent
      // to only set the value if/when the value differs from the node value (which would
      // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
      // solution. The value can be a boolean or object so that's why it's forced
      // to be a string.

      var hostProps = _assign({}, props, {
        value: undefined,
        defaultValue: undefined,
        children: toString(node._wrapperState.initialValue)
      });

      return hostProps;
    }

    function initWrapperState$2(element, props) {
      var node = element;
      {
        ReactControlledValuePropTypes.checkPropTypes('textarea', props);

        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
          warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value; // Only bother fetching default value if we're going to use it

      if (initialValue == null) {
        var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

        var children = props.children;

        if (children != null) {
          {
            warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
          }
          !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;

          if (Array.isArray(children)) {
            !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
            children = children[0];
          }

          defaultValue = children;
        }

        if (defaultValue == null) {
          defaultValue = '';
        }

        initialValue = defaultValue;
      }

      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }

    function updateWrapper$1(element, props) {
      var node = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);

      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

        if (newValue !== node.value) {
          node.value = newValue;
        }

        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }

      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    }

    function postMountWrapper$3(element, props) {
      var node = element; // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.

      var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
      // initial value. In IE10/IE11 there is a bug where the placeholder attribute
      // will populate textContent as well.
      // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

      if (textContent === node._wrapperState.initialValue) {
        node.value = textContent;
      }
    }

    function restoreControlledState$3(element, props) {
      // DOM component is still mounted; update
      updateWrapper$1(element, props);
    }

    var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
      html: HTML_NAMESPACE$1,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.

    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;

        case 'math':
          return MATH_NAMESPACE;

        default:
          return HTML_NAMESPACE$1;
      }
    }

    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
        // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
      }

      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        // We're leaving SVG.
        return HTML_NAMESPACE$1;
      } // By default, pass namespace below.


      return parentNamespace;
    }
    /* globals MSApp */

    /**
     * Create a function which has 'unsafe' privileges (required by windows8 apps)
     */


    var createMicrosoftUnsafeLocalFunction = function (func) {
      if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
        return function (arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function () {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    }; // SVG temp container for IE lacking innerHTML


    var reusableSVGContainer = void 0;
    /**
     * Set the innerHTML property of a node
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */

    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
        reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
        var svgNode = reusableSVGContainer.firstChild;

        while (node.firstChild) {
          node.removeChild(node.firstChild);
        }

        while (svgNode.firstChild) {
          node.appendChild(svgNode.firstChild);
        }
      } else {
        node.innerHTML = html;
      }
    });
    /**
     * Set the textContent property of a node. For text updates, it's faster
     * to set the `nodeValue` of the Text node directly instead of using
     * `.textContent` which will remove the existing node and create a new one.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */

    var setTextContent = function (node, text) {
      if (text) {
        var firstChild = node.firstChild;

        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }

      node.textContent = text;
    }; // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js


    var shorthandToLonghand = {
      animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
      background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
      backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
      border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
      borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
      borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
      borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
      borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
      borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
      borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
      borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
      borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
      borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
      borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
      borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
      columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
      columns: ['columnCount', 'columnWidth'],
      flex: ['flexBasis', 'flexGrow', 'flexShrink'],
      flexFlow: ['flexDirection', 'flexWrap'],
      font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
      fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
      gap: ['columnGap', 'rowGap'],
      grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
      gridColumn: ['gridColumnEnd', 'gridColumnStart'],
      gridColumnGap: ['columnGap'],
      gridGap: ['columnGap', 'rowGap'],
      gridRow: ['gridRowEnd', 'gridRowStart'],
      gridRowGap: ['rowGap'],
      gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
      margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
      marker: ['markerEnd', 'markerMid', 'markerStart'],
      mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
      maskPosition: ['maskPositionX', 'maskPositionY'],
      outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
      overflow: ['overflowX', 'overflowY'],
      padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
      placeContent: ['alignContent', 'justifyContent'],
      placeItems: ['alignItems', 'justifyItems'],
      placeSelf: ['alignSelf', 'justifySelf'],
      textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
      textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
      transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
      wordWrap: ['overflowWrap']
    };
    /**
     * CSS properties which accept numbers but are not in units of "px".
     */

    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */

    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */


    var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.

    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */

    function dangerousStyleValue(name, value, isCustomProperty) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901
      var isEmpty = value == null || typeof value === 'boolean' || value === '';

      if (isEmpty) {
        return '';
      }

      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
      }

      return ('' + value).trim();
    }

    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
     * Hyphenates a camelcased CSS property name, for example:
     *
     *   > hyphenateStyleName('backgroundColor')
     *   < "background-color"
     *   > hyphenateStyleName('MozTransition')
     *   < "-moz-transition"
     *   > hyphenateStyleName('msTransition')
     *   < "-ms-transition"
     *
     * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
     * is converted to `-ms-`.
     */

    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }

    var warnValidStyle = function () {};

    {
      // 'msTransform' is correct, but the other prefixes should be capitalized
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;

      var camelize = function (string) {
        return string.replace(hyphenPattern, function (_, character) {
          return character.toUpperCase();
        });
      };

      var warnHyphenatedStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
      };

      var warnBadVendoredStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
      };

      var warnStyleValueWithSemicolon = function (name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }

        warnedStyleValues[value] = true;
        warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };

      var warnStyleValueIsNaN = function (name, value) {
        if (warnedForNaNValue) {
          return;
        }

        warnedForNaNValue = true;
        warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
      };

      var warnStyleValueIsInfinity = function (name, value) {
        if (warnedForInfinityValue) {
          return;
        }

        warnedForInfinityValue = true;
        warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
      };

      warnValidStyle = function (name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }

        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    /**
     * Operations for dealing with CSS properties.
     */

    /**
     * This creates a string that is expected to be equivalent to the style
     * attribute generated by server-side rendering. It by-passes warnings and
     * security checks so it's not safe to use this value for anything other than
     * comparison. It is only used in DEV for SSR validation.
     */

    function createDangerousStringForStyles(styles) {
      {
        var serialized = '';
        var delimiter = '';

        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }

          var styleValue = styles[styleName];

          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf('--') === 0;
            serialized += delimiter + hyphenateStyleName(styleName) + ':';
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ';';
          }
        }

        return serialized || null;
      }
    }
    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */


    function setValueForStyles(node, styles) {
      var style = node.style;

      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }

        var isCustomProperty = styleName.indexOf('--') === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

        if (styleName === 'float') {
          styleName = 'cssFloat';
        }

        if (isCustomProperty) {
          style.setProperty(styleName, styleValue);
        } else {
          style[styleName] = styleValue;
        }
      }
    }

    function isValueEmpty(value) {
      return value == null || typeof value === 'boolean' || value === '';
    }
    /**
     * Given {color: 'red', overflow: 'hidden'} returns {
     *   color: 'color',
     *   overflowX: 'overflow',
     *   overflowY: 'overflow',
     * }. This can be read as "the overflowY property was set by the overflow
     * shorthand". That is, the values are the property that each was derived from.
     */


    function expandShorthandMap(styles) {
      var expanded = {};

      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];

        for (var i = 0; i < longhands.length; i++) {
          expanded[longhands[i]] = key;
        }
      }

      return expanded;
    }
    /**
     * When mixing shorthand and longhand property names, we warn during updates if
     * we expect an incorrect result to occur. In particular, we warn for:
     *
     * Updating a shorthand property (longhand gets overwritten):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
     *   becomes .style.font = 'baz'
     * Removing a shorthand property (longhand gets lost too):
     *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
     *   becomes .style.font = ''
     * Removing a longhand property (should revert to shorthand; doesn't):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
     *   becomes .style.fontVariant = ''
     */


    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      if (!warnAboutShorthandPropertyCollision) {
        return;
      }

      if (!nextStyles) {
        return;
      }

      var expandedUpdates = expandShorthandMap(styleUpdates);
      var expandedStyles = expandShorthandMap(nextStyles);
      var warnedAbout = {};

      for (var key in expandedUpdates) {
        var originalKey = expandedUpdates[key];
        var correctOriginalKey = expandedStyles[key];

        if (correctOriginalKey && originalKey !== correctOriginalKey) {
          var warningKey = originalKey + ',' + correctOriginalKey;

          if (warnedAbout[warningKey]) {
            continue;
          }

          warnedAbout[warningKey] = true;
          warning$1(false, '%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
        }
      }
    } // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.


    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

    }; // For HTML, certain tags cannot have children. This has the same purpose as
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.

    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags); // TODO: We can remove this if we add invariantWithStack()
    // or add stack by default to invariants where possible.


    var HTML$1 = '__html';
    var ReactDebugCurrentFrame$2 = null;
    {
      ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    }

    function assertValidProps(tag, props) {
      if (!props) {
        return;
      } // Note the use of `==` which checks for null or undefined.


      if (voidElementTags[tag]) {
        !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
      }

      if (props.dangerouslySetInnerHTML != null) {
        !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
        !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
      }

      {
        !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
      }
      !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
    }

    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }

      switch (tagName) {
        // These are reserved SVG and MathML elements.
        // We don't mind this whitelist too much because we expect it to never grow.
        // The alternative is to track the namespace in a few places which is convoluted.
        // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;

        default:
          return true;
      }
    } // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.


    var possibleStandardNames = {
      // HTML
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      class: 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      default: 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      for: 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nomodule: 'noModule',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',
      // SVG
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      in: 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      suppresshydrationwarning: 'suppressHydrationWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      typeof: 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
      'aria-current': 0,
      // state
      'aria-details': 0,
      'aria-disabled': 0,
      // state
      'aria-hidden': 0,
      // state
      'aria-invalid': 0,
      // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

    function validateProperty(tagName, name) {
      if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
        return true;
      }

      if (rARIACamel.test(name)) {
        var ariaName = 'aria-' + name.slice(4).toLowerCase();
        var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (correctName == null) {
          warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
          warnedProperties[name] = true;
          return true;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== correctName) {
          warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
          warnedProperties[name] = true;
          return true;
        }
      }

      if (rARIA.test(name)) {
        var lowerCasedName = name.toLowerCase();
        var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (standardName == null) {
          warnedProperties[name] = true;
          return false;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== standardName) {
          warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
          warnedProperties[name] = true;
          return true;
        }
      }

      return true;
    }

    function warnInvalidARIAProps(type, props) {
      var invalidProps = [];

      for (var key in props) {
        var isValid = validateProperty(type, key);

        if (!isValid) {
          invalidProps.push(key);
        }
      }

      var unknownPropString = invalidProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (invalidProps.length === 1) {
        warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      } else if (invalidProps.length > 1) {
        warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      }
    }

    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnInvalidARIAProps(type, props);
    }

    var didWarnValueNull = false;

    function validateProperties$1(type, props) {
      if (type !== 'input' && type !== 'textarea' && type !== 'select') {
        return;
      }

      if (props != null && props.value === null && !didWarnValueNull) {
        didWarnValueNull = true;

        if (type === 'select' && props.multiple) {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
        } else {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
        }
      }
    }

    var validateProperty$1 = function () {};

    {
      var warnedProperties$1 = {};
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

      validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }

        var lowerCasedName = name.toLowerCase();

        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        } // We can't rely on the event system being injected on the server.


        if (canUseEventSystem) {
          if (registrationNameModules.hasOwnProperty(name)) {
            return true;
          }

          var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

          if (registrationName != null) {
            warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }

          if (EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          // If no event plugins have been injected, we are in a server environment.
          // So we can't tell if the event name is correct for sure, but we can filter
          // out known bad ones like `onclick`. We can't suggest a specific replacement though.
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
          }

          warnedProperties$1[name] = true;
          return true;
        } // Let the ARIA attribute hook validate ARIA attributes


        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }

        if (lowerCasedName === 'innerhtml') {
          warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'aria') {
          warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'number' && isNaN(value)) {
          warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
          warnedProperties$1[name] = true;
          return true;
        }

        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];

          if (standardName !== name) {
            warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          // Unknown attributes should have lowercase casing since that's how they
          // will be cased anyway with server rendering.
          warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }

          warnedProperties$1[name] = true;
          return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props


        if (isReserved) {
          return true;
        } // Warn when a known attribute is a bad type


        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop


        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }

        return true;
      };
    }

    var warnUnknownProperties = function (type, props, canUseEventSystem) {
      var unknownProps = [];

      for (var key in props) {
        var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

        if (!isValid) {
          unknownProps.push(key);
        }
      }

      var unknownPropString = unknownProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (unknownProps.length === 1) {
        warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      } else if (unknownProps.length > 1) {
        warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      }
    };

    function validateProperties$2(type, props, canUseEventSystem) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnUnknownProperties(type, props, canUseEventSystem);
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var didWarnInvalidHydration = false;
    var didWarnShadyDOM = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE$1 = 'style';
    var HTML = '__html';
    var HTML_NAMESPACE = Namespaces.html;
    var warnedUnknownTags = void 0;
    var suppressHydrationWarning = void 0;
    var validatePropertiesInDevelopment = void 0;
    var warnForTextDifference = void 0;
    var warnForPropDifference = void 0;
    var warnForExtraAttributes = void 0;
    var warnForInvalidEventListener = void 0;
    var canDiffStyleForHydrationWarning = void 0;
    var normalizeMarkupForTextOrAttribute = void 0;
    var normalizeHTML = void 0;
    {
      warnedUnknownTags = {
        // Chrome is the only major browser not shipping <time>. But as of July
        // 2017 it intends to ship it due to widespread usage. We intentionally
        // *don't* warn for <time> even if it's unrecognized by Chrome because
        // it soon will be, and many apps have been using it anyway.
        time: true,
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };

      validatePropertiesInDevelopment = function (type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props,
        /* canUseEventSystem */
        true);
      }; // IE 11 parses & normalizes the style attribute as opposed to other
      // browsers. It adds spaces and sorts the properties in some
      // non-alphabetical order. Handling that would require sorting CSS
      // properties in the client & server versions or applying
      // `expectedStyle` to a temporary DOM node to read its `style` attribute
      // normalized. Since it only affects IE, we're skipping style warnings
      // in that browser completely in favor of doing all that work.
      // See https://github.com/facebook/react/issues/11807


      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
      // It also can turn \u0000 into \uFFFD inside attributes.
      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
      // If we have a mismatch, it might be caused by that.
      // We will still patch up in this case but not fire the warning.

      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

      normalizeMarkupForTextOrAttribute = function (markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
      };

      warnForTextDifference = function (serverText, clientText) {
        if (didWarnInvalidHydration) {
          return;
        }

        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

        if (normalizedServerText === normalizedClientText) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      };

      warnForPropDifference = function (propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }

        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

        if (normalizedServerValue === normalizedClientValue) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };

      warnForExtraAttributes = function (attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function (name) {
          names.push(name);
        });
        warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
      };

      warnForInvalidEventListener = function (registrationName, listener) {
        if (listener === false) {
          warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
        } else {
          warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
        }
      }; // Parse the HTML and read it back to normalize the HTML string so that it
      // can be used for comparison.


      normalizeHTML = function (parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }

    function ensureListeningTo(rootContainerElement, registrationName) {
      var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
      var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
      listenTo(registrationName, doc);
    }

    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }

    function noop() {}

    function trapClickOnNonInteractiveElement(node) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      // Just set it using the onclick property so that we don't have to manage any
      // bookkeeping for it. Not sure if we need to clear it when the listener is
      // removed.
      // TODO: Only do this for the relevant Safaris maybe?
      node.onclick = noop;
    }

    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }

        var nextProp = nextProps[propKey];

        if (propKey === STYLE$1) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          } // Relies on `updateStylesByID` not mutating `styleUpdates`.

          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;

          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string') {
            // Avoid setting initial textContent when the text is empty. In IE11 setting
            // textContent on a <textarea> will cause the placeholder to not
            // show within the <textarea> until it has been focused and blurred again.
            // https://github.com/facebook/react/issues/6731#issuecomment-254874553
            var canSetTextContent = tag !== 'textarea' || nextProp !== '';

            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === 'number') {
            setTextContent(domElement, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (propKey === AUTOFOCUS) {// We polyfill it separately on the client during commit.
          // We could have excluded it in the property list instead of
          // adding a special case here, but then it wouldn't be emitted
          // on server rendering (but we *do* want to emit it in SSR).
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }

    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      // TODO: Handle wasCustomComponentTag
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];

        if (propKey === STYLE$1) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }

    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag = void 0; // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.

      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement = void 0;
      var namespaceURI = parentNamespace;

      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }

      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
          // allow <SVG> or <mATH>.

          !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
        }

        if (type === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
          // This is guaranteed to yield a script element.

          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === 'string') {
          // $FlowIssue `createElement` should be updated for Web Components
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
          // attributes on `select`s needs to be added before `option`s are inserted.
          // This prevents:
          // - a bug where the `select` does not scroll to the correct option because singular
          //  `select` elements automatically pick the first item #13222
          // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
          // See https://github.com/facebook/react/issues/13222
          // and https://github.com/facebook/react/issues/14239

          if (type === 'select') {
            var node = domElement;

            if (props.multiple) {
              node.multiple = true;
            } else if (props.size) {
              // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
              // it is possible that no option is selected.
              //
              // This is only necessary when a select in "single selection mode".
              node.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }

      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
          }
        }
      }
      return domElement;
    }

    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }

    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);

        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      } // TODO: Make sure that we check isMounted before firing any of these events.

      var props = void 0;

      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;

        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }

          props = rawProps;
          break;

        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          props = rawProps;
          break;

        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;

        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          props = rawProps;
          break;

        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          props = rawProps;
          break;

        case 'input':
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'option':
          validateProps(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          break;

        case 'select':
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$3(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        default:
          props = rawProps;
      }

      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;

        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;

        case 'option':
          postMountWrapper$1(domElement, rawProps);
          break;

        case 'select':
          postMountWrapper$2(domElement, rawProps);
          break;

        default:
          if (typeof props.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }
    } // Calculate the diff between the two objects.


    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps = void 0;
      var nextProps = void 0;

      switch (tag) {
        case 'input':
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'option':
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'select':
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'textarea':
          lastProps = getHostProps$3(domElement, lastRawProps);
          nextProps = getHostProps$3(domElement, nextRawProps);
          updatePayload = [];
          break;

        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;

          if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }

      assertValidProps(tag, nextProps);
      var propKey = void 0;
      var styleName = void 0;
      var styleUpdates = null;

      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }

        if (propKey === STYLE$1) {
          var lastStyle = lastProps[propKey];

          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }

              styleUpdates[styleName] = '';
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {// Noop. This is handled by the clear text mechanism.
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (propKey === AUTOFOCUS) {// Noop. It doesn't work on updates anyway.
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" fiber pointer gets updated so we need a commit
          // to update this element.
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          // For all other deleted properties we add it to the queue. We use
          // the whitelist in the commit phase instead.
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }

      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : undefined;

        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }

        if (propKey === STYLE$1) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }

          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }

                styleUpdates[styleName] = '';
              }
            } // Update styles that changed since `lastProp`.


            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }

                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }

              updatePayload.push(propKey, styleUpdates);
            }

            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;
          var lastHtml = lastProp ? lastProp[HTML] : undefined;

          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
            }
          } else {// TODO: It might be too late to clear this if we have children
            // inserted already.
          }
        } else if (propKey === CHILDREN) {
          if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
            (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            // We eagerly listen to this even though we haven't committed yet.
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }

          if (!updatePayload && lastProp !== nextProp) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" props pointer gets updated so we need a commit
            // to update this element.
            updatePayload = [];
          }
        } else {
          // For any other property we always add it to the queue and then we
          // filter it out using the whitelist during the commit.
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }

      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
        }
        (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
      }

      return updatePayload;
    } // Apply the diff.


    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      // Update checked *before* name.
      // In the middle of an update, it is possible to have multiple checked.
      // When a checked radio tries to change name, browser makes another radio's checked false.
      if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }

      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
      // changed.

      switch (tag) {
        case 'input':
          // Update the wrapper around inputs *after* updating props. This has to
          // happen after `updateDOMProperties`. Otherwise HTML5 input validations
          // raise warnings and prevent the new value from being assigned.
          updateWrapper(domElement, nextRawProps);
          break;

        case 'textarea':
          updateWrapper$1(domElement, nextRawProps);
          break;

        case 'select':
          // <select> value update needs to occur after <option> children
          // reconciliation
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }

    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();

        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }

        return possibleStandardNames[lowerCasedName] || null;
      }
      return null;
    }

    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
      var isCustomComponentTag = void 0;
      var extraAttributeNames = void 0;
      {
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);

        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      } // TODO: Make sure that we check isMounted before firing any of these events.

      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          break;

        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }

          break;

        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          break;

        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          break;

        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          break;

        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          break;

        case 'input':
          initWrapperState(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'option':
          validateProps(domElement, rawProps);
          break;

        case 'select':
          initWrapperState$1(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;
      }

      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;

        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();

          switch (name) {
            // Built-in SSR attribute is whitelisted
            case 'data-reactroot':
              break;
            // Controlled attributes are not validated
            // TODO: Only ignore them on controlled tags.

            case 'value':
              break;

            case 'checked':
              break;

            case 'selected':
              break;

            default:
              // Intentionally use the original name.
              // See discussion in https://github.com/facebook/react/pull/10676.
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;

      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }

        var nextProp = rawProps[propKey];

        if (propKey === CHILDREN) {
          // For text content children we compare against textContent. This
          // might match additional HTML that is hidden when we read it using
          // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
          // satisfies our requirement. Our requirement is not to produce perfect
          // HTML and attributes. Ideally we should preserve structure but it's
          // ok not to if the visible content is still enough to indicate what
          // even listeners these nodes might be wired up to.
          // TODO: Warn if there is more than a single textNode as a child.
          // TODO: Should we use domElement.firstChild.nodeValue to compare?
          if (typeof nextProp === 'string') {
            if (domElement.textContent !== nextProp) {
              if (true && !suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }

              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === 'number') {
            if (domElement.textContent !== '' + nextProp) {
              if (true && !suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }

              updatePayload = [CHILDREN, '' + nextProp];
            }
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (true && // Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === 'boolean') {
          // Validate that the properties correspond to their expected values.
          var serverValue = void 0;
          var propertyInfo = getPropertyInfo(propKey);

          if (suppressHydrationWarning) {// Don't bother comparing. We're ignoring all these warnings.
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === 'value' || propKey === 'checked' || propKey === 'selected') {// Noop
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML] : undefined;
            var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

            if (expectedHTML !== serverHTML) {
              warnForPropDifference(propKey, serverHTML, expectedHTML);
            }
          } else if (propKey === STYLE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);

            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute('style');

              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);

            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;

            if (propertyInfo !== null) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;

              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }

              if (ownNamespace === HTML_NAMESPACE) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);

                if (standardName !== null && standardName !== propKey) {
                  // If an SVG prop is supplied with bad casing, it will
                  // be successfully parsed from HTML, but will produce a mismatch
                  // (and would be incorrectly rendered on the client).
                  // However, we already warn about bad casing elsewhere.
                  // So we'll skip the misleading extra mismatch warning in this case.
                  isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                  extraAttributeNames.delete(standardName);
                } // $FlowFixMe - Should be inferred as not undefined.


                extraAttributeNames.delete(propKey);
              }

              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }

            if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }

      {
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
          // $FlowFixMe - Should be inferred as not undefined.
          warnForExtraAttributes(extraAttributeNames);
        }
      }

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;

        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;

        case 'select':
        case 'option':
          // For input and textarea we current always set the value property at
          // post mount to force it to diverge from attributes. However, for
          // option and select we don't quite do the same thing and select
          // is not resilient to the DOM state changing so we don't do that here.
          // TODO: Consider not doing this for input and textarea.
          break;

        default:
          if (typeof rawProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }

      return updatePayload;
    }

    function diffHydratedText(textNode, text) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }

    function warnForUnmatchedText(textNode, text) {
      {
        warnForTextDifference(textNode.nodeValue, text);
      }
    }

    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }

    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === '') {
          // We expect to insert empty text nodes since they're not represented in
          // the HTML.
          // TODO: Remove this special case if we can just avoid inserting empty
          // text nodes.
          return;
        }

        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }

    function restoreControlledState$1(domElement, tag, props) {
      switch (tag) {
        case 'input':
          restoreControlledState(domElement, props);
          return;

        case 'textarea':
          restoreControlledState$3(domElement, props);
          return;

        case 'select':
          restoreControlledState$2(domElement, props);
          return;
      }
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var validateDOMNesting = function () {};

    var updatedAncestorInfo = function () {};

    {
      // This validation code was written based on the HTML5 parsing spec:
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      //
      // Note: this does not catch all invalid nesting, nor does it try to (as it's
      // not clear what practical benefit doing so provides); instead, we warn only
      // for cases where the parser will give a parse tree differing from what React
      // intended. For example, <b><div></div></b> is invalid but we don't warn
      // because it still parses correctly; we do warn for other cases like nested
      // <p> tags where the beginning of the second element implicitly closes the
      // first, causing a confusing mess.
      // https://html.spec.whatwg.org/multipage/syntax.html#special
      var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

      var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
      // TODO: Distinguish by namespace here -- for <title>, including it here
      // errs on the side of fewer warnings
      'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

      var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

      var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };

      updatedAncestorInfo = function (oldInfo, tag) {
        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

        var info = {
          tag: tag
        };

        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }

        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        } // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }

        ancestorInfo.current = info;

        if (tag === 'form') {
          ancestorInfo.formTag = info;
        }

        if (tag === 'a') {
          ancestorInfo.aTagInScope = info;
        }

        if (tag === 'button') {
          ancestorInfo.buttonTagInScope = info;
        }

        if (tag === 'nobr') {
          ancestorInfo.nobrTagInScope = info;
        }

        if (tag === 'p') {
          ancestorInfo.pTagInButtonScope = info;
        }

        if (tag === 'li') {
          ancestorInfo.listItemTagAutoclosing = info;
        }

        if (tag === 'dd' || tag === 'dt') {
          ancestorInfo.dlItemTagAutoclosing = info;
        }

        return ancestorInfo;
      };
      /**
       * Returns whether
       */


      var isTagValidWithParent = function (tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch (parentTag) {
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';

          case 'optgroup':
            return tag === 'option' || tag === '#text';
          // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
          // but

          case 'option':
            return tag === '#text';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
          // No special behavior since these rules fall back to "in body" mode for
          // all except special table nodes which cause bad parsing behavior anyway.
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

          case 'colgroup':
            return tag === 'col' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

          case 'html':
            return tag === 'head' || tag === 'body';

          case '#document':
            return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


        switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;

          case 'body':
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frame':
          case 'head':
          case 'html':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
        }

        return true;
      };
      /**
       * Returns whether
       */


      var findInvalidAncestorForTag = function (tag, ancestorInfo) {
        switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;

          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

          case 'li':
            return ancestorInfo.listItemTagAutoclosing;

          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;

          case 'button':
            return ancestorInfo.buttonTagInScope;

          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;

          case 'nobr':
            return ancestorInfo.nobrTagInScope;
        }

        return null;
      };

      var didWarn = {};

      validateDOMNesting = function (childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;

        if (childText != null) {
          !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
          childTag = '#text';
        }

        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;

        if (!invalidParentOrAncestor) {
          return;
        }

        var ancestorTag = invalidParentOrAncestor.tag;
        var addendum = getCurrentFiberStackInDev();
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

        if (didWarn[warnKey]) {
          return;
        }

        didWarn[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';

        if (childTag === '#text') {
          if (/\S/.test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }

        if (invalidParent) {
          var info = '';

          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }

          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
        } else {
          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
        }
      };
    } // Renderers that don't support persistence
    // can re-export everything from this module.

    function shim() {
      invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
    } // Persistence (when unsupported)


    var supportsPersistence = false;
    var cloneInstance = shim;
    var createContainerChildSet = shim;
    var appendChildToContainerChildSet = shim;
    var finalizeContainerChildren = shim;
    var replaceContainerChildren = shim;
    var cloneHiddenInstance = shim;
    var cloneUnhiddenInstance = shim;
    var createHiddenTextInstance = shim;
    var SUPPRESS_HYDRATION_WARNING = void 0;
    {
      SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    }
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var STYLE = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;

    function shouldAutoFocusHostComponent(type, props) {
      switch (type) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          return !!props.autoFocus;
      }

      return false;
    }

    function getRootHostContext(rootContainerInstance) {
      var type = void 0;
      var namespace = void 0;
      var nodeType = rootContainerInstance.nodeType;

      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
            var root = rootContainerInstance.documentElement;
            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
            break;
          }

        default:
          {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
      }

      {
        var validatedTag = type.toLowerCase();

        var _ancestorInfo = updatedAncestorInfo(null, validatedTag);

        return {
          namespace: namespace,
          ancestorInfo: _ancestorInfo
        };
      }
      return namespace;
    }

    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;

        var _namespace = getChildNamespace(parentHostContextDev.namespace, type);

        var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);

        return {
          namespace: _namespace,
          ancestorInfo: _ancestorInfo2
        };
      }
      var parentNamespace = parentHostContext;
      return getChildNamespace(parentNamespace, type);
    }

    function getPublicInstance(instance) {
      return instance;
    }

    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      setEnabled(false);
    }

    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      selectionInformation = null;
      setEnabled(eventsEnabled);
      eventsEnabled = null;
    }

    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace = void 0;
      {
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);

        if (typeof props.children === 'string' || typeof props.children === 'number') {
          var string = '' + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }

        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }

    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      return shouldAutoFocusHostComponent(type, props);
    }

    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;

        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
          var string = '' + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
    }

    function shouldSetTextContent(type, props) {
      return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }

    function shouldDeprioritizeSubtree(type, props) {
      return !!props.hidden;
    }

    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }

    var isPrimaryRenderer = true; // This initialization code may run even on server environments
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.

    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var schedulePassiveEffects = scheduler.unstable_scheduleCallback;
    var cancelPassiveEffects = scheduler.unstable_cancelCallback; // -------------------
    //     Mutation
    // -------------------

    var supportsMutation = true;

    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      // Despite the naming that might imply otherwise, this method only
      // fires if there is an `Update` effect scheduled during mounting.
      // This happens if `finalizeInitialChildren` returns `true` (which it
      // does to implement the `autoFocus` attribute on the client). But
      // there are also other cases when this might happen (such as patching
      // up text content during hydration mismatch). So we'll check this again.
      if (shouldAutoFocusHostComponent(type, newProps)) {
        domElement.focus();
      }
    }

    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }

    function resetTextContent(domElement) {
      setTextContent(domElement, '');
    }

    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }

    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function appendChildToContainer(container, child) {
      var parentNode = void 0;

      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      } // This container might be used for a portal.
      // If something inside a portal is clicked, that click should bubble
      // through the React tree. However, on Mobile Safari the click would
      // never bubble through the *DOM* tree unless an ancestor with onclick
      // event exists. So we wouldn't see it and dispatch it.
      // This is why we ensure that non React root containers have inline onclick
      // defined.
      // https://github.com/facebook/react/issues/11918


      var reactRootContainer = container._reactRootContainer;

      if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
      }
    }

    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }

    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }

    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }

    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }

    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node = suspenseInstance; // Delete all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.

      var depth = 0;

      do {
        var nextNode = node.nextSibling;
        parentInstance.removeChild(node);

        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
          var data = nextNode.data;

          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              parentInstance.removeChild(nextNode);
              return;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA) {
            depth++;
          }
        }

        node = nextNode;
      } while (node); // TODO: Warn, we didn't find the end comment boundary.

    }

    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
      if (container.nodeType === COMMENT_NODE) {
        clearSuspenseBoundary(container.parentNode, suspenseInstance);
      } else if (container.nodeType === ELEMENT_NODE) {
        clearSuspenseBoundary(container, suspenseInstance);
      } else {// Document nodes should never contain suspense boundaries.
      }
    }

    function hideInstance(instance) {
      // TODO: Does this work for all element types? What about MathML? Should we
      // pass host context to this method?
      instance = instance;
      instance.style.display = 'none';
    }

    function hideTextInstance(textInstance) {
      textInstance.nodeValue = '';
    }

    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE];
      var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
      instance.style.display = dangerousStyleValue('display', display);
    }

    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    } // -------------------
    //     Hydration
    // -------------------


    var supportsHydration = true;

    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      } // This has now been refined to an element node.


      return instance;
    }

    function canHydrateTextInstance(instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      } // This has now been refined to a text node.


      return instance;
    }

    function canHydrateSuspenseInstance(instance) {
      if (instance.nodeType !== COMMENT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      } // This has now been refined to a suspense node.


      return instance;
    }

    function getNextHydratableSibling(instance) {
      var node = instance.nextSibling; // Skip non-hydratable nodes.

      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || node.nodeType !== COMMENT_NODE || node.data !== SUSPENSE_START_DATA)) {
        node = node.nextSibling;
      }

      return node;
    }

    function getFirstHydratableChild(parentInstance) {
      var next = parentInstance.firstChild; // Skip non-hydratable nodes.

      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || next.nodeType !== COMMENT_NODE || next.data !== SUSPENSE_START_DATA)) {
        next = next.nextSibling;
      }

      return next;
    }

    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
      // get attached.

      updateFiberProps(instance, props);
      var parentNamespace = void 0;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    }

    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    }

    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.

      var depth = 0;

      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;

          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node);
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA) {
            depth++;
          }
        }

        node = node.nextSibling;
      } // TODO: Warn, we didn't find the end comment boundary.


      return null;
    }

    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotHydrateContainerInstance(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
        } else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }

    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    }

    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type, props);
      }
    }

    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }

    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      }
    }

    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }

    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {// TODO: warnForInsertedHydratedSuspense(parentInstance);
      }
    } // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.


    var reactEmoji = '\u269B';
    var warningEmoji = '\u26D4';
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

    var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).

    var currentPhase = null;
    var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.

    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false; // During commits, we only show a measurement once per method name
    // to avoid stretch the commit phase with measurement overhead.

    var labelsInCurrentCommit = new Set();

    var formatMarkName = function (markName) {
      return reactEmoji + ' ' + markName;
    };

    var formatLabel = function (label, warning) {
      var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
      var suffix = warning ? ' Warning: ' + warning : '';
      return '' + prefix + label + suffix;
    };

    var beginMark = function (markName) {
      performance.mark(formatMarkName(markName));
    };

    var clearMark = function (markName) {
      performance.clearMarks(formatMarkName(markName));
    };

    var endMark = function (label, markName, warning) {
      var formattedMarkName = formatMarkName(markName);
      var formattedLabel = formatLabel(label, warning);

      try {
        performance.measure(formattedLabel, formattedMarkName);
      } catch (err) {} // If previous mark was missing for some reason, this will throw.
      // This could only happen if React crashed in an unexpected place earlier.
      // Don't pile on with more errors.
      // Clear marks immediately to avoid growing buffer.


      performance.clearMarks(formattedMarkName);
      performance.clearMeasures(formattedLabel);
    };

    var getFiberMarkName = function (label, debugID) {
      return label + ' (#' + debugID + ')';
    };

    var getFiberLabel = function (componentName, isMounted, phase) {
      if (phase === null) {
        // These are composite component total time measurements.
        return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
      } else {
        // Composite component methods.
        return componentName + '.' + phase;
      }
    };

    var beginFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);

      if (isCommitting && labelsInCurrentCommit.has(label)) {
        // During the commit phase, we don't show duplicate labels because
        // there is a fixed overhead for every measurement, and we don't
        // want to stretch the commit phase beyond necessary.
        return false;
      }

      labelsInCurrentCommit.add(label);
      var markName = getFiberMarkName(label, debugID);
      beginMark(markName);
      return true;
    };

    var clearFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      clearMark(markName);
    };

    var endFiberMark = function (fiber, phase, warning) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      endMark(label, markName, warning);
    };

    var shouldIgnoreFiber = function (fiber) {
      // Host components should be skipped in the timeline.
      // We could check typeof fiber.type, but does this work with RN?
      switch (fiber.tag) {
        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
        case Mode:
          return true;

        default:
          return false;
      }
    };

    var clearPendingPhaseMeasurement = function () {
      if (currentPhase !== null && currentPhaseFiber !== null) {
        clearFiberMark(currentPhaseFiber, currentPhase);
      }

      currentPhaseFiber = null;
      currentPhase = null;
      hasScheduledUpdateInCurrentPhase = false;
    };

    var pauseTimers = function () {
      // Stops all currently active measurements so that they can be resumed
      // if we continue in a later deferred loop from the same unit of work.
      var fiber = currentFiber;

      while (fiber) {
        if (fiber._debugIsCurrentlyTiming) {
          endFiberMark(fiber, null, null);
        }

        fiber = fiber.return;
      }
    };

    var resumeTimersRecursively = function (fiber) {
      if (fiber.return !== null) {
        resumeTimersRecursively(fiber.return);
      }

      if (fiber._debugIsCurrentlyTiming) {
        beginFiberMark(fiber, null);
      }
    };

    var resumeTimers = function () {
      // Resumes all measurements that were active during the last deferred loop.
      if (currentFiber !== null) {
        resumeTimersRecursively(currentFiber);
      }
    };

    function recordEffect() {
      if (enableUserTimingAPI) {
        effectCountInCurrentCommit++;
      }
    }

    function recordScheduleUpdate() {
      if (enableUserTimingAPI) {
        if (isCommitting) {
          hasScheduledUpdateInCurrentCommit = true;
        }

        if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
          hasScheduledUpdateInCurrentPhase = true;
        }
      }
    }

    function startRequestCallbackTimer() {
      if (enableUserTimingAPI) {
        if (supportsUserTiming && !isWaitingForCallback) {
          isWaitingForCallback = true;
          beginMark('(Waiting for async callback...)');
        }
      }
    }

    function stopRequestCallbackTimer(didExpire, expirationTime) {
      if (enableUserTimingAPI) {
        if (supportsUserTiming) {
          isWaitingForCallback = false;
          var warning = didExpire ? 'React was blocked by main thread' : null;
          endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
        }
      }
    }

    function startWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, this is the fiber to unwind from.


        currentFiber = fiber;

        if (!beginFiberMark(fiber, null)) {
          return;
        }

        fiber._debugIsCurrentlyTiming = true;
      }
    }

    function cancelWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // Remember we shouldn't complete measurement for this fiber.
        // Otherwise flamechart will be deep even for small updates.


        fiber._debugIsCurrentlyTiming = false;
        clearFiberMark(fiber, null);
      }
    }

    function stopWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber.return;

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        endFiberMark(fiber, null, null);
      }
    }

    function stopFailedWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber.return;

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        var warning = fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
        endFiberMark(fiber, null, warning);
      }
    }

    function startPhaseTimer(fiber, phase) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        clearPendingPhaseMeasurement();

        if (!beginFiberMark(fiber, phase)) {
          return;
        }

        currentPhaseFiber = fiber;
        currentPhase = phase;
      }
    }

    function stopPhaseTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        if (currentPhase !== null && currentPhaseFiber !== null) {
          var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
          endFiberMark(currentPhaseFiber, currentPhase, warning);
        }

        currentPhase = null;
        currentPhaseFiber = null;
      }
    }

    function startWorkLoopTimer(nextUnitOfWork) {
      if (enableUserTimingAPI) {
        currentFiber = nextUnitOfWork;

        if (!supportsUserTiming) {
          return;
        }

        commitCountInCurrentWorkLoop = 0; // This is top level call.
        // Any other measurements are performed within.

        beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

        resumeTimers();
      }
    }

    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (interruptedBy !== null) {
          if (interruptedBy.tag === HostRoot) {
            warning = 'A top-level update interrupted the previous render';
          } else {
            var componentName = getComponentName(interruptedBy.type) || 'Unknown';
            warning = 'An update to ' + componentName + ' interrupted the previous render';
          }
        } else if (commitCountInCurrentWorkLoop > 1) {
          warning = 'There were cascading updates';
        }

        commitCountInCurrentWorkLoop = 0;
        var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

        pauseTimers();
        endMark(label, '(React Tree Reconciliation)', warning);
      }
    }

    function startCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        isCommitting = true;
        hasScheduledUpdateInCurrentCommit = false;
        labelsInCurrentCommit.clear();
        beginMark('(Committing Changes)');
      }
    }

    function stopCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (hasScheduledUpdateInCurrentCommit) {
          warning = 'Lifecycle hook scheduled a cascading update';
        } else if (commitCountInCurrentWorkLoop > 0) {
          warning = 'Caused by a cascading update in earlier commit';
        }

        hasScheduledUpdateInCurrentCommit = false;
        commitCountInCurrentWorkLoop++;
        isCommitting = false;
        labelsInCurrentCommit.clear();
        endMark('(Committing Changes)', '(Committing Changes)', warning);
      }
    }

    function startCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Snapshot Effects)');
      }
    }

    function stopCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
      }
    }

    function startCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Host Effects)');
      }
    }

    function stopCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
      }
    }

    function startCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Calling Lifecycle Methods)');
      }
    }

    function stopCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
      }
    }

    var valueStack = [];
    var fiberStack = void 0;
    {
      fiberStack = [];
    }
    var index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }

    function pop(cursor, fiber) {
      if (index < 0) {
        {
          warningWithoutStack$1(false, 'Unexpected pop.');
        }
        return;
      }

      {
        if (fiber !== fiberStack[index]) {
          warningWithoutStack$1(false, 'Unexpected Fiber popped.');
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }

    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }

    function checkThatStackIsEmpty() {
      {
        if (index !== -1) {
          warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
        }
      }
    }

    function resetStackAfterFatalErrorInDev() {
      {
        index = -1;
        valueStack.length = 0;
        fiberStack.length = 0;
      }
    }

    var warnedAboutMissingGetChildContext = void 0;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    } // A cursor to the current merged context object on the stack.

    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.

    var previousContext = emptyContextObject;

    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
      if (didPushOwnContextIfProvider && isContextProvider(Component)) {
        // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
      }

      return contextStackCursor.current;
    }

    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }

    function getMaskedContext(workInProgress, unmaskedContext) {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;

      if (!contextTypes) {
        return emptyContextObject;
      } // Avoid recreating masked context unless unmasked context has changed.
      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
      // This may trigger infinite loops if componentWillReceiveProps calls setState.


      var instance = workInProgress.stateNode;

      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }

      var context = {};

      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // Context is created before the class component is instantiated so check for instance.

      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return context;
    }

    function hasContextChanged() {
      return didPerformWorkStackCursor.current;
    }

    function isContextProvider(type) {
      var childContextTypes = type.childContextTypes;
      return childContextTypes !== null && childContextTypes !== undefined;
    }

    function popContext(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function popTopLevelContextObject(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }

    function processChildContext(fiber, type, parentContext) {
      var instance = fiber.stateNode;
      var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
      // It has only been added in Fiber to match the (unintentional) behavior in Stack.

      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName(type) || 'Unknown';

          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;
            warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }
        return parentContext;
      }

      var childContext = void 0;
      {
        setCurrentPhase('getChildContext');
      }
      startPhaseTimer(fiber, 'getChildContext');
      childContext = instance.getChildContext();
      stopPhaseTimer();
      {
        setCurrentPhase(null);
      }

      for (var contextKey in childContext) {
        !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
        // somebody calls unstable_renderSubtreeIntoContainer() and we process
        // context from the parent component instance. The stack will be missing
        // because it's outside of the reconciliation, and so the pointer has not
        // been set. This is rare and doesn't matter. We'll also remove that API.
        getCurrentFiberStackInDev);
      }
      return _assign({}, parentContext, childContext);
    }

    function pushContextProvider(workInProgress) {
      var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
      // If the instance does not exist yet, we will push null at first,
      // and replace it on the stack later when invalidating the context.

      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
      // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
      return true;
    }

    function invalidateContextProvider(workInProgress, type, didChange) {
      var instance = workInProgress.stateNode;
      !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didChange) {
        // Merge parent and own context.
        // Skip this if we're not updating due to sCU.
        // This avoids unnecessarily recomputing memoized values.
        var mergedContext = processChildContext(workInProgress, type, previousContext);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
        // It is important to unwind the context in the reverse order.

        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    }

    function findCurrentUnmaskedContext(fiber) {
      // Currently this is only used with renderSubtreeIntoContainer; not sure if it
      // makes sense elsewhere
      !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var node = fiber;

      do {
        switch (node.tag) {
          case HostRoot:
            return node.stateNode.context;

          case ClassComponent:
            {
              var Component = node.type;

              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }

              break;
            }
        }

        node = node.return;
      } while (node !== null);

      invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;

    function catchErrors(fn) {
      return function (arg) {
        try {
          return fn(arg);
        } catch (err) {
          if (true && !hasLoggedError) {
            hasLoggedError = true;
            warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
          }
        }
      };
    }

    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }

      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

      if (hook.isDisabled) {
        // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
      }

      if (!hook.supportsFiber) {
        {
          warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
        } // DevTools exists, even though it doesn't support Fiber.

        return true;
      }

      try {
        var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

        onCommitFiberRoot = catchErrors(function (root) {
          return hook.onCommitFiberRoot(rendererID, root);
        });
        onCommitFiberUnmount = catchErrors(function (fiber) {
          return hook.onCommitFiberUnmount(rendererID, fiber);
        });
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
        }
      } // DevTools exists


      return true;
    }

    function onCommitRoot(root) {
      if (typeof onCommitFiberRoot === 'function') {
        onCommitFiberRoot(root);
      }
    }

    function onCommitUnmount(fiber) {
      if (typeof onCommitFiberUnmount === 'function') {
        onCommitFiberUnmount(fiber);
      }
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111


    var maxSigned31BitInt = 1073741823;
    var NoWork = 0;
    var Never = 1;
    var Sync = maxSigned31BitInt;
    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1; // 1 unit of expiration time represents 10ms.

    function msToExpirationTime(ms) {
      // Always add an offset so that we don't clash with the magic number for NoWork.
      return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
    }

    function expirationTimeToMs(expirationTime) {
      return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
    }

    function ceiling(num, precision) {
      return ((num / precision | 0) + 1) * precision;
    }

    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
      return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }

    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;

    function computeAsyncExpiration(currentTime) {
      return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    } // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    //
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    //
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    //
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.


    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;

    function computeInteractiveExpiration(currentTime) {
      return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }

    var NoContext = 0;
    var ConcurrentMode = 1;
    var StrictMode = 2;
    var ProfileMode = 4;
    var hasBadMapPolyfill = void 0;
    {
      hasBadMapPolyfill = false;

      try {
        var nonExtensibleObject = Object.preventExtensions({});
        var testMap = new Map([[nonExtensibleObject, null]]);
        var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
        // https://github.com/rollup/rollup/issues/1771
        // TODO: we can remove these if Rollup fixes the bug.

        testMap.set(0, 0);
        testSet.add(0);
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    } // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.

    var debugCounter = void 0;
    {
      debugCounter = 1;
    }

    function FiberNode(tag, pendingProps, key, mode) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null; // Fiber

      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.contextDependencies = null;
      this.mode = mode; // Effects

      this.effectTag = NoEffect;
      this.nextEffect = null;
      this.firstEffect = null;
      this.lastEffect = null;
      this.expirationTime = NoWork;
      this.childExpirationTime = NoWork;
      this.alternate = null;

      if (enableProfilerTimer) {
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).

        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }

      {
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;
        this._debugHookTypes = null;

        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.


    var createFiber = function (tag, pendingProps, key, mode) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, pendingProps, key, mode);
    };

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function isSimpleFunctionComponent(type) {
      return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
    }

    function resolveLazyComponentTag(Component) {
      if (typeof Component === 'function') {
        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== undefined && Component !== null) {
        var $$typeof = Component.$$typeof;

        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }

        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }

      return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.


    function createWorkInProgress(current, pendingProps, expirationTime) {
      var workInProgress = current.alternate;

      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
        workInProgress.elementType = current.elementType;
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;
        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
          workInProgress._debugHookTypes = current._debugHookTypes;
        }
        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        workInProgress.pendingProps = pendingProps; // We already have an alternate.
        // Reset the effect tag.

        workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;

        if (enableProfilerTimer) {
          // We intentionally reset, rather than copy, actualDuration & actualStartTime.
          // This prevents time from endlessly accumulating in new commits.
          // This has the downside of resetting values for different priority renders,
          // But works for yielding (the common case) and should support resuming.
          workInProgress.actualDuration = 0;
          workInProgress.actualStartTime = -1;
        }
      }

      workInProgress.childExpirationTime = current.childExpirationTime;
      workInProgress.expirationTime = current.expirationTime;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.contextDependencies = current.contextDependencies; // These will be overridden during the parent's reconciliation

      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;

      if (enableProfilerTimer) {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }

      return workInProgress;
    }

    function createHostRootFiber(isConcurrent) {
      var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

      if (enableProfilerTimer && isDevToolsPresent) {
        // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
      }

      return createFiber(HostRoot, null, null, mode);
    }

    function createFiberFromTypeAndProps(type, // React$ElementType
    key, pendingProps, owner, mode, expirationTime) {
      var fiber = void 0;
      var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

      var resolvedType = type;

      if (typeof type === 'function') {
        if (shouldConstruct(type)) {
          fiberTag = ClassComponent;
        }
      } else if (typeof type === 'string') {
        fiberTag = HostComponent;
      } else {
        getTag: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

          case REACT_CONCURRENT_MODE_TYPE:
            return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);

          case REACT_STRICT_MODE_TYPE:
            return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);

          case REACT_PROFILER_TYPE:
            return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

          case REACT_SUSPENSE_TYPE:
            return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

          default:
            {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;

                  case REACT_CONTEXT_TYPE:
                    // This is a consumer
                    fiberTag = ContextConsumer;
                    break getTag;

                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    break getTag;

                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;

                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }

              var info = '';
              {
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                  info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                }

                var ownerName = owner ? getComponentName(owner.type) : null;

                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }
              }
              invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
            }
        }
      }

      fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromElement(element, mode, expirationTime) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }

    function createFiberFromFragment(elements, mode, expirationTime, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
      {
        if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
          warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.type = REACT_PROFILER_TYPE;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromMode(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(Mode, pendingProps, key, mode); // TODO: The Mode fiber shouldn't have a type. It has a tag.

      var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
      fiber.elementType = type;
      fiber.type = type;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.

      var type = REACT_SUSPENSE_TYPE;
      fiber.elementType = type;
      fiber.type = type;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromText(content, mode, expirationTime) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoContext); // TODO: These should not need a type.

      fiber.elementType = 'DELETED';
      fiber.type = 'DELETED';
      return fiber;
    }

    function createFiberFromPortal(portal, mode, expirationTime) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.expirationTime = expirationTime;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.


    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoContext);
      } // This is intentionally written as a list of all properties.
      // We tried to use Object.assign() instead but this is called in
      // the hottest path, and Object.assign() was too slow:
      // https://github.com/facebook/react/issues/12502
      // This code is DEV-only so size is not a concern.


      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.contextDependencies = source.contextDependencies;
      target.mode = source.mode;
      target.effectTag = source.effectTag;
      target.nextEffect = source.nextEffect;
      target.firstEffect = source.firstEffect;
      target.lastEffect = source.lastEffect;
      target.expirationTime = source.expirationTime;
      target.childExpirationTime = source.childExpirationTime;
      target.alternate = source.alternate;

      if (enableProfilerTimer) {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }

      target._debugID = source._debugID;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    } // TODO: This should be lifted into the renderer.
    // The following attributes are only used by interaction tracing builds.
    // They enable interactions to be associated with their async work,
    // And expose interaction metadata to the React DevTools Profiler plugin.
    // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
    // Exported FiberRoot type includes all properties,
    // To avoid requiring potentially error-prone :any casts throughout the project.
    // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
    // The types are defined separately within this file to ensure they stay in sync.
    // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)


    function createFiberRoot(containerInfo, isConcurrent, hydrate) {
      // Cyclic construction. This cheats the type system right now because
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber(isConcurrent);
      var root = void 0;

      if (enableSchedulerTracing) {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,
          pingCache: null,
          didError: false,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null,
          interactionThreadID: tracing.unstable_getThreadID(),
          memoizedInteractions: new Set(),
          pendingInteractionMap: new Map()
        };
      } else {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          pingCache: null,
          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,
          didError: false,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null
        };
      }

      uninitializedFiber.stateNode = root; // The reason for the way the Flow types are structured in this file,
      // Is to avoid needing :any casts everywhere interaction tracing fields are used.
      // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
      // $FlowFixMe Remove this :any cast and replace it with something better.

      return root;
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    var ReactStrictModeWarnings = {
      discardPendingWarnings: function () {},
      flushPendingDeprecationWarnings: function () {},
      flushPendingUnsafeLifecycleWarnings: function () {},
      recordDeprecationWarnings: function (fiber, instance) {},
      recordUnsafeLifecycleWarnings: function (fiber, instance) {},
      recordLegacyContextWarning: function (fiber, instance) {},
      flushLegacyContextWarning: function () {}
    };
    {
      var LIFECYCLE_SUGGESTIONS = {
        UNSAFE_componentWillMount: 'componentDidMount',
        UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
        UNSAFE_componentWillUpdate: 'componentDidUpdate'
      };
      var pendingComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUnsafeLifecycleWarnings = new Map();
      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

      var didWarnAboutDeprecatedLifecycles = new Set();
      var didWarnAboutUnsafeLifecycles = new Set();
      var didWarnAboutLegacyContext = new Set();

      var setToSortedString = function (set) {
        var array = [];
        set.forEach(function (value) {
          array.push(value);
        });
        return array.sort().join(', ');
      };

      ReactStrictModeWarnings.discardPendingWarnings = function () {
        pendingComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUnsafeLifecycleWarnings = new Map();
        pendingLegacyContextWarning = new Map();
      };

      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
        pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
          var lifecyclesWarningMessages = [];
          Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
            var lifecycleWarnings = lifecycleWarningsMap[lifecycle];

            if (lifecycleWarnings.length > 0) {
              var componentNames = new Set();
              lifecycleWarnings.forEach(function (fiber) {
                componentNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              var formatted = lifecycle.replace('UNSAFE_', '');
              var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
              var sortedComponentNames = setToSortedString(componentNames);
              lifecyclesWarningMessages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
            }
          });

          if (lifecyclesWarningMessages.length > 0) {
            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
            warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMessages.join('\n\n'));
          }
        });
        pendingUnsafeLifecycleWarnings = new Map();
      };

      var findStrictRoot = function (fiber) {
        var maybeStrictRoot = null;
        var node = fiber;

        while (node !== null) {
          if (node.mode & StrictMode) {
            maybeStrictRoot = node;
          }

          node = node.return;
        }

        return maybeStrictRoot;
      };

      ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
        if (pendingComponentWillMountWarnings.length > 0) {
          var uniqueNames = new Set();
          pendingComponentWillMountWarnings.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);
          pendingComponentWillMountWarnings = [];
        }

        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          var _uniqueNames = new Set();

          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
            _uniqueNames.add(getComponentName(fiber.type) || 'Component');

            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames = setToSortedString(_uniqueNames);

          lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);
          pendingComponentWillReceivePropsWarnings = [];
        }

        if (pendingComponentWillUpdateWarnings.length > 0) {
          var _uniqueNames2 = new Set();

          pendingComponentWillUpdateWarnings.forEach(function (fiber) {
            _uniqueNames2.add(getComponentName(fiber.type) || 'Component');

            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames2 = setToSortedString(_uniqueNames2);

          lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);
          pendingComponentWillUpdateWarnings = [];
        }
      };

      ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
          return;
        } // Don't warn about react-lifecycles-compat polyfilled components.


        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
      };

      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        } // Dedup strategy: Warn once per component.
        // This is difficult to track any other way since component names
        // are often vague and are likely to collide between 3rd party libraries.
        // An expand property is probably okay to use here since it's DEV-only,
        // and will only be set in the event of serious warnings.


        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }

        var warningsForRoot = void 0;

        if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
          warningsForRoot = {
            UNSAFE_componentWillMount: [],
            UNSAFE_componentWillReceiveProps: [],
            UNSAFE_componentWillUpdate: []
          };
          pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
        } else {
          warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
        }

        var unsafeLifecycles = [];

        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillMount');
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillUpdate');
        }

        if (unsafeLifecycles.length > 0) {
          unsafeLifecycles.forEach(function (lifecycle) {
            warningsForRoot[lifecycle].push(fiber);
          });
        }
      };

      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        } // Dedup strategy: Warn once per component.


        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }

        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
          if (warningsForRoot === undefined) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }

          warningsForRoot.push(fiber);
        }
      };

      ReactStrictModeWarnings.flushLegacyContextWarning = function () {
        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
          var uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
          warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
        });
      };
    } // This lets us hook into Fiber to debug what it's doing.
    // See https://github.com/facebook/react/pull/8033.
    // This is not part of the public API, not even for React DevTools.
    // You may only inject a debugTool if you work on React Fiber itself.

    var ReactFiberInstrumentation = {
      debugTool: null
    };
    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation; // TODO: Offscreen updates should never suspend. However, a promise that
    // suspended inside an offscreen subtree should be able to ping at the priority
    // of the outer render.

    function markPendingPriorityLevel(root, expirationTime) {
      // If there's a gap between completing a failed root and retrying it,
      // additional updates may be scheduled. Clear `didError`, in case the update
      // is sufficient to fix the error.
      root.didError = false; // Update the latest and earliest pending times

      var earliestPendingTime = root.earliestPendingTime;

      if (earliestPendingTime === NoWork) {
        // No other pending updates.
        root.earliestPendingTime = root.latestPendingTime = expirationTime;
      } else {
        if (earliestPendingTime < expirationTime) {
          // This is the earliest pending update.
          root.earliestPendingTime = expirationTime;
        } else {
          var latestPendingTime = root.latestPendingTime;

          if (latestPendingTime > expirationTime) {
            // This is the latest pending update
            root.latestPendingTime = expirationTime;
          }
        }
      }

      findNextExpirationTimeToWorkOn(expirationTime, root);
    }

    function markCommittedPriorityLevels(root, earliestRemainingTime) {
      root.didError = false;

      if (earliestRemainingTime === NoWork) {
        // Fast path. There's no remaining work. Clear everything.
        root.earliestPendingTime = NoWork;
        root.latestPendingTime = NoWork;
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork;
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      if (earliestRemainingTime < root.latestPingedTime) {
        root.latestPingedTime = NoWork;
      } // Let's see if the previous latest known pending level was just flushed.


      var latestPendingTime = root.latestPendingTime;

      if (latestPendingTime !== NoWork) {
        if (latestPendingTime > earliestRemainingTime) {
          // We've flushed all the known pending levels.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          var earliestPendingTime = root.earliestPendingTime;

          if (earliestPendingTime > earliestRemainingTime) {
            // We've flushed the earliest known pending level. Set this to the
            // latest pending time.
            root.earliestPendingTime = root.latestPendingTime;
          }
        }
      } // Now let's handle the earliest remaining level in the whole tree. We need to
      // decide whether to treat it as a pending level or as suspended. Check
      // it falls within the range of known suspended levels.


      var earliestSuspendedTime = root.earliestSuspendedTime;

      if (earliestSuspendedTime === NoWork) {
        // There's no suspended work. Treat the earliest remaining level as a
        // pending level.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      var latestSuspendedTime = root.latestSuspendedTime;

      if (earliestRemainingTime < latestSuspendedTime) {
        // The earliest remaining level is later than all the suspended work. That
        // means we've flushed all the suspended work.
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork; // There's no suspended work. Treat the earliest remaining level as a
        // pending level.

        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      if (earliestRemainingTime > earliestSuspendedTime) {
        // The earliest remaining time is earlier than all the suspended work.
        // Treat it as a pending update.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      } // The earliest remaining time falls within the range of known suspended
      // levels. We should treat this as suspended work.


      findNextExpirationTimeToWorkOn(NoWork, root);
    }

    function hasLowerPriorityWork(root, erroredExpirationTime) {
      var latestPendingTime = root.latestPendingTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var latestPingedTime = root.latestPingedTime;
      return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
    }

    function isPriorityLevelSuspended(root, expirationTime) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
    }

    function markSuspendedPriorityLevel(root, suspendedTime) {
      root.didError = false;
      clearPing(root, suspendedTime); // First, check the known pending levels and update them if needed.

      var earliestPendingTime = root.earliestPendingTime;
      var latestPendingTime = root.latestPendingTime;

      if (earliestPendingTime === suspendedTime) {
        if (latestPendingTime === suspendedTime) {
          // Both known pending levels were suspended. Clear them.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          // The earliest pending level was suspended. Clear by setting it to the
          // latest pending level.
          root.earliestPendingTime = latestPendingTime;
        }
      } else if (latestPendingTime === suspendedTime) {
        // The latest pending level was suspended. Clear by setting it to the
        // latest pending level.
        root.latestPendingTime = earliestPendingTime;
      } // Finally, update the known suspended levels.


      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;

      if (earliestSuspendedTime === NoWork) {
        // No other suspended levels.
        root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
      } else {
        if (earliestSuspendedTime < suspendedTime) {
          // This is the earliest suspended level.
          root.earliestSuspendedTime = suspendedTime;
        } else if (latestSuspendedTime > suspendedTime) {
          // This is the latest suspended level
          root.latestSuspendedTime = suspendedTime;
        }
      }

      findNextExpirationTimeToWorkOn(suspendedTime, root);
    }

    function markPingedPriorityLevel(root, pingedTime) {
      root.didError = false; // TODO: When we add back resuming, we need to ensure the progressed work
      // is thrown out and not reused during the restarted render. One way to
      // invalidate the progressed work is to restart at expirationTime + 1.

      var latestPingedTime = root.latestPingedTime;

      if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
        root.latestPingedTime = pingedTime;
      }

      findNextExpirationTimeToWorkOn(pingedTime, root);
    }

    function clearPing(root, completedTime) {
      var latestPingedTime = root.latestPingedTime;

      if (latestPingedTime >= completedTime) {
        root.latestPingedTime = NoWork;
      }
    }

    function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
      var earliestExpirationTime = renderExpirationTime;
      var earliestPendingTime = root.earliestPendingTime;
      var earliestSuspendedTime = root.earliestSuspendedTime;

      if (earliestPendingTime > earliestExpirationTime) {
        earliestExpirationTime = earliestPendingTime;
      }

      if (earliestSuspendedTime > earliestExpirationTime) {
        earliestExpirationTime = earliestSuspendedTime;
      }

      return earliestExpirationTime;
    }

    function didExpireAtExpirationTime(root, currentTime) {
      var expirationTime = root.expirationTime;

      if (expirationTime !== NoWork && currentTime <= expirationTime) {
        // The root has expired. Flush all work up to the current time.
        root.nextExpirationTimeToWorkOn = currentTime;
      }
    }

    function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var earliestPendingTime = root.earliestPendingTime;
      var latestPingedTime = root.latestPingedTime; // Work on the earliest pending time. Failing that, work on the latest
      // pinged time.

      var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime; // If there is no pending or pinged work, check if there's suspended work
      // that's lower priority than what we just completed.

      if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
        // The lowest priority suspended work is the work most likely to be
        // committed next. Let's start rendering it again, so that if it times out,
        // it's ready to commit.
        nextExpirationTimeToWorkOn = latestSuspendedTime;
      }

      var expirationTime = nextExpirationTimeToWorkOn;

      if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
        // Expire using the earliest known expiration time.
        expirationTime = earliestSuspendedTime;
      }

      root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
      root.expirationTime = expirationTime;
    }

    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        // Resolve default props. Taken from ReactElement
        var props = _assign({}, baseProps);

        var defaultProps = Component.defaultProps;

        for (var propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }

        return props;
      }

      return baseProps;
    }

    function readLazyComponentType(lazyComponent) {
      var status = lazyComponent._status;
      var result = lazyComponent._result;

      switch (status) {
        case Resolved:
          {
            var Component = result;
            return Component;
          }

        case Rejected:
          {
            var error = result;
            throw error;
          }

        case Pending:
          {
            var thenable = result;
            throw thenable;
          }

        default:
          {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;

            var _thenable = ctor();

            _thenable.then(function (moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === undefined) {
                    warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function (error) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error;
              }
            }); // Handle synchronous thenables.


            switch (lazyComponent._status) {
              case Resolved:
                return lazyComponent._result;

              case Rejected:
                throw lazyComponent._result;
            }

            lazyComponent._result = _thenable;
            throw _thenable;
          }
      }
    }

    var fakeInternalInstance = {};
    var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.

    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent = void 0;
    var didWarnAboutUninitializedState = void 0;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
    var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
    var didWarnAboutUndefinedDerivedState = void 0;
    var warnOnUndefinedDerivedState = void 0;
    var warnOnInvalidCallback$1 = void 0;
    var didWarnAboutDirectlyAssigningPropsToState = void 0;
    var didWarnAboutContextTypeAndContextTypes = void 0;
    var didWarnAboutInvalidateContextType = void 0;
    {
      didWarnAboutStateAssignmentForComponent = new Set();
      didWarnAboutUninitializedState = new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
      didWarnAboutDirectlyAssigningPropsToState = new Set();
      didWarnAboutUndefinedDerivedState = new Set();
      didWarnAboutContextTypeAndContextTypes = new Set();
      didWarnAboutInvalidateContextType = new Set();
      var didWarnOnInvalidCallback = new Set();

      warnOnInvalidCallback$1 = function (callback, callerName) {
        if (callback === null || typeof callback === 'function') {
          return;
        }

        var key = callerName + '_' + callback;

        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      };

      warnOnUndefinedDerivedState = function (type, partialState) {
        if (partialState === undefined) {
          var componentName = getComponentName(type) || 'Component';

          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
          }
        }
      }; // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.


      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function () {
          invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
        }
      });
      Object.freeze(fakeInternalInstance);
    }

    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState;
      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Invoke the function an extra time to help detect side-effects.
          getDerivedStateFromProps(nextProps, prevState);
        }
      }
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        warnOnUndefinedDerivedState(ctor, partialState);
      } // Merge the partial state and the previous state.

      var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
      // base state.

      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
        updateQueue.baseState = memoizedState;
      }
    }

    var classComponentUpdater = {
      isMounted: isMounted,
      enqueueSetState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'setState');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueReplaceState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.tag = ReplaceState;
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'replaceState');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueForceUpdate: function (inst, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.tag = ForceUpdate;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'forceUpdate');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      }
    };

    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress.stateNode;

      if (typeof instance.shouldComponentUpdate === 'function') {
        startPhaseTimer(workInProgress, 'shouldComponentUpdate');
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        stopPhaseTimer();
        {
          !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
        }
        return shouldUpdate;
      }

      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }

      return true;
    }

    function checkClassInstance(workInProgress, ctor, newProps) {
      var instance = workInProgress.stateNode;
      {
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;

        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === 'function') {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
          } else {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
          }
        }

        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
        var noInstancePropTypes = !instance.propTypes;
        !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
        var noInstanceContextType = !instance.contextType;
        !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
        var noInstanceContextTypes = !instance.contextTypes;
        !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
          didWarnAboutContextTypeAndContextTypes.add(ctor);
          warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
        }

        var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
        !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;

        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
          warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
        }

        var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
        !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
        var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
        !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
        var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
        !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
        var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
        !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
        var hasMutatedProps = instance.props !== newProps;
        !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
        var noInstanceDefaultProps = !instance.defaultProps;
        !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
        }

        var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
        !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
        !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
        !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
        var _state = instance.state;

        if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
          warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
        }

        if (typeof instance.getChildContext === 'function') {
          !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
        }
      }
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

      set(instance, workInProgress);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }

    function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = null;
      var contextType = ctor.contextType;
      {
        if ('contextType' in ctor) {
          var isValid = // Allow null for conditional declaration
          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = '';

            if (contextType === undefined) {
              addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
            } else if (typeof contextType !== 'object') {
              addendum = ' However, it is set to a ' + typeof contextType + '.';
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = ' Did you accidentally pass the Context.Provider instead?';
            } else if (contextType._context !== undefined) {
              // <Context.Consumer>
              addendum = ' Did you accidentally pass the Context.Consumer instead?';
            } else {
              addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
            }

            warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
          }
        }
      }

      if (typeof contextType === 'object' && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
      } // Instantiate twice to help detect side-effects.


      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          new ctor(props, context); // eslint-disable-line no-new
        }
      }
      var instance = new ctor(props, context);
      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
      adoptClassInstance(workInProgress, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
          var componentName = getComponentName(ctor) || 'Component';

          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
          }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.


        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;

          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = 'componentWillMount';
          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
          }

          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = 'componentWillReceiveProps';
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
          }

          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = 'componentWillUpdate';
          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
          }

          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentName(ctor) || 'Component';

            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
            }
          }
        }
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // ReactFiberContext usually updates this cache but can't for newly-created instances.

      if (isLegacyContextConsumer) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return instance;
    }

    function callComponentWillMount(workInProgress, instance) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      var oldState = instance.state;

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();

      if (oldState !== instance.state) {
        {
          warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
      var oldState = instance.state;
      startPhaseTimer(workInProgress, 'componentWillReceiveProps');

      if (typeof instance.componentWillReceiveProps === 'function') {
        instance.componentWillReceiveProps(newProps, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }

      stopPhaseTimer();

      if (instance.state !== oldState) {
        {
          var componentName = getComponentName(workInProgress.type) || 'Component';

          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    } // Invokes the mount life-cycles on a previously never rendered instance.


    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      {
        checkClassInstance(workInProgress, ctor, newProps);
      }
      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      var contextType = ctor.contextType;

      if (typeof contextType === 'object' && contextType !== null) {
        instance.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
      }

      {
        if (instance.state === newProps) {
          var componentName = getComponentName(ctor) || 'Component';

          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
        }
      }
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress.memoizedState;
      } // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.


      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
        // process them now.

        updateQueue = workInProgress.updateQueue;

        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }
      }

      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
    }

    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = void 0;

      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillMount');

          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        } // If shouldComponentUpdate returned false, we should still update the
        // memoized state to indicate that this work can be reused.


        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      } // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.


      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.


    function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = void 0;

      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillUpdate');

          if (typeof instance.componentWillUpdate === 'function') {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }

          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidUpdate === 'function') {
          workInProgress.effectTag |= Update;
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          workInProgress.effectTag |= Snapshot;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        } // If shouldComponentUpdate returned false, we should still update the
        // memoized props/state to indicate that this work can be reused.


        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      } // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.


      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }

    var didWarnAboutMaps = void 0;
    var didWarnAboutGenerators = void 0;
    var didWarnAboutStringRefInStrictMode = void 0;
    var ownerHasKeyUseWarning = void 0;
    var ownerHasFunctionTypeWarning = void 0;

    var warnForMissingKey = function (child) {};

    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefInStrictMode = {};
      /**
       * Warn if there's no key explicitly set on dynamic arrays of children or
       * object keys are not valid. This allows us to keep track of children between
       * updates.
       */

      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};

      warnForMissingKey = function (child) {
        if (child === null || typeof child !== 'object') {
          return;
        }

        if (!child._store || child._store.validated || child.key != null) {
          return;
        }

        !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        child._store.validated = true;
        var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
      };
    }
    var isArray = Array.isArray;

    function coerceRef(returnFiber, current$$1, element) {
      var mixedRef = element.ref;

      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
        {
          if (returnFiber.mode & StrictMode) {
            var componentName = getComponentName(returnFiber.type) || 'Component';

            if (!didWarnAboutStringRefInStrictMode[componentName]) {
              warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
              didWarnAboutStringRefInStrictMode[componentName] = true;
            }
          }
        }

        if (element._owner) {
          var owner = element._owner;
          var inst = void 0;

          if (owner) {
            var ownerFiber = owner;
            !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs. Did you mean to use React.forwardRef()?') : void 0;
            inst = ownerFiber.stateNode;
          }

          !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
          var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

          if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
            return current$$1.ref;
          }

          var ref = function (value) {
            var refs = inst.refs;

            if (refs === emptyRefsObject) {
              // This is a lazy pooled frozen object, so we need to initialize.
              refs = inst.refs = {};
            }

            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };

          ref._stringRef = stringRef;
          return ref;
        } else {
          !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
          !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
        }
      }

      return mixedRef;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
        }
        invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
      }
    }

    function warnOnFunctionType() {
      var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

      if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
      warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.


    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        } // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.


        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }

        childToDelete.nextEffect = null;
        childToDelete.effectTag = Deletion;
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        } // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.


        var childToDelete = currentFirstChild;

        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }

        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        var existingChildren = new Map();
        var existingChild = currentFirstChild;

        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }

          existingChild = existingChild.sibling;
        }

        return existingChildren;
      }

      function useFiber(fiber, pendingProps, expirationTime) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;

        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }

        var current$$1 = newFiber.alternate;

        if (current$$1 !== null) {
          var oldIndex = current$$1.index;

          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        }
      }

      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.effectTag = Placement;
        }

        return newFiber;
      }

      function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostText) {
          // Insert
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateElement(returnFiber, current$$1, element, expirationTime) {
        if (current$$1 !== null && current$$1.elementType === element.type) {
          // Move based on index
          var existing = useFiber(current$$1, element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, current$$1, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          // Insert
          var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
          created.ref = coerceRef(returnFiber, current$$1, element);
          created.return = returnFiber;
          return created;
        }
      }

      function updatePortal(returnFiber, current$$1, portal, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
        if (current$$1 === null || current$$1.tag !== Fragment) {
          // Insert
          var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, fragment, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function createChild(returnFiber, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }

            case REACT_PORTAL_TYPE:
              {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                _created2.return = returnFiber;
                return _created2;
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

            _created3.return = returnFiber;
            return _created3;
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
        // Update the fiber if the keys match, otherwise return null.
        var key = oldFiber !== null ? oldFiber.key : null;

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }

          return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }

                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }

            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }

            return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                }

                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }

            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;

            return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }
      /**
       * Warns if there is a duplicate or missing key
       */


      function warnOnInvalidKey(child, knownKeys) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }

          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child);
              var key = child.key;

              if (typeof key !== 'string') {
                break;
              }

              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }

              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }

              warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
              break;

            default:
              break;
          }
        }
        return knownKeys;
      }

      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
        // This algorithm can't optimize by searching from both ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.
        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.
        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.
        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.
        {
          // First, validate keys.
          var knownKeys = null;

          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;

        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

            if (!_newFiber) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }

            previousNewFiber = _newFiber;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

          if (_newFiber2) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }

            previousNewFiber = _newFiber2;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.
        var iteratorFn = getIteratorFn(newChildrenIterable);
        !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        {
          // We don't support rendering Generators because it's a mutation.
          // See https://github.com/facebook/react/issues/12995
          if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === 'Generator') {
            !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
            didWarnAboutGenerators = true;
          } // Warn about using Maps as children


          if (newChildrenIterable.entries === iteratorFn) {
            !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
            didWarnAboutMaps = true;
          } // First, validate keys.
          // We'll get a different iterator later for the main pass.


          var _newChildren = iteratorFn.call(newChildrenIterable);

          if (_newChildren) {
            var knownKeys = null;

            var _step = _newChildren.next();

            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();

        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (!oldFiber) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

            if (_newFiber3 === null) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }

            previousNewFiber = _newFiber3;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }

            previousNewFiber = _newFiber4;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        } // The existing first child is not a text node so we need to create one
        // and delete the existing ones.


        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      }

      function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
        var key = element.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
              existing.ref = coerceRef(returnFiber, child, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }

      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
        var key = portal.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || [], expirationTime);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      } // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.


      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.
        // Handle top level unkeyed fragments as if they were arrays.
        // This leads to an ambiguity between <>{[...]}</> and <>...</>.
        // We treat the ambiguous cases above the same.
        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        } // Handle object types


        var isObject = typeof newChild === 'object' && newChild !== null;

        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
          }
        }

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
        }

        if (isArray(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent:
              {
                {
                  var instance = returnFiber.stateNode;

                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            // Intentionally fall through to the next case, which handles both
            // functions and classes
            // eslint-disable-next-lined no-fallthrough

            case FunctionComponent:
              {
                var Component = returnFiber.type;
                invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
              }
          }
        } // Remaining cases are all treated as empty.


        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);

    function cloneChildFibers(current$$1, workInProgress) {
      !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

      if (workInProgress.child === null) {
        return;
      }

      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
      workInProgress.child = newChild;
      newChild.return = workInProgress;

      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        newChild.return = workInProgress;
      }

      newChild.sibling = null;
    }

    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);

    function requiredContext(c) {
      !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      return c;
    }

    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }

    function pushHostContainer(fiber, nextRootInstance) {
      // Push current root instance onto the stack;
      // This allows us to reset root when portals are popped.
      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.

      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
      // However, we can't just call getRootHostContext() and push it because
      // we'd have a different number of entries on the stack depending on
      // whether getRootHostContext() throws somewhere in renderer code or not.
      // So we push an empty value first. This lets us safely unwind on errors.

      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }

    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }

    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }

    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

      if (context === nextContext) {
        return;
      } // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.


      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }

    function popHostContext(fiber) {
      // Do not pop unless this Fiber provided the current context.
      // pushHostContext() only pushes Fibers that provide unique contexts.
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }

      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }

    var NoEffect$1 =
    /*             */
    0;
    var UnmountSnapshot =
    /*      */
    2;
    var UnmountMutation =
    /*      */
    4;
    var MountMutation =
    /*        */
    8;
    var UnmountLayout =
    /*        */
    16;
    var MountLayout =
    /*          */
    32;
    var MountPassive =
    /*         */
    64;
    var UnmountPassive =
    /*       */
    128;
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var didWarnAboutMismatchedHooksForComponent = void 0;
    {
      didWarnAboutMismatchedHooksForComponent = new Set();
    } // These are set right before calling the component.

    var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.

    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.

    var currentHook = null;
    var nextCurrentHook = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var nextWorkInProgressHook = null;
    var remainingExpirationTime = NoWork;
    var componentUpdateQueue = null;
    var sideEffectTag = 0; // Updates scheduled during render will trigger an immediate re-render at the
    // end of the current pass. We can't store these updates on the normal queue,
    // because if the work is aborted, they should be discarded. Because this is
    // a relatively rare case, we also don't want to add an additional field to
    // either the hook or queue object types. So we store them in a lazily create
    // map of queue -> render-phase updates, which are discarded once the component
    // completes without re-rendering.
    // Whether an update was scheduled during the currently executing render pass.

    var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

    var renderPhaseUpdates = null; // Counter to prevent infinite loops.

    var numberOfReRenders = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.

    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;

    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;

        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }

    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;

        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;

          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }

    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);

        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);

          if (hookTypesDev !== null) {
            var table = '';
            var secondColumnStart = 30;

            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + '. ' + oldHookName; // Extra space so second column lines up
              // lol @ IE not supporting String#repeat

              while (row.length < secondColumnStart) {
                row += ' ';
              }

              row += newHookName + '\n';
              table += row;
            }

            warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
          }
        }
      }
    }

    function throwInvalidHookError() {
      invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.');
    }

    function areHookInputsEqual(nextDeps, prevDeps) {
      if (prevDeps === null) {
        {
          warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
        }
        return false;
      }

      {
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) {
          warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, '[' + nextDeps.join(', ') + ']', '[' + prevDeps.join(', ') + ']');
        }
      }

      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (is(nextDeps[i], prevDeps[i])) {
          continue;
        }

        return false;
      }

      return true;
    }

    function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
      renderExpirationTime = nextRenderExpirationTime;
      currentlyRenderingFiber$1 = workInProgress;
      nextCurrentHook = current !== null ? current.memoizedState : null;
      {
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
      } // The following should have already been reset
      // currentHook = null;
      // workInProgressHook = null;
      // remainingExpirationTime = NoWork;
      // componentUpdateQueue = null;
      // didScheduleRenderPhaseUpdate = false;
      // renderPhaseUpdates = null;
      // numberOfReRenders = 0;
      // sideEffectTag = 0;
      // TODO Warn if no hooks are used at all during mount, then some are used during update.
      // Currently we will identify the update render as a mount because nextCurrentHook === null.
      // This is tricky because it's valid for certain types of components (e.g. React.lazy)
      // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
      // Non-stateful hooks (e.g. context) don't get added to memoizedState,
      // so nextCurrentHook would be null during updates and mounts.

      {
        if (nextCurrentHook !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          // This dispatcher handles an edge case where a component is updating,
          // but no stateful hooks have been used.
          // We want to match the production code behavior (which will use HooksDispatcherOnMount),
          // but with the extra DEV validation to ensure hooks ordering hasn't changed.
          // This dispatcher does that.
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, refOrContext);

      if (didScheduleRenderPhaseUpdate) {
        do {
          didScheduleRenderPhaseUpdate = false;
          numberOfReRenders += 1; // Start over from the beginning of the list

          nextCurrentHook = current !== null ? current.memoizedState : null;
          nextWorkInProgressHook = firstWorkInProgressHook;
          currentHook = null;
          workInProgressHook = null;
          componentUpdateQueue = null;
          {
            // Also validate hook order for cascading updates.
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          children = Component(props, refOrContext);
        } while (didScheduleRenderPhaseUpdate);

        renderPhaseUpdates = null;
        numberOfReRenders = 0;
      } // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.


      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      var renderedWork = currentlyRenderingFiber$1;
      renderedWork.memoizedState = firstWorkInProgressHook;
      renderedWork.expirationTime = remainingExpirationTime;
      renderedWork.updateQueue = componentUpdateQueue;
      renderedWork.effectTag |= sideEffectTag;
      {
        renderedWork._debugHookTypes = hookTypesDev;
      } // This check uses currentHook so that it works the same in DEV and prod bundles.
      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderExpirationTime = NoWork;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      nextCurrentHook = null;
      firstWorkInProgressHook = null;
      workInProgressHook = null;
      nextWorkInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
      }
      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;
      sideEffectTag = 0; // These were reset above
      // didScheduleRenderPhaseUpdate = false;
      // renderPhaseUpdates = null;
      // numberOfReRenders = 0;

      !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;
      return children;
    }

    function bailoutHooks(current, workInProgress, expirationTime) {
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.effectTag &= ~(Passive | Update);

      if (current.expirationTime <= expirationTime) {
        current.expirationTime = NoWork;
      }
    }

    function resetHooks() {
      // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This is used to reset the state of this module when a component throws.
      // It's also called inside mountIndeterminateComponent if we determine the
      // component is a module-style component.

      renderExpirationTime = NoWork;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      nextCurrentHook = null;
      firstWorkInProgressHook = null;
      workInProgressHook = null;
      nextWorkInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
      }
      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;
      sideEffectTag = 0;
      didScheduleRenderPhaseUpdate = false;
      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        queue: null,
        baseUpdate: null,
        next: null
      };

      if (workInProgressHook === null) {
        // This is the first hook in the list
        firstWorkInProgressHook = workInProgressHook = hook;
      } else {
        // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
      }

      return workInProgressHook;
    }

    function updateWorkInProgressHook() {
      // This function is used both for updates and for re-renders triggered by a
      // render phase update. It assumes there is either a current hook we can
      // clone, or a work-in-progress hook from a previous render pass that we can
      // use as a base. When we reach the end of the base list, we must switch to
      // the dispatcher used for mounts.
      if (nextWorkInProgressHook !== null) {
        // There's already a work-in-progress. Reuse it.
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
        nextCurrentHook = currentHook !== null ? currentHook.next : null;
      } else {
        // Clone from the current hook.
        !(nextCurrentHook !== null) ? invariant(false, 'Rendered more hooks than during the previous render.') : void 0;
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          queue: currentHook.queue,
          baseUpdate: currentHook.baseUpdate,
          next: null
        };

        if (workInProgressHook === null) {
          // This is the first hook in the list.
          workInProgressHook = firstWorkInProgressHook = newHook;
        } else {
          // Append to the end of the list.
          workInProgressHook = workInProgressHook.next = newHook;
        }

        nextCurrentHook = currentHook.next;
      }

      return workInProgressHook;
    }

    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null
      };
    }

    function basicStateReducer(state, action) {
      return typeof action === 'function' ? action(state) : action;
    }

    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      var initialState = void 0;

      if (init !== undefined) {
        initialState = init(initialArg);
      } else {
        initialState = initialArg;
      }

      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
      currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }

    function updateReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      !(queue !== null) ? invariant(false, 'Should have a queue. This is likely a bug in React. Please file an issue.') : void 0;
      queue.lastRenderedReducer = reducer;

      if (numberOfReRenders > 0) {
        // This is a re-render. Apply the new render phase updates to the previous
        var _dispatch = queue.dispatch;

        if (renderPhaseUpdates !== null) {
          // Render phase updates are stored in a map of queue -> linked list
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

          if (firstRenderPhaseUpdate !== undefined) {
            renderPhaseUpdates.delete(queue);
            var newState = hook.memoizedState;
            var update = firstRenderPhaseUpdate;

            do {
              // Process this render phase update. We don't have to check the
              // priority because it will always be the same as the current
              // render's.
              var _action = update.action;
              newState = reducer(newState, _action);
              update = update.next;
            } while (update !== null); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.


            if (!is(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }

            hook.memoizedState = newState; // Don't persist the state accumlated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.

            if (hook.baseUpdate === queue.last) {
              hook.baseState = newState;
            }

            queue.lastRenderedState = newState;
            return [newState, _dispatch];
          }
        }

        return [hook.memoizedState, _dispatch];
      } // The last update in the entire queue


      var last = queue.last; // The last update that is part of the base state.

      var baseUpdate = hook.baseUpdate;
      var baseState = hook.baseState; // Find the first unprocessed update.

      var first = void 0;

      if (baseUpdate !== null) {
        if (last !== null) {
          // For the first update, the queue is a circular linked list where
          // `queue.last.next = queue.first`. Once the first update commits, and
          // the `baseUpdate` is no longer empty, we can unravel the list.
          last.next = null;
        }

        first = baseUpdate.next;
      } else {
        first = last !== null ? last.next : null;
      }

      if (first !== null) {
        var _newState = baseState;
        var newBaseState = null;
        var newBaseUpdate = null;
        var prevUpdate = baseUpdate;
        var _update = first;
        var didSkip = false;

        do {
          var updateExpirationTime = _update.expirationTime;

          if (updateExpirationTime < renderExpirationTime) {
            // Priority is insufficient. Skip this update. If this is the first
            // skipped update, the previous update/state is the new base
            // update/state.
            if (!didSkip) {
              didSkip = true;
              newBaseUpdate = prevUpdate;
              newBaseState = _newState;
            } // Update the remaining priority in the queue.


            if (updateExpirationTime > remainingExpirationTime) {
              remainingExpirationTime = updateExpirationTime;
            }
          } else {
            // Process this update.
            if (_update.eagerReducer === reducer) {
              // If this update was processed eagerly, and its reducer matches the
              // current reducer, we can use the eagerly computed state.
              _newState = _update.eagerState;
            } else {
              var _action2 = _update.action;
              _newState = reducer(_newState, _action2);
            }
          }

          prevUpdate = _update;
          _update = _update.next;
        } while (_update !== null && _update !== first);

        if (!didSkip) {
          newBaseUpdate = prevUpdate;
          newBaseState = _newState;
        } // Mark that the fiber performed work, but only if the new state is
        // different from the current state.


        if (!is(_newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }

        hook.memoizedState = _newState;
        hook.baseUpdate = newBaseUpdate;
        hook.baseState = newBaseState;
        queue.lastRenderedState = _newState;
      }

      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }

    function mountState(initialState) {
      var hook = mountWorkInProgressHook();

      if (typeof initialState === 'function') {
        initialState = initialState();
      }

      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
      currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }

    function updateState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    }

    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag: tag,
        create: create,
        destroy: destroy,
        deps: deps,
        // Circular
        next: null
      };

      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var _lastEffect = componentUpdateQueue.lastEffect;

        if (_lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = _lastEffect.next;
          _lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }

      return effect;
    }

    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      var ref = {
        current: initialValue
      };
      {
        Object.seal(ref);
      }
      hook.memoizedState = ref;
      return ref;
    }

    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }

    function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      sideEffectTag |= fiberEffectTag;
      hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
    }

    function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var destroy = undefined;

      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;

        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            pushEffect(NoEffect$1, create, destroy, nextDeps);
            return;
          }
        }
      }

      sideEffectTag |= fiberEffectTag;
      hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
    }

    function mountEffect(create, deps) {
      return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }

    function updateEffect(create, deps) {
      return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }

    function mountLayoutEffect(create, deps) {
      return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }

    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }

    function imperativeHandleEffect(create, ref) {
      if (typeof ref === 'function') {
        var refCallback = ref;

        var _inst = create();

        refCallback(_inst);
        return function () {
          refCallback(null);
        };
      } else if (ref !== null && ref !== undefined) {
        var refObject = ref;
        {
          !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
        }

        var _inst2 = create();

        refObject.current = _inst2;
        return function () {
          refObject.current = null;
        };
      }
    }

    function mountImperativeHandle(ref, create, deps) {
      {
        !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
      } // TODO: If deps are provided, should we skip comparing the ref itself?

      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }

    function updateImperativeHandle(ref, create, deps) {
      {
        !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
      } // TODO: If deps are provided, should we skip comparing the ref itself?

      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }

    function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
      // The react-debug-hooks package injects its own implementation
      // so that e.g. DevTools can display custom hook values.
    }

    var updateDebugValue = mountDebugValue;

    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }

    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;

      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }

      hook.memoizedState = [callback, nextDeps];
      return callback;
    }

    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }

    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;

      if (prevState !== null) {
        // Assume these are defined. If they're not, areHookInputsEqual will warn.
        if (nextDeps !== null) {
          var prevDeps = prevState[1];

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }

      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    } // in a test-like environment, we want to warn if dispatchAction()
    // is called outside of a batchedUpdates/TestUtils.act(...) call.


    var shouldWarnForUnbatchedSetState = false;
    {
      // jest isn't a 'global', it's just exposed to tests via a wrapped function
      // further, this isn't a test file, so flow doesn't recognize the symbol. So...
      // $FlowExpectedError - because requirements don't give a damn about your type sigs.
      if ('undefined' !== typeof jest) {
        shouldWarnForUnbatchedSetState = true;
      }
    }

    function dispatchAction(fiber, queue, action) {
      !(numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;
      {
        !(arguments.length <= 3) ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
      }
      var alternate = fiber.alternate;

      if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdate = true;
        var update = {
          expirationTime: renderExpirationTime,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };

        if (renderPhaseUpdates === null) {
          renderPhaseUpdates = new Map();
        }

        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (firstRenderPhaseUpdate === undefined) {
          renderPhaseUpdates.set(queue, update);
        } else {
          // Append the update to the end of the list.
          var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

          while (lastRenderPhaseUpdate.next !== null) {
            lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          }

          lastRenderPhaseUpdate.next = update;
        }
      } else {
        flushPassiveEffects();
        var currentTime = requestCurrentTime();

        var _expirationTime = computeExpirationForFiber(currentTime, fiber);

        var _update2 = {
          expirationTime: _expirationTime,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        }; // Append the update to the end of the list.

        var _last = queue.last;

        if (_last === null) {
          // This is the first update. Create a circular list.
          _update2.next = _update2;
        } else {
          var first = _last.next;

          if (first !== null) {
            // Still circular.
            _update2.next = first;
          }

          _last.next = _update2;
        }

        queue.last = _update2;

        if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
          // The queue is currently empty, which means we can eagerly compute the
          // next state before entering the render phase. If the new state is the
          // same as the current state, we may be able to bail out entirely.
          var _lastRenderedReducer = queue.lastRenderedReducer;

          if (_lastRenderedReducer !== null) {
            var prevDispatcher = void 0;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }

            try {
              var currentState = queue.lastRenderedState;

              var _eagerState = _lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
              // it, on the update object. If the reducer hasn't changed by the
              // time we enter the render phase, then the eager state can be used
              // without calling the reducer again.


              _update2.eagerReducer = _lastRenderedReducer;
              _update2.eagerState = _eagerState;

              if (is(_eagerState, currentState)) {
                // Fast path. We can bail out without scheduling React to re-render.
                // It's still possible that we'll need to rebase this update later,
                // if the component re-renders for a different reason and by that
                // time the reducer has changed.
                return;
              }
            } catch (error) {// Suppress the error. It will throw again in the render phase.
            } finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }

        {
          if (shouldWarnForUnbatchedSetState === true) {
            warnIfNotCurrentlyBatchingInDev(fiber);
          }
        }
        scheduleWork(fiber, _expirationTime);
      }
    }

    var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    {
      var warnInvalidContextAccess = function () {
        warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      };

      var warnInvalidHookAccess = function () {
        warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
      };

      HooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          mountHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return updateRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return updateDebugValue(value, formatterFn);
        }
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue(value, formatterFn);
        }
      };
    }
    var commitTime = 0;
    var profilerStartTime = -1;

    function getCommitTime() {
      return commitTime;
    }

    function recordCommitTime() {
      if (!enableProfilerTimer) {
        return;
      }

      commitTime = scheduler.unstable_now();
    }

    function startProfilerTimer(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = scheduler.unstable_now();

      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = scheduler.unstable_now();
      }
    }

    function stopProfilerTimerIfRunning(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = -1;
    }

    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (!enableProfilerTimer) {
        return;
      }

      if (profilerStartTime >= 0) {
        var elapsedTime = scheduler.unstable_now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;

        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }

        profilerStartTime = -1;
      }
    } // The deepest Fiber on the stack involved in a hydration context.
    // This may have been an insertion or a hydration.


    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;

    function enterHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChild(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      return true;
    }

    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var suspenseInstance = fiber.stateNode;
      nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
      popToNextHostParent(fiber);
      isHydrating = true;
      return true;
    }

    function deleteHydratableInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot:
            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
            break;

          case HostComponent:
            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
            break;
        }
      }
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
      // these children are not part of the reconciliation list of children.
      // Even if we abort and rereconcile the children, that will try to hydrate
      // again and the nodes are still in the host tree so these will be
      // recreated.

      if (returnFiber.lastEffect !== null) {
        returnFiber.lastEffect.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
    }

    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.effectTag |= Placement;
      {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;

              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type, props);
                  break;

                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;

                case SuspenseComponent:
                  break;
              }

              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;

              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                  break;

                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;

                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                  break;
              }

              break;
            }

          default:
            return;
        }
      }
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent:
          {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type, props);

            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }

            return false;
          }

        case HostText:
          {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);

            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }

            return false;
          }

        case SuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

              if (suspenseInstance !== null) {
                // Downgrade the tag to a dehydrated component until we've hydrated it.
                fiber.tag = DehydratedSuspenseComponent;
                fiber.stateNode = suspenseInstance;
                return true;
              }
            }

            return false;
          }

        default:
          return false;
      }
    }

    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }

      var nextInstance = nextHydratableInstance;

      if (!nextInstance) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }

      var firstAttemptedInstance = nextInstance;

      if (!tryHydrate(fiber, nextInstance)) {
        // If we can't hydrate this instance let's try the next one.
        // We use this as a heuristic. It's based on intuition and not data so it
        // might be flawed or unnecessary.
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);

        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        } // We matched the next one, we'll now assume that the first one was
        // superfluous and we'll delete it. Since we can't eagerly delete it
        // we'll have to schedule a deletion. To do that, this node needs a dummy
        // fiber associated with it.


        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
      }

      hydrationParentFiber = fiber;
      nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }

    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      if (!supportsHydration) {
        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var instance = fiber.stateNode;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

      fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update.

      if (updatePayload !== null) {
        return true;
      }

      return false;
    }

    function prepareToHydrateHostTextInstance(fiber) {
      if (!supportsHydration) {
        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      {
        if (shouldUpdate) {
          // We assume that prepareToHydrateHostTextInstance is called in a context where the
          // hydration parent is the parent host component of this host text.
          var returnFiber = hydrationParentFiber;

          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
            }
          }
        }
      }
      return shouldUpdate;
    }

    function skipPastDehydratedSuspenseInstance(fiber) {
      if (!supportsHydration) {
        invariant(false, 'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var suspenseInstance = fiber.stateNode;
      !suspenseInstance ? invariant(false, 'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }

    function popToNextHostParent(fiber) {
      var parent = fiber.return;

      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== DehydratedSuspenseComponent) {
        parent = parent.return;
      }

      hydrationParentFiber = parent;
    }

    function popHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      if (fiber !== hydrationParentFiber) {
        // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
      }

      if (!isHydrating) {
        // If we're not currently hydrating but we're in a hydration context, then
        // we were an insertion and now need to pop up reenter hydration of our
        // siblings.
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }

      var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
      // We only do this deeper than head and body since they tend to have random
      // other nodes in them. We also ignore components with pure text content in
      // side of them.
      // TODO: Better heuristic.

      if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
        var nextInstance = nextHydratableInstance;

        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }

      popToNextHostParent(fiber);
      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      return true;
    }

    function resetHydrationState() {
      if (!supportsHydration) {
        return;
      }

      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
    }

    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass = void 0;
    var didWarnAboutContextTypeOnFunctionComponent = void 0;
    var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
    var didWarnAboutFunctionRefs = void 0;
    var didWarnAboutReassigningProps = void 0;
    {
      didWarnAboutBadClass = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
    }

    function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      if (current$$1 === null) {
        // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
      }
    }

    function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      // This function is fork of reconcileChildren. It's used in cases where we
      // want to reconcile without matching against the existing set. This has the
      // effect of all current children being unmounted; even if the type and key
      // are the same, the old child is unmounted and a new child is created.
      //
      // To do this, we're going to go through the reconcile algorithm twice. In
      // the first pass, we schedule a deletion for all the current children by
      // passing null.
      workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
      // pass null in place of where we usually pass the current child set. This has
      // the effect of remounting all children regardless of whether their their
      // identity matches.

      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    }

    function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens after the first render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var render = Component.render;
      var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);

        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Only double-render components with Hooks
          if (workInProgress.memoizedState !== null) {
            nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
          }
        }

        setCurrentPhase(null);
      }

      if (current$$1 !== null && !didReceiveUpdate) {
        bailoutHooks(current$$1, workInProgress, renderExpirationTime);
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      if (current$$1 === null) {
        var type = Component.type;

        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        Component.defaultProps === undefined) {
          // If this is a plain function component without default props,
          // and with only the default shallow comparison, we upgrade it
          // to a SimpleMemoComponent to allow fast path updates.
          workInProgress.tag = SimpleMemoComponent;
          workInProgress.type = type;
          {
            validateFunctionComponentInDev(workInProgress, type);
          }
          return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
        }

        {
          var innerPropTypes = type.propTypes;

          if (innerPropTypes) {
            // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(type), getCurrentFiberStackInDev);
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
        child.ref = workInProgress.ref;
        child.return = workInProgress;
        workInProgress.child = child;
        return child;
      }

      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;

        if (_innerPropTypes) {
          // Inner memo component props aren't currently validated in createElement.
          // We could move it there, but we'd still need this for lazy code path.
          checkPropTypes(_innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(_type), getCurrentFiberStackInDev);
        }
      }
      var currentChild = current$$1.child; // This is always exactly one child

      if (updateExpirationTime < renderExpirationTime) {
        // This will be the props with resolved defaultProps,
        // unlike current.memoizedProps which will be the unresolved ones.
        var prevProps = currentChild.memoizedProps; // Default to shallow comparison

        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;

        if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
      newChild.ref = workInProgress.ref;
      newChild.return = workInProgress;
      workInProgress.child = newChild;
      return newChild;
    }

    function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens when the inner render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var outerMemoType = workInProgress.elementType;

          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            // We warn when you define propTypes on lazy()
            // so let's just skip over it to find memo() outer wrapper.
            // Inner props for memo are validated later.
            outerMemoType = refineResolvedLazyComponent(outerMemoType);
          }

          var outerPropTypes = outerMemoType && outerMemoType.propTypes;

          if (outerPropTypes) {
            checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
            'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
          } // Inner propTypes will be validated in the function component path.

        }
      }

      if (current$$1 !== null) {
        var prevProps = current$$1.memoizedProps;

        if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          didReceiveUpdate = false;

          if (updateExpirationTime < renderExpirationTime) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        }
      }

      return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
    }

    function updateFragment(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMode(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
      if (enableProfilerTimer) {
        workInProgress.effectTag |= Update;
      }

      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markRef(current$$1, workInProgress) {
      var ref = workInProgress.ref;

      if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
        // Schedule a Ref effect
        workInProgress.effectTag |= Ref;
      }
    }

    function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
      var context = getMaskedContext(workInProgress, unmaskedContext);
      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);

        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Only double-render components with Hooks
          if (workInProgress.memoizedState !== null) {
            nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
          }
        }

        setCurrentPhase(null);
      }

      if (current$$1 !== null && !didReceiveUpdate) {
        bailoutHooks(current$$1, workInProgress, renderExpirationTime);
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      } // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.

      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      var instance = workInProgress.stateNode;
      var shouldUpdate = void 0;

      if (instance === null) {
        if (current$$1 !== null) {
          // An class component without an instance only mounts if it suspended
          // inside a non- concurrent tree, in an inconsistent state. We want to
          // tree it like a new mount, even though an empty version of it already
          // committed. Disconnect the alternate pointers.
          current$$1.alternate = null;
          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

          workInProgress.effectTag |= Placement;
        } // In the initial pass we might need to construct the instance.


        constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        shouldUpdate = true;
      } else if (current$$1 === null) {
        // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      } else {
        shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
      }

      var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
      {
        var inst = workInProgress.stateNode;

        if (inst.props !== nextProps) {
          !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }

    function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
      // Refs should update even if shouldComponentUpdate returns false
      markRef(current$$1, workInProgress);
      var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

      if (!shouldUpdate && !didCaptureError) {
        // Context providers should defer to sCU for rendering
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, false);
        }

        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var instance = workInProgress.stateNode; // Rerender

      ReactCurrentOwner$3.current = workInProgress;
      var nextChildren = void 0;

      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
        // If we captured an error, but getDerivedStateFrom catch is not defined,
        // unmount all the children. componentDidCatch will schedule an update to
        // re-render a fallback. This is temporary until we migrate everyone to
        // the new API.
        // TODO: Warn in a future release.
        nextChildren = null;

        if (enableProfilerTimer) {
          stopProfilerTimerIfRunning(workInProgress);
        }
      } else {
        {
          setCurrentPhase('render');
          nextChildren = instance.render();

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            instance.render();
          }

          setCurrentPhase(null);
        }
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;

      if (current$$1 !== null && didCaptureError) {
        // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      } // Memoize state using the values we just used to render.
      // TODO: Restructure so we never read values from the instance.


      workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, true);
      }

      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;

      if (root.pendingContext) {
        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
      } else if (root.context) {
        // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
      }

      pushHostContainer(workInProgress, root.containerInfo);
    }

    function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
      pushHostRootContext(workInProgress);
      var updateQueue = workInProgress.updateQueue;
      !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
      var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
      // being called "element".

      var nextChildren = nextState.element;

      if (nextChildren === prevChildren) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var root = workInProgress.stateNode;

      if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.
        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement; // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.

        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        resetHydrationState();
      }

      return workInProgress.child;
    }

    function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContext(workInProgress);

      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }

      var type = workInProgress.type;
      var nextProps = workInProgress.pendingProps;
      var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);

      if (isDirectTextChild) {
        // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also have access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.effectTag |= ContentReset;
      }

      markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

      if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
        // Schedule this fiber to re-render at offscreen priority. Then bailout.
        workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
        return null;
      }

      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateHostText(current$$1, workInProgress) {
      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      } // Nothing to do here. This is terminal. We'll do the completion step
      // immediately after.


      return null;
    }

    function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
      if (_current !== null) {
        // An lazy component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
      // Cancel and resume right after we know the tag.

      cancelWorkTimer(workInProgress);
      var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

      workInProgress.type = Component;
      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
      startWorkTimer(workInProgress);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child = void 0;

      switch (resolvedTag) {
        case FunctionComponent:
          {
            {
              validateFunctionComponentInDev(workInProgress, Component);
            }
            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case ClassComponent:
          {
            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case ForwardRef:
          {
            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case MemoComponent:
          {
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = Component.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                  'prop', getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
            updateExpirationTime, renderExpirationTime);
            break;
          }

        default:
          {
            var hint = '';
            {
              if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = ' Did you wrap a component in React.lazy() more than once?';
              }
            } // This message intentionally doesn't mention ForwardRef or MemoComponent
            // because the fact that it's a separate type of work is an
            // implementation detail.

            invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Lazy element type must resolve to a class or function.%s', Component, hint);
          }
      }

      return child;
    }

    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
      if (_current !== null) {
        // An incomplete component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      } // Promote the fiber to a class and try rendering again.


      workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.

      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
    }

    function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
      if (_current !== null) {
        // An indeterminate component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps;
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
      var context = getMaskedContext(workInProgress, unmaskedContext);
      prepareToReadContext(workInProgress, renderExpirationTime);
      var value = void 0;
      {
        if (Component.prototype && typeof Component.prototype.render === 'function') {
          var componentName = getComponentName(Component) || 'Unknown';

          if (!didWarnAboutBadClass[componentName]) {
            warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        }

        ReactCurrentOwner$3.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;

      if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        // Proceed under the assumption that this is a class instance
        workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

        resetHooks(); // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.

        var hasContext = false;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
        }

        adoptClassInstance(workInProgress, value);
        mountClassInstance(workInProgress, Component, props, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
      } else {
        // Proceed under the assumption that this is a function component
        workInProgress.tag = FunctionComponent;
        {
          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            // Only double-render components with Hooks
            if (workInProgress.memoizedState !== null) {
              value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
            }
          }
        }
        reconcileChildren(null, workInProgress, value, renderExpirationTime);
        {
          validateFunctionComponentInDev(workInProgress, Component);
        }
        return workInProgress.child;
      }
    }

    function validateFunctionComponentInDev(workInProgress, Component) {
      if (Component) {
        !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
      }

      if (workInProgress.ref !== null) {
        var info = '';
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();

        if (ownerName) {
          info += '\n\nCheck the render method of `' + ownerName + '`.';
        }

        var warningKey = ownerName || workInProgress._debugID || '';
        var debugSource = workInProgress._debugSource;

        if (debugSource) {
          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
        }

        if (!didWarnAboutFunctionRefs[warningKey]) {
          didWarnAboutFunctionRefs[warningKey] = true;
          warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
        }
      }

      if (typeof Component.getDerivedStateFromProps === 'function') {
        var componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {
          warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', componentName);
          didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;
        }
      }

      if (typeof Component.contextType === 'object' && Component.contextType !== null) {
        var _componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName]) {
          warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName);
          didWarnAboutContextTypeOnFunctionComponent[_componentName] = true;
        }
      }
    }

    function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      var mode = workInProgress.mode;
      var nextProps = workInProgress.pendingProps; // We should attempt to render the primary children unless this boundary
      // already suspended during this render (`alreadyCaptured` is true).

      var nextState = workInProgress.memoizedState;
      var nextDidTimeout = void 0;

      if ((workInProgress.effectTag & DidCapture) === NoEffect) {
        // This is the first attempt.
        nextState = null;
        nextDidTimeout = false;
      } else {
        // Something in this boundary's subtree already suspended. Switch to
        // rendering the fallback children.
        nextState = {
          timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
        };
        nextDidTimeout = true;
        workInProgress.effectTag &= ~DidCapture;
      } // This next part is a bit confusing. If the children timeout, we switch to
      // showing the fallback children in place of the "primary" children.
      // However, we don't want to delete the primary children because then their
      // state will be lost (both the React state and the host state, e.g.
      // uncontrolled form inputs). Instead we keep them mounted and hide them.
      // Both the fallback children AND the primary children are rendered at the
      // same time. Once the primary children are un-suspended, we can delete
      // the fallback children — don't need to preserve their state.
      //
      // The two sets of children are siblings in the host environment, but
      // semantically, for purposes of reconciliation, they are two separate sets.
      // So we store them using two fragment fibers.
      //
      // However, we want to avoid allocating extra fibers for every placeholder.
      // They're only necessary when the children time out, because that's the
      // only time when both sets are mounted.
      //
      // So, the extra fragment fibers are only used if the children time out.
      // Otherwise, we render the primary children directly. This requires some
      // custom reconciliation logic to preserve the state of the primary
      // children. It's essentially a very basic form of re-parenting.
      // `child` points to the child fiber. In the normal case, this is the first
      // fiber of the primary children set. In the timed-out case, it's a
      // a fragment fiber containing the primary children.


      var child = void 0; // `next` points to the next fiber React should render. In the normal case,
      // it's the same as `child`: the first fiber of the primary children set.
      // In the timed-out case, it's a fragment fiber containing the *fallback*
      // children -- we skip over the primary children entirely.

      var next = void 0;

      if (current$$1 === null) {
        if (enableSuspenseServerRenderer) {
          // If we're currently hydrating, try to hydrate this boundary.
          // But only if this has a fallback.
          if (nextProps.fallback !== undefined) {
            tryToClaimNextHydratableInstance(workInProgress); // This could've changed the tag if this was a dehydrated suspense component.

            if (workInProgress.tag === DehydratedSuspenseComponent) {
              return updateDehydratedSuspenseComponent(null, workInProgress, renderExpirationTime);
            }
          }
        } // This is the initial mount. This branch is pretty simple because there's
        // no previous state that needs to be preserved.


        if (nextDidTimeout) {
          // Mount separate fragments for primary and fallback children.
          var nextFallbackChildren = nextProps.fallback;
          var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);

          if ((workInProgress.mode & ConcurrentMode) === NoContext) {
            // Outside of concurrent mode, we commit the effects from the
            var progressedState = workInProgress.memoizedState;
            var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
            primaryChildFragment.child = progressedPrimaryChild;
          }

          var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
          primaryChildFragment.sibling = fallbackChildFragment;
          child = primaryChildFragment; // Skip the primary children, and continue working on the
          // fallback children.

          next = fallbackChildFragment;
          child.return = next.return = workInProgress;
        } else {
          // Mount the primary children without an intermediate fragment fiber.
          var nextPrimaryChildren = nextProps.children;
          child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
        }
      } else {
        // This is an update. This branch is more complicated because we need to
        // ensure the state of the primary children is preserved.
        var prevState = current$$1.memoizedState;
        var prevDidTimeout = prevState !== null;

        if (prevDidTimeout) {
          // The current tree already timed out. That means each child set is
          var currentPrimaryChildFragment = current$$1.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

          if (nextDidTimeout) {
            // Still timed out. Reuse the current primary children by cloning
            // its fragment. We're going to skip over these entirely.
            var _nextFallbackChildren = nextProps.fallback;

            var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

            if ((workInProgress.mode & ConcurrentMode) === NoContext) {
              // Outside of concurrent mode, we commit the effects from the
              var _progressedState = workInProgress.memoizedState;

              var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

              if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                _primaryChildFragment.child = _progressedPrimaryChild;
              }
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var treeBaseDuration = 0;
              var hiddenChild = _primaryChildFragment.child;

              while (hiddenChild !== null) {
                treeBaseDuration += hiddenChild.treeBaseDuration;
                hiddenChild = hiddenChild.sibling;
              }

              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
            } // Clone the fallback child fragment, too. These we'll continue
            // working on.


            var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);

            child = _primaryChildFragment;
            _primaryChildFragment.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
            // fallback children.

            next = _fallbackChildFragment;
            child.return = next.return = workInProgress;
          } else {
            // No longer suspended. Switch back to showing the primary children,
            // and remove the intermediate fragment fiber.
            var _nextPrimaryChildren = nextProps.children;
            var currentPrimaryChild = currentPrimaryChildFragment.child;
            var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
            // children. Wait until the complete phase, after we've confirmed the
            // fallback is no longer needed.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode?
            // Continue rendering the children, like we normally do.

            child = next = primaryChild;
          }
        } else {
          // The current tree has not already timed out. That means the primary
          // children are not wrapped in a fragment fiber.
          var _currentPrimaryChild = current$$1.child;

          if (nextDidTimeout) {
            // Timed out. Wrap the children in a fragment fiber to keep them
            // separate from the fallback children.
            var _nextFallbackChildren2 = nextProps.fallback;

            var _primaryChildFragment2 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
            // going to render this fragment.
            null, mode, NoWork, null);

            _primaryChildFragment2.child = _currentPrimaryChild; // Even though we're creating a new fiber, there are no new children,
            // because we're reusing an already mounted tree. So we don't need to
            // schedule a placement.
            // primaryChildFragment.effectTag |= Placement;

            if ((workInProgress.mode & ConcurrentMode) === NoContext) {
              // Outside of concurrent mode, we commit the effects from the
              var _progressedState2 = workInProgress.memoizedState;

              var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

              _primaryChildFragment2.child = _progressedPrimaryChild2;
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var _treeBaseDuration = 0;
              var _hiddenChild = _primaryChildFragment2.child;

              while (_hiddenChild !== null) {
                _treeBaseDuration += _hiddenChild.treeBaseDuration;
                _hiddenChild = _hiddenChild.sibling;
              }

              _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
            } // Create a fragment from the fallback children, too.


            var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);

            _fallbackChildFragment2.effectTag |= Placement;
            child = _primaryChildFragment2;
            _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
            // fallback children.

            next = _fallbackChildFragment2;
            child.return = next.return = workInProgress;
          } else {
            // Still haven't timed out.  Continue rendering the children, like we
            // normally do.
            var _nextPrimaryChildren2 = nextProps.children;
            next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
          }
        }

        workInProgress.stateNode = current$$1.stateNode;
      }

      workInProgress.memoizedState = nextState;
      workInProgress.child = child;
      return next;
    }

    function updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      if (current$$1 === null) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        workInProgress.expirationTime = Never;
        return null;
      } // We use childExpirationTime to indicate that a child might depend on context, so if
      // any context has changed, we need to treat is as if the input might have changed.


      var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;

      if (didReceiveUpdate || hasContextChanged$$1) {
        // This boundary has changed since the first render. This means that we are now unable to
        // hydrate it. We might still be able to hydrate it using an earlier expiration time but
        // during this render we can't. Instead, we're going to delete the whole subtree and
        // instead inject a new real Suspense boundary to take its place, which may render content
        // or fallback. The real Suspense boundary will suspend for a while so we have some time
        // to ensure it can produce real content, but all state and pending events will be lost.
        // Detach from the current dehydrated boundary.
        current$$1.alternate = null;
        workInProgress.alternate = null; // Insert a deletion in the effect list.

        var returnFiber = workInProgress.return;
        !(returnFiber !== null) ? invariant(false, 'Suspense boundaries are never on the root. This is probably a bug in React.') : void 0;
        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = current$$1;
          returnFiber.lastEffect = current$$1;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
        }

        current$$1.nextEffect = null;
        current$$1.effectTag = Deletion; // Upgrade this work in progress to a real Suspense component.

        workInProgress.tag = SuspenseComponent;
        workInProgress.stateNode = null;
        workInProgress.memoizedState = null; // This is now an insertion.

        workInProgress.effectTag |= Placement; // Retry as a real Suspense component.

        return updateSuspenseComponent(null, workInProgress, renderExpirationTime);
      }

      if ((workInProgress.effectTag & DidCapture) === NoEffect) {
        // This is the first attempt.
        reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        return workInProgress.child;
      } else {
        // Something suspended. Leave the existing children in place.
        // TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
        workInProgress.child = null;
        return null;
      }
    }

    function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      var nextChildren = workInProgress.pendingProps;

      if (current$$1 === null) {
        // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      }

      return workInProgress.child;
    }

    function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
      var providerType = workInProgress.type;
      var context = providerType._context;
      var newProps = workInProgress.pendingProps;
      var oldProps = workInProgress.memoizedProps;
      var newValue = newProps.value;
      {
        var providerPropTypes = workInProgress.type.propTypes;

        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
        }
      }
      pushProvider(workInProgress, newValue);

      if (oldProps !== null) {
        var oldValue = oldProps.value;
        var changedBits = calculateChangedBits(context, newValue, oldValue);

        if (changedBits === 0) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && !hasContextChanged()) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        } else {
          // The context value changed. Search for matching consumers and schedule
          // them to update.
          propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
        }
      }

      var newChildren = newProps.children;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    var hasWarnedAboutUsingContextAsConsumer = false;

    function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
      var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
      // DEV mode, we create a separate object for Context.Consumer that acts
      // like a proxy to Context. This proxy object adds unnecessary code in PROD
      // so we use the old behaviour (Context.Consumer references Context) to
      // reduce size and overhead. The separate object references context via
      // a property called "_context", which also gives us the ability to check
      // in DEV mode if this property exists or not and warn if it does not.

      {
        if (context._context === undefined) {
          // This may be because it's a Context (rather than a Consumer).
          // Or it may be because it's older React where they're the same thing.
          // We only want to warn if we're sure it's a new React.
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress.pendingProps;
      var render = newProps.children;
      {
        !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
      }
      prepareToReadContext(workInProgress, renderExpirationTime);
      var newValue = readContext(context, newProps.unstable_observedBits);
      var newChildren = void 0;
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        newChildren = render(newValue);
        setCurrentPhase(null);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }

    function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
      cancelWorkTimer(workInProgress);

      if (current$$1 !== null) {
        // Reuse previous context list
        workInProgress.contextDependencies = current$$1.contextDependencies;
      }

      if (enableProfilerTimer) {
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning(workInProgress);
      } // Check if the children have any pending work.


      var childExpirationTime = workInProgress.childExpirationTime;

      if (childExpirationTime < renderExpirationTime) {
        // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
      } else {
        // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current$$1, workInProgress);
        return workInProgress.child;
      }
    }

    function beginWork(current$$1, workInProgress, renderExpirationTime) {
      var updateExpirationTime = workInProgress.expirationTime;

      if (current$$1 !== null) {
        var oldProps = current$$1.memoizedProps;
        var newProps = workInProgress.pendingProps;

        if (oldProps !== newProps || hasContextChanged()) {
          // If props or context changed, mark the fiber as having performed work.
          // This may be unset if the props are determined to be equal later (memo).
          didReceiveUpdate = true;
        } else if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
          // the begin phase. There's still some bookkeeping we that needs to be done
          // in this optimized path, mostly pushing stuff onto the stack.

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              resetHydrationState();
              break;

            case HostComponent:
              pushHostContext(workInProgress);
              break;

            case ClassComponent:
              {
                var Component = workInProgress.type;

                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress);
                }

                break;
              }

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case ContextProvider:
              {
                var newValue = workInProgress.memoizedProps.value;
                pushProvider(workInProgress, newValue);
                break;
              }

            case Profiler:
              if (enableProfilerTimer) {
                workInProgress.effectTag |= Update;
              }

              break;

            case SuspenseComponent:
              {
                var state = workInProgress.memoizedState;
                var didTimeout = state !== null;

                if (didTimeout) {
                  // If this boundary is currently timed out, we need to decide
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

                  if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                  } else {
                    // The primary children do not have pending work with sufficient
                    // priority. Bailout.
                    var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);

                    if (child !== null) {
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                }

                break;
              }

            case DehydratedSuspenseComponent:
              {
                if (enableSuspenseServerRenderer) {
                  // We know that this component will suspend again because if it has
                  // been unsuspended it has committed as a regular Suspense component.
                  // If it needs to be retried, it should have work scheduled on it.
                  workInProgress.effectTag |= DidCapture;
                  break;
                }
              }
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      } else {
        didReceiveUpdate = false;
      } // Before entering the begin phase, clear the expiration time.


      workInProgress.expirationTime = NoWork;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          {
            var elementType = workInProgress.elementType;
            return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
          }

        case LazyComponent:
          {
            var _elementType = workInProgress.elementType;
            return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
          }

        case FunctionComponent:
          {
            var _Component = workInProgress.type;
            var unresolvedProps = workInProgress.pendingProps;
            var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
          }

        case ClassComponent:
          {
            var _Component2 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;

            var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

            return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
          }

        case HostRoot:
          return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

        case HostComponent:
          return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

        case HostText:
          return updateHostText(current$$1, workInProgress);

        case SuspenseComponent:
          return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

        case HostPortal:
          return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

        case ForwardRef:
          {
            var type = workInProgress.type;
            var _unresolvedProps2 = workInProgress.pendingProps;

            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

            return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
          }

        case Fragment:
          return updateFragment(current$$1, workInProgress, renderExpirationTime);

        case Mode:
          return updateMode(current$$1, workInProgress, renderExpirationTime);

        case Profiler:
          return updateProfiler(current$$1, workInProgress, renderExpirationTime);

        case ContextProvider:
          return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

        case ContextConsumer:
          return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

        case MemoComponent:
          {
            var _type2 = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = _type2.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                  'prop', getComponentName(_type2), getCurrentFiberStackInDev);
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
          }

        case SimpleMemoComponent:
          {
            return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
          }

        case IncompleteClassComponent:
          {
            var _Component3 = workInProgress.type;
            var _unresolvedProps4 = workInProgress.pendingProps;

            var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

            return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              return updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
            }

            break;
          }
      }

      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }

    var valueCursor = createCursor(null);
    var rendererSigil = void 0;
    {
      // Use this to detect multiple renderers using the same context
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;

    function resetContextDependences() {
      // This is called right before React yields execution, to ensure `readContext`
      // cannot be called outside the render phase.
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }

    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }

    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }

    function pushProvider(providerFiber, nextValue) {
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer = rendererSigil;
        }
      } else {
        push(valueCursor, context._currentValue2, providerFiber);
        context._currentValue2 = nextValue;
        {
          !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer2 = rendererSigil;
        }
      }
    }

    function popProvider(providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        context._currentValue = currentValue;
      } else {
        context._currentValue2 = currentValue;
      }
    }

    function calculateChangedBits(context, newValue, oldValue) {
      if (is(oldValue, newValue)) {
        // No change
        return 0;
      } else {
        var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;
        {
          !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
        }
        return changedBits | 0;
      }
    }

    function scheduleWorkOnParentPath(parent, renderExpirationTime) {
      // Update the child expiration time of all the ancestors, including
      // the alternates.
      var node = parent;

      while (node !== null) {
        var alternate = node.alternate;

        if (node.childExpirationTime < renderExpirationTime) {
          node.childExpirationTime = renderExpirationTime;

          if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
            alternate.childExpirationTime = renderExpirationTime;
          }
        } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
          alternate.childExpirationTime = renderExpirationTime;
        } else {
          // Neither alternate was updated, which means the rest of the
          // ancestor path already has sufficient priority.
          break;
        }

        node = node.return;
      }
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      var fiber = workInProgress.child;

      if (fiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
      }

      while (fiber !== null) {
        var nextFiber = void 0; // Visit this fiber.

        var list = fiber.contextDependencies;

        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.first;

          while (dependency !== null) {
            // Check if the context matches.
            if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
              // Match! Schedule an update on this fiber.
              if (fiber.tag === ClassComponent) {
                // Schedule a force update on the work-in-progress.
                var update = createUpdate(renderExpirationTime);
                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                // update to the current fiber, too, which means it will persist even if
                // this render is thrown away. Since it's a race condition, not sure it's
                // worth fixing.

                enqueueUpdate(fiber, update);
              }

              if (fiber.expirationTime < renderExpirationTime) {
                fiber.expirationTime = renderExpirationTime;
              }

              var alternate = fiber.alternate;

              if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                alternate.expirationTime = renderExpirationTime;
              }

              scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

              if (list.expirationTime < renderExpirationTime) {
                list.expirationTime = renderExpirationTime;
              } // Since we already found a match, we can stop traversing the
              // dependency list.


              break;
            }

            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          // Don't scan deeper if this is a matching provider
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedSuspenseComponent) {
          // If a dehydrated suspense component is in this subtree, we don't know
          // if it will have any context consumers in it. The best we can do is
          // mark it as having updates on its children.
          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var _alternate = fiber.alternate;

          if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
            _alternate.expirationTime = renderExpirationTime;
          } // This is intentionally passing this fiber as the parent
          // because we want to schedule this fiber as having work
          // on its children. We'll use the childExpirationTime on
          // this fiber to indicate that a context has changed.


          scheduleWorkOnParentPath(fiber, renderExpirationTime);
          nextFiber = fiber.sibling;
        } else {
          // Traverse down.
          nextFiber = fiber.child;
        }

        if (nextFiber !== null) {
          // Set the return pointer of the child to the work-in-progress fiber.
          nextFiber.return = fiber;
        } else {
          // No child. Traverse to next sibling.
          nextFiber = fiber;

          while (nextFiber !== null) {
            if (nextFiber === workInProgress) {
              // We're back to the root of this subtree. Exit.
              nextFiber = null;
              break;
            }

            var sibling = nextFiber.sibling;

            if (sibling !== null) {
              // Set the return pointer of the sibling to the work-in-progress fiber.
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            } // No more siblings. Traverse up.


            nextFiber = nextFiber.return;
          }
        }

        fiber = nextFiber;
      }
    }

    function prepareToReadContext(workInProgress, renderExpirationTime) {
      currentlyRenderingFiber = workInProgress;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      var currentDependencies = workInProgress.contextDependencies;

      if (currentDependencies !== null && currentDependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      workInProgress.contextDependencies = null;
    }

    function readContext(context, observedBits) {
      {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
      }

      if (lastContextWithAllBitsObserved === context) {// Nothing to do. We already observe everything in this context.
      } else if (observedBits === false || observedBits === 0) {// Do not observe any updates.
      } else {
        var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.

        if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
          // Observe all updates.
          lastContextWithAllBitsObserved = context;
          resolvedObservedBits = maxSigned31BitInt;
        } else {
          resolvedObservedBits = observedBits;
        }

        var contextItem = {
          context: context,
          observedBits: resolvedObservedBits,
          next: null
        };

        if (lastContextDependency === null) {
          !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().') : void 0; // This is the first dependency for this component. Create a new list.

          lastContextDependency = contextItem;
          currentlyRenderingFiber.contextDependencies = {
            first: contextItem,
            expirationTime: NoWork
          };
        } else {
          // Append a new context item.
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }

      return isPrimaryRenderer ? context._currentValue : context._currentValue2;
    } // UpdateQueue is a linked list of prioritized updates.
    //
    // Like fibers, update queues come in pairs: a current queue, which represents
    // the visible state of the screen, and a work-in-progress queue, which can be
    // mutated and processed asynchronously before it is committed — a form of
    // double buffering. If a work-in-progress render is discarded before finishing,
    // we create a new work-in-progress by cloning the current queue.
    //
    // Both queues share a persistent, singly-linked list structure. To schedule an
    // update, we append it to the end of both queues. Each queue maintains a
    // pointer to first update in the persistent list that hasn't been processed.
    // The work-in-progress pointer always has a position equal to or greater than
    // the current queue, since we always work on that one. The current queue's
    // pointer is only updated during the commit phase, when we swap in the
    // work-in-progress.
    //
    // For example:
    //
    //   Current pointer:           A - B - C - D - E - F
    //   Work-in-progress pointer:              D - E - F
    //                                          ^
    //                                          The work-in-progress queue has
    //                                          processed more updates than current.
    //
    // The reason we append to both queues is because otherwise we might drop
    // updates without ever processing them. For example, if we only add updates to
    // the work-in-progress queue, some updates could be lost whenever a work-in
    // -progress render restarts by cloning from current. Similarly, if we only add
    // updates to the current queue, the updates will be lost whenever an already
    // in-progress queue commits and swaps with the current queue. However, by
    // adding to both queues, we guarantee that the update will be part of the next
    // work-in-progress. (And because the work-in-progress queue becomes the
    // current queue once it commits, there's no danger of applying the same
    // update twice.)
    //
    // Prioritization
    // --------------
    //
    // Updates are not sorted by priority, but by insertion; new updates are always
    // appended to the end of the list.
    //
    // The priority is still important, though. When processing the update queue
    // during the render phase, only the updates with sufficient priority are
    // included in the result. If we skip an update because it has insufficient
    // priority, it remains in the queue to be processed later, during a lower
    // priority render. Crucially, all updates subsequent to a skipped update also
    // remain in the queue *regardless of their priority*. That means high priority
    // updates are sometimes processed twice, at two separate priorities. We also
    // keep track of a base state, that represents the state before the first
    // update in the queue is applied.
    //
    // For example:
    //
    //   Given a base state of '', and the following queue of updates
    //
    //     A1 - B2 - C1 - D2
    //
    //   where the number indicates the priority, and the update is applied to the
    //   previous state by appending a letter, React will process these updates as
    //   two separate renders, one per distinct priority level:
    //
    //   First render, at priority 1:
    //     Base state: ''
    //     Updates: [A1, C1]
    //     Result state: 'AC'
    //
    //   Second render, at priority 2:
    //     Base state: 'A'            <-  The base state does not include C1,
    //                                    because B2 was skipped.
    //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
    //     Result state: 'ABCD'
    //
    // Because we process updates in insertion order, and rebase high priority
    // updates when preceding updates are skipped, the final result is deterministic
    // regardless of priority. Intermediate state may vary according to system
    // resources, but the final state is always the same.


    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.

    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate = void 0;
    var currentlyProcessingQueue = void 0;
    var resetCurrentlyProcessingQueue = void 0;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;

      resetCurrentlyProcessingQueue = function () {
        currentlyProcessingQueue = null;
      };
    }

    function createUpdateQueue(baseState) {
      var queue = {
        baseState: baseState,
        firstUpdate: null,
        lastUpdate: null,
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function cloneUpdateQueue(currentQueue) {
      var queue = {
        baseState: currentQueue.baseState,
        firstUpdate: currentQueue.firstUpdate,
        lastUpdate: currentQueue.lastUpdate,
        // TODO: With resuming, if we bail out and resuse the child tree, we should
        // keep these effects.
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function createUpdate(expirationTime) {
      return {
        expirationTime: expirationTime,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null,
        nextEffect: null
      };
    }

    function appendUpdateToQueue(queue, update) {
      // Append the update to the end of the list.
      if (queue.lastUpdate === null) {
        // Queue is empty
        queue.firstUpdate = queue.lastUpdate = update;
      } else {
        queue.lastUpdate.next = update;
        queue.lastUpdate = update;
      }
    }

    function enqueueUpdate(fiber, update) {
      // Update queues are created lazily.
      var alternate = fiber.alternate;
      var queue1 = void 0;
      var queue2 = void 0;

      if (alternate === null) {
        // There's only one fiber.
        queue1 = fiber.updateQueue;
        queue2 = null;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        }
      } else {
        // There are two owners.
        queue1 = fiber.updateQueue;
        queue2 = alternate.updateQueue;

        if (queue1 === null) {
          if (queue2 === null) {
            // Neither fiber has an update queue. Create new ones.
            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
            queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
          } else {
            // Only one fiber has an update queue. Clone to create a new one.
            queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
          }
        } else {
          if (queue2 === null) {
            // Only one fiber has an update queue. Clone to create a new one.
            queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
          } else {// Both owners have an update queue.
          }
        }
      }

      if (queue2 === null || queue1 === queue2) {
        // There's only a single queue.
        appendUpdateToQueue(queue1, update);
      } else {
        // There are two queues. We need to append the update to both queues,
        // while accounting for the persistent structure of the list — we don't
        // want the same update to be added multiple times.
        if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
          // One of the queues is not empty. We must add the update to both queues.
          appendUpdateToQueue(queue1, update);
          appendUpdateToQueue(queue2, update);
        } else {
          // Both queues are non-empty. The last update is the same in both lists,
          // because of structural sharing. So, only append to one of the lists.
          appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

          queue2.lastUpdate = update;
        }
      }

      {
        if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
          warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
          didWarnUpdateInsideUpdate = true;
        }
      }
    }

    function enqueueCapturedUpdate(workInProgress, update) {
      // Captured updates go into a separate list, and only on the work-in-
      // progress queue.
      var workInProgressQueue = workInProgress.updateQueue;

      if (workInProgressQueue === null) {
        workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
      } else {
        // TODO: I put this here rather than createWorkInProgress so that we don't
        // clone the queue unnecessarily. There's probably a better way to
        // structure this.
        workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
      } // Append the update to the end of the list.


      if (workInProgressQueue.lastCapturedUpdate === null) {
        // This is the first render phase update
        workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
      } else {
        workInProgressQueue.lastCapturedUpdate.next = update;
        workInProgressQueue.lastCapturedUpdate = update;
      }
    }

    function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
      var current = workInProgress.alternate;

      if (current !== null) {
        // If the work-in-progress queue is equal to the current queue,
        // we need to clone it first.
        if (queue === current.updateQueue) {
          queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
        }
      }

      return queue;
    }

    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState:
          {
            var _payload = update.payload;

            if (typeof _payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();

                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload.call(instance, prevState, nextProps);
                }
              }

              var nextState = _payload.call(instance, prevState, nextProps);

              {
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            } // State object


            return _payload;
          }

        case CaptureUpdate:
          {
            workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
          }
        // Intentional fallthrough

        case UpdateState:
          {
            var _payload2 = update.payload;
            var partialState = void 0;

            if (typeof _payload2 === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();

                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload2.call(instance, prevState, nextProps);
                }
              }
              partialState = _payload2.call(instance, prevState, nextProps);
              {
                exitDisallowedContextReadInDEV();
              }
            } else {
              // Partial state object
              partialState = _payload2;
            }

            if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
              return prevState;
            } // Merge the partial state and the previous state.


            return _assign({}, prevState, partialState);
          }

        case ForceUpdate:
          {
            hasForceUpdate = true;
            return prevState;
          }
      }

      return prevState;
    }

    function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
      hasForceUpdate = false;
      queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
      {
        currentlyProcessingQueue = queue;
      } // These values may change as we process the queue.

      var newBaseState = queue.baseState;
      var newFirstUpdate = null;
      var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

      var update = queue.firstUpdate;
      var resultState = newBaseState;

      while (update !== null) {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstUpdate === null) {
            // This is the first skipped update. It will be the first update in
            // the new list.
            newFirstUpdate = update; // Since this is the first update that was skipped, the current result
            // is the new base state.

            newBaseState = resultState;
          } // Since this update will remain in the list, update the remaining
          // expiration time.


          if (newExpirationTime < updateExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback = update.callback;

          if (_callback !== null) {
            workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

            update.nextEffect = null;

            if (queue.lastEffect === null) {
              queue.firstEffect = queue.lastEffect = update;
            } else {
              queue.lastEffect.nextEffect = update;
              queue.lastEffect = update;
            }
          }
        } // Continue to the next update.


        update = update.next;
      } // Separately, iterate though the list of captured updates.


      var newFirstCapturedUpdate = null;
      update = queue.firstCapturedUpdate;

      while (update !== null) {
        var _updateExpirationTime = update.expirationTime;

        if (_updateExpirationTime < renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstCapturedUpdate === null) {
            // This is the first skipped captured update. It will be the first
            // update in the new list.
            newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
            // the new base state.

            if (newFirstUpdate === null) {
              newBaseState = resultState;
            }
          } // Since this update will remain in the list, update the remaining
          // expiration time.


          if (newExpirationTime < _updateExpirationTime) {
            newExpirationTime = _updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback2 = update.callback;

          if (_callback2 !== null) {
            workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

            update.nextEffect = null;

            if (queue.lastCapturedEffect === null) {
              queue.firstCapturedEffect = queue.lastCapturedEffect = update;
            } else {
              queue.lastCapturedEffect.nextEffect = update;
              queue.lastCapturedEffect = update;
            }
          }
        }

        update = update.next;
      }

      if (newFirstUpdate === null) {
        queue.lastUpdate = null;
      }

      if (newFirstCapturedUpdate === null) {
        queue.lastCapturedUpdate = null;
      } else {
        workInProgress.effectTag |= Callback;
      }

      if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
        // We processed every update, without skipping. That means the new base
        // state is the same as the result state.
        newBaseState = resultState;
      }

      queue.baseState = newBaseState;
      queue.firstUpdate = newFirstUpdate;
      queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
      // This should be fine because the only two other things that contribute to
      // expiration time are props and context. We're already in the middle of the
      // begin phase by the time we start processing the queue, so we've already
      // dealt with the props. Context in components that specify
      // shouldComponentUpdate is tricky; but we'll have to account for
      // that regardless.

      workInProgress.expirationTime = newExpirationTime;
      workInProgress.memoizedState = resultState;
      {
        currentlyProcessingQueue = null;
      }
    }

    function callCallback(callback, context) {
      !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
      callback.call(context);
    }

    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }

    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }

    function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
      // If the finished render included captured updates, and there are still
      // lower priority updates left over, we need to keep the captured updates
      // in the queue so that they are rebased and not dropped once we process the
      // queue again at the lower priority.
      if (finishedQueue.firstCapturedUpdate !== null) {
        // Join the captured update list to the end of the normal list.
        if (finishedQueue.lastUpdate !== null) {
          finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
          finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
        } // Clear the list of captured updates.


        finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
      } // Commit the effects


      commitUpdateEffects(finishedQueue.firstEffect, instance);
      finishedQueue.firstEffect = finishedQueue.lastEffect = null;
      commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
      finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    }

    function commitUpdateEffects(effect, instance) {
      while (effect !== null) {
        var _callback3 = effect.callback;

        if (_callback3 !== null) {
          effect.callback = null;
          callCallback(_callback3, instance);
        }

        effect = effect.nextEffect;
      }
    }

    function createCapturedValue(value, source) {
      // If the value is an error, call this function immediately after it is thrown
      // so the stack is accurate.
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }

    function markUpdate(workInProgress) {
      // Tag the fiber with an update effect. This turns a Placement into
      // a PlacementAndUpdate.
      workInProgress.effectTag |= Update;
    }

    function markRef$1(workInProgress) {
      workInProgress.effectTag |= Ref;
    }

    var appendAllChildren = void 0;
    var updateHostContainer = void 0;
    var updateHostComponent$1 = void 0;
    var updateHostText$1 = void 0;

    if (supportsMutation) {
      // Mutation mode
      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      };

      updateHostContainer = function (workInProgress) {// Noop
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;

        if (oldProps === newProps) {
          // In mutation mode, this is sufficient for a bailout because
          // we won't touch this node even if children changed.
          return;
        } // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.


        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.

        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.

        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    } else if (supportsPersistence) {
      // Persistent host tree mode
      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          // eslint-disable-next-line no-labels
          branches: if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (needsVisibilityToggle) {
              var props = node.memoizedProps;
              var type = node.type;

              if (isHidden) {
                // This child is inside a timed out tree. Hide it.
                instance = cloneHiddenInstance(instance, type, props, node);
              } else {
                // This child was previously inside a timed out tree. If it was not
                // updated during this render, it may need to be unhidden. Clone
                // again to be sure.
                instance = cloneUnhiddenInstance(instance, type, props, node);
              }

              node.stateNode = instance;
            }

            appendInitialChild(parent, instance);
          } else if (node.tag === HostText) {
            var _instance = node.stateNode;

            if (needsVisibilityToggle) {
              var text = node.memoizedProps;
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();

              if (isHidden) {
                _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              } else {
                _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              }

              node.stateNode = _instance;
            }

            appendInitialChild(parent, _instance);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.tag === SuspenseComponent) {
            var current = node.alternate;

            if (current !== null) {
              var oldState = current.memoizedState;
              var newState = node.memoizedState;
              var oldIsHidden = oldState !== null;
              var newIsHidden = newState !== null;

              if (oldIsHidden !== newIsHidden) {
                // The placeholder either just timed out or switched back to the normal
                // children after having previously timed out. Toggle the visibility of
                // the direct host children.
                var primaryChildParent = newIsHidden ? node.child : node;

                if (primaryChildParent !== null) {
                  appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                } // eslint-disable-next-line no-labels


                break branches;
              }
            }

            if (node.child !== null) {
              // Continue traversing like normal
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          } // $FlowFixMe This is correct but Flow is confused by the labeled break.


          node = node;

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }; // An unfortunate fork of appendAllChildren because we have two different parent types.


      var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          // eslint-disable-next-line no-labels
          branches: if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (needsVisibilityToggle) {
              var props = node.memoizedProps;
              var type = node.type;

              if (isHidden) {
                // This child is inside a timed out tree. Hide it.
                instance = cloneHiddenInstance(instance, type, props, node);
              } else {
                // This child was previously inside a timed out tree. If it was not
                // updated during this render, it may need to be unhidden. Clone
                // again to be sure.
                instance = cloneUnhiddenInstance(instance, type, props, node);
              }

              node.stateNode = instance;
            }

            appendChildToContainerChildSet(containerChildSet, instance);
          } else if (node.tag === HostText) {
            var _instance2 = node.stateNode;

            if (needsVisibilityToggle) {
              var text = node.memoizedProps;
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();

              if (isHidden) {
                _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              } else {
                _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              }

              node.stateNode = _instance2;
            }

            appendChildToContainerChildSet(containerChildSet, _instance2);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.tag === SuspenseComponent) {
            var current = node.alternate;

            if (current !== null) {
              var oldState = current.memoizedState;
              var newState = node.memoizedState;
              var oldIsHidden = oldState !== null;
              var newIsHidden = newState !== null;

              if (oldIsHidden !== newIsHidden) {
                // The placeholder either just timed out or switched back to the normal
                // children after having previously timed out. Toggle the visibility of
                // the direct host children.
                var primaryChildParent = newIsHidden ? node.child : node;

                if (primaryChildParent !== null) {
                  appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                } // eslint-disable-next-line no-labels


                break branches;
              }
            }

            if (node.child !== null) {
              // Continue traversing like normal
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          } // $FlowFixMe This is correct but Flow is confused by the labeled break.


          node = node;

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      };

      updateHostContainer = function (workInProgress) {
        var portalOrRoot = workInProgress.stateNode;
        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged) {// No changes, just reuse the existing instance.
        } else {
          var container = portalOrRoot.containerInfo;
          var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

          appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
          portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

          markUpdate(workInProgress);
          finalizeContainerChildren(container, newChildSet);
        }
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        var currentInstance = current.stateNode;
        var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
        // This guarantees that we can reuse all of them.

        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged && oldProps === newProps) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
          return;
        }

        var recyclableInstance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = null;

        if (oldProps !== newProps) {
          updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        }

        if (childrenUnchanged && updatePayload === null) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
          return;
        }

        var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

        if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
          markUpdate(workInProgress);
        }

        workInProgress.stateNode = newInstance;

        if (childrenUnchanged) {
          // If there are no other effects in this tree, we need to flag this node as having one.
          // Even though we're not going to use it for anything.
          // Otherwise parents won't know that there are new children to propagate upwards.
          markUpdate(workInProgress);
        } else {
          // If children might have changed, we have to add them all to the set.
          appendAllChildren(newInstance, workInProgress, false, false);
        }
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          // If the text content differs, we'll create a new text instance for it.
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
          // This lets the parents know that at least one of their children has changed.

          markUpdate(workInProgress);
        }
      };
    } else {
      // No host operations
      updateHostContainer = function (workInProgress) {// Noop
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
      };
    }

    function completeWork(current, workInProgress, renderExpirationTime) {
      var newProps = workInProgress.pendingProps;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          break;

        case LazyComponent:
          break;

        case SimpleMemoComponent:
        case FunctionComponent:
          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var fiberRoot = workInProgress.stateNode;

            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }

            if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
              popHydrationState(workInProgress); // This resets the hacky state to fix isMounted before committing.
              // TODO: Delete this when we delete isMounted and findDOMNode.

              workInProgress.effectTag &= ~Placement;
            }

            updateHostContainer(workInProgress);
            break;
          }

        case HostComponent:
          {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;

            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.

                break;
              }

              var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
              // "stack" as the parent. Then append children as we go in beginWork
              // or completeWork depending on we want to add then top->down or
              // bottom->up. Top->down is faster in IE11.

              var wasHydrated = popHydrationState(workInProgress);

              if (wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  // If changes to the hydrated node needs to be applied at the
                  // commit-phase we mark this as such.
                  markUpdate(workInProgress);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                appendAllChildren(instance, workInProgress, false, false); // Certain renderers require commit-time effects for initial mount.
                // (eg DOM renderer supports auto-focus for certain elements).
                // Make sure such renderers get scheduled for later work.

                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = instance;
              }

              if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                markRef$1(workInProgress);
              }
            }

            break;
          }

        case HostText:
          {
            var newText = newProps;

            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
              // to schedule a side-effect to do the updates.

              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== 'string') {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.
              }

              var _rootContainerInstance = getRootHostContainer();

              var _currentHostContext = getHostContext();

              var _wasHydrated = popHydrationState(workInProgress);

              if (_wasHydrated) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
              }
            }

            break;
          }

        case ForwardRef:
          break;

        case SuspenseComponent:
          {
            var nextState = workInProgress.memoizedState;

            if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
              // Something suspended. Re-render with the fallback children.
              workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

              return workInProgress;
            }

            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current !== null && current.memoizedState !== null;

            if (current !== null && !nextDidTimeout && prevDidTimeout) {
              // We just switched from the fallback to the normal children. Delete
              // the fallback.
              // TODO: Would it be better to store the fallback fragment on
              var currentFallbackChild = current.child.sibling;

              if (currentFallbackChild !== null) {
                // Deletions go at the beginning of the return fiber's effect list
                var first = workInProgress.firstEffect;

                if (first !== null) {
                  workInProgress.firstEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = first;
                } else {
                  workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = null;
                }

                currentFallbackChild.effectTag = Deletion;
              }
            }

            if (nextDidTimeout || prevDidTimeout) {
              // If the children are hidden, or if they were previous hidden, schedule
              // an effect to toggle their visibility. This is also used to attach a
              // retry listener to the promise.
              workInProgress.effectTag |= Update;
            }

            break;
          }

        case Fragment:
          break;

        case Mode:
          break;

        case Profiler:
          break;

        case HostPortal:
          popHostContainer(workInProgress);
          updateHostContainer(workInProgress);
          break;

        case ContextProvider:
          // Pop provider fiber
          popProvider(workInProgress);
          break;

        case ContextConsumer:
          break;

        case MemoComponent:
          break;

        case IncompleteClassComponent:
          {
            // Same as class component case. I put it down here so that the tags are
            // sequential to ensure this switch is compiled to a jump table.
            var _Component = workInProgress.type;

            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              if (current === null) {
                var _wasHydrated2 = popHydrationState(workInProgress);

                !_wasHydrated2 ? invariant(false, 'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.') : void 0;
                skipPastDehydratedSuspenseInstance(workInProgress);
              } else if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                // This boundary did not suspend so it's now hydrated.
                // To handle any future suspense cases, we're going to now upgrade it
                // to a Suspense component. We detach it from the existing current fiber.
                current.alternate = null;
                workInProgress.alternate = null;
                workInProgress.tag = SuspenseComponent;
                workInProgress.memoizedState = null;
                workInProgress.stateNode = null;
              }
            }

            break;
          }

        default:
          invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
      }

      return null;
    }

    function shouldCaptureSuspense(workInProgress) {
      // In order to capture, the Suspense component must have a fallback prop.
      if (workInProgress.memoizedProps.fallback === undefined) {
        return false;
      } // If it was the primary children that just suspended, capture and render the
      // fallback. Otherwise, don't capture and bubble to the next boundary.


      var nextState = workInProgress.memoizedState;
      return nextState === null;
    } // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.


    function showErrorDialog(capturedError) {
      return true;
    }

    function logCapturedError(capturedError) {
      var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
      // This enables renderers like ReactNative to better manage redbox behavior.

      if (logError === false) {
        return;
      }

      var error = capturedError.error;
      {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
        // `preventDefault()` in window `error` handler.
        // We record this information as an expando on the error.

        if (error != null && error._suppressLogging) {
          if (errorBoundaryFound && willRetry) {
            // The error is recoverable and was silenced.
            // Ignore it and don't print the stack addendum.
            // This is handy for testing error boundaries without noise.
            return;
          } // The error is fatal. Since the silencing might have
          // been accidental, we'll surface it anyway.
          // However, the browser would have silenced the original error
          // so we'll print it first, and then print the stack addendum.


          console.error(error); // For a more detailed description of this block, see:
          // https://github.com/facebook/react/pull/13384
        }

        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
        var errorBoundaryMessage = void 0; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

        if (errorBoundaryFound && errorBoundaryName) {
          if (willRetry) {
            errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
          } else {
            errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
          }
        } else {
          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
        }

        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

        console.error(combinedMessage);
      }
    }

    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }
    var PossiblyWeakSet$1 = typeof WeakSet === 'function' ? WeakSet : Set;

    function logError(boundary, errorInfo) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;

      if (stack === null && source !== null) {
        stack = getStackByFiberInDevAndProd(source);
      }

      var capturedError = {
        componentName: source !== null ? getComponentName(source.type) : null,
        componentStack: stack !== null ? stack : '',
        error: errorInfo.value,
        errorBoundary: null,
        errorBoundaryName: null,
        errorBoundaryFound: false,
        willRetry: false
      };

      if (boundary !== null && boundary.tag === ClassComponent) {
        capturedError.errorBoundary = boundary.stateNode;
        capturedError.errorBoundaryName = getComponentName(boundary.type);
        capturedError.errorBoundaryFound = true;
        capturedError.willRetry = true;
      }

      try {
        logCapturedError(capturedError);
      } catch (e) {
        // This method must not throw, or React internal state will get messed up.
        // If console.error is overridden, or logCapturedError() shows a dialog that throws,
        // we want to report this error outside of the normal stack as a last resort.
        // https://github.com/facebook/react/issues/13188
        setTimeout(function () {
          throw e;
        });
      }
    }

    var callComponentWillUnmountWithTimer = function (current$$1, instance) {
      startPhaseTimer(current$$1, 'componentWillUnmount');
      instance.props = current$$1.memoizedProps;
      instance.state = current$$1.memoizedState;
      instance.componentWillUnmount();
      stopPhaseTimer();
    }; // Capture errors so they don't interrupt unmounting.


    function safelyCallComponentWillUnmount(current$$1, instance) {
      {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

        if (hasCaughtError()) {
          var unmountError = clearCaughtError();
          captureCommitPhaseError(current$$1, unmountError);
        }
      }
    }

    function safelyDetachRef(current$$1) {
      var ref = current$$1.ref;

      if (ref !== null) {
        if (typeof ref === 'function') {
          {
            invokeGuardedCallback(null, ref, null, null);

            if (hasCaughtError()) {
              var refError = clearCaughtError();
              captureCommitPhaseError(current$$1, refError);
            }
          }
        } else {
          ref.current = null;
        }
      }
    }

    function safelyCallDestroy(current$$1, destroy) {
      {
        invokeGuardedCallback(null, destroy, null);

        if (hasCaughtError()) {
          var error = clearCaughtError();
          captureCommitPhaseError(current$$1, error);
        }
      }
    }

    function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
            return;
          }

        case ClassComponent:
          {
            if (finishedWork.effectTag & Snapshot) {
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                var instance = finishedWork.stateNode; // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                stopPhaseTimer();
              }
            }

            return;
          }

        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case IncompleteClassComponent:
          // Nothing to do for these component types
          return;

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitHookEffectList(unmountTag, mountTag, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;

        do {
          if ((effect.tag & unmountTag) !== NoEffect$1) {
            // Unmount
            var destroy = effect.destroy;
            effect.destroy = undefined;

            if (destroy !== undefined) {
              destroy();
            }
          }

          if ((effect.tag & mountTag) !== NoEffect$1) {
            // Mount
            var create = effect.create;
            effect.destroy = create();
            {
              var _destroy = effect.destroy;

              if (_destroy !== undefined && typeof _destroy !== 'function') {
                var addendum = void 0;

                if (_destroy === null) {
                  addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                } else if (typeof _destroy.then === 'function') {
                  addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + '}, [someId]); // Or [] if effect doesn\'t need props or state\n\n' + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
                } else {
                  addendum = ' You returned: ' + _destroy;
                }

                warningWithoutStack$1(false, 'An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
              }
            }
          }

          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }

    function commitPassiveHookEffects(finishedWork) {
      commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
      commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
    }

    function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
            break;
          }

        case ClassComponent:
          {
            var instance = finishedWork.stateNode;

            if (finishedWork.effectTag & Update) {
              if (current$$1 === null) {
                startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                instance.componentDidMount();
                stopPhaseTimer();
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                stopPhaseTimer();
              }
            }

            var updateQueue = finishedWork.updateQueue;

            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                }
              } // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.

              commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
            }

            return;
          }

        case HostRoot:
          {
            var _updateQueue = finishedWork.updateQueue;

            if (_updateQueue !== null) {
              var _instance = null;

              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;

                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }

              commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
            }

            return;
          }

        case HostComponent:
          {
            var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
            // These effects should only be committed when components are first mounted,
            // aka when there is no current/alternate.

            if (current$$1 === null && finishedWork.effectTag & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props, finishedWork);
            }

            return;
          }

        case HostText:
          {
            // We have no life-cycles associated with text.
            return;
          }

        case HostPortal:
          {
            // We have no life-cycles associated with portals.
            return;
          }

        case Profiler:
          {
            if (enableProfilerTimer) {
              var onRender = finishedWork.memoizedProps.onRender;

              if (enableSchedulerTracing) {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
              } else {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
              }
            }

            return;
          }

        case SuspenseComponent:
          break;

        case IncompleteClassComponent:
          break;

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      if (supportsMutation) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        var node = finishedWork;

        while (true) {
          if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } else if (node.tag === HostText) {
            var _instance3 = node.stateNode;

            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
            // Found a nested Suspense component that timed out. Skip over the
            var fallbackChildFragment = node.child.sibling;
            fallbackChildFragment.return = node;
            node = fallbackChildFragment;
            continue;
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === finishedWork) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
    }

    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;

      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse = void 0;

        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;

          default:
            instanceToUse = instance;
        }

        if (typeof ref === 'function') {
          ref(instanceToUse);
        } else {
          {
            if (!ref.hasOwnProperty('current')) {
              warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }

    function commitDetachRef(current$$1) {
      var currentRef = current$$1.ref;

      if (currentRef !== null) {
        if (typeof currentRef === 'function') {
          currentRef(null);
        } else {
          currentRef.current = null;
        }
      }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay


    function commitUnmount(current$$1) {
      onCommitUnmount(current$$1);

      switch (current$$1.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            var updateQueue = current$$1.updateQueue;

            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;

                do {
                  var destroy = effect.destroy;

                  if (destroy !== undefined) {
                    safelyCallDestroy(current$$1, destroy);
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }

            break;
          }

        case ClassComponent:
          {
            safelyDetachRef(current$$1);
            var instance = current$$1.stateNode;

            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current$$1, instance);
            }

            return;
          }

        case HostComponent:
          {
            safelyDetachRef(current$$1);
            return;
          }

        case HostPortal:
          {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
            if (supportsMutation) {
              unmountHostComponents(current$$1);
            } else if (supportsPersistence) {
              emptyPortalContainer(current$$1);
            }

            return;
          }
      }
    }

    function commitNestedUnmounts(root) {
      // While we're inside a removed host node we don't want to call
      // removeChild on the inner nodes because they're removed by the top
      // call anyway. We also want to call componentWillUnmount on all
      // composites before this host node is removed from the tree. Therefore
      var node = root;

      while (true) {
        commitUnmount(node); // Visit children because they may contain more composite or host nodes.
        // Skip portals because commitUnmount() currently visits them recursively.

        if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        !supportsMutation || node.tag !== HostPortal)) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === root) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === root) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function detachFiber(current$$1) {
      // Cut off the return pointers to disconnect it from the tree. Ideally, we
      // should clear the child pointer of the parent alternate to let this
      // get GC:ed but we don't know which for sure which parent is the current
      // one so we'll settle for GC:ing the subtree of this child. This child
      // itself will be GC:ed when the parent updates the next time.
      current$$1.return = null;
      current$$1.child = null;
      current$$1.memoizedState = null;
      current$$1.updateQueue = null;
      var alternate = current$$1.alternate;

      if (alternate !== null) {
        alternate.return = null;
        alternate.child = null;
        alternate.memoizedState = null;
        alternate.updateQueue = null;
      }
    }

    function emptyPortalContainer(current$$1) {
      if (!supportsPersistence) {
        return;
      }

      var portal = current$$1.stateNode;
      var containerInfo = portal.containerInfo;
      var emptyChildSet = createContainerChildSet(containerInfo);
      replaceContainerChildren(containerInfo, emptyChildSet);
    }

    function commitContainer(finishedWork) {
      if (!supportsPersistence) {
        return;
      }

      switch (finishedWork.tag) {
        case ClassComponent:
          {
            return;
          }

        case HostComponent:
          {
            return;
          }

        case HostText:
          {
            return;
          }

        case HostRoot:
        case HostPortal:
          {
            var portalOrRoot = finishedWork.stateNode;
            var containerInfo = portalOrRoot.containerInfo,
                _pendingChildren = portalOrRoot.pendingChildren;
            replaceContainerChildren(containerInfo, _pendingChildren);
            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function getHostParentFiber(fiber) {
      var parent = fiber.return;

      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }

        parent = parent.return;
      }

      invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }

    function getHostSibling(fiber) {
      // We're going to search forward into the tree until we find a sibling host
      // node. Unfortunately, if multiple insertions are done in a row we have to
      // search past them. This leads to exponential search for the next sibling.
      var node = fiber;

      siblings: while (true) {
        // If we didn't find anything, let's try the next sibling.
        while (node.sibling === null) {
          if (node.return === null || isHostParent(node.return)) {
            // If we pop out of the root or hit the parent the fiber we are the
            // last sibling.
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;

        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedSuspenseComponent) {
          // If it is not host node and, we might have a host node inside it.
          // Try to search down until we find one.
          if (node.effectTag & Placement) {
            // If we don't have a child, try the siblings instead.
            continue siblings;
          } // If we don't have a child, try the siblings instead.
          // We also skip portals because they are not part of this host tree.


          if (node.child === null || node.tag === HostPortal) {
            continue siblings;
          } else {
            node.child.return = node;
            node = node.child;
          }
        } // Check if this host node is stable or about to be placed.


        if (!(node.effectTag & Placement)) {
          // Found it!
          return node.stateNode;
        }
      }
    }

    function commitPlacement(finishedWork) {
      if (!supportsMutation) {
        return;
      } // Recursively insert all host nodes into the parent.


      var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

      var parent = void 0;
      var isContainer = void 0;

      switch (parentFiber.tag) {
        case HostComponent:
          parent = parentFiber.stateNode;
          isContainer = false;
          break;

        case HostRoot:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;

        case HostPortal:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;

        default:
          invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
      }

      if (parentFiber.effectTag & ContentReset) {
        // Reset the text content of the parent before doing any insertions
        resetTextContent(parent); // Clear ContentReset from the effect tag

        parentFiber.effectTag &= ~ContentReset;
      }

      var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
      // children to find all the terminal nodes.

      var node = finishedWork;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          if (before) {
            if (isContainer) {
              insertInContainerBefore(parent, node.stateNode, before);
            } else {
              insertBefore(parent, node.stateNode, before);
            }
          } else {
            if (isContainer) {
              appendChildToContainer(parent, node.stateNode);
            } else {
              appendChild(parent, node.stateNode);
            }
          }
        } else if (node.tag === HostPortal) {// If the insertion itself is a portal, then we don't want to traverse
          // down its children. Instead, we'll get insertions from each child in
          // the portal directly.
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === finishedWork) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function unmountHostComponents(current$$1) {
      // We only have the top Fiber that was deleted but we need to recurse down its
      var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
      // currentParentIsValid.

      var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

      var currentParent = void 0;
      var currentParentIsContainer = void 0;

      while (true) {
        if (!currentParentIsValid) {
          var parent = node.return;

          findParent: while (true) {
            !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;

            switch (parent.tag) {
              case HostComponent:
                currentParent = parent.stateNode;
                currentParentIsContainer = false;
                break findParent;

              case HostRoot:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;

              case HostPortal:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
            }

            parent = parent.return;
          }

          currentParentIsValid = true;
        }

        if (node.tag === HostComponent || node.tag === HostText) {
          commitNestedUnmounts(node); // After all the children have unmounted, it is now safe to remove the
          // node from the tree.

          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, node.stateNode);
          } else {
            removeChild(currentParent, node.stateNode);
          } // Don't visit children because we already visited them.

        } else if (enableSuspenseServerRenderer && node.tag === DehydratedSuspenseComponent) {
          // Delete the dehydrated suspense boundary and all of its content.
          if (currentParentIsContainer) {
            clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
          } else {
            clearSuspenseBoundary(currentParent, node.stateNode);
          }
        } else if (node.tag === HostPortal) {
          if (node.child !== null) {
            // When we go into a portal, it becomes the parent to remove from.
            // We will reassign it back when we pop the portal on the way up.
            currentParent = node.stateNode.containerInfo;
            currentParentIsContainer = true; // Visit children because portals might contain host components.

            node.child.return = node;
            node = node.child;
            continue;
          }
        } else {
          commitUnmount(node); // Visit children because we may find more host components below.

          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        }

        if (node === current$$1) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === current$$1) {
            return;
          }

          node = node.return;

          if (node.tag === HostPortal) {
            // When we go out of the portal, we need to restore the parent.
            // Since we don't keep a stack of them, we will search for it.
            currentParentIsValid = false;
          }
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function commitDeletion(current$$1) {
      if (supportsMutation) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(current$$1);
      } else {
        // Detach refs and call componentWillUnmount() on the whole subtree.
        commitNestedUnmounts(current$$1);
      }

      detachFiber(current$$1);
    }

    function commitWork(current$$1, finishedWork) {
      if (!supportsMutation) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
            {
              // Note: We currently never use MountMutation, but useLayout uses
              // UnmountMutation.
              commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
              return;
            }
        }

        commitContainer(finishedWork);
        return;
      }

      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            // Note: We currently never use MountMutation, but useLayout uses
            // UnmountMutation.
            commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
            return;
          }

        case ClassComponent:
          {
            return;
          }

        case HostComponent:
          {
            var instance = finishedWork.stateNode;

            if (instance != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;

              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
              }
            }

            return;
          }

        case HostText:
          {
            !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }

        case HostRoot:
          {
            return;
          }

        case Profiler:
          {
            return;
          }

        case SuspenseComponent:
          {
            var newState = finishedWork.memoizedState;
            var newDidTimeout = void 0;
            var primaryChildParent = finishedWork;

            if (newState === null) {
              newDidTimeout = false;
            } else {
              newDidTimeout = true;
              primaryChildParent = finishedWork.child;

              if (newState.timedOutAt === NoWork) {
                // If the children had not already timed out, record the time.
                // This is used to compute the elapsed time during subsequent
                // attempts to render the children.
                newState.timedOutAt = requestCurrentTime();
              }
            }

            if (primaryChildParent !== null) {
              hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
            } // If this boundary just timed out, then it will have a set of thenables.
            // For each thenable, attach a listener so that when it resolves, React
            // attempts to re-render the boundary in the primary (pre-timeout) state.


            var thenables = finishedWork.updateQueue;

            if (thenables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;

              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
              }

              thenables.forEach(function (thenable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = retryTimedOutBoundary.bind(null, finishedWork, thenable);

                if (enableSchedulerTracing) {
                  retry = tracing.unstable_wrap(retry);
                }

                if (!retryCache.has(thenable)) {
                  retryCache.add(thenable);
                  thenable.then(retry, retry);
                }
              });
            }

            return;
          }

        case IncompleteClassComponent:
          {
            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitResetTextContent(current$$1) {
      if (!supportsMutation) {
        return;
      }

      resetTextContent(current$$1.stateNode);
    }

    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;

    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime); // Unmount the root by rendering null.

      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
      // being called "element".

      update.payload = {
        element: null
      };
      var error = errorInfo.value;

      update.callback = function () {
        onUncaughtError(error);
        logError(fiber, errorInfo);
      };

      return update;
    }

    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

      if (typeof getDerivedStateFromError === 'function') {
        var error = errorInfo.value;

        update.payload = function () {
          return getDerivedStateFromError(error);
        };
      }

      var inst = fiber.stateNode;

      if (inst !== null && typeof inst.componentDidCatch === 'function') {
        update.callback = function callback() {
          if (typeof getDerivedStateFromError !== 'function') {
            // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
          }

          var error = errorInfo.value;
          var stack = errorInfo.stack;
          logError(fiber, errorInfo);
          this.componentDidCatch(error, {
            componentStack: stack !== null ? stack : ''
          });
          {
            if (typeof getDerivedStateFromError !== 'function') {
              // If componentDidCatch is the only error boundary method defined,
              // then it needs to call setState to recover from errors.
              // If no state update is scheduled then the boundary will swallow the error.
              !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
            }
          }
        };
      }

      return update;
    }

    function attachPingListener(root, renderExpirationTime, thenable) {
      // Attach a listener to the promise to "ping" the root and retry. But
      // only if one does not already exist for the current render expiration
      // time (which acts like a "thread ID" here).
      var pingCache = root.pingCache;
      var threadIDs = void 0;

      if (pingCache === null) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        threadIDs = new Set();
        pingCache.set(thenable, threadIDs);
      } else {
        threadIDs = pingCache.get(thenable);

        if (threadIDs === undefined) {
          threadIDs = new Set();
          pingCache.set(thenable, threadIDs);
        }
      }

      if (!threadIDs.has(renderExpirationTime)) {
        // Memoize using the thread ID to prevent redundant listeners.
        threadIDs.add(renderExpirationTime);
        var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);

        if (enableSchedulerTracing) {
          ping = tracing.unstable_wrap(ping);
        }

        thenable.then(ping, ping);
      }
    }

    function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
      // The source fiber did not complete.
      sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

      sourceFiber.firstEffect = sourceFiber.lastEffect = null;

      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
        // This is a thenable.
        var thenable = value; // Find the earliest timeout threshold of all the placeholders in the
        // ancestor path. We could avoid this traversal by storing the thresholds on
        // the stack, but we choose not to because we only hit this path if we're
        // IO-bound (i.e. if something suspends). Whereas the stack is used even in
        // the non-IO- bound case.

        var _workInProgress = returnFiber;
        var earliestTimeoutMs = -1;
        var startTimeMs = -1;

        do {
          if (_workInProgress.tag === SuspenseComponent) {
            var current$$1 = _workInProgress.alternate;

            if (current$$1 !== null) {
              var currentState = current$$1.memoizedState;

              if (currentState !== null) {
                // Reached a boundary that already timed out. Do not search
                // any further.
                var timedOutAt = currentState.timedOutAt;
                startTimeMs = expirationTimeToMs(timedOutAt); // Do not search any further.

                break;
              }
            }

            var timeoutPropMs = _workInProgress.pendingProps.maxDuration;

            if (typeof timeoutPropMs === 'number') {
              if (timeoutPropMs <= 0) {
                earliestTimeoutMs = 0;
              } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
                earliestTimeoutMs = timeoutPropMs;
              }
            }
          } // If there is a DehydratedSuspenseComponent we don't have to do anything because
          // if something suspends inside it, we will simply leave that as dehydrated. It
          // will never timeout.


          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null); // Schedule the nearest Suspense to re-render the timed out view.


        _workInProgress = returnFiber;

        do {
          if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress)) {
            // Found the nearest boundary.
            // Stash the promise on the boundary fiber. If the boundary times out, we'll
            var thenables = _workInProgress.updateQueue;

            if (thenables === null) {
              var updateQueue = new Set();
              updateQueue.add(thenable);
              _workInProgress.updateQueue = updateQueue;
            } else {
              thenables.add(thenable);
            } // If the boundary is outside of concurrent mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. In the commit phase, we'll schedule a
            // subsequent synchronous update to re-render the Suspense.
            //
            // Note: It doesn't matter whether the component that suspended was
            // inside a concurrent mode tree. If the Suspense is outside of it, we
            // should *not* suspend the commit.


            if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
              _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
              // But we shouldn't call any lifecycle methods or callbacks. Remove
              // all lifecycle effect tags.

              sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;

                if (currentSourceFiber === null) {
                  // This is a new mount. Change the tag so it's not mistaken for a
                  // completed class component. For example, we should not call
                  // componentWillUnmount if it is deleted.
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  // When we try rendering again, we should not reuse the current fiber,
                  // since it's known to be in an inconsistent state. Use a force updte to
                  // prevent a bail out.
                  var update = createUpdate(Sync);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update);
                }
              } // The source fiber did not complete. Mark it with Sync priority to
              // indicate that it still has pending work.


              sourceFiber.expirationTime = Sync; // Exit without suspending.

              return;
            } // Confirmed that the boundary is in a concurrent mode tree. Continue
            // with the normal suspend path.


            attachPingListener(root, renderExpirationTime, thenable);
            var absoluteTimeoutMs = void 0;

            if (earliestTimeoutMs === -1) {
              // If no explicit threshold is given, default to an arbitrarily large
              // value. The actual size doesn't matter because the threshold for the
              // whole tree will be clamped to the expiration time.
              absoluteTimeoutMs = maxSigned31BitInt;
            } else {
              if (startTimeMs === -1) {
                // This suspend happened outside of any already timed-out
                // placeholders. We don't know exactly when the update was
                // scheduled, but we can infer an approximate start time from the
                // expiration time. First, find the earliest uncommitted expiration
                // time in the tree, including work that is suspended. Then subtract
                // the offset used to compute an async update's expiration time.
                // This will cause high priority (interactive) work to expire
                // earlier than necessary, but we can account for this by adjusting
                // for the Just Noticeable Difference.
                var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
                var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
                startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
              }

              absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
            } // Mark the earliest timeout in the suspended fiber's ancestor path.
            // After completing the root, we'll take the largest of all the
            // suspended fiber's timeouts and use it to compute a timeout for the
            // whole tree.


            renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);
            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          } else if (enableSuspenseServerRenderer && _workInProgress.tag === DehydratedSuspenseComponent) {
            attachPingListener(root, renderExpirationTime, thenable); // Since we already have a current fiber, we can eagerly add a retry listener.

            var retryCache = _workInProgress.memoizedState;

            if (retryCache === null) {
              retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
              var _current = _workInProgress.alternate;
              !_current ? invariant(false, 'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.') : void 0;
              _current.memoizedState = retryCache;
            } // Memoize using the boundary fiber to prevent redundant listeners.


            if (!retryCache.has(thenable)) {
              retryCache.add(thenable);
              var retry = retryTimedOutBoundary.bind(null, _workInProgress, thenable);

              if (enableSchedulerTracing) {
                retry = tracing.unstable_wrap(retry);
              }

              thenable.then(retry, retry);
            }

            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          } // This boundary already captured during this render. Continue to the next
          // boundary.


          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
        // TODO: Use invariant so the message is stripped in prod?


        value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
      } // We didn't find a boundary that could handle this type of exception. Start
      // over and traverse parent path again, this time treating the exception
      // as an error.


      renderDidError();
      value = createCapturedValue(value, sourceFiber);
      var workInProgress = returnFiber;

      do {
        switch (workInProgress.tag) {
          case HostRoot:
            {
              var _errorInfo = value;
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;

              var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }

          case ClassComponent:
            // Capture and retry
            var errorInfo = value;
            var ctor = workInProgress.type;
            var instance = workInProgress.stateNode;

            if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

              var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update2);
              return;
            }

            break;

          default:
            break;
        }

        workInProgress = workInProgress.return;
      } while (workInProgress !== null);
    }

    function unwindWork(workInProgress, renderExpirationTime) {
      switch (workInProgress.tag) {
        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            var effectTag = workInProgress.effectTag;

            if (effectTag & ShouldCapture) {
              workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            return null;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var _effectTag = workInProgress.effectTag;
            !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
            workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
            return workInProgress;
          }

        case HostComponent:
          {
            // TODO: popHydrationState
            popHostContext(workInProgress);
            return null;
          }

        case SuspenseComponent:
          {
            var _effectTag2 = workInProgress.effectTag;

            if (_effectTag2 & ShouldCapture) {
              workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

              return workInProgress;
            }

            return null;
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              // TODO: popHydrationState
              var _effectTag3 = workInProgress.effectTag;

              if (_effectTag3 & ShouldCapture) {
                workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

                return workInProgress;
              }
            }

            return null;
          }

        case HostPortal:
          popHostContainer(workInProgress);
          return null;

        case ContextProvider:
          popProvider(workInProgress);
          return null;

        default:
          return null;
      }
    }

    function unwindInterruptedWork(interruptedWork) {
      switch (interruptedWork.tag) {
        case ClassComponent:
          {
            var childContextTypes = interruptedWork.type.childContextTypes;

            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            break;
          }

        case HostComponent:
          {
            popHostContext(interruptedWork);
            break;
          }

        case HostPortal:
          popHostContainer(interruptedWork);
          break;

        case ContextProvider:
          popProvider(interruptedWork);
          break;

        default:
          break;
      }
    }

    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
    var didWarnAboutStateTransition = void 0;
    var didWarnSetStateChildContext = void 0;
    var warnAboutUpdateOnUnmounted = void 0;
    var warnAboutInvalidUpdates = void 0;

    if (enableSchedulerTracing) {
      // Provide explicit error message when production+profiling bundle of e.g. react-dom
      // is used with production (non-profiling) bundle of scheduler/tracing
      !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
    }

    {
      didWarnAboutStateTransition = false;
      didWarnSetStateChildContext = false;
      var didWarnStateUpdateForUnmountedComponent = {};

      warnAboutUpdateOnUnmounted = function (fiber, isClass) {
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';

        if (didWarnStateUpdateForUnmountedComponent[componentName]) {
          return;
        }

        warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
        didWarnStateUpdateForUnmountedComponent[componentName] = true;
      };

      warnAboutInvalidUpdates = function (instance) {
        switch (phase) {
          case 'getChildContext':
            if (didWarnSetStateChildContext) {
              return;
            }

            warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
            didWarnSetStateChildContext = true;
            break;

          case 'render':
            if (didWarnAboutStateTransition) {
              return;
            }

            warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
            didWarnAboutStateTransition = true;
            break;
        }
      };
    } // Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.

    var lastUniqueAsyncExpiration = Sync - 1;
    var isWorking = false; // The next work in progress fiber that we're currently working on.

    var nextUnitOfWork = null;
    var nextRoot = null; // The time at which we're currently rendering work.

    var nextRenderExpirationTime = NoWork;
    var nextLatestAbsoluteTimeoutMs = -1;
    var nextRenderDidError = false; // The next fiber with an effect that we're currently committing.

    var nextEffect = null;
    var isCommitting$1 = false;
    var rootWithPendingPassiveEffects = null;
    var passiveEffectCallbackHandle = null;
    var passiveEffectCallback = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Used for performance tracking.

    var interruptedBy = null;
    var stashedWorkInProgressProperties = void 0;
    var replayUnitOfWork = void 0;
    var mayReplayFailedUnitOfWork = void 0;
    var isReplayingFailedUnitOfWork = void 0;
    var originalReplayError = void 0;
    var rethrowOriginalError = void 0;

    if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
      stashedWorkInProgressProperties = null;
      mayReplayFailedUnitOfWork = true;
      isReplayingFailedUnitOfWork = false;
      originalReplayError = null;

      replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
          // Don't replay promises. Treat everything else like an error.
          // TODO: Need to figure out a different strategy if/when we add
          // support for catching other types.
          return;
        } // Restore the original state of the work-in-progress


        if (stashedWorkInProgressProperties === null) {
          // This should never happen. Don't throw because this code is DEV-only.
          warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
          return;
        }

        assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

        switch (failedUnitOfWork.tag) {
          case HostRoot:
            popHostContainer(failedUnitOfWork);
            popTopLevelContextObject(failedUnitOfWork);
            break;

          case HostComponent:
            popHostContext(failedUnitOfWork);
            break;

          case ClassComponent:
            {
              var Component = failedUnitOfWork.type;

              if (isContextProvider(Component)) {
                popContext(failedUnitOfWork);
              }

              break;
            }

          case HostPortal:
            popHostContainer(failedUnitOfWork);
            break;

          case ContextProvider:
            popProvider(failedUnitOfWork);
            break;
        } // Replay the begin phase.


        isReplayingFailedUnitOfWork = true;
        originalReplayError = thrownValue;
        invokeGuardedCallback(null, workLoop, null, isYieldy);
        isReplayingFailedUnitOfWork = false;
        originalReplayError = null;

        if (hasCaughtError()) {
          var replayError = clearCaughtError();

          if (replayError != null && thrownValue != null) {
            try {
              // Reading the expando property is intentionally
              // inside `try` because it might be a getter or Proxy.
              if (replayError._suppressLogging) {
                // Also suppress logging for the original error.
                thrownValue._suppressLogging = true;
              }
            } catch (inner) {// Ignore.
            }
          }
        } else {
          // If the begin phase did not fail the second time, set this pointer
          // back to the original value.
          nextUnitOfWork = failedUnitOfWork;
        }
      };

      rethrowOriginalError = function () {
        throw originalReplayError;
      };
    }

    function resetStack() {
      if (nextUnitOfWork !== null) {
        var interruptedWork = nextUnitOfWork.return;

        while (interruptedWork !== null) {
          unwindInterruptedWork(interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }

      {
        ReactStrictModeWarnings.discardPendingWarnings();
        checkThatStackIsEmpty();
      }
      nextRoot = null;
      nextRenderExpirationTime = NoWork;
      nextLatestAbsoluteTimeoutMs = -1;
      nextRenderDidError = false;
      nextUnitOfWork = null;
    }

    function commitAllHostEffects() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        recordEffect();
        var effectTag = nextEffect.effectTag;

        if (effectTag & ContentReset) {
          commitResetTextContent(nextEffect);
        }

        if (effectTag & Ref) {
          var current$$1 = nextEffect.alternate;

          if (current$$1 !== null) {
            commitDetachRef(current$$1);
          }
        } // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every
        // possible bitmap value, we remove the secondary effects from the
        // effect tag and switch on that value.


        var primaryEffectTag = effectTag & (Placement | Update | Deletion);

        switch (primaryEffectTag) {
          case Placement:
            {
              commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted
              // does and isMounted is deprecated anyway so we should be able
              // to kill this.

              nextEffect.effectTag &= ~Placement;
              break;
            }

          case PlacementAndUpdate:
            {
              // Placement
              commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.

              nextEffect.effectTag &= ~Placement; // Update

              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }

          case Update:
            {
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }

          case Deletion:
            {
              commitDeletion(nextEffect);
              break;
            }
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitBeforeMutationLifecycles() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        var effectTag = nextEffect.effectTag;

        if (effectTag & Snapshot) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitBeforeMutationLifeCycles(current$$1, nextEffect);
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
      {
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        ReactStrictModeWarnings.flushLegacyContextWarning();

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.flushPendingDeprecationWarnings();
        }
      }

      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        var effectTag = nextEffect.effectTag;

        if (effectTag & (Update | Callback)) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
        }

        if (effectTag & Ref) {
          recordEffect();
          commitAttachRef(nextEffect);
        }

        if (effectTag & Passive) {
          rootWithPendingPassiveEffects = finishedRoot;
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitPassiveEffects(root, firstEffect) {
      rootWithPendingPassiveEffects = null;
      passiveEffectCallbackHandle = null;
      passiveEffectCallback = null; // Set this to true to prevent re-entrancy

      var previousIsRendering = isRendering;
      isRendering = true;
      var effect = firstEffect;

      do {
        {
          setCurrentFiber(effect);
        }

        if (effect.effectTag & Passive) {
          var didError = false;
          var error = void 0;
          {
            invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);

            if (hasCaughtError()) {
              didError = true;
              error = clearCaughtError();
            }
          }

          if (didError) {
            captureCommitPhaseError(effect, error);
          }
        }

        effect = effect.nextEffect;
      } while (effect !== null);

      {
        resetCurrentFiber();
      }
      isRendering = previousIsRendering; // Check if work was scheduled by one of the effects

      var rootExpirationTime = root.expirationTime;

      if (rootExpirationTime !== NoWork) {
        requestWork(root, rootExpirationTime);
      } // Flush any sync work that was scheduled by effects


      if (!isBatchingUpdates && !isRendering) {
        performSyncWork();
      }
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }

    function flushPassiveEffects() {
      if (passiveEffectCallbackHandle !== null) {
        cancelPassiveEffects(passiveEffectCallbackHandle);
      }

      if (passiveEffectCallback !== null) {
        // We call the scheduled callback instead of commitPassiveEffects directly
        // to ensure tracing works correctly.
        passiveEffectCallback();
      }
    }

    function commitRoot(root, finishedWork) {
      isWorking = true;
      isCommitting$1 = true;
      startCommitTimer();
      !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var committedExpirationTime = root.pendingCommitExpirationTime;
      !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      root.pendingCommitExpirationTime = NoWork; // Update the pending priority levels to account for the work that we are
      // about to commit. This needs to happen before calling the lifecycles, since
      // they may schedule additional updates.

      var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
      var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
      markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);
      var prevInteractions = null;

      if (enableSchedulerTracing) {
        // Restore any pending interactions at this point,
        // So that cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
      } // Reset this to null before calling lifecycles


      ReactCurrentOwner$2.current = null;
      var firstEffect = void 0;

      if (finishedWork.effectTag > PerformedWork) {
        // A fiber's effect list consists only of its children, not itself. So if
        // the root has an effect, we need to add it to the end of the list. The
        // resulting list is the set that would belong to the root's parent, if
        // it had one; that is, all the effects in the tree including the root.
        if (finishedWork.lastEffect !== null) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          firstEffect = finishedWork.firstEffect;
        } else {
          firstEffect = finishedWork;
        }
      } else {
        // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
      }

      prepareForCommit(root.containerInfo); // Invoke instances of getSnapshotBeforeUpdate before mutation.

      nextEffect = firstEffect;
      startCommitSnapshotEffectsTimer();

      while (nextEffect !== null) {
        var didError = false;
        var error = void 0;
        {
          invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);

          if (hasCaughtError()) {
            didError = true;
            error = clearCaughtError();
          }
        }

        if (didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, error); // Clean-up

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      stopCommitSnapshotEffectsTimer();

      if (enableProfilerTimer) {
        // Mark the current commit time to be shared by all Profilers in this batch.
        // This enables them to be grouped later.
        recordCommitTime();
      } // Commit all the side-effects within a tree. We'll do this in two passes.
      // The first pass performs all the host insertions, updates, deletions and
      // ref unmounts.


      nextEffect = firstEffect;
      startCommitHostEffectsTimer();

      while (nextEffect !== null) {
        var _didError = false;

        var _error = void 0;

        {
          invokeGuardedCallback(null, commitAllHostEffects, null);

          if (hasCaughtError()) {
            _didError = true;
            _error = clearCaughtError();
          }
        }

        if (_didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error); // Clean-up

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      stopCommitHostEffectsTimer();
      resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
      // the first pass of the commit phase, so that the previous tree is still
      // current during componentWillUnmount, but before the second pass, so that
      // the finished work is current during componentDidMount/Update.

      root.current = finishedWork; // In the second pass we'll perform all life-cycles and ref callbacks.
      // Life-cycles happen as a separate pass so that all placements, updates,
      // and deletions in the entire tree have already been invoked.
      // This pass also triggers any renderer-specific initial effects.

      nextEffect = firstEffect;
      startCommitLifeCyclesTimer();

      while (nextEffect !== null) {
        var _didError2 = false;

        var _error2 = void 0;

        {
          invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);

          if (hasCaughtError()) {
            _didError2 = true;
            _error2 = clearCaughtError();
          }
        }

        if (_didError2) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error2);

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      if (firstEffect !== null && rootWithPendingPassiveEffects !== null) {
        // This commit included a passive effect. These do not need to fire until
        // after the next paint. Schedule an callback to fire them in an async
        // event. To ensure serial execution, the callback will be flushed early if
        // we enter rootWithPendingPassiveEffects commit phase before then.
        var callback = commitPassiveEffects.bind(null, root, firstEffect);

        if (enableSchedulerTracing) {
          // TODO: Avoid this extra callback by mutating the tracing ref directly,
          // like we do at the beginning of commitRoot. I've opted not to do that
          // here because that code is still in flux.
          callback = tracing.unstable_wrap(callback);
        }

        passiveEffectCallbackHandle = scheduler.unstable_runWithPriority(scheduler.unstable_NormalPriority, function () {
          return schedulePassiveEffects(callback);
        });
        passiveEffectCallback = callback;
      }

      isCommitting$1 = false;
      isWorking = false;
      stopCommitLifeCyclesTimer();
      stopCommitTimer();
      onCommitRoot(finishedWork.stateNode);

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
      }

      var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
      var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;

      if (earliestRemainingTimeAfterCommit === NoWork) {
        // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
      }

      onCommit(root, earliestRemainingTimeAfterCommit);

      if (enableSchedulerTracing) {
        tracing.__interactionsRef.current = prevInteractions;
        var subscriber = void 0;

        try {
          subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          // It's not safe for commitRoot() to throw.
          // Store the error for now and we'll re-throw in finishRendering().
          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        } finally {
          // Clear completed interactions from the pending Map.
          // Unless the render was suspended or cascading work was scheduled,
          // In which case– leave pending interactions until the subsequent render.
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            // Only decrement the pending interaction count if we're done.
            // If there's still work at the current priority,
            // That indicates that we are waiting for suspense data.
            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
              pendingInteractionMap.delete(scheduledExpirationTime);
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    // It's not safe for commitRoot() to throw.
                    // Store the error for now and we'll re-throw in finishRendering().
                    if (!hasUnhandledError) {
                      hasUnhandledError = true;
                      unhandledError = error;
                    }
                  }
                }
              });
            }
          });
        }
      }
    }

    function resetChildExpirationTime(workInProgress, renderTime) {
      if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
        // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
      }

      var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // We're in profiling mode.
        // Let's use this same traversal to update the render durations.
        var actualDuration = workInProgress.actualDuration;
        var treeBaseDuration = workInProgress.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0.
        // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration.
        // If the fiber has not been cloned though, (meaning no work was done),
        // Then this value will reflect the amount of time spent working on a previous render.
        // In that case it should not bubble.
        // We determine whether it was cloned by comparing the child pointer.

        var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;
        var child = workInProgress.child;

        while (child !== null) {
          var childUpdateExpirationTime = child.expirationTime;
          var childChildExpirationTime = child.childExpirationTime;

          if (childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childUpdateExpirationTime;
          }

          if (childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childChildExpirationTime;
          }

          if (shouldBubbleActualDurations) {
            actualDuration += child.actualDuration;
          }

          treeBaseDuration += child.treeBaseDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
        workInProgress.treeBaseDuration = treeBaseDuration;
      } else {
        var _child = workInProgress.child;

        while (_child !== null) {
          var _childUpdateExpirationTime = _child.expirationTime;
          var _childChildExpirationTime = _child.childExpirationTime;

          if (_childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childUpdateExpirationTime;
          }

          if (_childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childChildExpirationTime;
          }

          _child = _child.sibling;
        }
      }

      workInProgress.childExpirationTime = newChildExpirationTime;
    }

    function completeUnitOfWork(workInProgress) {
      // Attempt to complete the current unit of work, then move to the
      // next sibling. If there are no more siblings, return to the
      // parent fiber.
      while (true) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current$$1 = workInProgress.alternate;
        {
          setCurrentFiber(workInProgress);
        }
        var returnFiber = workInProgress.return;
        var siblingFiber = workInProgress.sibling;

        if ((workInProgress.effectTag & Incomplete) === NoEffect) {
          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            // Don't replay if it fails during completion phase.
            mayReplayFailedUnitOfWork = false;
          } // This fiber completed.
          // Remember we're completing this unit so we can find a boundary if it fails.


          nextUnitOfWork = workInProgress;

          if (enableProfilerTimer) {
            if (workInProgress.mode & ProfileMode) {
              startProfilerTimer(workInProgress);
            }

            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);

            if (workInProgress.mode & ProfileMode) {
              // Update render duration assuming we didn't error.
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }
          } else {
            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
          }

          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            // We're out of completion phase so replaying is fine now.
            mayReplayFailedUnitOfWork = true;
          }

          stopWorkTimer(workInProgress);
          resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
          {
            resetCurrentFiber();
          }

          if (nextUnitOfWork !== null) {
            // Completing this fiber spawned new work. Work on that next.
            return nextUnitOfWork;
          }

          if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
          (returnFiber.effectTag & Incomplete) === NoEffect) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = workInProgress.firstEffect;
            }

            if (workInProgress.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
              }

              returnFiber.lastEffect = workInProgress.lastEffect;
            } // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if
            // needed, by doing multiple passes over the effect list. We don't want
            // to schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.


            var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect list.
            // PerformedWork effect is read by React DevTools but shouldn't be committed.

            if (effectTag > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress;
              } else {
                returnFiber.firstEffect = workInProgress;
              }

              returnFiber.lastEffect = workInProgress;
            }
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            // We've reached the root.
            return null;
          }
        } else {
          if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
            // Record the render duration for the fiber that errored.
            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

            var actualDuration = workInProgress.actualDuration;
            var child = workInProgress.child;

            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }

            workInProgress.actualDuration = actualDuration;
          } // This fiber did not complete because something threw. Pop values off
          // the stack without entering the complete phase. If this is a boundary,
          // capture values if possible.


          var next = unwindWork(workInProgress, nextRenderExpirationTime); // Because this fiber did not complete, don't reset its expiration time.

          if (workInProgress.effectTag & DidCapture) {
            // Restarting an error boundary
            stopFailedWorkTimer(workInProgress);
          } else {
            stopWorkTimer(workInProgress);
          }

          {
            resetCurrentFiber();
          }

          if (next !== null) {
            stopWorkTimer(workInProgress);

            if (true && ReactFiberInstrumentation_1.debugTool) {
              ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
            } // If completing this work spawned new work, do that next. We'll come
            // back here again.
            // Since we're restarting, remove anything that is not a host effect
            // from the effect tag.


            next.effectTag &= HostEffectMask;
            return next;
          }

          if (returnFiber !== null) {
            // Mark the parent fiber as incomplete and clear its effect list.
            returnFiber.firstEffect = returnFiber.lastEffect = null;
            returnFiber.effectTag |= Incomplete;
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            return null;
          }
        }
      } // Without this explicit null return Flow complains of invalid return type
      // TODO Remove the above while(true) loop
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function performUnitOfWork(workInProgress) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current$$1 = workInProgress.alternate; // See if beginning this work spawns more work.

      startWorkTimer(workInProgress);
      {
        setCurrentFiber(workInProgress);
      }

      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
      }

      var next = void 0;

      if (enableProfilerTimer) {
        if (workInProgress.mode & ProfileMode) {
          startProfilerTimer(workInProgress);
        }

        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
        workInProgress.memoizedProps = workInProgress.pendingProps;

        if (workInProgress.mode & ProfileMode) {
          // Record the render duration assuming we didn't bailout (or error).
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
        }
      } else {
        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
        workInProgress.memoizedProps = workInProgress.pendingProps;
      }

      {
        resetCurrentFiber();

        if (isReplayingFailedUnitOfWork) {
          // Currently replaying a failed unit of work. This should be unreachable,
          // because the render phase is meant to be idempotent, and it should
          // have thrown again. Since it didn't, rethrow the original error, so
          // React's internal stack is not misaligned.
          rethrowOriginalError();
        }
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
      }

      if (next === null) {
        // If this doesn't spawn new work, complete the current work.
        next = completeUnitOfWork(workInProgress);
      }

      ReactCurrentOwner$2.current = null;
      return next;
    }

    function workLoop(isYieldy) {
      if (!isYieldy) {
        // Flush work without yielding
        while (nextUnitOfWork !== null) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } else {
        // Flush asynchronous work until there's a higher priority event
        while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    }

    function renderRoot(root, isYieldy) {
      !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      flushPassiveEffects();
      isWorking = true;
      var previousDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;
      var expirationTime = root.nextExpirationTimeToWorkOn; // Check if we're starting from a fresh stack, or if we're resuming from
      // previously yielded work.

      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
        // Reset the stack and start working from the root.
        resetStack();
        nextRoot = root;
        nextRenderExpirationTime = expirationTime;
        nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
        root.pendingCommitExpirationTime = NoWork;

        if (enableSchedulerTracing) {
          // Determine which interactions this batch of work currently includes,
          // So that we can accurately attribute time spent working on it,
          var interactions = new Set();
          root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function (interaction) {
                return interactions.add(interaction);
              });
            }
          }); // Store the current set of interactions on the FiberRoot for a few reasons:
          // We can re-use it in hot functions like renderRoot() without having to recalculate it.
          // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
          // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.

          root.memoizedInteractions = interactions;

          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);

              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                // Work thrown by an interaction tracing subscriber should be rethrown,
                // But only once it's safe (to avoid leaving the scheduler in an invalid state).
                // Store the error for now and we'll re-throw in finishRendering().
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }
        }
      }

      var prevInteractions = null;

      if (enableSchedulerTracing) {
        // We're about to start new traced work.
        // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
      }

      var didFatal = false;
      startWorkLoopTimer(nextUnitOfWork);

      do {
        try {
          workLoop(isYieldy);
        } catch (thrownValue) {
          resetContextDependences();
          resetHooks(); // Reset in case completion throws.
          // This is only used in DEV and when replaying is on.

          var mayReplay = void 0;

          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            mayReplay = mayReplayFailedUnitOfWork;
            mayReplayFailedUnitOfWork = true;
          }

          if (nextUnitOfWork === null) {
            // This is a fatal error.
            didFatal = true;
            onUncaughtError(thrownValue);
          } else {
            if (enableProfilerTimer && nextUnitOfWork.mode & ProfileMode) {
              // Record the time spent rendering before an error was thrown.
              // This avoids inaccurate Profiler durations in the case of a suspended render.
              stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
            }

            {
              // Reset global debug state
              // We assume this is defined in DEV
              resetCurrentlyProcessingQueue();
            }

            if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
              if (mayReplay) {
                var failedUnitOfWork = nextUnitOfWork;
                replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
              }
            } // TODO: we already know this isn't true in some cases.
            // At least this shows a nicer error message until we figure out the cause.
            // https://github.com/facebook/react/issues/12449#issuecomment-386727431


            !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;
            var sourceFiber = nextUnitOfWork;
            var returnFiber = sourceFiber.return;

            if (returnFiber === null) {
              // This is the root. The root could capture its own errors. However,
              // we don't know if it errors before or after we pushed the host
              // context. This information is needed to avoid a stack mismatch.
              // Because we're not sure, treat this as a fatal error. We could track
              // which phase it fails in, but doesn't seem worth it. At least
              // for now.
              didFatal = true;
              onUncaughtError(thrownValue);
            } else {
              throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
              nextUnitOfWork = completeUnitOfWork(sourceFiber);
              continue;
            }
          }
        }

        break;
      } while (true);

      if (enableSchedulerTracing) {
        // Traced work is done for now; restore the previous interactions.
        tracing.__interactionsRef.current = prevInteractions;
      } // We're done performing work. Time to clean up.


      isWorking = false;
      ReactCurrentDispatcher.current = previousDispatcher;
      resetContextDependences();
      resetHooks(); // Yield back to main thread.

      if (didFatal) {
        var _didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
        interruptedBy = null; // There was a fatal error.

        {
          resetStackAfterFatalErrorInDev();
        } // `nextRoot` points to the in-progress root. A non-null value indicates
        // that we're in the middle of an async render. Set it to null to indicate
        // there's no more work to be done in the current batch.

        nextRoot = null;
        onFatal(root);
        return;
      }

      if (nextUnitOfWork !== null) {
        // There's still remaining async work in this tree, but we ran out of time
        // in the current frame. Yield back to the renderer. Unless we're
        // interrupted by a higher priority update, we'll continue later from where
        // we left off.
        var _didCompleteRoot2 = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
        interruptedBy = null;
        onYield(root);
        return;
      } // We completed the whole tree.


      var didCompleteRoot = true;
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      var rootWorkInProgress = root.current.alternate;
      !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0; // `nextRoot` points to the in-progress root. A non-null value indicates
      // that we're in the middle of an async render. Set it to null to indicate
      // there's no more work to be done in the current batch.

      nextRoot = null;
      interruptedBy = null;

      if (nextRenderDidError) {
        // There was an error
        if (hasLowerPriorityWork(root, expirationTime)) {
          // There's lower priority work. If so, it may have the effect of fixing
          // the exception that was just thrown. Exit without committing. This is
          // similar to a suspend, but without a timeout because we're not waiting
          // for a promise to resolve. React will restart at the lower
          // priority level.
          markSuspendedPriorityLevel(root, expirationTime);
          var suspendedExpirationTime = expirationTime;
          var rootExpirationTime = root.expirationTime;
          onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        } else if ( // There's no lower priority work, but we're rendering asynchronously.
        // Synchronously attempt to render the same level one more time. This is
        // similar to a suspend, but without a timeout because we're not waiting
        // for a promise to resolve.
        !root.didError && isYieldy) {
          root.didError = true;

          var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;

          var _rootExpirationTime = root.expirationTime = Sync;

          onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        }
      }

      if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
        // The tree was suspended.
        var _suspendedExpirationTime2 = expirationTime;
        markSuspendedPriorityLevel(root, _suspendedExpirationTime2); // Find the earliest uncommitted expiration time in the tree, including
        // work that is suspended. The timeout threshold cannot be longer than
        // the overall expiration.

        var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
        var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);

        if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
          nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
        } // Subtract the current time from the absolute timeout to get the number
        // of milliseconds until the timeout. In other words, convert an absolute
        // timestamp to a relative time. This is the value that is passed
        // to `setTimeout`.


        var currentTimeMs = expirationTimeToMs(requestCurrentTime());
        var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
        msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout; // TODO: Account for the Just Noticeable Difference

        var _rootExpirationTime2 = root.expirationTime;
        onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
        return;
      } // Ready to commit.


      onComplete(root, rootWorkInProgress, expirationTime);
    }

    function captureCommitPhaseError(sourceFiber, value) {
      var expirationTime = Sync;
      var fiber = sourceFiber.return;

      while (fiber !== null) {
        switch (fiber.tag) {
          case ClassComponent:
            var ctor = fiber.type;
            var instance = fiber.stateNode;

            if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(value, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
              return;
            }

            break;

          case HostRoot:
            {
              var _errorInfo = createCapturedValue(value, sourceFiber);

              var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);

              enqueueUpdate(fiber, _update);
              scheduleWork(fiber, expirationTime);
              return;
            }
        }

        fiber = fiber.return;
      }

      if (sourceFiber.tag === HostRoot) {
        // Error was thrown at the root. There is no parent, so the root
        // itself should capture it.
        var rootFiber = sourceFiber;

        var _errorInfo2 = createCapturedValue(value, rootFiber);

        var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);

        enqueueUpdate(rootFiber, _update2);
        scheduleWork(rootFiber, expirationTime);
      }
    }

    function computeThreadID(expirationTime, interactionThreadID) {
      // Interaction threads are unique per root and expiration time.
      return expirationTime * 1000 + interactionThreadID;
    } // Creates a unique async expiration time.


    function computeUniqueAsyncExpiration() {
      var currentTime = requestCurrentTime();
      var result = computeAsyncExpiration(currentTime);

      if (result >= lastUniqueAsyncExpiration) {
        // Since we assume the current time monotonically increases, we only hit
        // this branch when computeUniqueAsyncExpiration is fired multiple times
        // within a 200ms window (or whatever the async bucket size is).
        result = lastUniqueAsyncExpiration - 1;
      }

      lastUniqueAsyncExpiration = result;
      return lastUniqueAsyncExpiration;
    }

    function computeExpirationForFiber(currentTime, fiber) {
      var priorityLevel = scheduler.unstable_getCurrentPriorityLevel();
      var expirationTime = void 0;

      if ((fiber.mode & ConcurrentMode) === NoContext) {
        // Outside of concurrent mode, updates are always synchronous.
        expirationTime = Sync;
      } else if (isWorking && !isCommitting$1) {
        // During render phase, updates expire during as the current render.
        expirationTime = nextRenderExpirationTime;
      } else {
        switch (priorityLevel) {
          case scheduler.unstable_ImmediatePriority:
            expirationTime = Sync;
            break;

          case scheduler.unstable_UserBlockingPriority:
            expirationTime = computeInteractiveExpiration(currentTime);
            break;

          case scheduler.unstable_NormalPriority:
            // This is a normal, concurrent update
            expirationTime = computeAsyncExpiration(currentTime);
            break;

          case scheduler.unstable_LowPriority:
          case scheduler.unstable_IdlePriority:
            expirationTime = Never;
            break;

          default:
            invariant(false, 'Unknown priority level. This error is likely caused by a bug in React. Please file an issue.');
        } // If we're in the middle of rendering a tree, do not update at the same
        // expiration time that is already rendering.


        if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
          expirationTime -= 1;
        }
      } // Keep track of the lowest pending interactive expiration time. This
      // allows us to synchronously flush all interactive updates
      // when needed.
      // TODO: Move this to renderer?


      if (priorityLevel === scheduler.unstable_UserBlockingPriority && (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime)) {
        lowestPriorityPendingInteractiveExpirationTime = expirationTime;
      }

      return expirationTime;
    }

    function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
      // Schedule the timeout.
      if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
        nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
      }
    }

    function renderDidError() {
      nextRenderDidError = true;
    }

    function pingSuspendedRoot(root, thenable, pingTime) {
      // A promise that previously suspended React from committing has resolved.
      // If React is still suspended, try again at the previous level (pingTime).
      var pingCache = root.pingCache;

      if (pingCache !== null) {
        // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(thenable);
      }

      if (nextRoot !== null && nextRenderExpirationTime === pingTime) {
        // Received a ping at the same priority level at which we're currently
        // rendering. Restart from the root.
        nextRoot = null;
      } else {
        // Confirm that the root is still suspended at this level. Otherwise exit.
        if (isPriorityLevelSuspended(root, pingTime)) {
          // Ping at the original level
          markPingedPriorityLevel(root, pingTime);
          var rootExpirationTime = root.expirationTime;

          if (rootExpirationTime !== NoWork) {
            requestWork(root, rootExpirationTime);
          }
        }
      }
    }

    function retryTimedOutBoundary(boundaryFiber, thenable) {
      // The boundary fiber (a Suspense component) previously timed out and was
      // rendered in its fallback state. One of the promises that suspended it has
      // resolved, which means at least part of the tree was likely unblocked. Try
      var retryCache = void 0;

      if (enableSuspenseServerRenderer) {
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            break;

          case DehydratedSuspenseComponent:
            retryCache = boundaryFiber.memoizedState;
            break;

          default:
            invariant(false, 'Pinged unknown suspense boundary type. This is probably a bug in React.');
        }
      } else {
        retryCache = boundaryFiber.stateNode;
      }

      if (retryCache !== null) {
        // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(thenable);
      }

      var currentTime = requestCurrentTime();
      var retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
      var root = scheduleWorkToRoot(boundaryFiber, retryTime);

      if (root !== null) {
        markPendingPriorityLevel(root, retryTime);
        var rootExpirationTime = root.expirationTime;

        if (rootExpirationTime !== NoWork) {
          requestWork(root, rootExpirationTime);
        }
      }
    }

    function scheduleWorkToRoot(fiber, expirationTime) {
      recordScheduleUpdate();
      {
        if (fiber.tag === ClassComponent) {
          var instance = fiber.stateNode;
          warnAboutInvalidUpdates(instance);
        }
      } // Update the source fiber's expiration time

      if (fiber.expirationTime < expirationTime) {
        fiber.expirationTime = expirationTime;
      }

      var alternate = fiber.alternate;

      if (alternate !== null && alternate.expirationTime < expirationTime) {
        alternate.expirationTime = expirationTime;
      } // Walk the parent path to the root and update the child expiration time.


      var node = fiber.return;
      var root = null;

      if (node === null && fiber.tag === HostRoot) {
        root = fiber.stateNode;
      } else {
        while (node !== null) {
          alternate = node.alternate;

          if (node.childExpirationTime < expirationTime) {
            node.childExpirationTime = expirationTime;

            if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }
          } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
            alternate.childExpirationTime = expirationTime;
          }

          if (node.return === null && node.tag === HostRoot) {
            root = node.stateNode;
            break;
          }

          node = node.return;
        }
      }

      if (enableSchedulerTracing) {
        if (root !== null) {
          var interactions = tracing.__interactionsRef.current;

          if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);

            if (pendingInteractions != null) {
              interactions.forEach(function (interaction) {
                if (!pendingInteractions.has(interaction)) {
                  // Update the pending async work count for previously unscheduled interaction.
                  interaction.__count++;
                }

                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

              interactions.forEach(function (interaction) {
                interaction.__count++;
              });
            }

            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
      }

      return root;
    }

    function warnIfNotCurrentlyBatchingInDev(fiber) {
      {
        if (isRendering === false && isBatchingUpdates === false) {
          warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see in the browser." + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
        }
      }
    }

    function scheduleWork(fiber, expirationTime) {
      var root = scheduleWorkToRoot(fiber, expirationTime);

      if (root === null) {
        {
          switch (fiber.tag) {
            case ClassComponent:
              warnAboutUpdateOnUnmounted(fiber, true);
              break;

            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
              warnAboutUpdateOnUnmounted(fiber, false);
              break;
          }
        }
        return;
      }

      if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
        // This is an interruption. (Used for performance tracking.)
        interruptedBy = fiber;
        resetStack();
      }

      markPendingPriorityLevel(root, expirationTime);

      if ( // If we're in the render phase, we don't need to schedule this root
      // for an update, because we'll do it before we exit...
      !isWorking || isCommitting$1 || // ...unless this is a different root than the one we're rendering.
      nextRoot !== root) {
        var rootExpirationTime = root.expirationTime;
        requestWork(root, rootExpirationTime);
      }

      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        // Reset this back to zero so subsequent updates don't throw.
        nestedUpdateCount = 0;
        invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
      }
    }

    function syncUpdates(fn, a, b, c, d) {
      return scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function () {
        return fn(a, b, c, d);
      });
    } // TODO: Everything below this is written as if it has been lifted to the
    // renderers. I'll do this in a follow-up.
    // Linked-list of roots


    var firstScheduledRoot = null;
    var lastScheduledRoot = null;
    var callbackExpirationTime = NoWork;
    var callbackID = void 0;
    var isRendering = false;
    var nextFlushedRoot = null;
    var nextFlushedExpirationTime = NoWork;
    var lowestPriorityPendingInteractiveExpirationTime = NoWork;
    var hasUnhandledError = false;
    var unhandledError = null;
    var isBatchingUpdates = false;
    var isUnbatchingUpdates = false;
    var completedBatches = null;
    var originalStartTimeMs = scheduler.unstable_now();
    var currentRendererTime = msToExpirationTime(originalStartTimeMs);
    var currentSchedulerTime = currentRendererTime; // Use these to prevent an infinite loop of nested updates

    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var lastCommittedRootDuringThisBatch = null;

    function recomputeCurrentRendererTime() {
      var currentTimeMs = scheduler.unstable_now() - originalStartTimeMs;
      currentRendererTime = msToExpirationTime(currentTimeMs);
    }

    function scheduleCallbackWithExpirationTime(root, expirationTime) {
      if (callbackExpirationTime !== NoWork) {
        // A callback is already scheduled. Check its expiration time (timeout).
        if (expirationTime < callbackExpirationTime) {
          // Existing callback has sufficient timeout. Exit.
          return;
        } else {
          if (callbackID !== null) {
            // Existing callback has insufficient timeout. Cancel and schedule a
            // new one.
            scheduler.unstable_cancelCallback(callbackID);
          }
        } // The request callback timer is already running. Don't start a new one.

      } else {
        startRequestCallbackTimer();
      }

      callbackExpirationTime = expirationTime;
      var currentMs = scheduler.unstable_now() - originalStartTimeMs;
      var expirationTimeMs = expirationTimeToMs(expirationTime);
      var timeout = expirationTimeMs - currentMs;
      callbackID = scheduler.unstable_scheduleCallback(performAsyncWork, {
        timeout: timeout
      });
    } // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
    // onYield is called upon exiting. We use these in lieu of returning a tuple.
    // I've also chosen not to inline them into renderRoot because these will
    // eventually be lifted into the renderer.


    function onFatal(root) {
      root.finishedWork = null;
    }

    function onComplete(root, finishedWork, expirationTime) {
      root.pendingCommitExpirationTime = expirationTime;
      root.finishedWork = finishedWork;
    }

    function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
      root.expirationTime = rootExpirationTime;

      if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
        // Don't wait an additional tick. Commit the tree immediately.
        root.pendingCommitExpirationTime = suspendedExpirationTime;
        root.finishedWork = finishedWork;
      } else if (msUntilTimeout > 0) {
        // Wait `msUntilTimeout` milliseconds before committing.
        root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
      }
    }

    function onYield(root) {
      root.finishedWork = null;
    }

    function onTimeout(root, finishedWork, suspendedExpirationTime) {
      // The root timed out. Commit it.
      root.pendingCommitExpirationTime = suspendedExpirationTime;
      root.finishedWork = finishedWork; // Read the current time before entering the commit phase. We can be
      // certain this won't cause tearing related to batching of event updates
      // because we're at the top of a timer event.

      recomputeCurrentRendererTime();
      currentSchedulerTime = currentRendererTime;
      flushRoot(root, suspendedExpirationTime);
    }

    function onCommit(root, expirationTime) {
      root.expirationTime = expirationTime;
      root.finishedWork = null;
    }

    function requestCurrentTime() {
      // requestCurrentTime is called by the scheduler to compute an expiration
      // time.
      //
      // Expiration times are computed by adding to the current time (the start
      // time). However, if two updates are scheduled within the same event, we
      // should treat their start times as simultaneous, even if the actual clock
      // time has advanced between the first and second call.
      // In other words, because expiration times determine how updates are batched,
      // we want all updates of like priority that occur within the same event to
      // receive the same expiration time. Otherwise we get tearing.
      //
      // We keep track of two separate times: the current "renderer" time and the
      // current "scheduler" time. The renderer time can be updated whenever; it
      // only exists to minimize the calls performance.now.
      //
      // But the scheduler time can only be updated if there's no pending work, or
      // if we know for certain that we're not in the middle of an event.
      if (isRendering) {
        // We're already rendering. Return the most recently read time.
        return currentSchedulerTime;
      } // Check if there's pending work.


      findHighestPriorityRoot();

      if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
        // If there's no pending work, or if the pending work is offscreen, we can
        // read the current time without risk of tearing.
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;
        return currentSchedulerTime;
      } // There's already pending work. We might be in the middle of a browser
      // event. If we were to read the current time, it could cause multiple updates
      // within the same event to receive different expiration times, leading to
      // tearing. Return the last read time. During the next idle callback, the
      // time will be updated.


      return currentSchedulerTime;
    } // requestWork is called by the scheduler whenever a root receives an update.
    // It's up to the renderer to call renderRoot at some point in the future.


    function requestWork(root, expirationTime) {
      addRootToSchedule(root, expirationTime);

      if (isRendering) {
        // Prevent reentrancy. Remaining work will be scheduled at the end of
        // the currently rendering batch.
        return;
      }

      if (isBatchingUpdates) {
        // Flush work at the end of the batch.
        if (isUnbatchingUpdates) {
          // ...unless we're inside unbatchedUpdates, in which case we should
          // flush it now.
          nextFlushedRoot = root;
          nextFlushedExpirationTime = Sync;
          performWorkOnRoot(root, Sync, false);
        }

        return;
      } // TODO: Get rid of Sync and use current time?


      if (expirationTime === Sync) {
        performSyncWork();
      } else {
        scheduleCallbackWithExpirationTime(root, expirationTime);
      }
    }

    function addRootToSchedule(root, expirationTime) {
      // Add the root to the schedule.
      // Check if this root is already part of the schedule.
      if (root.nextScheduledRoot === null) {
        // This root is not already scheduled. Add it.
        root.expirationTime = expirationTime;

        if (lastScheduledRoot === null) {
          firstScheduledRoot = lastScheduledRoot = root;
          root.nextScheduledRoot = root;
        } else {
          lastScheduledRoot.nextScheduledRoot = root;
          lastScheduledRoot = root;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
        }
      } else {
        // This root is already scheduled, but its priority may have increased.
        var remainingExpirationTime = root.expirationTime;

        if (expirationTime > remainingExpirationTime) {
          // Update the priority.
          root.expirationTime = expirationTime;
        }
      }
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = NoWork;
      var highestPriorityRoot = null;

      if (lastScheduledRoot !== null) {
        var previousScheduledRoot = lastScheduledRoot;
        var root = firstScheduledRoot;

        while (root !== null) {
          var remainingExpirationTime = root.expirationTime;

          if (remainingExpirationTime === NoWork) {
            // This root no longer has work. Remove it from the scheduler.
            // TODO: This check is redudant, but Flow is confused by the branch
            // below where we set lastScheduledRoot to null, even though we break
            // from the loop right after.
            !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;

            if (root === root.nextScheduledRoot) {
              // This is the only root in the list.
              root.nextScheduledRoot = null;
              firstScheduledRoot = lastScheduledRoot = null;
              break;
            } else if (root === firstScheduledRoot) {
              // This is the first root in the list.
              var next = root.nextScheduledRoot;
              firstScheduledRoot = next;
              lastScheduledRoot.nextScheduledRoot = next;
              root.nextScheduledRoot = null;
            } else if (root === lastScheduledRoot) {
              // This is the last root in the list.
              lastScheduledRoot = previousScheduledRoot;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
              root.nextScheduledRoot = null;
              break;
            } else {
              previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
              root.nextScheduledRoot = null;
            }

            root = previousScheduledRoot.nextScheduledRoot;
          } else {
            if (remainingExpirationTime > highestPriorityWork) {
              // Update the priority, if it's higher
              highestPriorityWork = remainingExpirationTime;
              highestPriorityRoot = root;
            }

            if (root === lastScheduledRoot) {
              break;
            }

            if (highestPriorityWork === Sync) {
              // Sync is highest priority by definition so
              // we can stop searching.
              break;
            }

            previousScheduledRoot = root;
            root = root.nextScheduledRoot;
          }
        }
      }

      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    } // TODO: This wrapper exists because many of the older tests (the ones that use
    // flushDeferredPri) rely on the number of times `shouldYield` is called. We
    // should get rid of it.


    var didYield = false;

    function shouldYieldToRenderer() {
      if (didYield) {
        return true;
      }

      if (scheduler.unstable_shouldYield()) {
        didYield = true;
        return true;
      }

      return false;
    }

    function performAsyncWork() {
      try {
        if (!shouldYieldToRenderer()) {
          // The callback timed out. That means at least one update has expired.
          // Iterate through the root schedule. If they contain expired work, set
          // the next render expiration time to the current time. This has the effect
          // of flushing all expired work in a single batch, instead of flushing each
          // level one at a time.
          if (firstScheduledRoot !== null) {
            recomputeCurrentRendererTime();
            var root = firstScheduledRoot;

            do {
              didExpireAtExpirationTime(root, currentRendererTime); // The root schedule is circular, so this is never null.

              root = root.nextScheduledRoot;
            } while (root !== firstScheduledRoot);
          }
        }

        performWork(NoWork, true);
      } finally {
        didYield = false;
      }
    }

    function performSyncWork() {
      performWork(Sync, false);
    }

    function performWork(minExpirationTime, isYieldy) {
      // Keep working on roots until there's no more work, or until there's a higher
      // priority event.
      findHighestPriorityRoot();

      if (isYieldy) {
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;

        if (enableUserTimingAPI) {
          var didExpire = nextFlushedExpirationTime > currentRendererTime;
          var timeout = expirationTimeToMs(nextFlushedExpirationTime);
          stopRequestCallbackTimer(didExpire, timeout);
        }

        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
          findHighestPriorityRoot();
          recomputeCurrentRendererTime();
          currentSchedulerTime = currentRendererTime;
        }
      } else {
        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
          findHighestPriorityRoot();
        }
      } // We're done flushing work. Either we ran out of time in this callback,
      // or there's no more work left with sufficient priority.
      // If we're inside a callback, set this to false since we just completed it.


      if (isYieldy) {
        callbackExpirationTime = NoWork;
        callbackID = null;
      } // If there's work left over, schedule a new callback.


      if (nextFlushedExpirationTime !== NoWork) {
        scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
      } // Clean-up.


      finishRendering();
    }

    function flushRoot(root, expirationTime) {
      !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0; // Perform work on root as if the given expiration time is the current time.
      // This has the effect of synchronously flushing all work up to and
      // including the given time.

      nextFlushedRoot = root;
      nextFlushedExpirationTime = expirationTime;
      performWorkOnRoot(root, expirationTime, false); // Flush any sync work that was scheduled by lifecycles

      performSyncWork();
    }

    function finishRendering() {
      nestedUpdateCount = 0;
      lastCommittedRootDuringThisBatch = null;

      if (completedBatches !== null) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            if (!hasUnhandledError) {
              hasUnhandledError = true;
              unhandledError = error;
            }
          }
        }
      }

      if (hasUnhandledError) {
        var error = unhandledError;
        unhandledError = null;
        hasUnhandledError = false;
        throw error;
      }
    }

    function performWorkOnRoot(root, expirationTime, isYieldy) {
      !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      isRendering = true; // Check if this is async work or sync/expired work.

      if (!isYieldy) {
        // Flush work without yielding.
        // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
        // may want to perform some work without yielding, but also without
        // requiring the root to complete (by triggering placeholders).
        var finishedWork = root.finishedWork;

        if (finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, finishedWork, expirationTime);
        } else {
          root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.

          var timeoutHandle = root.timeoutHandle;

          if (timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(timeoutHandle);
          }

          renderRoot(root, isYieldy);
          finishedWork = root.finishedWork;

          if (finishedWork !== null) {
            // We've completed the root. Commit it.
            completeRoot(root, finishedWork, expirationTime);
          }
        }
      } else {
        // Flush async work.
        var _finishedWork = root.finishedWork;

        if (_finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.

          var _timeoutHandle = root.timeoutHandle;

          if (_timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(_timeoutHandle);
          }

          renderRoot(root, isYieldy);
          _finishedWork = root.finishedWork;

          if (_finishedWork !== null) {
            // We've completed the root. Check the if we should yield one more time
            // before committing.
            if (!shouldYieldToRenderer()) {
              // Still time left. Commit the root.
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              // There's no time left. Mark this root as complete. We'll come
              // back and commit it later.
              root.finishedWork = _finishedWork;
            }
          }
        }
      }

      isRendering = false;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      // Check if there's a batch that matches this expiration time.
      var firstBatch = root.firstBatch;

      if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
        if (completedBatches === null) {
          completedBatches = [firstBatch];
        } else {
          completedBatches.push(firstBatch);
        }

        if (firstBatch._defer) {
          // This root is blocked from committing by a batch. Unschedule it until
          // we receive another update.
          root.finishedWork = finishedWork;
          root.expirationTime = NoWork;
          return;
        }
      } // Commit the root.


      root.finishedWork = null; // Check if this is a nested update (a sync update scheduled during the
      // commit phase).

      if (root === lastCommittedRootDuringThisBatch) {
        // If the next root is the same as the previous root, this is a nested
        // update. To prevent an infinite loop, increment the nested update count.
        nestedUpdateCount++;
      } else {
        // Reset whenever we switch roots.
        lastCommittedRootDuringThisBatch = root;
        nestedUpdateCount = 0;
      }

      scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function () {
        commitRoot(root, finishedWork);
      });
    }

    function onUncaughtError(error) {
      !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0; // Unschedule this root so we don't work on it again until there's
      // another update.

      nextFlushedRoot.expirationTime = NoWork;

      if (!hasUnhandledError) {
        hasUnhandledError = true;
        unhandledError = error;
      }
    } // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.


    function batchedUpdates$1(fn, a) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return fn(a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    } // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.


    function unbatchedUpdates(fn, a) {
      if (isBatchingUpdates && !isUnbatchingUpdates) {
        isUnbatchingUpdates = true;

        try {
          return fn(a);
        } finally {
          isUnbatchingUpdates = false;
        }
      }

      return fn(a);
    } // TODO: Batching should be implemented at the renderer level, not within
    // the reconciler.


    function flushSync(fn, a) {
      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return syncUpdates(fn, a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;
        performSyncWork();
      }
    }

    function interactiveUpdates$1(fn, a, b) {
      // If there are any pending interactive updates, synchronously flush them.
      // This needs to happen before we read any handlers, because the effect of
      // the previous event may influence which handlers are called during
      // this event.
      if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, false);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }

      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return scheduler.unstable_runWithPriority(scheduler.unstable_UserBlockingPriority, function () {
          return fn(a, b);
        });
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    }

    function flushInteractiveUpdates$1() {
      if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, false);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }
    }

    function flushControlled(fn) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        syncUpdates(fn);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    } // 0 is PROD, 1 is DEV.
    // Might add PROFILE later.


    var didWarnAboutNestedUpdates = void 0;
    var didWarnAboutFindNodeInStrictMode = void 0;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }

    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }

      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);

      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;

        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }

      return parentContext;
    }

    function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
      {
        if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
        }
      }
      var update = createUpdate(expirationTime); // Caution: React DevTools currently depends on this property
      // being called "element".

      update.payload = {
        element: element
      };
      callback = callback === undefined ? null : callback;

      if (callback !== null) {
        !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
        update.callback = callback;
      }

      flushPassiveEffects();
      enqueueUpdate(current$$1, update);
      scheduleWork(current$$1, expirationTime);
      return expirationTime;
    }

    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
      // TODO: If this is a nested container, this won't be the root.
      var current$$1 = container.current;
      {
        if (ReactFiberInstrumentation_1.debugTool) {
          if (current$$1.alternate === null) {
            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
          } else if (element === null) {
            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
          } else {
            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
          }
        }
      }
      var context = getContextForSubtree(parentComponent);

      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      return scheduleRootUpdate(current$$1, element, expirationTime, callback);
    }

    function findHostInstance(component) {
      var fiber = get(component);

      if (fiber === undefined) {
        if (typeof component.render === 'function') {
          invariant(false, 'Unable to find node on an unmounted component.');
        } else {
          invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
        }
      }

      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);

        if (fiber === undefined) {
          if (typeof component.render === 'function') {
            invariant(false, 'Unable to find node on an unmounted component.');
          } else {
            invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
          }
        }

        var hostFiber = findCurrentHostFiber(fiber);

        if (hostFiber === null) {
          return null;
        }

        if (hostFiber.mode & StrictMode) {
          var componentName = getComponentName(fiber.type) || 'Component';

          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;

            if (fiber.mode & StrictMode) {
              warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            } else {
              warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            }
          }
        }

        return hostFiber.stateNode;
      }
      return findHostInstance(component);
    }

    function createContainer(containerInfo, isConcurrent, hydrate) {
      return createFiberRoot(containerInfo, isConcurrent, hydrate);
    }

    function updateContainer(element, container, parentComponent, callback) {
      var current$$1 = container.current;
      var currentTime = requestCurrentTime();
      var expirationTime = computeExpirationForFiber(currentTime, current$$1);
      return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
    }

    function getPublicRootInstance(container) {
      var containerFiber = container.current;

      if (!containerFiber.child) {
        return null;
      }

      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);

        default:
          return containerFiber.child.stateNode;
      }
    }

    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    var overrideProps = null;
    {
      var copyWithSetImpl = function (obj, path, idx, value) {
        if (idx >= path.length) {
          return value;
        }

        var key = path[idx];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

        updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
        return updated;
      };

      var copyWithSet = function (obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


      overrideProps = function (fiber, path, value) {
        flushPassiveEffects();
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }

        scheduleWork(fiber, Sync);
      };
    }

    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals(_assign({}, devToolsConfig, {
        overrideProps: overrideProps,
        currentDispatcherRef: ReactCurrentDispatcher,
        findHostInstanceByFiber: function (fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        },
        findFiberByHostInstance: function (instance) {
          if (!findFiberByHostInstance) {
            // Might not be implemented by the renderer.
            return null;
          }

          return findFiberByHostInstance(instance);
        }
      }));
    } // This file intentionally does *not* have the Flow annotation.
    // Don't add it. See `./inline-typed.js` for an explanation.


    function createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
    implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : '' + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    } // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.8.6'; // TODO: This type is shared between the reconciler and ReactDOM, but will
    // eventually be lifted out to the renderer.

    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings = void 0;
    var warnOnInvalidCallback = void 0;
    var didWarnAboutUnstableCreatePortal = false;
    {
      if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
        warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
      }

      topLevelUpdateWarnings = function (container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

          if (hostInstance) {
            !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
          }
        }

        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
        !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
        !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
      };

      warnOnInvalidCallback = function (callback, callerName) {
        !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
      };
    }
    setRestoreImplementation(restoreControlledState$1);

    function ReactBatch(root) {
      var expirationTime = computeUniqueAsyncExpiration();
      this._expirationTime = expirationTime;
      this._root = root;
      this._next = null;
      this._callbacks = null;
      this._didComplete = false;
      this._hasChildren = false;
      this._children = null;
      this._defer = true;
    }

    ReactBatch.prototype.render = function (children) {
      !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
      this._hasChildren = true;
      this._children = children;
      var internalRoot = this._root._internalRoot;
      var expirationTime = this._expirationTime;
      var work = new ReactWork();
      updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
      return work;
    };

    ReactBatch.prototype.then = function (onComplete) {
      if (this._didComplete) {
        onComplete();
        return;
      }

      var callbacks = this._callbacks;

      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }

      callbacks.push(onComplete);
    };

    ReactBatch.prototype.commit = function () {
      var internalRoot = this._root._internalRoot;
      var firstBatch = internalRoot.firstBatch;
      !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

      if (!this._hasChildren) {
        // This batch is empty. Return.
        this._next = null;
        this._defer = false;
        return;
      }

      var expirationTime = this._expirationTime; // Ensure this is the first batch in the list.

      if (firstBatch !== this) {
        // This batch is not the earliest batch. We need to move it to the front.
        // Update its expiration time to be the expiration time of the earliest
        // batch, so that we can flush it without flushing the other batches.
        if (this._hasChildren) {
          expirationTime = this._expirationTime = firstBatch._expirationTime; // Rendering this batch again ensures its children will be the final state
          // when we flush (updates are processed in insertion order: last
          // update wins).
          // TODO: This forces a restart. Should we print a warning?

          this.render(this._children);
        } // Remove the batch from the list.


        var previous = null;
        var batch = firstBatch;

        while (batch !== this) {
          previous = batch;
          batch = batch._next;
        }

        !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
        previous._next = batch._next; // Add it to the front.

        this._next = firstBatch;
        firstBatch = internalRoot.firstBatch = this;
      } // Synchronously flush all the work up to this batch's expiration time.


      this._defer = false;
      flushRoot(internalRoot, expirationTime); // Pop the batch from the list.

      var next = this._next;
      this._next = null;
      firstBatch = internalRoot.firstBatch = next; // Append the next earliest batch's children to the update queue.

      if (firstBatch !== null && firstBatch._hasChildren) {
        firstBatch.render(firstBatch._children);
      }
    };

    ReactBatch.prototype._onComplete = function () {
      if (this._didComplete) {
        return;
      }

      this._didComplete = true;
      var callbacks = this._callbacks;

      if (callbacks === null) {
        return;
      } // TODO: Error handling.


      for (var i = 0; i < callbacks.length; i++) {
        var _callback = callbacks[i];

        _callback();
      }
    };

    function ReactWork() {
      this._callbacks = null;
      this._didCommit = false; // TODO: Avoid need to bind by replacing callbacks in the update queue with
      // list of Work objects.

      this._onCommit = this._onCommit.bind(this);
    }

    ReactWork.prototype.then = function (onCommit) {
      if (this._didCommit) {
        onCommit();
        return;
      }

      var callbacks = this._callbacks;

      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }

      callbacks.push(onCommit);
    };

    ReactWork.prototype._onCommit = function () {
      if (this._didCommit) {
        return;
      }

      this._didCommit = true;
      var callbacks = this._callbacks;

      if (callbacks === null) {
        return;
      } // TODO: Error handling.


      for (var i = 0; i < callbacks.length; i++) {
        var _callback2 = callbacks[i];
        !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;

        _callback2();
      }
    };

    function ReactRoot(container, isConcurrent, hydrate) {
      var root = createContainer(container, isConcurrent, hydrate);
      this._internalRoot = root;
    }

    ReactRoot.prototype.render = function (children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(children, root, null, work._onCommit);
      return work;
    };

    ReactRoot.prototype.unmount = function (callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(null, root, null, work._onCommit);
      return work;
    };

    ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(children, root, parentComponent, work._onCommit);
      return work;
    };

    ReactRoot.prototype.createBatch = function () {
      var batch = new ReactBatch(this);
      var expirationTime = batch._expirationTime;
      var internalRoot = this._internalRoot;
      var firstBatch = internalRoot.firstBatch;

      if (firstBatch === null) {
        internalRoot.firstBatch = batch;
        batch._next = null;
      } else {
        // Insert sorted by expiration time then insertion order
        var insertAfter = null;
        var insertBefore = firstBatch;

        while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
          insertAfter = insertBefore;
          insertBefore = insertBefore._next;
        }

        batch._next = insertBefore;

        if (insertAfter !== null) {
          insertAfter._next = batch;
        }
      }

      return batch;
    };
    /**
     * True if the supplied DOM node is a valid node element.
     *
     * @param {?DOMElement} node The candidate DOM node.
     * @return {boolean} True if the DOM is a valid DOM node.
     * @internal
     */


    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }

    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }

      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }

    function shouldHydrateDueToLegacyHeuristic(container) {
      var rootElement = getReactRootElementInContainer(container);
      return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }

    setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);
    var warnedAboutHydrateAPI = false;

    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
      var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

      if (!shouldHydrate) {
        var warned = false;
        var rootSibling = void 0;

        while (rootSibling = container.lastChild) {
          {
            if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
              warned = true;
              warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
            }
          }
          container.removeChild(rootSibling);
        }
      }

      {
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
          warnedAboutHydrateAPI = true;
          lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
        }
      } // Legacy roots are not async by default.

      var isConcurrent = false;
      return new ReactRoot(container, isConcurrent, shouldHydrate);
    }

    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
      } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
      // member of intersection type." Whyyyyyy.

      var root = container._reactRootContainer;

      if (!root) {
        // Initial mount
        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);

        if (typeof callback === 'function') {
          var originalCallback = callback;

          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);
            originalCallback.call(instance);
          };
        } // Initial mount should not be batched.


        unbatchedUpdates(function () {
          if (parentComponent != null) {
            root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
          } else {
            root.render(children, callback);
          }
        });
      } else {
        if (typeof callback === 'function') {
          var _originalCallback = callback;

          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);

            _originalCallback.call(instance);
          };
        } // Update


        if (parentComponent != null) {
          root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
        } else {
          root.render(children, callback);
        }
      }

      return getPublicRootInstance(root._internalRoot);
    }

    function createPortal$$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0; // TODO: pass ReactDOM portal implementation as third argument

      return createPortal$1(children, container, null, key);
    }

    var ReactDOM = {
      createPortal: createPortal$$1,
      findDOMNode: function (componentOrElement) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrElement == null) {
          return null;
        }

        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }

        {
          return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
        }
        return findHostInstance(componentOrElement);
      },
      hydrate: function (element, container, callback) {
        !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        } // TODO: throw or warn if we couldn't hydrate?

        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      },
      render: function (element, container, callback) {
        !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call root.render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      },
      unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
        !isValidContainer(containerNode) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      },
      unmountComponentAtNode: function (container) {
        !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        }

        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
            !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
          } // Unmount should not be batched.

          unbatchedUpdates(function () {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
              container._reactRootContainer = null;
            });
          }); // If you call unmountComponentAtNode twice in quick succession, you'll
          // get `true` twice. That's probably fine?

          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);

            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
          }
          return false;
        }
      },
      // Temporary alias since we already shipped React 16 RC with it.
      // TODO: remove in React 17.
      unstable_createPortal: function () {
        if (!didWarnAboutUnstableCreatePortal) {
          didWarnAboutUnstableCreatePortal = true;
          lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
        }

        return createPortal$$1.apply(undefined, arguments);
      },
      unstable_batchedUpdates: batchedUpdates$1,
      unstable_interactiveUpdates: interactiveUpdates$1,
      flushSync: flushSync,
      unstable_createRoot: createRoot,
      unstable_flushControlled: flushControlled,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        // Keep in sync with ReactDOMUnstableNativeDependencies.js
        // and ReactTestUtils.js. This is an array for better minification.
        Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
      }
    };

    function createRoot(container, options) {
      var functionName = enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot';
      !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
      {
        !!container._reactRootContainer ? warningWithoutStack$1(false, 'You are calling ReactDOM.%s() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        container._reactHasBeenPassedToCreateRootDEV = true;
      }
      var hydrate = options != null && options.hydrate === true;
      return new ReactRoot(container, true, hydrate);
    }

    if (enableStableConcurrentModeAPIs) {
      ReactDOM.createRoot = createRoot;
      ReactDOM.unstable_createRoot = undefined;
    }

    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: 'react-dom'
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

          if (/^(https?|file):$/.test(protocol)) {
            console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
          }
        }
      }
    }
    var ReactDOM$2 = Object.freeze({
      default: ReactDOM
    });
    var ReactDOM$3 = ReactDOM$2 && ReactDOM || ReactDOM$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var reactDom = ReactDOM$3.default || ReactDOM$3;
    module.exports = reactDom;
  })();
}
},{"react":"../node_modules/react/index.js","object-assign":"../node_modules/object-assign/index.js","prop-types/checkPropTypes":"../node_modules/prop-types/checkPropTypes.js","scheduler":"../node_modules/scheduler/index.js","scheduler/tracing":"../node_modules/scheduler/tracing.js"}],"../node_modules/react-dom/index.js":[function(require,module,exports) {
'use strict';

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }

  if ("development" !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }

  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if ("development" === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('./cjs/react-dom.production.min.js');
} else {
  module.exports = require('./cjs/react-dom.development.js');
}
},{"./cjs/react-dom.development.js":"../node_modules/react-dom/cjs/react-dom.development.js"}],"../node_modules/warning/warning.js":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var __DEV__ = "development" !== 'production';

var warning = function () {};

if (__DEV__) {
  var printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);

    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);

    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      printWarning.apply(null, [format].concat(args));
    }
  };
}

module.exports = warning;
},{}],"../node_modules/react-is/cjs/react-is.development.js":[function(require,module,exports) {
/** @license React v16.8.6
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode


    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }

    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }

    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }

    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }

    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }

    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }

    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }

    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }

    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }

    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }

    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }

    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
  })();
}
},{}],"../node_modules/react-is/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/react-is.production.min.js');
} else {
  module.exports = require('./cjs/react-is.development.js');
}
},{"./cjs/react-is.development.js":"../node_modules/react-is/cjs/react-is.development.js"}],"../node_modules/prop-types/factoryWithTypeCheckers.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var ReactIs = require('react-is');

var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

var checkPropTypes = require('./checkPropTypes');

var has = Function.call.bind(Object.prototype.hasOwnProperty);

var printWarning = function () {};

if ("development" !== 'production') {
  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */


  var ANONYMOUS = '<<anonymous>>'; // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

  /*eslint-disable no-self-compare*/

  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */


  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  } // Make `instanceof Error` still work for returned errors.


  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ("development" !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }

    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;

          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }

      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }

          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }

        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }

      var propValue = props[propName];

      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }

      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

        if (error instanceof Error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if ("development" !== 'production') {
        if (arguments.length > 1) {
          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }

      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);

        if (type === 'symbol') {
          return String(value);
        }

        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }

      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }

      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "development" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];

      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }

      for (var key in shapeTypes) {
        var checker = shapeTypes[key];

        if (!checker) {
          continue;
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      } // We need to check all keys in case some are required but missing from
      // props.


      var allKeys = assign({}, props[propName], shapeTypes);

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;

      case 'boolean':
        return !propValue;

      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }

        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);

        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;

          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;

              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;

      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    } // falsy value can't be a Symbol


    if (!propValue) {
      return false;
    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    } // Fallback for non-spec compliant Symbols which are polyfilled.


    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  } // Equivalent of `typeof` but with special handling for array and regexp.


  function getPropType(propValue) {
    var propType = typeof propValue;

    if (Array.isArray(propValue)) {
      return 'array';
    }

    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }

    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }

    return propType;
  } // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.


  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }

    var propType = getPropType(propValue);

    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }

    return propType;
  } // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"


  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);

    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;

      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;

      default:
        return type;
    }
  } // Returns class name of the object, if any.


  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }

    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
},{"react-is":"../node_modules/react-is/index.js","object-assign":"../node_modules/object-assign/index.js","./lib/ReactPropTypesSecret":"../node_modules/prop-types/lib/ReactPropTypesSecret.js","./checkPropTypes":"../node_modules/prop-types/checkPropTypes.js"}],"../node_modules/prop-types/index.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if ("development" !== 'production') {
  var ReactIs = require('react-is'); // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod


  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}
},{"react-is":"../node_modules/react-is/index.js","./factoryWithTypeCheckers":"../node_modules/prop-types/factoryWithTypeCheckers.js"}],"../node_modules/@babel/runtime/helpers/esm/extends.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _extends;

function _extends() {
  exports.default = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}
},{}],"../node_modules/resolve-pathname/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
} // About 1.5x faster than the two-arg version of Array#splice()


function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
} // This implementation is based heavily on node's url.parse


function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];
  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';
  var hasTrailingSlash = void 0;

  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;

  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }
  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
  var result = fromParts.join('/');
  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
  return result;
}

var _default = resolvePathname;
exports.default = _default;
},{}],"../node_modules/value-equal/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function valueEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);
  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();
    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    if (aKeys.length !== bKeys.length) return false;
    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

var _default = valueEqual;
exports.default = _default;
},{}],"../node_modules/tiny-warning/dist/tiny-warning.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isProduction = "development" === 'production';

function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

var _default = warning;
exports.default = _default;
},{}],"../node_modules/tiny-invariant/dist/tiny-invariant.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isProduction = "development" === 'production';
var prefix = 'Invariant failed';

function invariant(condition, message) {
  if (condition) {
    return;
  }

  if (isProduction) {
    throw new Error(prefix);
  } else {
    throw new Error(prefix + ": " + (message || ''));
  }
}

var _default = invariant;
exports.default = _default;
},{}],"../node_modules/history/esm/history.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBrowserHistory = createBrowserHistory;
exports.createHashHistory = createHashHistory;
exports.createMemoryHistory = createMemoryHistory;
exports.createLocation = createLocation;
exports.locationsAreEqual = locationsAreEqual;
exports.parsePath = parsePath;
exports.createPath = createPath;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/extends"));

var _resolvePathname = _interopRequireDefault(require("resolve-pathname"));

var _valueEqual = _interopRequireDefault(require("value-equal"));

var _tinyWarning = _interopRequireDefault(require("tiny-warning"));

var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
}

function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
}

function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
}

function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}

function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}

function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}

function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
  return path;
}

function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = (0, _extends2.default)({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname.default)(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
}

function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual.default)(a.state, b.state);
}

function createTransitionManager() {
  var prompt = null;

  function setPrompt(nextPrompt) {
    "development" !== "production" ? (0, _tinyWarning.default)(prompt == null, 'A history supports only one prompt at a time') : void 0;
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  }

  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          "development" !== "production" ? (0, _tinyWarning.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }

  var listeners = [];

  function appendListener(fn) {
    var isActive = true;

    function listener() {
      if (isActive) fn.apply(void 0, arguments);
    }

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  }

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

function getConfirmation(message, callback) {
  callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */


function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */


function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */


function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */


function isExtraneousPopstateEvent(event) {
  event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */


function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? "development" !== "production" ? (0, _tinyInvariant.default)(false, 'Browser history needs a DOM') : (0, _tinyInvariant.default)(false) : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props,
      _props$forceRefresh = _props.forceRefresh,
      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

  function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
    "development" !== "production" ? (0, _tinyWarning.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : void 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path, state, key);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends2.default)(history, nextState);
    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (isExtraneousPopstateEvent(event)) return;
    handlePop(getDOMLocation(event.state));
  }

  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }

  var forceNextPop = false;

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  function createHref(location) {
    return basename + createPath(location);
  }

  function push(path, state) {
    "development" !== "production" ? (0, _tinyWarning.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        "development" !== "production" ? (0, _tinyWarning.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;
        window.location.href = href;
      }
    });
  }

  function replace(path, state) {
    "development" !== "production" ? (0, _tinyWarning.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        "development" !== "production" ? (0, _tinyWarning.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;
        window.location.replace(href);
      }
    });
  }

  function go(n) {
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}

function pushHashPath(path) {
  window.location.hash = path;
}

function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');
  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
}

function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? "development" !== "production" ? (0, _tinyInvariant.default)(false, 'Hash history needs a DOM') : (0, _tinyInvariant.default)(false) : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$hashType = _props.hashType,
      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  function getDOMLocation() {
    var path = decodePath(getHashPath());
    "development" !== "production" ? (0, _tinyWarning.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : void 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends2.default)(history, nextState);
    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  var forceNextPop = false;
  var ignorePath = null;

  function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  }

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  } // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)]; // Public interface

  function createHref(location) {
    return '#' + encodePath(basename + createPath(location));
  }

  function push(path, state) {
    "development" !== "production" ? (0, _tinyWarning.default)(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
        "development" !== "production" ? (0, _tinyWarning.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;
        setState();
      }
    });
  }

  function replace(path, state) {
    "development" !== "production" ? (0, _tinyWarning.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    "development" !== "production" ? (0, _tinyWarning.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */


function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      getUserConfirmation = _props.getUserConfirmation,
      _props$initialEntries = _props.initialEntries,
      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
      _props$initialIndex = _props.initialIndex,
      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends2.default)(history, nextState);
    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = createPath;

  function push(path, state) {
    "development" !== "production" ? (0, _tinyWarning.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }

  function replace(path, state) {
    "development" !== "production" ? (0, _tinyWarning.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    return transitionManager.setPrompt(prompt);
  }

  function listen(listener) {
    return transitionManager.appendListener(listener);
  }

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
}
},{"@babel/runtime/helpers/esm/extends":"../node_modules/@babel/runtime/helpers/esm/extends.js","resolve-pathname":"../node_modules/resolve-pathname/index.js","value-equal":"../node_modules/value-equal/index.js","tiny-warning":"../node_modules/tiny-warning/dist/tiny-warning.esm.js","tiny-invariant":"../node_modules/tiny-invariant/dist/tiny-invariant.esm.js"}],"../node_modules/invariant/browser.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function (condition, format, a, b, c, d, e, f) {
  if ("development" !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;

    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame

    throw error;
  }
};

module.exports = invariant;
},{}],"../node_modules/react-router/es/Router.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _warning = _interopRequireDefault(require("warning"));

var _invariant = _interopRequireDefault(require("invariant"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for putting history on context.
 */
var Router = function (_React$Component) {
  _inherits(Router, _React$Component);

  function Router() {
    var _temp, _this, _ret;

    _classCallCheck(this, Router);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props.history.location.pathname)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Router.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        history: this.props.history,
        route: {
          location: this.props.history.location,
          match: this.state.match
        }
      })
    };
  };

  Router.prototype.computeMatch = function computeMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  Router.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var _props = this.props,
        children = _props.children,
        history = _props.history;
    (0, _invariant.default)(children == null || _react.default.Children.count(children) === 1, "A <Router> may have only one child element"); // Do this here so we can setState when a <Redirect> changes the
    // location in componentWillMount. This happens e.g. when doing
    // server rendering using a <StaticRouter>.

    this.unlisten = history.listen(function () {
      _this2.setState({
        match: _this2.computeMatch(history.location.pathname)
      });
    });
  };

  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    (0, _warning.default)(this.props.history === nextProps.history, "You cannot change <Router history>");
  };

  Router.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unlisten();
  };

  Router.prototype.render = function render() {
    var children = this.props.children;
    return children ? _react.default.Children.only(children) : null;
  };

  return Router;
}(_react.default.Component);

Router.propTypes = {
  history: _propTypes.default.object.isRequired,
  children: _propTypes.default.node
};
Router.contextTypes = {
  router: _propTypes.default.object
};
Router.childContextTypes = {
  router: _propTypes.default.object.isRequired
};
var _default = Router;
exports.default = _default;
},{"warning":"../node_modules/warning/warning.js","invariant":"../node_modules/invariant/browser.js","react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js"}],"../node_modules/react-router-dom/es/Router.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Router = _interopRequireDefault(require("react-router/es/Router"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _Router.default;
exports.default = _default;
},{"react-router/es/Router":"../node_modules/react-router/es/Router.js"}],"../node_modules/react-router-dom/es/BrowserRouter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _warning = _interopRequireDefault(require("warning"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _history = require("history");

var _Router = _interopRequireDefault(require("./Router"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for a <Router> that uses HTML5 history.
 */
var BrowserRouter = function (_React$Component) {
  _inherits(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, BrowserRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createBrowserHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
    (0, _warning.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.");
  };

  BrowserRouter.prototype.render = function render() {
    return _react.default.createElement(_Router.default, {
      history: this.history,
      children: this.props.children
    });
  };

  return BrowserRouter;
}(_react.default.Component);

BrowserRouter.propTypes = {
  basename: _propTypes.default.string,
  forceRefresh: _propTypes.default.bool,
  getUserConfirmation: _propTypes.default.func,
  keyLength: _propTypes.default.number,
  children: _propTypes.default.node
};
var _default = BrowserRouter;
exports.default = _default;
},{"warning":"../node_modules/warning/warning.js","react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","history":"../node_modules/history/esm/history.js","./Router":"../node_modules/react-router-dom/es/Router.js"}],"../node_modules/react-router-dom/es/HashRouter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _warning = _interopRequireDefault(require("warning"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _history = require("history");

var _Router = _interopRequireDefault(require("./Router"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for a <Router> that uses window.location.hash.
 */
var HashRouter = function (_React$Component) {
  _inherits(HashRouter, _React$Component);

  function HashRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, HashRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createHashHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  HashRouter.prototype.componentWillMount = function componentWillMount() {
    (0, _warning.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.");
  };

  HashRouter.prototype.render = function render() {
    return _react.default.createElement(_Router.default, {
      history: this.history,
      children: this.props.children
    });
  };

  return HashRouter;
}(_react.default.Component);

HashRouter.propTypes = {
  basename: _propTypes.default.string,
  getUserConfirmation: _propTypes.default.func,
  hashType: _propTypes.default.oneOf(["hashbang", "noslash", "slash"]),
  children: _propTypes.default.node
};
var _default = HashRouter;
exports.default = _default;
},{"warning":"../node_modules/warning/warning.js","react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","history":"../node_modules/history/esm/history.js","./Router":"../node_modules/react-router-dom/es/Router.js"}],"../node_modules/react-router-dom/es/Link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _invariant = _interopRequireDefault(require("invariant"));

var _history = require("history");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var isModifiedEvent = function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
};
/**
 * The public API for rendering a history-aware <a>.
 */


var Link = function (_React$Component) {
  _inherits(Link, _React$Component);

  function Link() {
    var _temp, _this, _ret;

    _classCallCheck(this, Link);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
      if (_this.props.onClick) _this.props.onClick(event);

      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && // ignore everything but left clicks
      !_this.props.target && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event) // ignore clicks with modifier keys
      ) {
          event.preventDefault();
          var history = _this.context.router.history;
          var _this$props = _this.props,
              replace = _this$props.replace,
              to = _this$props.to;

          if (replace) {
            history.replace(to);
          } else {
            history.push(to);
          }
        }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Link.prototype.render = function render() {
    var _props = this.props,
        replace = _props.replace,
        to = _props.to,
        innerRef = _props.innerRef,
        props = _objectWithoutProperties(_props, ["replace", "to", "innerRef"]); // eslint-disable-line no-unused-vars


    (0, _invariant.default)(this.context.router, "You should not use <Link> outside a <Router>");
    (0, _invariant.default)(to !== undefined, 'You must specify the "to" property');
    var history = this.context.router.history;
    var location = typeof to === "string" ? (0, _history.createLocation)(to, null, null, history.location) : to;
    var href = history.createHref(location);
    return _react.default.createElement("a", _extends({}, props, {
      onClick: this.handleClick,
      href: href,
      ref: innerRef
    }));
  };

  return Link;
}(_react.default.Component);

Link.propTypes = {
  onClick: _propTypes.default.func,
  target: _propTypes.default.string,
  replace: _propTypes.default.bool,
  to: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired,
  innerRef: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func])
};
Link.defaultProps = {
  replace: false
};
Link.contextTypes = {
  router: _propTypes.default.shape({
    history: _propTypes.default.shape({
      push: _propTypes.default.func.isRequired,
      replace: _propTypes.default.func.isRequired,
      createHref: _propTypes.default.func.isRequired
    }).isRequired
  }).isRequired
};
var _default = Link;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","invariant":"../node_modules/invariant/browser.js","history":"../node_modules/history/esm/history.js"}],"../node_modules/react-router/es/MemoryRouter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _warning = _interopRequireDefault(require("warning"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _history = require("history");

var _Router = _interopRequireDefault(require("./Router"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for a <Router> that stores location in memory.
 */
var MemoryRouter = function (_React$Component) {
  _inherits(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, MemoryRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createMemoryHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
    (0, _warning.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.");
  };

  MemoryRouter.prototype.render = function render() {
    return _react.default.createElement(_Router.default, {
      history: this.history,
      children: this.props.children
    });
  };

  return MemoryRouter;
}(_react.default.Component);

MemoryRouter.propTypes = {
  initialEntries: _propTypes.default.array,
  initialIndex: _propTypes.default.number,
  getUserConfirmation: _propTypes.default.func,
  keyLength: _propTypes.default.number,
  children: _propTypes.default.node
};
var _default = MemoryRouter;
exports.default = _default;
},{"warning":"../node_modules/warning/warning.js","react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","history":"../node_modules/history/esm/history.js","./Router":"../node_modules/react-router/es/Router.js"}],"../node_modules/react-router-dom/es/MemoryRouter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _MemoryRouter = _interopRequireDefault(require("react-router/es/MemoryRouter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _MemoryRouter.default;
exports.default = _default;
},{"react-router/es/MemoryRouter":"../node_modules/react-router/es/MemoryRouter.js"}],"../node_modules/react-router/node_modules/isarray/index.js":[function(require,module,exports) {
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],"../node_modules/react-router/node_modules/path-to-regexp/index.js":[function(require,module,exports) {
var isarray = require('isarray')

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp
module.exports.parse = parse
module.exports.compile = compile
module.exports.tokensToFunction = tokensToFunction
module.exports.tokensToRegExp = tokensToRegExp

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g')

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = []
  var key = 0
  var index = 0
  var path = ''
  var defaultDelimiter = options && options.delimiter || '/'
  var res

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0]
    var escaped = res[1]
    var offset = res.index
    path += str.slice(index, offset)
    index = offset + m.length

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1]
      continue
    }

    var next = str[index]
    var prefix = res[2]
    var name = res[3]
    var capture = res[4]
    var group = res[5]
    var modifier = res[6]
    var asterisk = res[7]

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path)
      path = ''
    }

    var partial = prefix != null && next != null && next !== prefix
    var repeat = modifier === '+' || modifier === '*'
    var optional = modifier === '?' || modifier === '*'
    var delimiter = res[2] || defaultDelimiter
    var pattern = capture || group

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    })
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index)
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path)
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options))
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length)

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
    }
  }

  return function (obj, opts) {
    var path = ''
    var data = obj || {}
    var options = opts || {}
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i]

      if (typeof token === 'string') {
        path += token

        continue
      }

      var value = data[token.name]
      var segment

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j])

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g)

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      })
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = []

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source)
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  var strict = options.strict
  var end = options.end !== false
  var route = ''

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i]

    if (typeof token === 'string') {
      route += escapeString(token)
    } else {
      var prefix = escapeString(token.prefix)
      var capture = '(?:' + token.pattern + ')'

      keys.push(token)

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*'
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?'
        } else {
          capture = prefix + '(' + capture + ')?'
        }
      } else {
        capture = prefix + '(' + capture + ')'
      }

      route += capture
    }
  }

  var delimiter = escapeString(options.delimiter || '/')
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
  }

  if (end) {
    route += '$'
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}

},{"isarray":"../node_modules/react-router/node_modules/isarray/index.js"}],"../node_modules/react-router/es/matchPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pathToRegexp = _interopRequireDefault(require("path-to-regexp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compilePath = function compilePath(pattern, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});
  if (cache[pattern]) return cache[pattern];
  var keys = [];
  var re = (0, _pathToRegexp.default)(pattern, keys, options);
  var compiledPattern = {
    re: re,
    keys: keys
  };

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledPattern;
    cacheCount++;
  }

  return compiledPattern;
};
/**
 * Public API for matching a URL pathname to a path pattern.
 */


var matchPath = function matchPath(pathname) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var parent = arguments[2];
  if (typeof options === "string") options = {
    path: options
  };
  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === undefined ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === undefined ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === undefined ? false : _options$sensitive;
  if (path == null) return parent;

  var _compilePath = compilePath(path, {
    end: exact,
    strict: strict,
    sensitive: sensitive
  }),
      re = _compilePath.re,
      keys = _compilePath.keys;

  var match = re.exec(pathname);
  if (!match) return null;
  var url = match[0],
      values = match.slice(1);
  var isExact = pathname === url;
  if (exact && !isExact) return null;
  return {
    path: path,
    // the path pattern used to match
    url: path === "/" && url === "" ? "/" : url,
    // the matched portion of the URL
    isExact: isExact,
    // whether or not we matched exactly
    params: keys.reduce(function (memo, key, index) {
      memo[key.name] = values[index];
      return memo;
    }, {})
  };
};

var _default = matchPath;
exports.default = _default;
},{"path-to-regexp":"../node_modules/react-router/node_modules/path-to-regexp/index.js"}],"../node_modules/react-router/es/Route.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _warning = _interopRequireDefault(require("warning"));

var _invariant = _interopRequireDefault(require("invariant"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _matchPath = _interopRequireDefault(require("./matchPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var isEmptyChildren = function isEmptyChildren(children) {
  return _react.default.Children.count(children) === 0;
};
/**
 * The public API for matching a single path and rendering.
 */


var Route = function (_React$Component) {
  _inherits(Route, _React$Component);

  function Route() {
    var _temp, _this, _ret;

    _classCallCheck(this, Route);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props, _this.context.router)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Route.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        route: {
          location: this.props.location || this.context.router.route.location,
          match: this.state.match
        }
      })
    };
  };

  Route.prototype.computeMatch = function computeMatch(_ref, router) {
    var computedMatch = _ref.computedMatch,
        location = _ref.location,
        path = _ref.path,
        strict = _ref.strict,
        exact = _ref.exact,
        sensitive = _ref.sensitive;
    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

    (0, _invariant.default)(router, "You should not use <Route> or withRouter() outside a <Router>");
    var route = router.route;
    var pathname = (location || route.location).pathname;
    return (0, _matchPath.default)(pathname, {
      path: path,
      strict: strict,
      exact: exact,
      sensitive: sensitive
    }, route.match);
  };

  Route.prototype.componentWillMount = function componentWillMount() {
    (0, _warning.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
    (0, _warning.default)(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");
    (0, _warning.default)(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
  };

  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
    (0, _warning.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    (0, _warning.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    this.setState({
      match: this.computeMatch(nextProps, nextContext.router)
    });
  };

  Route.prototype.render = function render() {
    var match = this.state.match;
    var _props = this.props,
        children = _props.children,
        component = _props.component,
        render = _props.render;
    var _context$router = this.context.router,
        history = _context$router.history,
        route = _context$router.route,
        staticContext = _context$router.staticContext;
    var location = this.props.location || route.location;
    var props = {
      match: match,
      location: location,
      history: history,
      staticContext: staticContext
    };
    if (component) return match ? _react.default.createElement(component, props) : null;
    if (render) return match ? render(props) : null;
    if (typeof children === "function") return children(props);
    if (children && !isEmptyChildren(children)) return _react.default.Children.only(children);
    return null;
  };

  return Route;
}(_react.default.Component);

Route.propTypes = {
  computedMatch: _propTypes.default.object,
  // private, from <Switch>
  path: _propTypes.default.string,
  exact: _propTypes.default.bool,
  strict: _propTypes.default.bool,
  sensitive: _propTypes.default.bool,
  component: _propTypes.default.func,
  render: _propTypes.default.func,
  children: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),
  location: _propTypes.default.object
};
Route.contextTypes = {
  router: _propTypes.default.shape({
    history: _propTypes.default.object.isRequired,
    route: _propTypes.default.object.isRequired,
    staticContext: _propTypes.default.object
  })
};
Route.childContextTypes = {
  router: _propTypes.default.object.isRequired
};
var _default = Route;
exports.default = _default;
},{"warning":"../node_modules/warning/warning.js","invariant":"../node_modules/invariant/browser.js","react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","./matchPath":"../node_modules/react-router/es/matchPath.js"}],"../node_modules/react-router-dom/es/Route.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Route = _interopRequireDefault(require("react-router/es/Route"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _Route.default;
exports.default = _default;
},{"react-router/es/Route":"../node_modules/react-router/es/Route.js"}],"../node_modules/react-router-dom/es/NavLink.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Route = _interopRequireDefault(require("./Route"));

var _Link = _interopRequireDefault(require("./Link"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */
var NavLink = function NavLink(_ref) {
  var to = _ref.to,
      exact = _ref.exact,
      strict = _ref.strict,
      location = _ref.location,
      activeClassName = _ref.activeClassName,
      className = _ref.className,
      activeStyle = _ref.activeStyle,
      style = _ref.style,
      getIsActive = _ref.isActive,
      ariaCurrent = _ref["aria-current"],
      rest = _objectWithoutProperties(_ref, ["to", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "aria-current"]);

  var path = (typeof to === "undefined" ? "undefined" : _typeof(to)) === "object" ? to.pathname : to; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
  return _react.default.createElement(_Route.default, {
    path: escapedPath,
    exact: exact,
    strict: strict,
    location: location,
    children: function children(_ref2) {
      var location = _ref2.location,
          match = _ref2.match;
      var isActive = !!(getIsActive ? getIsActive(match, location) : match);
      return _react.default.createElement(_Link.default, _extends({
        to: to,
        className: isActive ? [className, activeClassName].filter(function (i) {
          return i;
        }).join(" ") : className,
        style: isActive ? _extends({}, style, activeStyle) : style,
        "aria-current": isActive && ariaCurrent || null
      }, rest));
    }
  });
};

NavLink.propTypes = {
  to: _Link.default.propTypes.to,
  exact: _propTypes.default.bool,
  strict: _propTypes.default.bool,
  location: _propTypes.default.object,
  activeClassName: _propTypes.default.string,
  className: _propTypes.default.string,
  activeStyle: _propTypes.default.object,
  style: _propTypes.default.object,
  isActive: _propTypes.default.func,
  "aria-current": _propTypes.default.oneOf(["page", "step", "location", "date", "time", "true"])
};
NavLink.defaultProps = {
  activeClassName: "active",
  "aria-current": "page"
};
var _default = NavLink;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","./Route":"../node_modules/react-router-dom/es/Route.js","./Link":"../node_modules/react-router-dom/es/Link.js"}],"../node_modules/react-router/es/Prompt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _invariant = _interopRequireDefault(require("invariant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for prompting the user before navigating away
 * from a screen with a component.
 */
var Prompt = function (_React$Component) {
  _inherits(Prompt, _React$Component);

  function Prompt() {
    _classCallCheck(this, Prompt);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Prompt.prototype.enable = function enable(message) {
    if (this.unblock) this.unblock();
    this.unblock = this.context.router.history.block(message);
  };

  Prompt.prototype.disable = function disable() {
    if (this.unblock) {
      this.unblock();
      this.unblock = null;
    }
  };

  Prompt.prototype.componentWillMount = function componentWillMount() {
    (0, _invariant.default)(this.context.router, "You should not use <Prompt> outside a <Router>");
    if (this.props.when) this.enable(this.props.message);
  };

  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.when) {
      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
    } else {
      this.disable();
    }
  };

  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
    this.disable();
  };

  Prompt.prototype.render = function render() {
    return null;
  };

  return Prompt;
}(_react.default.Component);

Prompt.propTypes = {
  when: _propTypes.default.bool,
  message: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]).isRequired
};
Prompt.defaultProps = {
  when: true
};
Prompt.contextTypes = {
  router: _propTypes.default.shape({
    history: _propTypes.default.shape({
      block: _propTypes.default.func.isRequired
    }).isRequired
  }).isRequired
};
var _default = Prompt;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","invariant":"../node_modules/invariant/browser.js"}],"../node_modules/react-router-dom/es/Prompt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Prompt = _interopRequireDefault(require("react-router/es/Prompt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _Prompt.default;
exports.default = _default;
},{"react-router/es/Prompt":"../node_modules/react-router/es/Prompt.js"}],"../node_modules/react-router/es/generatePath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pathToRegexp = _interopRequireDefault(require("path-to-regexp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compileGenerator = function compileGenerator(pattern) {
  var cacheKey = pattern;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});
  if (cache[pattern]) return cache[pattern];

  var compiledGenerator = _pathToRegexp.default.compile(pattern);

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledGenerator;
    cacheCount++;
  }

  return compiledGenerator;
};
/**
 * Public API for generating a URL pathname from a pattern and parameters.
 */


var generatePath = function generatePath() {
  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (pattern === "/") {
    return pattern;
  }

  var generator = compileGenerator(pattern);
  return generator(params, {
    pretty: true
  });
};

var _default = generatePath;
exports.default = _default;
},{"path-to-regexp":"../node_modules/react-router/node_modules/path-to-regexp/index.js"}],"../node_modules/react-router/es/Redirect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _warning = _interopRequireDefault(require("warning"));

var _invariant = _interopRequireDefault(require("invariant"));

var _history = require("history");

var _generatePath = _interopRequireDefault(require("./generatePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for updating the location programmatically
 * with a component.
 */
var Redirect = function (_React$Component) {
  _inherits(Redirect, _React$Component);

  function Redirect() {
    _classCallCheck(this, Redirect);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Redirect.prototype.isStatic = function isStatic() {
    return this.context.router && this.context.router.staticContext;
  };

  Redirect.prototype.componentWillMount = function componentWillMount() {
    (0, _invariant.default)(this.context.router, "You should not use <Redirect> outside a <Router>");
    if (this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidMount = function componentDidMount() {
    if (!this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var prevTo = (0, _history.createLocation)(prevProps.to);
    var nextTo = (0, _history.createLocation)(this.props.to);

    if ((0, _history.locationsAreEqual)(prevTo, nextTo)) {
      (0, _warning.default)(false, "You tried to redirect to the same route you're currently on: " + ("\"" + nextTo.pathname + nextTo.search + "\""));
      return;
    }

    this.perform();
  };

  Redirect.prototype.computeTo = function computeTo(_ref) {
    var computedMatch = _ref.computedMatch,
        to = _ref.to;

    if (computedMatch) {
      if (typeof to === "string") {
        return (0, _generatePath.default)(to, computedMatch.params);
      } else {
        return _extends({}, to, {
          pathname: (0, _generatePath.default)(to.pathname, computedMatch.params)
        });
      }
    }

    return to;
  };

  Redirect.prototype.perform = function perform() {
    var history = this.context.router.history;
    var push = this.props.push;
    var to = this.computeTo(this.props);

    if (push) {
      history.push(to);
    } else {
      history.replace(to);
    }
  };

  Redirect.prototype.render = function render() {
    return null;
  };

  return Redirect;
}(_react.default.Component);

Redirect.propTypes = {
  computedMatch: _propTypes.default.object,
  // private, from <Switch>
  push: _propTypes.default.bool,
  from: _propTypes.default.string,
  to: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired
};
Redirect.defaultProps = {
  push: false
};
Redirect.contextTypes = {
  router: _propTypes.default.shape({
    history: _propTypes.default.shape({
      push: _propTypes.default.func.isRequired,
      replace: _propTypes.default.func.isRequired
    }).isRequired,
    staticContext: _propTypes.default.object
  }).isRequired
};
var _default = Redirect;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","warning":"../node_modules/warning/warning.js","invariant":"../node_modules/invariant/browser.js","history":"../node_modules/history/esm/history.js","./generatePath":"../node_modules/react-router/es/generatePath.js"}],"../node_modules/react-router-dom/es/Redirect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Redirect = _interopRequireDefault(require("react-router/es/Redirect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _Redirect.default;
exports.default = _default;
},{"react-router/es/Redirect":"../node_modules/react-router/es/Redirect.js"}],"../node_modules/react-router/es/StaticRouter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _warning = _interopRequireDefault(require("warning"));

var _invariant = _interopRequireDefault(require("invariant"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _history = require("history");

var _Router = _interopRequireDefault(require("./Router"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
};

var addBasename = function addBasename(basename, location) {
  if (!basename) return location;
  return _extends({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
};

var stripBasename = function stripBasename(basename, location) {
  if (!basename) return location;
  var base = addLeadingSlash(basename);
  if (location.pathname.indexOf(base) !== 0) return location;
  return _extends({}, location, {
    pathname: location.pathname.substr(base.length)
  });
};

var createURL = function createURL(location) {
  return typeof location === "string" ? location : (0, _history.createPath)(location);
};

var staticHandler = function staticHandler(methodName) {
  return function () {
    (0, _invariant.default)(false, "You cannot %s with <StaticRouter>", methodName);
  };
};

var noop = function noop() {};
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */


var StaticRouter = function (_React$Component) {
  _inherits(StaticRouter, _React$Component);

  function StaticRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, StaticRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
      return addLeadingSlash(_this.props.basename + createURL(path));
    }, _this.handlePush = function (location) {
      var _this$props = _this.props,
          basename = _this$props.basename,
          context = _this$props.context;
      context.action = "PUSH";
      context.location = addBasename(basename, (0, _history.createLocation)(location));
      context.url = createURL(context.location);
    }, _this.handleReplace = function (location) {
      var _this$props2 = _this.props,
          basename = _this$props2.basename,
          context = _this$props2.context;
      context.action = "REPLACE";
      context.location = addBasename(basename, (0, _history.createLocation)(location));
      context.url = createURL(context.location);
    }, _this.handleListen = function () {
      return noop;
    }, _this.handleBlock = function () {
      return noop;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  StaticRouter.prototype.getChildContext = function getChildContext() {
    return {
      router: {
        staticContext: this.props.context
      }
    };
  };

  StaticRouter.prototype.componentWillMount = function componentWillMount() {
    (0, _warning.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.");
  };

  StaticRouter.prototype.render = function render() {
    var _props = this.props,
        basename = _props.basename,
        context = _props.context,
        location = _props.location,
        props = _objectWithoutProperties(_props, ["basename", "context", "location"]);

    var history = {
      createHref: this.createHref,
      action: "POP",
      location: stripBasename(basename, (0, _history.createLocation)(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return _react.default.createElement(_Router.default, _extends({}, props, {
      history: history
    }));
  };

  return StaticRouter;
}(_react.default.Component);

StaticRouter.propTypes = {
  basename: _propTypes.default.string,
  context: _propTypes.default.object.isRequired,
  location: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object])
};
StaticRouter.defaultProps = {
  basename: "",
  location: "/"
};
StaticRouter.childContextTypes = {
  router: _propTypes.default.object.isRequired
};
var _default = StaticRouter;
exports.default = _default;
},{"warning":"../node_modules/warning/warning.js","invariant":"../node_modules/invariant/browser.js","react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","history":"../node_modules/history/esm/history.js","./Router":"../node_modules/react-router/es/Router.js"}],"../node_modules/react-router-dom/es/StaticRouter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _StaticRouter = _interopRequireDefault(require("react-router/es/StaticRouter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _StaticRouter.default;
exports.default = _default;
},{"react-router/es/StaticRouter":"../node_modules/react-router/es/StaticRouter.js"}],"../node_modules/react-router/es/Switch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _warning = _interopRequireDefault(require("warning"));

var _invariant = _interopRequireDefault(require("invariant"));

var _matchPath = _interopRequireDefault(require("./matchPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for rendering the first <Route> that matches.
 */
var Switch = function (_React$Component) {
  _inherits(Switch, _React$Component);

  function Switch() {
    _classCallCheck(this, Switch);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Switch.prototype.componentWillMount = function componentWillMount() {
    (0, _invariant.default)(this.context.router, "You should not use <Switch> outside a <Router>");
  };

  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    (0, _warning.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    (0, _warning.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
  };

  Switch.prototype.render = function render() {
    var route = this.context.router.route;
    var children = this.props.children;
    var location = this.props.location || route.location;
    var match = void 0,
        child = void 0;

    _react.default.Children.forEach(children, function (element) {
      if (match == null && _react.default.isValidElement(element)) {
        var _element$props = element.props,
            pathProp = _element$props.path,
            exact = _element$props.exact,
            strict = _element$props.strict,
            sensitive = _element$props.sensitive,
            from = _element$props.from;
        var path = pathProp || from;
        child = element;
        match = (0, _matchPath.default)(location.pathname, {
          path: path,
          exact: exact,
          strict: strict,
          sensitive: sensitive
        }, route.match);
      }
    });

    return match ? _react.default.cloneElement(child, {
      location: location,
      computedMatch: match
    }) : null;
  };

  return Switch;
}(_react.default.Component);

Switch.contextTypes = {
  router: _propTypes.default.shape({
    route: _propTypes.default.object.isRequired
  }).isRequired
};
Switch.propTypes = {
  children: _propTypes.default.node,
  location: _propTypes.default.object
};
var _default = Switch;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","warning":"../node_modules/warning/warning.js","invariant":"../node_modules/invariant/browser.js","./matchPath":"../node_modules/react-router/es/matchPath.js"}],"../node_modules/react-router-dom/es/Switch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Switch = _interopRequireDefault(require("react-router/es/Switch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _Switch.default;
exports.default = _default;
},{"react-router/es/Switch":"../node_modules/react-router/es/Switch.js"}],"../node_modules/react-router-dom/es/generatePath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _generatePath = _interopRequireDefault(require("react-router/es/generatePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _generatePath.default;
exports.default = _default;
},{"react-router/es/generatePath":"../node_modules/react-router/es/generatePath.js"}],"../node_modules/react-router-dom/es/matchPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _matchPath = _interopRequireDefault(require("react-router/es/matchPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _matchPath.default;
exports.default = _default;
},{"react-router/es/matchPath":"../node_modules/react-router/es/matchPath.js"}],"../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":[function(require,module,exports) {
'use strict';

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try { // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

module.exports = hoistNonReactStatics;

},{}],"../node_modules/react-router/es/withRouter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _Route = _interopRequireDefault(require("./Route"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}

/**
 * A public higher-order component to access the imperative API
 */
var withRouter = function withRouter(Component) {
  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = _objectWithoutProperties(props, ["wrappedComponentRef"]);

    return _react.default.createElement(_Route.default, {
      children: function children(routeComponentProps) {
        return _react.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, {
          ref: wrappedComponentRef
        }));
      }
    });
  };

  C.displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
  C.WrappedComponent = Component;
  C.propTypes = {
    wrappedComponentRef: _propTypes.default.func
  };
  return (0, _hoistNonReactStatics.default)(C, Component);
};

var _default = withRouter;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","hoist-non-react-statics":"../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","./Route":"../node_modules/react-router/es/Route.js"}],"../node_modules/react-router-dom/es/withRouter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _withRouter = _interopRequireDefault(require("react-router/es/withRouter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Written in this round about way for babel-transform-imports
var _default = _withRouter.default;
exports.default = _default;
},{"react-router/es/withRouter":"../node_modules/react-router/es/withRouter.js"}],"../node_modules/react-router-dom/es/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BrowserRouter", {
  enumerable: true,
  get: function () {
    return _BrowserRouter2.default;
  }
});
Object.defineProperty(exports, "HashRouter", {
  enumerable: true,
  get: function () {
    return _HashRouter2.default;
  }
});
Object.defineProperty(exports, "Link", {
  enumerable: true,
  get: function () {
    return _Link2.default;
  }
});
Object.defineProperty(exports, "MemoryRouter", {
  enumerable: true,
  get: function () {
    return _MemoryRouter2.default;
  }
});
Object.defineProperty(exports, "NavLink", {
  enumerable: true,
  get: function () {
    return _NavLink2.default;
  }
});
Object.defineProperty(exports, "Prompt", {
  enumerable: true,
  get: function () {
    return _Prompt2.default;
  }
});
Object.defineProperty(exports, "Redirect", {
  enumerable: true,
  get: function () {
    return _Redirect2.default;
  }
});
Object.defineProperty(exports, "Route", {
  enumerable: true,
  get: function () {
    return _Route2.default;
  }
});
Object.defineProperty(exports, "Router", {
  enumerable: true,
  get: function () {
    return _Router2.default;
  }
});
Object.defineProperty(exports, "StaticRouter", {
  enumerable: true,
  get: function () {
    return _StaticRouter2.default;
  }
});
Object.defineProperty(exports, "Switch", {
  enumerable: true,
  get: function () {
    return _Switch2.default;
  }
});
Object.defineProperty(exports, "generatePath", {
  enumerable: true,
  get: function () {
    return _generatePath2.default;
  }
});
Object.defineProperty(exports, "matchPath", {
  enumerable: true,
  get: function () {
    return _matchPath2.default;
  }
});
Object.defineProperty(exports, "withRouter", {
  enumerable: true,
  get: function () {
    return _withRouter2.default;
  }
});

var _BrowserRouter2 = _interopRequireDefault(require("./BrowserRouter"));

var _HashRouter2 = _interopRequireDefault(require("./HashRouter"));

var _Link2 = _interopRequireDefault(require("./Link"));

var _MemoryRouter2 = _interopRequireDefault(require("./MemoryRouter"));

var _NavLink2 = _interopRequireDefault(require("./NavLink"));

var _Prompt2 = _interopRequireDefault(require("./Prompt"));

var _Redirect2 = _interopRequireDefault(require("./Redirect"));

var _Route2 = _interopRequireDefault(require("./Route"));

var _Router2 = _interopRequireDefault(require("./Router"));

var _StaticRouter2 = _interopRequireDefault(require("./StaticRouter"));

var _Switch2 = _interopRequireDefault(require("./Switch"));

var _generatePath2 = _interopRequireDefault(require("./generatePath"));

var _matchPath2 = _interopRequireDefault(require("./matchPath"));

var _withRouter2 = _interopRequireDefault(require("./withRouter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./BrowserRouter":"../node_modules/react-router-dom/es/BrowserRouter.js","./HashRouter":"../node_modules/react-router-dom/es/HashRouter.js","./Link":"../node_modules/react-router-dom/es/Link.js","./MemoryRouter":"../node_modules/react-router-dom/es/MemoryRouter.js","./NavLink":"../node_modules/react-router-dom/es/NavLink.js","./Prompt":"../node_modules/react-router-dom/es/Prompt.js","./Redirect":"../node_modules/react-router-dom/es/Redirect.js","./Route":"../node_modules/react-router-dom/es/Route.js","./Router":"../node_modules/react-router-dom/es/Router.js","./StaticRouter":"../node_modules/react-router-dom/es/StaticRouter.js","./Switch":"../node_modules/react-router-dom/es/Switch.js","./generatePath":"../node_modules/react-router-dom/es/generatePath.js","./matchPath":"../node_modules/react-router-dom/es/matchPath.js","./withRouter":"../node_modules/react-router-dom/es/withRouter.js"}],"components/Layout/Header.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Header = function Header() {
  return _react.default.createElement("div", {
    className: "header"
  }, _react.default.createElement("h2", null, "Bienvenidos, a la", ' ', _react.default.createElement("span", {
    className: "logo"
  }, "Spanish Conjugator", ' ', _react.default.createElement("span", {
    role: "img",
    "aria-label": "colombia"
  }, "\uD83C\uDDEA\uD83C\uDDF8"))), _react.default.createElement("div", null, "Verb practice for Spanish language learners."));
};

var _default = Header;
exports.default = _default;
},{"react":"../node_modules/react/index.js"}],"../node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../node_modules/parcel-bundler/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"../node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"app.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"components/Settings/VerbTenses.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VerbTenses = function VerbTenses(props) {
  var updateVerbTenses = props.updateVerbTenses;
  return _react.default.createElement("div", {
    className: "settings-dropdown"
  }, _react.default.createElement("p", {
    className: "settings-text"
  }, "Difficulty"), _react.default.createElement("select", {
    onChange: updateVerbTenses
  }, _react.default.createElement("option", {
    value: "0",
    defaultValue: "Beginner"
  }, "Popular verbs, present tense"), _react.default.createElement("option", {
    value: "1"
  }, "Popular verbs, present + preterite"), _react.default.createElement("option", {
    value: "2"
  }, "All verbs, present + preterite"), _react.default.createElement("option", {
    value: "3"
  }, "The above + Imperfect"), _react.default.createElement("option", {
    value: "4"
  }, "The above + future"), _react.default.createElement("option", {
    value: "5"
  }, "The above + present perfect"), _react.default.createElement("option", {
    value: "6"
  }, "All verbs and tenses")));
};

VerbTenses.propTypes = {
  updateVerbTenses: _propTypes.default.func
};
var _default = VerbTenses;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js"}],"components/Settings/VerbNumberPerson.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VerbNumberPerson = function VerbNumberPerson(props) {
  var updateNumPerson = props.updateNumPerson;
  return _react.default.createElement("div", {
    className: "settings-dropdown"
  }, _react.default.createElement("p", {
    className: "settings-text"
  }, "Spanish Type"), _react.default.createElement("select", {
    onChange: updateNumPerson
  }, _react.default.createElement("option", {
    value: "Latam"
  }, "Latin America"), _react.default.createElement("option", {
    value: "Spain"
  }, "Spain")));
};

VerbNumberPerson.propTypes = {
  updateNumPerson: _propTypes.default.func
};
var _default = VerbNumberPerson;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js"}],"components/Settings/Settings.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

require("../../app.css");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _VerbTenses = _interopRequireDefault(require("./VerbTenses"));

var _VerbNumberPerson = _interopRequireDefault(require("./VerbNumberPerson"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Settings =
/*#__PURE__*/
function (_Component) {
  _inherits(Settings, _Component);

  function Settings(props) {
    var _this;

    _classCallCheck(this, Settings);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Settings).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "changeSettings", function (event) {
      var updateSettings = _this.state.updateSettings;
      var filterData = _this.props.filterData;
      event.preventDefault();

      _this.setState({
        updateSettings: !updateSettings
      });

      if (updateSettings) {
        alert('Your settings are updated.');
        filterData(event);
      }
    });

    _this.state = {
      updateSettings: false
    };
    return _this;
  }

  _createClass(Settings, [{
    key: "render",
    value: function render() {
      var hide = 'settings-buttons-hide';
      var display = 'settings-buttons-display';
      var updateSettings = this.state.updateSettings;
      var _this$props = this.props,
          updateVerbTenses = _this$props.updateVerbTenses,
          updateNumPerson = _this$props.updateNumPerson;
      return _react.default.createElement("div", {
        className: "settings"
      }, _react.default.createElement("button", {
        type: "button",
        onClick: this.changeSettings,
        className: "button-options"
      }, updateSettings ? 'Update level' : 'Change level'), _react.default.createElement("div", {
        className: "two-dropdowns"
      }, _react.default.createElement("div", {
        className: updateSettings ? display : hide
      }, _react.default.createElement(_VerbTenses.default, {
        updateVerbTenses: updateVerbTenses
      })), _react.default.createElement("div", {
        className: updateSettings ? display : hide
      }, _react.default.createElement(_VerbNumberPerson.default, {
        updateNumPerson: updateNumPerson
      }))));
    }
  }]);

  return Settings;
}(_react.Component);

Settings.propTypes = {
  updateVerbTenses: _propTypes.default.func,
  updateNumPerson: _propTypes.default.func,
  filterData: _propTypes.default.func
};
var _default = Settings;
exports.default = _default;
},{"react":"../node_modules/react/index.js","../../app.css":"app.css","prop-types":"../node_modules/prop-types/index.js","./VerbTenses":"components/Settings/VerbTenses.js","./VerbNumberPerson":"components/Settings/VerbNumberPerson.js"}],"components/Filters/NumPersonFilters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.latamSpanish = latamSpanish;
exports.spainSpanish = spainSpanish;

function latamSpanish(data) {
  return data.map(function (verb) {
    return {
      infinitive: verb.infinitive,
      infinitive_english: verb.infinitive_english,
      mood: verb.mood,
      mood_english: verb.mood_english,
      tense: verb.tense,
      tense_english: verb.tense_english,
      verb_english: verb.verb_english,
      form_1s: verb.form_1s,
      form_2s: verb.form_2s,
      form_3s: verb.form_3s,
      form_1p: verb.form_1p,
      form_3p: verb.form_3p,
      gerund: verb.gerund,
      gerund_english: verb.gerund_english,
      pastparticiple: verb.pastparticiple,
      pastparticiple_english: verb.pastparticiple_english
    };
  });
}

function spainSpanish(data) {
  return data.map(function (verb) {
    return {
      infinitive: verb.infinitive,
      infinitive_english: verb.infinitive_english,
      mood: verb.mood,
      mood_english: verb.mood_english,
      tense: verb.tense,
      tense_english: verb.tense_english,
      verb_english: verb.verb_english,
      form_1s: verb.form_1s,
      form_2s: verb.form_2s,
      form_3s: verb.form_3s,
      form_1p: verb.form_1p,
      form_2p: verb.form_2p,
      form_3p: verb.form_3p,
      gerund: verb.gerund,
      gerund_english: verb.gerund_english,
      pastparticiple: verb.pastparticiple,
      pastparticiple_english: verb.pastparticiple_english
    };
  });
}
},{}],"data/miniData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var miniData = [{
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I run, am running',
  form_1s: 'corro',
  form_2s: 'corres',
  form_3s: 'corre',
  form_1p: 'corremos',
  form_2p: 'corréis',
  form_3p: 'corren',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will run',
  form_1s: 'correré',
  form_2s: 'correrás',
  form_3s: 'correrá',
  form_1p: 'correremos',
  form_2p: 'correréis',
  form_3p: 'correrán',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was running, used to run, ran',
  form_1s: 'corría',
  form_2s: 'corrías',
  form_3s: 'corría',
  form_1p: 'corríamos',
  form_2p: 'corríais',
  form_3p: 'corrían',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I ran',
  form_1s: 'corrí',
  form_2s: 'corriste',
  form_3s: 'corrió',
  form_1p: 'corrimos',
  form_2p: 'corristeis',
  form_3p: 'corrieron',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would run',
  form_1s: 'correría',
  form_2s: 'correrías',
  form_3s: 'correría',
  form_1p: 'correríamos',
  form_2p: 'correríais',
  form_3p: 'correrían',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have run',
  form_1s: 'he corrido',
  form_2s: 'has corrido',
  form_3s: 'ha corrido',
  form_1p: 'hemos corrido',
  form_2p: 'habéis corrido',
  form_3p: 'han corrido',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have run',
  form_1s: 'habré corrido',
  form_2s: 'habrás corrido',
  form_3s: 'habrá corrido',
  form_1p: 'habremos corrido',
  form_2p: 'habréis corrido',
  form_3p: 'habrán corrido',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had run',
  form_1s: 'había corrido',
  form_2s: 'habías corrido',
  form_3s: 'había corrido',
  form_1p: 'habíamos corrido',
  form_2p: 'habíais corrido',
  form_3p: 'habían corrido',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had run',
  form_1s: 'hube corrido',
  form_2s: 'hubiste corrido',
  form_3s: 'hubo corrido',
  form_1p: 'hubimos corrido',
  form_2p: 'hubisteis corrido',
  form_3p: 'hubieron corrido',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have run',
  form_1s: 'habría corrido',
  form_2s: 'habrías corrido',
  form_3s: 'habría corrido',
  form_1p: 'habríamos corrido',
  form_2p: 'habríais corrido',
  form_3p: 'habrían corrido',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I run, am running',
  form_1s: 'corra',
  form_2s: 'corras',
  form_3s: 'corra',
  form_1p: 'corramos',
  form_2p: 'corráis',
  form_3p: 'corran',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I ran, was running',
  form_1s: 'corriera',
  form_2s: 'corrieras',
  form_3s: 'corriera',
  form_1p: 'corriéramos',
  form_2p: 'corrierais',
  form_3p: 'corrieran',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will run',
  form_1s: 'corriere',
  form_2s: 'corrieres',
  form_3s: 'corriere',
  form_1p: 'corriéremos',
  form_2p: 'corriereis',
  form_3p: 'corrieren',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have run, ran',
  form_1s: 'haya corrido',
  form_2s: 'hayas corrido',
  form_3s: 'haya corrido',
  form_1p: 'hayamos corrido',
  form_2p: 'hayáis corrido',
  form_3p: 'hayan corrido',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have run',
  form_1s: 'hubiere corrido',
  form_2s: 'hubieres corrido',
  form_3s: 'hubiere corrido',
  form_1p: 'hubiéremos corrido',
  form_2p: 'hubiereis corrido',
  form_3p: 'hubieren corrido',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had run',
  form_1s: 'hubiera corrido',
  form_2s: 'hubieras corrido',
  form_3s: 'hubiera corrido',
  form_1p: 'hubiéramos corrido',
  form_2p: 'hubierais corrido',
  form_3p: 'hubieran corrido',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Run! Don't run!",
  form_1s: '',
  form_2s: 'corre',
  form_3s: 'corred',
  form_1p: '',
  form_2p: 'corra',
  form_3p: 'corran',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Run! Don't run!",
  form_1s: '',
  form_2s: 'no corras',
  form_3s: 'no corráis',
  form_1p: '',
  form_2p: 'no corra',
  form_3p: 'no corran',
  gerund: 'corriendo',
  gerund_english: 'running',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I come, am coming',
  form_1s: 'vengo',
  form_2s: 'vienes',
  form_3s: 'viene',
  form_1p: 'venimos',
  form_2p: 'venís',
  form_3p: 'vienen',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will come',
  form_1s: 'vendré',
  form_2s: 'vendrás',
  form_3s: 'vendrá',
  form_1p: 'vendremos',
  form_2p: 'vendréis',
  form_3p: 'vendrán',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was coming, used to come, came',
  form_1s: 'venía',
  form_2s: 'venías',
  form_3s: 'venía',
  form_1p: 'veníamos',
  form_2p: 'veníais',
  form_3p: 'venían',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I came',
  form_1s: 'vine',
  form_2s: 'viniste',
  form_3s: 'vino',
  form_1p: 'vinimos',
  form_2p: 'vinisteis',
  form_3p: 'vinieron',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would come',
  form_1s: 'vendría',
  form_2s: 'vendrías',
  form_3s: 'vendría',
  form_1p: 'vendríamos',
  form_2p: 'vendríais',
  form_3p: 'vendrían',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have come',
  form_1s: 'he venido',
  form_2s: 'has venido',
  form_3s: 'ha venido',
  form_1p: 'hemos venido',
  form_2p: 'habéis venido',
  form_3p: 'han venido',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have come',
  form_1s: 'habré venido',
  form_2s: 'habrás venido',
  form_3s: 'habrá venido',
  form_1p: 'habremos venido',
  form_2p: 'habréis venido',
  form_3p: 'habrán venido',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had come',
  form_1s: 'había venido',
  form_2s: 'habías venido',
  form_3s: 'había venido',
  form_1p: 'habíamos venido',
  form_2p: 'habíais venido',
  form_3p: 'habían venido',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had come',
  form_1s: 'hube venido',
  form_2s: 'hubiste venido',
  form_3s: 'hubo venido',
  form_1p: 'hubimos venido',
  form_2p: 'hubisteis venido',
  form_3p: 'hubieron venido',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have come',
  form_1s: 'habría venido',
  form_2s: 'habrías venido',
  form_3s: 'habría venido',
  form_1p: 'habríamos venido',
  form_2p: 'habríais venido',
  form_3p: 'habrían venido',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I come, am coming',
  form_1s: 'venga',
  form_2s: 'vengas',
  form_3s: 'venga',
  form_1p: 'vengamos',
  form_2p: 'vengáis',
  form_3p: 'vengan',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I came, was coming',
  form_1s: 'viniera',
  form_2s: 'vinieras',
  form_3s: 'viniera',
  form_1p: 'viniéramos',
  form_2p: 'vinierais',
  form_3p: 'vinieran',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will come',
  form_1s: 'viniere',
  form_2s: 'vinieres',
  form_3s: 'viniere',
  form_1p: 'viniéremos',
  form_2p: 'viniereis',
  form_3p: 'vinieren',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have come, came',
  form_1s: 'haya venido',
  form_2s: 'hayas venido',
  form_3s: 'haya venido',
  form_1p: 'hayamos venido',
  form_2p: 'hayáis venido',
  form_3p: 'hayan venido',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have come',
  form_1s: 'hubiere venido',
  form_2s: 'hubieres venido',
  form_3s: 'hubiere venido',
  form_1p: 'hubiéremos venido',
  form_2p: 'hubiereis venido',
  form_3p: 'hubieren venido',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had come',
  form_1s: 'hubiera venido',
  form_2s: 'hubieras venido',
  form_3s: 'hubiera venido',
  form_1p: 'hubiéramos venido',
  form_2p: 'hubierais venido',
  form_3p: 'hubieran venido',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Come! Don't come!",
  form_1s: '',
  form_2s: 'ven',
  form_3s: 'venid',
  form_1p: '',
  form_2p: 'venga',
  form_3p: 'vengan',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Come! Don't come!",
  form_1s: '',
  form_2s: 'no vengas',
  form_3s: 'no vengáis',
  form_1p: '',
  form_2p: 'no venga',
  form_3p: 'no vengan',
  gerund: 'viniendo',
  gerund_english: 'coming',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I say, am saying',
  form_1s: 'digo',
  form_2s: 'dices',
  form_3s: 'dice',
  form_1p: 'decimos',
  form_2p: 'decís',
  form_3p: 'dicen',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will say',
  form_1s: 'diré',
  form_2s: 'dirás',
  form_3s: 'dirá',
  form_1p: 'diremos',
  form_2p: 'diréis',
  form_3p: 'dirán',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was saying, used to say, said',
  form_1s: 'decía',
  form_2s: 'decías',
  form_3s: 'decía',
  form_1p: 'decíamos',
  form_2p: 'decíais',
  form_3p: 'decían',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I said',
  form_1s: 'dije',
  form_2s: 'dijiste',
  form_3s: 'dijo',
  form_1p: 'dijimos',
  form_2p: 'dijisteis',
  form_3p: 'dijeron',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would say',
  form_1s: 'diría',
  form_2s: 'dirías',
  form_3s: 'diría',
  form_1p: 'diríamos',
  form_2p: 'diríais',
  form_3p: 'dirían',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have said',
  form_1s: 'he dicho',
  form_2s: 'has dicho',
  form_3s: 'ha dicho',
  form_1p: 'hemos dicho',
  form_2p: 'habéis dicho',
  form_3p: 'han dicho',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have said',
  form_1s: 'habré dicho',
  form_2s: 'habrás dicho',
  form_3s: 'habrá dicho',
  form_1p: 'habremos dicho',
  form_2p: 'habréis dicho',
  form_3p: 'habrán dicho',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had said',
  form_1s: 'había dicho',
  form_2s: 'habías dicho',
  form_3s: 'había dicho',
  form_1p: 'habíamos dicho',
  form_2p: 'habíais dicho',
  form_3p: 'habían dicho',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had said',
  form_1s: 'hube dicho',
  form_2s: 'hubiste dicho',
  form_3s: 'hubo dicho',
  form_1p: 'hubimos dicho',
  form_2p: 'hubisteis dicho',
  form_3p: 'hubieron dicho',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have said',
  form_1s: 'habría dicho',
  form_2s: 'habrías dicho',
  form_3s: 'habría dicho',
  form_1p: 'habríamos dicho',
  form_2p: 'habríais dicho',
  form_3p: 'habrían dicho',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I say, am saying',
  form_1s: 'diga',
  form_2s: 'digas',
  form_3s: 'diga',
  form_1p: 'digamos',
  form_2p: 'digáis',
  form_3p: 'digan',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I said, was saying',
  form_1s: 'dijera',
  form_2s: 'dijeras',
  form_3s: 'dijera',
  form_1p: 'dijéramos',
  form_2p: 'dijerais',
  form_3p: 'dijeran',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will say',
  form_1s: 'dijere',
  form_2s: 'dijeres',
  form_3s: 'dijere',
  form_1p: 'dijéremos',
  form_2p: 'dijereis',
  form_3p: 'dijeren',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have said, said',
  form_1s: 'haya dicho',
  form_2s: 'hayas dicho',
  form_3s: 'haya dicho',
  form_1p: 'hayamos dicho',
  form_2p: 'hayáis dicho',
  form_3p: 'hayan dicho',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have said',
  form_1s: 'hubiere dicho',
  form_2s: 'hubieres dicho',
  form_3s: 'hubiere dicho',
  form_1p: 'hubiéremos dicho',
  form_2p: 'hubiereis dicho',
  form_3p: 'hubieren dicho',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had said',
  form_1s: 'hubiera dicho',
  form_2s: 'hubieras dicho',
  form_3s: 'hubiera dicho',
  form_1p: 'hubiéramos dicho',
  form_2p: 'hubierais dicho',
  form_3p: 'hubieran dicho',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Say! Don't say!",
  form_1s: '',
  form_2s: 'di',
  form_3s: 'decid',
  form_1p: '',
  form_2p: 'diga',
  form_3p: 'digan',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say, tell',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Say! Don't say!",
  form_1s: '',
  form_2s: 'no digas',
  form_3s: 'no digáis',
  form_1p: '',
  form_2p: 'no diga',
  form_3p: 'no digan',
  gerund: 'diciendo',
  gerund_english: 'saying',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am able, can',
  form_1s: 'puedo',
  form_2s: 'puedes',
  form_3s: 'puede',
  form_1p: 'podemos',
  form_2p: 'podéis',
  form_3p: 'pueden',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will be able',
  form_1s: 'podré',
  form_2s: 'podrás',
  form_3s: 'podrá',
  form_1p: 'podremos',
  form_2p: 'podréis',
  form_3p: 'podrán',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I used to be able, was able, could',
  form_1s: 'podía',
  form_2s: 'podías',
  form_3s: 'podía',
  form_1p: 'podíamos',
  form_2p: 'podíais',
  form_3p: 'podían',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I was able, could',
  form_1s: 'pude',
  form_2s: 'pudiste',
  form_3s: 'pudo',
  form_1p: 'pudimos',
  form_2p: 'pudisteis',
  form_3p: 'pudieron',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would be able',
  form_1s: 'podría',
  form_2s: 'podrías',
  form_3s: 'podría',
  form_1p: 'podríamos',
  form_2p: 'podríais',
  form_3p: 'podrían',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have been able',
  form_1s: 'he podido',
  form_2s: 'has podido',
  form_3s: 'ha podido',
  form_1p: 'hemos podido',
  form_2p: 'habéis podido',
  form_3p: 'han podido',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have been able',
  form_1s: 'habré podido',
  form_2s: 'habrás podido',
  form_3s: 'habrá podido',
  form_1p: 'habremos podido',
  form_2p: 'habréis podido',
  form_3p: 'habrán podido',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had been able',
  form_1s: 'había podido',
  form_2s: 'habías podido',
  form_3s: 'había podido',
  form_1p: 'habíamos podido',
  form_2p: 'habíais podido',
  form_3p: 'habían podido',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had been able',
  form_1s: 'hube podido',
  form_2s: 'hubiste podido',
  form_3s: 'hubo podido',
  form_1p: 'hubimos podido',
  form_2p: 'hubisteis podido',
  form_3p: 'hubieron podido',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have been able',
  form_1s: 'habría podido',
  form_2s: 'habrías podido',
  form_3s: 'habría podido',
  form_1p: 'habríamos podido',
  form_2p: 'habríais podido',
  form_3p: 'habrían podido',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am able, can',
  form_1s: 'pueda',
  form_2s: 'puedas',
  form_3s: 'pueda',
  form_1p: 'podamos',
  form_2p: 'podáis',
  form_3p: 'puedan',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was able, could',
  form_1s: 'pudiera',
  form_2s: 'pudieras',
  form_3s: 'pudiera',
  form_1p: 'pudiéramos',
  form_2p: 'pudierais',
  form_3p: 'pudieran',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will be able',
  form_1s: 'pudiere',
  form_2s: 'pudieres',
  form_3s: 'pudiere',
  form_1p: 'pudiéremos',
  form_2p: 'pudiereis',
  form_3p: 'pudieren',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have been able, was able',
  form_1s: 'haya podido',
  form_2s: 'hayas podido',
  form_3s: 'haya podido',
  form_1p: 'hayamos podido',
  form_2p: 'hayáis podido',
  form_3p: 'hayan podido',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have been able',
  form_1s: 'hubiere podido',
  form_2s: 'hubieres podido',
  form_3s: 'hubiere podido',
  form_1p: 'hubiéremos podido',
  form_2p: 'hubiereis podido',
  form_3p: 'hubieren podido',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had been able',
  form_1s: 'hubiera podido',
  form_2s: 'hubieras podido',
  form_3s: 'hubiera podido',
  form_1p: 'hubiéramos podido',
  form_2p: 'hubierais podido',
  form_3p: 'hubieran podido',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Be able! Don't be able!",
  form_1s: '',
  form_2s: 'puede',
  form_3s: 'poded',
  form_1p: '',
  form_2p: 'pueda',
  form_3p: 'puedan',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Be able! Don't be able!",
  form_1s: '',
  form_2s: 'no puedas',
  form_3s: 'no podáis',
  form_1p: '',
  form_2p: 'no pueda',
  form_3p: 'no puedan',
  gerund: 'pudiendo',
  gerund_english: 'being able',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I give, am giving',
  form_1s: 'doy',
  form_2s: 'das',
  form_3s: 'da',
  form_1p: 'damos',
  form_2p: 'dais',
  form_3p: 'dan',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will give',
  form_1s: 'daré',
  form_2s: 'darás',
  form_3s: 'dará',
  form_1p: 'daremos',
  form_2p: 'daréis',
  form_3p: 'darán',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was giving, used to give, gave',
  form_1s: 'daba',
  form_2s: 'dabas',
  form_3s: 'daba',
  form_1p: 'dábamos',
  form_2p: 'dabais',
  form_3p: 'daban',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I gave',
  form_1s: 'di',
  form_2s: 'diste',
  form_3s: 'dio',
  form_1p: 'dimos',
  form_2p: 'disteis',
  form_3p: 'dieron',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would give',
  form_1s: 'daría',
  form_2s: 'darías',
  form_3s: 'daría',
  form_1p: 'daríamos',
  form_2p: 'daríais',
  form_3p: 'darían',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have given',
  form_1s: 'he dado',
  form_2s: 'has dado',
  form_3s: 'ha dado',
  form_1p: 'hemos dado',
  form_2p: 'habéis dado',
  form_3p: 'han dado',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have given',
  form_1s: 'habré dado',
  form_2s: 'habrás dado',
  form_3s: 'habrá dado',
  form_1p: 'habremos dado',
  form_2p: 'habréis dado',
  form_3p: 'habrán dado',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had given',
  form_1s: 'había dado',
  form_2s: 'habías dado',
  form_3s: 'había dado',
  form_1p: 'habíamos dado',
  form_2p: 'habíais dado',
  form_3p: 'habían dado',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had given',
  form_1s: 'hube dado',
  form_2s: 'hubiste dado',
  form_3s: 'hubo dado',
  form_1p: 'hubimos dado',
  form_2p: 'hubisteis dado',
  form_3p: 'hubieron dado',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have given',
  form_1s: 'habría dado',
  form_2s: 'habrías dado',
  form_3s: 'habría dado',
  form_1p: 'habríamos dado',
  form_2p: 'habríais dado',
  form_3p: 'habrían dado',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I give, am giving',
  form_1s: 'dé',
  form_2s: 'des',
  form_3s: 'dé',
  form_1p: 'demos',
  form_2p: 'deis',
  form_3p: 'den',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I gave, was giving',
  form_1s: 'diera',
  form_2s: 'dieras',
  form_3s: 'diera',
  form_1p: 'diéramos',
  form_2p: 'dierais',
  form_3p: 'dieran',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will give',
  form_1s: 'diere',
  form_2s: 'dieres',
  form_3s: 'diere',
  form_1p: 'diéremos',
  form_2p: 'diereis',
  form_3p: 'dieren',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have given, gave',
  form_1s: 'haya dado',
  form_2s: 'hayas dado',
  form_3s: 'haya dado',
  form_1p: 'hayamos dado',
  form_2p: 'hayáis dado',
  form_3p: 'hayan dado',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have given',
  form_1s: 'hubiere dado',
  form_2s: 'hubieres dado',
  form_3s: 'hubiere dado',
  form_1p: 'hubiéremos dado',
  form_2p: 'hubiereis dado',
  form_3p: 'hubieren dado',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had given',
  form_1s: 'hubiera dado',
  form_2s: 'hubieras dado',
  form_3s: 'hubiera dado',
  form_1p: 'hubiéramos dado',
  form_2p: 'hubierais dado',
  form_3p: 'hubieran dado',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Give! Don't give!",
  form_1s: '',
  form_2s: 'da',
  form_3s: 'dad',
  form_1p: '',
  form_2p: 'dé',
  form_3p: 'den',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Give! Don't give!",
  form_1s: '',
  form_2s: 'no des',
  form_3s: 'no deis',
  form_1p: '',
  form_2p: 'no dé',
  form_3p: 'no den',
  gerund: 'dando',
  gerund_english: 'giving',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I see, am seeing',
  form_1s: 'veo',
  form_2s: 'ves',
  form_3s: 've',
  form_1p: 'vemos',
  form_2p: 'veis',
  form_3p: 'ven',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will see',
  form_1s: 'veré',
  form_2s: 'verás',
  form_3s: 'verá',
  form_1p: 'veremos',
  form_2p: 'veréis',
  form_3p: 'verán',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was seeing, used to see, saw',
  form_1s: 'veía',
  form_2s: 'veías',
  form_3s: 'veía',
  form_1p: 'veíamos',
  form_2p: 'veíais',
  form_3p: 'veían',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I saw',
  form_1s: 'vi',
  form_2s: 'viste',
  form_3s: 'vio',
  form_1p: 'vimos',
  form_2p: 'visteis',
  form_3p: 'vieron',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would see',
  form_1s: 'vería',
  form_2s: 'verías',
  form_3s: 'vería',
  form_1p: 'veríamos',
  form_2p: 'veríais',
  form_3p: 'verían',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have seen',
  form_1s: 'he visto',
  form_2s: 'has visto',
  form_3s: 'ha visto',
  form_1p: 'hemos visto',
  form_2p: 'habéis visto',
  form_3p: 'han visto',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have seen',
  form_1s: 'habré visto',
  form_2s: 'habrás visto',
  form_3s: 'habrá visto',
  form_1p: 'habremos visto',
  form_2p: 'habréis visto',
  form_3p: 'habrán visto',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had seen',
  form_1s: 'había visto',
  form_2s: 'habías visto',
  form_3s: 'había visto',
  form_1p: 'habíamos visto',
  form_2p: 'habíais visto',
  form_3p: 'habían visto',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had seen',
  form_1s: 'hube visto',
  form_2s: 'hubiste visto',
  form_3s: 'hubo visto',
  form_1p: 'hubimos visto',
  form_2p: 'hubisteis visto',
  form_3p: 'hubieron visto',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have seen',
  form_1s: 'habría visto',
  form_2s: 'habrías visto',
  form_3s: 'habría visto',
  form_1p: 'habríamos visto',
  form_2p: 'habríais visto',
  form_3p: 'habrían visto',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I see, am seeing',
  form_1s: 'vea',
  form_2s: 'veas',
  form_3s: 'vea',
  form_1p: 'veamos',
  form_2p: 'veáis',
  form_3p: 'vean',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I saw, was seeing',
  form_1s: 'viera',
  form_2s: 'vieras',
  form_3s: 'viera',
  form_1p: 'viéramos',
  form_2p: 'vierais',
  form_3p: 'vieran',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will see',
  form_1s: 'viere',
  form_2s: 'vieres',
  form_3s: 'viere',
  form_1p: 'viéremos',
  form_2p: 'viereis',
  form_3p: 'vieren',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have seen, saw',
  form_1s: 'haya visto',
  form_2s: 'hayas visto',
  form_3s: 'haya visto',
  form_1p: 'hayamos visto',
  form_2p: 'hayáis visto',
  form_3p: 'hayan visto',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have seen',
  form_1s: 'hubiere visto',
  form_2s: 'hubieres visto',
  form_3s: 'hubiere visto',
  form_1p: 'hubiéremos visto',
  form_2p: 'hubiereis visto',
  form_3p: 'hubieren visto',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had seen',
  form_1s: 'hubiera visto',
  form_2s: 'hubieras visto',
  form_3s: 'hubiera visto',
  form_1p: 'hubiéramos visto',
  form_2p: 'hubierais visto',
  form_3p: 'hubieran visto',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "See! Don't see!",
  form_1s: '',
  form_2s: 've',
  form_3s: 'ved',
  form_1p: '',
  form_2p: 'vea',
  form_3p: 'vean',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "See! Don't see!",
  form_1s: '',
  form_2s: 'no veas',
  form_3s: 'no veáis',
  form_1p: '',
  form_2p: 'no vea',
  form_3p: 'no vean',
  gerund: 'viendo',
  gerund_english: 'seeing',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I know',
  form_1s: 'sé',
  form_2s: 'sabes',
  form_3s: 'sabe',
  form_1p: 'sabemos',
  form_2p: 'sabéis',
  form_3p: 'saben',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will know',
  form_1s: 'sabré',
  form_2s: 'sabrás',
  form_3s: 'sabrá',
  form_1p: 'sabremos',
  form_2p: 'sabréis',
  form_3p: 'sabrán',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I used to know, knew',
  form_1s: 'sabía',
  form_2s: 'sabías',
  form_3s: 'sabía',
  form_1p: 'sabíamos',
  form_2p: 'sabíais',
  form_3p: 'sabían',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I knew',
  form_1s: 'supe',
  form_2s: 'supiste',
  form_3s: 'supo',
  form_1p: 'supimos',
  form_2p: 'supisteis',
  form_3p: 'supieron',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would know',
  form_1s: 'sabría',
  form_2s: 'sabrías',
  form_3s: 'sabría',
  form_1p: 'sabríamos',
  form_2p: 'sabríais',
  form_3p: 'sabrían',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have known',
  form_1s: 'he sabido',
  form_2s: 'has sabido',
  form_3s: 'ha sabido',
  form_1p: 'hemos sabido',
  form_2p: 'habéis sabido',
  form_3p: 'han sabido',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have known',
  form_1s: 'habré sabido',
  form_2s: 'habrás sabido',
  form_3s: 'habrá sabido',
  form_1p: 'habremos sabido',
  form_2p: 'habréis sabido',
  form_3p: 'habrán sabido',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had known',
  form_1s: 'había sabido',
  form_2s: 'habías sabido',
  form_3s: 'había sabido',
  form_1p: 'habíamos sabido',
  form_2p: 'habíais sabido',
  form_3p: 'habían sabido',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had known',
  form_1s: 'hube sabido',
  form_2s: 'hubiste sabido',
  form_3s: 'hubo sabido',
  form_1p: 'hubimos sabido',
  form_2p: 'hubisteis sabido',
  form_3p: 'hubieron sabido',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have known',
  form_1s: 'habría sabido',
  form_2s: 'habrías sabido',
  form_3s: 'habría sabido',
  form_1p: 'habríamos sabido',
  form_2p: 'habríais sabido',
  form_3p: 'habrían sabido',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I know',
  form_1s: 'sepa',
  form_2s: 'sepas',
  form_3s: 'sepa',
  form_1p: 'sepamos',
  form_2p: 'sepáis',
  form_3p: 'sepan',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I knew',
  form_1s: 'supiera',
  form_2s: 'supieras',
  form_3s: 'supiera',
  form_1p: 'supiéramos',
  form_2p: 'supierais',
  form_3p: 'supieran',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will know',
  form_1s: 'supiere',
  form_2s: 'supieres',
  form_3s: 'supiere',
  form_1p: 'supiéremos',
  form_2p: 'supiereis',
  form_3p: 'supieren',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have known, knew',
  form_1s: 'haya sabido',
  form_2s: 'hayas sabido',
  form_3s: 'haya sabido',
  form_1p: 'hayamos sabido',
  form_2p: 'hayáis sabido',
  form_3p: 'hayan sabido',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have known',
  form_1s: 'hubiere sabido',
  form_2s: 'hubieres sabido',
  form_3s: 'hubiere sabido',
  form_1p: 'hubiéremos sabido',
  form_2p: 'hubiereis sabido',
  form_3p: 'hubieren sabido',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had known',
  form_1s: 'hubiera sabido',
  form_2s: 'hubieras sabido',
  form_3s: 'hubiera sabido',
  form_1p: 'hubiéramos sabido',
  form_2p: 'hubierais sabido',
  form_3p: 'hubieran sabido',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Know! Don't know!",
  form_1s: '',
  form_2s: 'sabe',
  form_3s: 'sabed',
  form_1p: '',
  form_2p: 'sepa',
  form_3p: 'sepan',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Know! Don't know!",
  form_1s: '',
  form_2s: 'no sepas',
  form_3s: 'no sepáis',
  form_1p: '',
  form_2p: 'no sepa',
  form_3p: 'no sepan',
  gerund: 'sabiendo',
  gerund_english: 'knowing',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I speak, am speaking',
  form_1s: 'hablo',
  form_2s: 'hablas',
  form_3s: 'habla',
  form_1p: 'hablamos',
  form_2p: 'habláis',
  form_3p: 'hablan',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will speak',
  form_1s: 'hablaré',
  form_2s: 'hablarás',
  form_3s: 'hablará',
  form_1p: 'hablaremos',
  form_2p: 'hablaréis',
  form_3p: 'hablarán',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was speaking, used to speak, spoke',
  form_1s: 'hablaba',
  form_2s: 'hablabas',
  form_3s: 'hablaba',
  form_1p: 'hablábamos',
  form_2p: 'hablabais',
  form_3p: 'hablaban',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I spoke',
  form_1s: 'hablé',
  form_2s: 'hablaste',
  form_3s: 'habló',
  form_1p: 'hablamos',
  form_2p: 'hablasteis',
  form_3p: 'hablaron',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would speak',
  form_1s: 'hablaría',
  form_2s: 'hablarías',
  form_3s: 'hablaría',
  form_1p: 'hablaríamos',
  form_2p: 'hablaríais',
  form_3p: 'hablarían',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have spoken',
  form_1s: 'he hablado',
  form_2s: 'has hablado',
  form_3s: 'ha hablado',
  form_1p: 'hemos hablado',
  form_2p: 'habéis hablado',
  form_3p: 'han hablado',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have spoken',
  form_1s: 'habré hablado',
  form_2s: 'habrás hablado',
  form_3s: 'habrá hablado',
  form_1p: 'habremos hablado',
  form_2p: 'habréis hablado',
  form_3p: 'habrán hablado',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had spoken',
  form_1s: 'había hablado',
  form_2s: 'habías hablado',
  form_3s: 'había hablado',
  form_1p: 'habíamos hablado',
  form_2p: 'habíais hablado',
  form_3p: 'habían hablado',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had spoken',
  form_1s: 'hube hablado',
  form_2s: 'hubiste hablado',
  form_3s: 'hubo hablado',
  form_1p: 'hubimos hablado',
  form_2p: 'hubisteis hablado',
  form_3p: 'hubieron hablado',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have spoken',
  form_1s: 'habría hablado',
  form_2s: 'habrías hablado',
  form_3s: 'habría hablado',
  form_1p: 'habríamos hablado',
  form_2p: 'habríais hablado',
  form_3p: 'habrían hablado',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I speak, am speaking',
  form_1s: 'hable',
  form_2s: 'hables',
  form_3s: 'hable',
  form_1p: 'hablemos',
  form_2p: 'habléis',
  form_3p: 'hablen',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I spoke, was speaking',
  form_1s: 'hablara',
  form_2s: 'hablaras',
  form_3s: 'hablara',
  form_1p: 'habláramos',
  form_2p: 'hablarais',
  form_3p: 'hablaran',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will speak',
  form_1s: 'hablare',
  form_2s: 'hablares',
  form_3s: 'hablare',
  form_1p: 'habláremos',
  form_2p: 'hablareis',
  form_3p: 'hablaren',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have spoken, spoke',
  form_1s: 'haya hablado',
  form_2s: 'hayas hablado',
  form_3s: 'haya hablado',
  form_1p: 'hayamos hablado',
  form_2p: 'hayáis hablado',
  form_3p: 'hayan hablado',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have spoken',
  form_1s: 'hubiere hablado',
  form_2s: 'hubieres hablado',
  form_3s: 'hubiere hablado',
  form_1p: 'hubiéremos hablado',
  form_2p: 'hubiereis hablado',
  form_3p: 'hubieren hablado',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had spoken',
  form_1s: 'hubiera hablado',
  form_2s: 'hubieras hablado',
  form_3s: 'hubiera hablado',
  form_1p: 'hubiéramos hablado',
  form_2p: 'hubierais hablado',
  form_3p: 'hubieran hablado',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Speak! Don't speak!",
  form_1s: '',
  form_2s: 'habla',
  form_3s: 'hablad',
  form_1p: '',
  form_2p: 'hable',
  form_3p: 'hablen',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Speak! Don't speak!",
  form_1s: '',
  form_2s: 'no hables',
  form_3s: 'no habléis',
  form_1p: '',
  form_2p: 'no hable',
  form_3p: 'no hablen',
  gerund: 'hablando',
  gerund_english: 'speaking',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am',
  form_1s: 'estoy',
  form_2s: 'estás',
  form_3s: 'está',
  form_1p: 'estamos',
  form_2p: 'estáis',
  form_3p: 'están',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will be',
  form_1s: 'estaré',
  form_2s: 'estarás',
  form_3s: 'estará',
  form_1p: 'estaremos',
  form_2p: 'estaréis',
  form_3p: 'estarán',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was, used to be',
  form_1s: 'estaba',
  form_2s: 'estabas',
  form_3s: 'estaba',
  form_1p: 'estábamos',
  form_2p: 'estabais',
  form_3p: 'estaban',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I was',
  form_1s: 'estuve',
  form_2s: 'estuviste',
  form_3s: 'estuvo',
  form_1p: 'estuvimos',
  form_2p: 'estuvisteis',
  form_3p: 'estuvieron',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would be',
  form_1s: 'estaría',
  form_2s: 'estarías',
  form_3s: 'estaría',
  form_1p: 'estaríamos',
  form_2p: 'estaríais',
  form_3p: 'estarían',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have been',
  form_1s: 'he estado',
  form_2s: 'has estado',
  form_3s: 'ha estado',
  form_1p: 'hemos estado',
  form_2p: 'habéis estado',
  form_3p: 'han estado',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have been',
  form_1s: 'habré estado',
  form_2s: 'habrás estado',
  form_3s: 'habrá estado',
  form_1p: 'habremos estado',
  form_2p: 'habréis estado',
  form_3p: 'habrán estado',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had been',
  form_1s: 'había estado',
  form_2s: 'habías estado',
  form_3s: 'había estado',
  form_1p: 'habíamos estado',
  form_2p: 'habíais estado',
  form_3p: 'habían estado',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had been',
  form_1s: 'hube estado',
  form_2s: 'hubiste estado',
  form_3s: 'hubo estado',
  form_1p: 'hubimos estado',
  form_2p: 'hubisteis estado',
  form_3p: 'hubieron estado',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have been',
  form_1s: 'habría estado',
  form_2s: 'habrías estado',
  form_3s: 'habría estado',
  form_1p: 'habríamos estado',
  form_2p: 'habríais estado',
  form_3p: 'habrían estado',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am',
  form_1s: 'esté',
  form_2s: 'estés',
  form_3s: 'esté',
  form_1p: 'estemos',
  form_2p: 'estéis',
  form_3p: 'estén',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was, were',
  form_1s: 'estuviera',
  form_2s: 'estuvieras',
  form_3s: 'estuviera',
  form_1p: 'estuviéramos',
  form_2p: 'estuvierais',
  form_3p: 'estuvieran',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will be',
  form_1s: 'estuviere',
  form_2s: 'estuvieres',
  form_3s: 'estuviere',
  form_1p: 'estuviéremos',
  form_2p: 'estuviereis',
  form_3p: 'estuvieren',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have been, was',
  form_1s: 'haya estado',
  form_2s: 'hayas estado',
  form_3s: 'haya estado',
  form_1p: 'hayamos estado',
  form_2p: 'hayáis estado',
  form_3p: 'hayan estado',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have been',
  form_1s: 'hubiere estado',
  form_2s: 'hubieres estado',
  form_3s: 'hubiere estado',
  form_1p: 'hubiéremos estado',
  form_2p: 'hubiereis estado',
  form_3p: 'hubieren estado',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had been',
  form_1s: 'hubiera estado',
  form_2s: 'hubieras estado',
  form_3s: 'hubiera estado',
  form_1p: 'hubiéramos estado',
  form_2p: 'hubierais estado',
  form_3p: 'hubieran estado',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Be! Don't be!",
  form_1s: '',
  form_2s: 'está',
  form_3s: 'estad',
  form_1p: '',
  form_2p: 'esté',
  form_3p: 'estén',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Be! Don't be!",
  form_1s: '',
  form_2s: 'no estés',
  form_3s: 'no estéis',
  form_1p: '',
  form_2p: 'no esté',
  form_3p: 'no estén',
  gerund: 'estando',
  gerund_english: 'being',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am',
  form_1s: 'soy',
  form_2s: 'eres',
  form_3s: 'es',
  form_1p: 'somos',
  form_2p: 'sois',
  form_3p: 'son',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will be',
  form_1s: 'seré',
  form_2s: 'serás',
  form_3s: 'será',
  form_1p: 'seremos',
  form_2p: 'seréis',
  form_3p: 'serán',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I used to be, was',
  form_1s: 'era',
  form_2s: 'eras',
  form_3s: 'era',
  form_1p: 'éramos',
  form_2p: 'erais',
  form_3p: 'eran',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I was',
  form_1s: 'fui',
  form_2s: 'fuiste',
  form_3s: 'fue',
  form_1p: 'fuimos',
  form_2p: 'fuisteis',
  form_3p: 'fueron',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would be',
  form_1s: 'sería',
  form_2s: 'serías',
  form_3s: 'sería',
  form_1p: 'seríamos',
  form_2p: 'seríais',
  form_3p: 'serían',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have been',
  form_1s: 'he sido',
  form_2s: 'has sido',
  form_3s: 'ha sido',
  form_1p: 'hemos sido',
  form_2p: 'habéis sido',
  form_3p: 'han sido',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have been',
  form_1s: 'habré sido',
  form_2s: 'habrás sido',
  form_3s: 'habrá sido',
  form_1p: 'habremos sido',
  form_2p: 'habréis sido',
  form_3p: 'habrán sido',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had been',
  form_1s: 'había sido',
  form_2s: 'habías sido',
  form_3s: 'había sido',
  form_1p: 'habíamos sido',
  form_2p: 'habíais sido',
  form_3p: 'habían sido',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had been',
  form_1s: 'hube sido',
  form_2s: 'hubiste sido',
  form_3s: 'hubo sido',
  form_1p: 'hubimos sido',
  form_2p: 'hubisteis sido',
  form_3p: 'hubieron sido',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have been',
  form_1s: 'habría sido',
  form_2s: 'habrías sido',
  form_3s: 'habría sido',
  form_1p: 'habríamos sido',
  form_2p: 'habríais sido',
  form_3p: 'habrían sido',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am',
  form_1s: 'sea',
  form_2s: 'seas',
  form_3s: 'sea',
  form_1p: 'seamos',
  form_2p: 'seáis',
  form_3p: 'sean',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was, was being, were',
  form_1s: 'fuera',
  form_2s: 'fueras',
  form_3s: 'fuera',
  form_1p: 'fuéramos',
  form_2p: 'fuerais',
  form_3p: 'fueran',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will be',
  form_1s: 'fuere',
  form_2s: 'fueres',
  form_3s: 'fuere',
  form_1p: 'fuéremos',
  form_2p: 'fuereis',
  form_3p: 'fueren',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have been, was',
  form_1s: 'haya sido',
  form_2s: 'hayas sido',
  form_3s: 'haya sido',
  form_1p: 'hayamos sido',
  form_2p: 'hayáis sido',
  form_3p: 'hayan sido',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have been',
  form_1s: 'hubiere sido',
  form_2s: 'hubieres sido',
  form_3s: 'hubiere sido',
  form_1p: 'hubiéremos sido',
  form_2p: 'hubiereis sido',
  form_3p: 'hubieren sido',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had been',
  form_1s: 'hubiera sido',
  form_2s: 'hubieras sido',
  form_3s: 'hubiera sido',
  form_1p: 'hubiéramos sido',
  form_2p: 'hubierais sido',
  form_3p: 'hubieran sido',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Be! Don't be!",
  form_1s: '',
  form_2s: 'sé',
  form_3s: 'sed',
  form_1p: '',
  form_2p: 'sea',
  form_3p: 'sean',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Be! Don't be!",
  form_1s: '',
  form_2s: 'no seas',
  form_3s: 'no seais',
  form_1p: '',
  form_2p: 'no sea',
  form_3p: 'no sean',
  gerund: 'siendo',
  gerund_english: 'being',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I have, am having',
  form_1s: 'tengo',
  form_2s: 'tienes',
  form_3s: 'tiene',
  form_1p: 'tenemos',
  form_2p: 'tenéis',
  form_3p: 'tienen',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will have',
  form_1s: 'tendré',
  form_2s: 'tendrás',
  form_3s: 'tendrá',
  form_1p: 'tendremos',
  form_2p: 'tendréis',
  form_3p: 'tendrán',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was having, used to have, had',
  form_1s: 'tenía',
  form_2s: 'tenías',
  form_3s: 'tenía',
  form_1p: 'teníamos',
  form_2p: 'teníais',
  form_3p: 'tenían',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I had',
  form_1s: 'tuve',
  form_2s: 'tuviste',
  form_3s: 'tuvo',
  form_1p: 'tuvimos',
  form_2p: 'tuvisteis',
  form_3p: 'tuvieron',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would have',
  form_1s: 'tendría',
  form_2s: 'tendrías',
  form_3s: 'tendría',
  form_1p: 'tendríamos',
  form_2p: 'tendríais',
  form_3p: 'tendrían',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have had',
  form_1s: 'he tenido',
  form_2s: 'has tenido',
  form_3s: 'ha tenido',
  form_1p: 'hemos tenido',
  form_2p: 'habéis tenido',
  form_3p: 'han tenido',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have had',
  form_1s: 'habré tenido',
  form_2s: 'habrás tenido',
  form_3s: 'habrá tenido',
  form_1p: 'habremos tenido',
  form_2p: 'habréis tenido',
  form_3p: 'habrán tenido',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had had',
  form_1s: 'había tenido',
  form_2s: 'habías tenido',
  form_3s: 'había tenido',
  form_1p: 'habíamos tenido',
  form_2p: 'habíais tenido',
  form_3p: 'habían tenido',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had had',
  form_1s: 'hube tenido',
  form_2s: 'hubiste tenido',
  form_3s: 'hubo tenido',
  form_1p: 'hubimos tenido',
  form_2p: 'hubisteis tenido',
  form_3p: 'hubieron tenido',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have had',
  form_1s: 'habría tenido',
  form_2s: 'habrías tenido',
  form_3s: 'habría tenido',
  form_1p: 'habríamos tenido',
  form_2p: 'habríais tenido',
  form_3p: 'habrían tenido',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I have, am having',
  form_1s: 'tenga',
  form_2s: 'tengas',
  form_3s: 'tenga',
  form_1p: 'tengamos',
  form_2p: 'tengáis',
  form_3p: 'tengan',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I had, was having',
  form_1s: 'tuviera',
  form_2s: 'tuvieras',
  form_3s: 'tuviera',
  form_1p: 'tuviéramos',
  form_2p: 'tuvierais',
  form_3p: 'tuvieran',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will have',
  form_1s: 'tuviere',
  form_2s: 'tuvieres',
  form_3s: 'tuviere',
  form_1p: 'tuviéremos',
  form_2p: 'tuviereis',
  form_3p: 'tuvieren',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have had, had',
  form_1s: 'haya tenido',
  form_2s: 'hayas tenido',
  form_3s: 'haya tenido',
  form_1p: 'hayamos tenido',
  form_2p: 'hayáis tenido',
  form_3p: 'hayan tenido',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have had',
  form_1s: 'hubiere tenido',
  form_2s: 'hubieres tenido',
  form_3s: 'hubiere tenido',
  form_1p: 'hubiéremos tenido',
  form_2p: 'hubiereis tenido',
  form_3p: 'hubieren tenido',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had had',
  form_1s: 'hubiera tenido',
  form_2s: 'hubieras tenido',
  form_3s: 'hubiera tenido',
  form_1p: 'hubiéramos tenido',
  form_2p: 'hubierais tenido',
  form_3p: 'hubieran tenido',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Have! Don't have!",
  form_1s: '',
  form_2s: 'ten',
  form_3s: 'tened',
  form_1p: '',
  form_2p: 'tenga',
  form_3p: 'tengan',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Have! Don't have!",
  form_1s: '',
  form_2s: 'no tengas',
  form_3s: 'no tengáis',
  form_1p: '',
  form_2p: 'no tenga',
  form_3p: 'no tengan',
  gerund: 'teniendo',
  gerund_english: 'having',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I do, am doing',
  form_1s: 'hago',
  form_2s: 'haces',
  form_3s: 'hace',
  form_1p: 'hacemos',
  form_2p: 'hacéis',
  form_3p: 'hacen',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will do',
  form_1s: 'haré',
  form_2s: 'harás',
  form_3s: 'hará',
  form_1p: 'haremos',
  form_2p: 'haréis',
  form_3p: 'harán',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was doing, used to do, did',
  form_1s: 'hacía',
  form_2s: 'hacías',
  form_3s: 'hacía',
  form_1p: 'hacíamos',
  form_2p: 'hacíais',
  form_3p: 'hacían',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I did',
  form_1s: 'hice',
  form_2s: 'hiciste',
  form_3s: 'hizo',
  form_1p: 'hicimos',
  form_2p: 'hicisteis',
  form_3p: 'hicieron',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would do',
  form_1s: 'haría',
  form_2s: 'harías',
  form_3s: 'haría',
  form_1p: 'haríamos',
  form_2p: 'haríais',
  form_3p: 'harían',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have done',
  form_1s: 'he hecho',
  form_2s: 'has hecho',
  form_3s: 'ha hecho',
  form_1p: 'hemos hecho',
  form_2p: 'habéis hecho',
  form_3p: 'han hecho',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have done',
  form_1s: 'habré hecho',
  form_2s: 'habrás hecho',
  form_3s: 'habrá hecho',
  form_1p: 'habremos hecho',
  form_2p: 'habréis hecho',
  form_3p: 'habrán hecho',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had done',
  form_1s: 'había hecho',
  form_2s: 'habías hecho',
  form_3s: 'había hecho',
  form_1p: 'habíamos hecho',
  form_2p: 'habíais hecho',
  form_3p: 'habían hecho',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had done',
  form_1s: 'hube hecho',
  form_2s: 'hubiste hecho',
  form_3s: 'hubo hecho',
  form_1p: 'hubimos hecho',
  form_2p: 'hubisteis hecho',
  form_3p: 'hubieron hecho',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have done',
  form_1s: 'habría hecho',
  form_2s: 'habrías hecho',
  form_3s: 'habría hecho',
  form_1p: 'habríamos hecho',
  form_2p: 'habríais hecho',
  form_3p: 'habrían hecho',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I do, am doing',
  form_1s: 'haga',
  form_2s: 'hagas',
  form_3s: 'haga',
  form_1p: 'hagamos',
  form_2p: 'hagáis',
  form_3p: 'hagan',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I did, was doing',
  form_1s: 'hiciera',
  form_2s: 'hicieras',
  form_3s: 'hiciera',
  form_1p: 'hiciéramos',
  form_2p: 'hicierais',
  form_3p: 'hicieran',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will do',
  form_1s: 'hiciere',
  form_2s: 'hicieres',
  form_3s: 'hiciere',
  form_1p: 'hiciéremos',
  form_2p: 'hiciereis',
  form_3p: 'hicieren',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have done, did',
  form_1s: 'haya hecho',
  form_2s: 'hayas hecho',
  form_3s: 'haya hecho',
  form_1p: 'hayamos hecho',
  form_2p: 'hayáis hecho',
  form_3p: 'hayan hecho',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have done',
  form_1s: 'hubiere hecho',
  form_2s: 'hubieres hecho',
  form_3s: 'hubiere hecho',
  form_1p: 'hubiéremos hecho',
  form_2p: 'hubiereis hecho',
  form_3p: 'hubieren hecho',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had done',
  form_1s: 'hubiera hecho',
  form_2s: 'hubieras hecho',
  form_3s: 'hubiera hecho',
  form_1p: 'hubiéramos hecho',
  form_2p: 'hubierais hecho',
  form_3p: 'hubieran hecho',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Do! Don't do!",
  form_1s: '',
  form_2s: 'haz',
  form_3s: 'haced',
  form_1p: '',
  form_2p: 'haga',
  form_3p: 'hagan',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Do! Don't do!",
  form_1s: '',
  form_2s: 'no hagas',
  form_3s: 'no hagáis',
  form_1p: '',
  form_2p: 'no haga',
  form_3p: 'no hagan',
  gerund: 'haciendo',
  gerund_english: 'doing',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I go, am going',
  form_1s: 'voy',
  form_2s: 'vas',
  form_3s: 'va',
  form_1p: 'vamos',
  form_2p: 'vais',
  form_3p: 'van',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will go',
  form_1s: 'iré',
  form_2s: 'irás',
  form_3s: 'irá',
  form_1p: 'iremos',
  form_2p: 'iréis',
  form_3p: 'irán',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I was going, used to go, went',
  form_1s: 'iba',
  form_2s: 'ibas',
  form_3s: 'iba',
  form_1p: 'íbamos',
  form_2p: 'ibais',
  form_3p: 'iban',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I went',
  form_1s: 'fui',
  form_2s: 'fuiste',
  form_3s: 'fue',
  form_1p: 'fuimos',
  form_2p: 'fuisteis',
  form_3p: 'fueron',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional',
  tense_english: 'Conditional',
  verb_english: 'I would go',
  form_1s: 'iría',
  form_2s: 'irías',
  form_3s: 'iría',
  form_1p: 'iríamos',
  form_2p: 'iríais',
  form_3p: 'irían',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have gone',
  form_1s: 'he ido',
  form_2s: 'has ido',
  form_3s: 'ha ido',
  form_1p: 'hemos ido',
  form_2p: 'habéis ido',
  form_3p: 'han ido',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have gone',
  form_1s: 'habré ido',
  form_2s: 'habrás ido',
  form_3s: 'habrá ido',
  form_1p: 'habremos ido',
  form_2p: 'habréis ido',
  form_3p: 'habrán ido',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had gone',
  form_1s: 'había ido',
  form_2s: 'habías ido',
  form_3s: 'había ido',
  form_1p: 'habíamos ido',
  form_2p: 'habíais ido',
  form_3p: 'habían ido',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito anterior',
  tense_english: 'Preterite (Archaic)',
  verb_english: 'I had gone',
  form_1s: 'hube ido',
  form_2s: 'hubiste ido',
  form_3s: 'hubo ido',
  form_1p: 'hubimos ido',
  form_2p: 'hubisteis ido',
  form_3p: 'hubieron ido',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Condicional perfecto',
  tense_english: 'Conditional Perfect',
  verb_english: 'I would have gone',
  form_1s: 'habría ido',
  form_2s: 'habrías ido',
  form_3s: 'habría ido',
  form_1p: 'habríamos ido',
  form_2p: 'habríais ido',
  form_3p: 'habrían ido',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I go, am going',
  form_1s: 'vaya',
  form_2s: 'vayas',
  form_3s: 'vaya',
  form_1p: 'vayamos',
  form_2p: 'vayáis',
  form_3p: 'vayan',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Imperfecto',
  tense_english: 'Imperfect',
  verb_english: 'I went, was going',
  form_1s: 'fuera',
  form_2s: 'fueras',
  form_3s: 'fuera',
  form_1p: 'fuéramos',
  form_2p: 'fuerais',
  form_3p: 'fueran',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I will go',
  form_1s: 'fuere',
  form_2s: 'fueres',
  form_3s: 'fuere',
  form_1p: 'fuéremos',
  form_2p: 'fuereis',
  form_3p: 'fueren',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Presente perfecto',
  tense_english: 'Present Perfect',
  verb_english: 'I have gone, went',
  form_1s: 'haya ido',
  form_2s: 'hayas ido',
  form_3s: 'haya ido',
  form_1p: 'hayamos ido',
  form_2p: 'hayáis ido',
  form_3p: 'hayan ido',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Futuro perfecto',
  tense_english: 'Future Perfect',
  verb_english: 'I will have gone',
  form_1s: 'hubiere ido',
  form_2s: 'hubieres ido',
  form_3s: 'hubiere ido',
  form_1p: 'hubiéremos ido',
  form_2p: 'hubiereis ido',
  form_3p: 'hubieren ido',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Subjuntivo',
  mood_english: 'Subjunctive',
  tense: 'Pluscuamperfecto',
  tense_english: 'Past Perfect',
  verb_english: 'I had gone',
  form_1s: 'hubiera ido',
  form_2s: 'hubieras ido',
  form_3s: 'hubiera ido',
  form_1p: 'hubiéramos ido',
  form_2p: 'hubierais ido',
  form_3p: 'hubieran ido',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Imperativo Afirmativo',
  mood_english: 'Imperative Affirmative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Go! Don't go!",
  form_1s: '',
  form_2s: 've',
  form_3s: 'id',
  form_1p: '',
  form_2p: 'vaya',
  form_3p: 'vayan',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Imperativo Negativo',
  mood_english: 'Imperative Negative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: "Go! Don't go!",
  form_1s: '',
  form_2s: 'no vayas',
  form_3s: 'no vayáis',
  form_1p: '',
  form_2p: 'no vaya',
  form_3p: 'no vayan',
  gerund: 'yendo',
  gerund_english: 'going',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I abandon, am abandoning",
  "form_1s": "abandono",
  "form_2s": "abandonas",
  "form_3s": "abandona",
  "form_1p": "abandonamos",
  "form_2p": "abandonáis",
  "form_3p": "abandonan",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will abandon",
  "form_1s": "abandonaré",
  "form_2s": "abandonarás",
  "form_3s": "abandonará",
  "form_1p": "abandonaremos",
  "form_2p": "abandonaréis",
  "form_3p": "abandonarán",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was abandoning, used to abandon, abandoned",
  "form_1s": "abandonaba",
  "form_2s": "abandonabas",
  "form_3s": "abandonaba",
  "form_1p": "abandonábamos",
  "form_2p": "abandonabais",
  "form_3p": "abandonaban",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I abandoned",
  "form_1s": "abandoné",
  "form_2s": "abandonaste",
  "form_3s": "abandonó",
  "form_1p": "abandonamos",
  "form_2p": "abandonasteis",
  "form_3p": "abandonaron",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would abandon",
  "form_1s": "abandonaría",
  "form_2s": "abandonarías",
  "form_3s": "abandonaría",
  "form_1p": "abandonaríamos",
  "form_2p": "abandonaríais",
  "form_3p": "abandonarían",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have abandoned",
  "form_1s": "he abandonado",
  "form_2s": "has abandonado",
  "form_3s": "ha abandonado",
  "form_1p": "hemos abandonado",
  "form_2p": "habéis abandonado",
  "form_3p": "han abandonado",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have abandoned",
  "form_1s": "habré abandonado",
  "form_2s": "habrás abandonado",
  "form_3s": "habrá abandonado",
  "form_1p": "habremos abandonado",
  "form_2p": "habréis abandonado",
  "form_3p": "habrán abandonado",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had abandoned",
  "form_1s": "había abandonado",
  "form_2s": "habías abandonado",
  "form_3s": "había abandonado",
  "form_1p": "habíamos abandonado",
  "form_2p": "habíais abandonado",
  "form_3p": "habían abandonado",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had abandoned",
  "form_1s": "hube abandonado",
  "form_2s": "hubiste abandonado",
  "form_3s": "hubo abandonado",
  "form_1p": "hubimos abandonado",
  "form_2p": "hubisteis abandonado",
  "form_3p": "hubieron abandonado",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have abandoned",
  "form_1s": "habría abandonado",
  "form_2s": "habrías abandonado",
  "form_3s": "habría abandonado",
  "form_1p": "habríamos abandonado",
  "form_2p": "habríais abandonado",
  "form_3p": "habrían abandonado",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I abandon, am abandoning",
  "form_1s": "abandone",
  "form_2s": "abandones",
  "form_3s": "abandone",
  "form_1p": "abandonemos",
  "form_2p": "abandonéis",
  "form_3p": "abandonen",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I abandoned, was abandoning",
  "form_1s": "abandonara",
  "form_2s": "abandonaras",
  "form_3s": "abandonara",
  "form_1p": "abandonáramos",
  "form_2p": "abandonarais",
  "form_3p": "abandonaran",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will abandon",
  "form_1s": "abandonare",
  "form_2s": "abandonares",
  "form_3s": "abandonare",
  "form_1p": "abandonáremos",
  "form_2p": "abandonareis",
  "form_3p": "abandonaren",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have abandoned, abandoned",
  "form_1s": "haya abandonado",
  "form_2s": "hayas abandonado",
  "form_3s": "haya abandonado",
  "form_1p": "hayamos abandonado",
  "form_2p": "hayáis abandonado",
  "form_3p": "hayan abandonado",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have abandoned",
  "form_1s": "hubiere abandonado",
  "form_2s": "hubieres abandonado",
  "form_3s": "hubiere abandonado",
  "form_1p": "hubiéremos abandonado",
  "form_2p": "hubiereis abandonado",
  "form_3p": "hubieren abandonado",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had abandoned",
  "form_1s": "hubiera abandonado",
  "form_2s": "hubieras abandonado",
  "form_3s": "hubiera abandonado",
  "form_1p": "hubiéramos abandonado",
  "form_2p": "hubierais abandonado",
  "form_3p": "hubieran abandonado",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Abandon! Don't abandon!",
  "form_1s": "",
  "form_2s": "abandona",
  "form_3s": "abandonad",
  "form_1p": "",
  "form_2p": "abandone",
  "form_3p": "abandonen",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abandonar",
  "infinitive_english": "to abandon, leave behind, desert; to quit, give up",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Abandon! Don't abandon!",
  "form_1s": "",
  "form_2s": "no abandones",
  "form_3s": "no abandonéis",
  "form_1p": "",
  "form_2p": "no abandone",
  "form_3p": "no abandonen",
  "gerund": "abandonando",
  "gerund_english": "abandoning",
  "pastparticiple": "abandonado",
  "pastparticiple_english": "abandoned"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I board, am boarding",
  "form_1s": "abordo",
  "form_2s": "abordas",
  "form_3s": "aborda",
  "form_1p": "abordamos",
  "form_2p": "abordáis",
  "form_3p": "abordan",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will board",
  "form_1s": "abordaré",
  "form_2s": "abordarás",
  "form_3s": "abordará",
  "form_1p": "abordaremos",
  "form_2p": "abordaréis",
  "form_3p": "abordarán",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was boarding, used to board, boarded",
  "form_1s": "abordaba",
  "form_2s": "abordabas",
  "form_3s": "abordaba",
  "form_1p": "abordábamos",
  "form_2p": "abordabais",
  "form_3p": "abordaban",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I boarded",
  "form_1s": "abordé",
  "form_2s": "abordaste",
  "form_3s": "abordó",
  "form_1p": "abordamos",
  "form_2p": "abordasteis",
  "form_3p": "abordaron",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would board",
  "form_1s": "abordaría",
  "form_2s": "abordarías",
  "form_3s": "abordaría",
  "form_1p": "abordaríamos",
  "form_2p": "abordaríais",
  "form_3p": "abordarían",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have boarded",
  "form_1s": "he abordado",
  "form_2s": "has abordado",
  "form_3s": "ha abordado",
  "form_1p": "hemos abordado",
  "form_2p": "habéis abordado",
  "form_3p": "han abordado",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have boarded",
  "form_1s": "habré abordado",
  "form_2s": "habrás abordado",
  "form_3s": "habrá abordado",
  "form_1p": "habremos abordado",
  "form_2p": "habréis abordado",
  "form_3p": "habrán abordado",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had boarded",
  "form_1s": "había abordado",
  "form_2s": "habías abordado",
  "form_3s": "había abordado",
  "form_1p": "habíamos abordado",
  "form_2p": "habíais abordado",
  "form_3p": "habían abordado",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had boarded",
  "form_1s": "hube abordado",
  "form_2s": "hubiste abordado",
  "form_3s": "hubo abordado",
  "form_1p": "hubimos abordado",
  "form_2p": "hubisteis abordado",
  "form_3p": "hubieron abordado",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have boarded",
  "form_1s": "habría abordado",
  "form_2s": "habrías abordado",
  "form_3s": "habría abordado",
  "form_1p": "habríamos abordado",
  "form_2p": "habríais abordado",
  "form_3p": "habrían abordado",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I board, am boarding",
  "form_1s": "aborde",
  "form_2s": "abordes",
  "form_3s": "aborde",
  "form_1p": "abordemos",
  "form_2p": "abordéis",
  "form_3p": "aborden",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I boarded, was boarding",
  "form_1s": "abordara",
  "form_2s": "abordaras",
  "form_3s": "abordara",
  "form_1p": "abordáramos",
  "form_2p": "abordarais",
  "form_3p": "abordaran",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will board",
  "form_1s": "abordare",
  "form_2s": "abordares",
  "form_3s": "abordare",
  "form_1p": "abordáremos",
  "form_2p": "abordareis",
  "form_3p": "abordaren",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have boarded, boarded",
  "form_1s": "haya abordado",
  "form_2s": "hayas abordado",
  "form_3s": "haya abordado",
  "form_1p": "hayamos abordado",
  "form_2p": "hayáis abordado",
  "form_3p": "hayan abordado",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have boarded",
  "form_1s": "hubiere abordado",
  "form_2s": "hubieres abordado",
  "form_3s": "hubiere abordado",
  "form_1p": "hubiéremos abordado",
  "form_2p": "hubiereis abordado",
  "form_3p": "hubieren abordado",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had boarded",
  "form_1s": "hubiera abordado",
  "form_2s": "hubieras abordado",
  "form_3s": "hubiera abordado",
  "form_1p": "hubiéramos abordado",
  "form_2p": "hubierais abordado",
  "form_3p": "hubieran abordado",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Board! Don't board!",
  "form_1s": "",
  "form_2s": "aborda",
  "form_3s": "abordad",
  "form_1p": "",
  "form_2p": "aborde",
  "form_3p": "aborden",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abordar",
  "infinitive_english": "to board, get on [plane, bus, etc.]; to approach, accost [a person]",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Board! Don't board!",
  "form_1s": "",
  "form_2s": "no abordes",
  "form_3s": "no abordéis",
  "form_1p": "",
  "form_2p": "no aborde",
  "form_3p": "no aborden",
  "gerund": "abordando",
  "gerund_english": "boarding",
  "pastparticiple": "abordado",
  "pastparticiple_english": "boarded"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I abort, am aborting",
  "form_1s": "aborto",
  "form_2s": "abortas",
  "form_3s": "aborta",
  "form_1p": "abortamos",
  "form_2p": "abortáis",
  "form_3p": "abortan",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will abort",
  "form_1s": "abortaré",
  "form_2s": "abortarás",
  "form_3s": "abortará",
  "form_1p": "abortaremos",
  "form_2p": "abortaréis",
  "form_3p": "abortarán",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was aborting, used to abort, aborted",
  "form_1s": "abortaba",
  "form_2s": "abortabas",
  "form_3s": "abortaba",
  "form_1p": "abortábamos",
  "form_2p": "abortabais",
  "form_3p": "abortaban",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I aborted",
  "form_1s": "aborté",
  "form_2s": "abortaste",
  "form_3s": "abortó",
  "form_1p": "abortamos",
  "form_2p": "abortasteis",
  "form_3p": "abortaron",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would abort",
  "form_1s": "abortaría",
  "form_2s": "abortarías",
  "form_3s": "abortaría",
  "form_1p": "abortaríamos",
  "form_2p": "abortaríais",
  "form_3p": "abortarían",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have aborted",
  "form_1s": "he abortado",
  "form_2s": "has abortado",
  "form_3s": "ha abortado",
  "form_1p": "hemos abortado",
  "form_2p": "habéis abortado",
  "form_3p": "han abortado",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have aborted",
  "form_1s": "habré abortado",
  "form_2s": "habrás abortado",
  "form_3s": "habrá abortado",
  "form_1p": "habremos abortado",
  "form_2p": "habréis abortado",
  "form_3p": "habrán abortado",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had aborted",
  "form_1s": "había abortado",
  "form_2s": "habías abortado",
  "form_3s": "había abortado",
  "form_1p": "habíamos abortado",
  "form_2p": "habíais abortado",
  "form_3p": "habían abortado",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had aborted",
  "form_1s": "hube abortado",
  "form_2s": "hubiste abortado",
  "form_3s": "hubo abortado",
  "form_1p": "hubimos abortado",
  "form_2p": "hubisteis abortado",
  "form_3p": "hubieron abortado",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have aborted",
  "form_1s": "habría abortado",
  "form_2s": "habrías abortado",
  "form_3s": "habría abortado",
  "form_1p": "habríamos abortado",
  "form_2p": "habríais abortado",
  "form_3p": "habrían abortado",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I abort, am aborting",
  "form_1s": "aborte",
  "form_2s": "abortes",
  "form_3s": "aborte",
  "form_1p": "abortemos",
  "form_2p": "abortéis",
  "form_3p": "aborten",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I aborted, was aborting",
  "form_1s": "abortara",
  "form_2s": "abortaras",
  "form_3s": "abortara",
  "form_1p": "abortáramos",
  "form_2p": "abortarais",
  "form_3p": "abortaran",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will abort",
  "form_1s": "abortare",
  "form_2s": "abortares",
  "form_3s": "abortare",
  "form_1p": "abortáremos",
  "form_2p": "abortareis",
  "form_3p": "abortaren",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have aborted, aborted",
  "form_1s": "haya abortado",
  "form_2s": "hayas abortado",
  "form_3s": "haya abortado",
  "form_1p": "hayamos abortado",
  "form_2p": "hayáis abortado",
  "form_3p": "hayan abortado",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have aborted",
  "form_1s": "hubiere abortado",
  "form_2s": "hubieres abortado",
  "form_3s": "hubiere abortado",
  "form_1p": "hubiéremos abortado",
  "form_2p": "hubiereis abortado",
  "form_3p": "hubieren abortado",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had aborted",
  "form_1s": "hubiera abortado",
  "form_2s": "hubieras abortado",
  "form_3s": "hubiera abortado",
  "form_1p": "hubiéramos abortado",
  "form_2p": "hubierais abortado",
  "form_3p": "hubieran abortado",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Abort! Don't abort!",
  "form_1s": "",
  "form_2s": "aborta",
  "form_3s": "abortad",
  "form_1p": "",
  "form_2p": "aborte",
  "form_3p": "aborten",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abortar",
  "infinitive_english": "to abort, cause to miscarry; to have a miscarriage",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Abort! Don't abort!",
  "form_1s": "",
  "form_2s": "no abortes",
  "form_3s": "no abortéis",
  "form_1p": "",
  "form_2p": "no aborte",
  "form_3p": "no aborten",
  "gerund": "abortando",
  "gerund_english": "aborting",
  "pastparticiple": "abortado",
  "pastparticiple_english": "aborted"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I hug, am hugging",
  "form_1s": "abrazo",
  "form_2s": "abrazas",
  "form_3s": "abraza",
  "form_1p": "abrazamos",
  "form_2p": "abrazáis",
  "form_3p": "abrazan",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will hug",
  "form_1s": "abrazaré",
  "form_2s": "abrazarás",
  "form_3s": "abrazará",
  "form_1p": "abrazaremos",
  "form_2p": "abrazaréis",
  "form_3p": "abrazarán",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was hugging, used to hug, hugged",
  "form_1s": "abrazaba",
  "form_2s": "abrazabas",
  "form_3s": "abrazaba",
  "form_1p": "abrazábamos",
  "form_2p": "abrazabais",
  "form_3p": "abrazaban",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I hugged",
  "form_1s": "abracé",
  "form_2s": "abrazaste",
  "form_3s": "abrazó",
  "form_1p": "abrazamos",
  "form_2p": "abrazasteis",
  "form_3p": "abrazaron",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would hug",
  "form_1s": "abrazaría",
  "form_2s": "abrazarías",
  "form_3s": "abrazaría",
  "form_1p": "abrazaríamos",
  "form_2p": "abrazaríais",
  "form_3p": "abrazarían",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have hugged",
  "form_1s": "he abrazado",
  "form_2s": "has abrazado",
  "form_3s": "ha abrazado",
  "form_1p": "hemos abrazado",
  "form_2p": "habéis abrazado",
  "form_3p": "han abrazado",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have hugged",
  "form_1s": "habré abrazado",
  "form_2s": "habrás abrazado",
  "form_3s": "habrá abrazado",
  "form_1p": "habremos abrazado",
  "form_2p": "habréis abrazado",
  "form_3p": "habrán abrazado",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had hugged",
  "form_1s": "había abrazado",
  "form_2s": "habías abrazado",
  "form_3s": "había abrazado",
  "form_1p": "habíamos abrazado",
  "form_2p": "habíais abrazado",
  "form_3p": "habían abrazado",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had hugged",
  "form_1s": "hube abrazado",
  "form_2s": "hubiste abrazado",
  "form_3s": "hubo abrazado",
  "form_1p": "hubimos abrazado",
  "form_2p": "hubisteis abrazado",
  "form_3p": "hubieron abrazado",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have hugged",
  "form_1s": "habría abrazado",
  "form_2s": "habrías abrazado",
  "form_3s": "habría abrazado",
  "form_1p": "habríamos abrazado",
  "form_2p": "habríais abrazado",
  "form_3p": "habrían abrazado",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I hug, am hugging",
  "form_1s": "abrace",
  "form_2s": "abraces",
  "form_3s": "abrace",
  "form_1p": "abracemos",
  "form_2p": "abracéis",
  "form_3p": "abracen",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I hugged, was hugging",
  "form_1s": "abrazara",
  "form_2s": "abrazaras",
  "form_3s": "abrazara",
  "form_1p": "abrazáramos",
  "form_2p": "abrazarais",
  "form_3p": "abrazaran",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will hug",
  "form_1s": "abrazare",
  "form_2s": "abrazares",
  "form_3s": "abrazare",
  "form_1p": "abrazáremos",
  "form_2p": "abrazareis",
  "form_3p": "abrazaren",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have hugged, hugged",
  "form_1s": "haya abrazado",
  "form_2s": "hayas abrazado",
  "form_3s": "haya abrazado",
  "form_1p": "hayamos abrazado",
  "form_2p": "hayáis abrazado",
  "form_3p": "hayan abrazado",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have hugged",
  "form_1s": "hubiere abrazado",
  "form_2s": "hubieres abrazado",
  "form_3s": "hubiere abrazado",
  "form_1p": "hubiéremos abrazado",
  "form_2p": "hubiereis abrazado",
  "form_3p": "hubieren abrazado",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had hugged",
  "form_1s": "hubiera abrazado",
  "form_2s": "hubieras abrazado",
  "form_3s": "hubiera abrazado",
  "form_1p": "hubiéramos abrazado",
  "form_2p": "hubierais abrazado",
  "form_3p": "hubieran abrazado",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Hug! Don't hug!",
  "form_1s": "",
  "form_2s": "abraza",
  "form_3s": "abrazad",
  "form_1p": "",
  "form_2p": "abrace",
  "form_3p": "abracen",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrazar",
  "infinitive_english": "to hug, embrace",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Hug! Don't hug!",
  "form_1s": "",
  "form_2s": "no abraces",
  "form_3s": "no abracéis",
  "form_1p": "",
  "form_2p": "no abrace",
  "form_3p": "no abracen",
  "gerund": "abrazando",
  "gerund_english": "hugging",
  "pastparticiple": "abrazado",
  "pastparticiple_english": "hugged"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I open, am opening",
  "form_1s": "abro",
  "form_2s": "abres",
  "form_3s": "abre",
  "form_1p": "abrimos",
  "form_2p": "abrís",
  "form_3p": "abren",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will open",
  "form_1s": "abriré",
  "form_2s": "abrirás",
  "form_3s": "abrirá",
  "form_1p": "abriremos",
  "form_2p": "abriréis",
  "form_3p": "abrirán",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was opening, used to open, opened",
  "form_1s": "abría",
  "form_2s": "abrías",
  "form_3s": "abría",
  "form_1p": "abríamos",
  "form_2p": "abríais",
  "form_3p": "abrían",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I opened",
  "form_1s": "abrí",
  "form_2s": "abriste",
  "form_3s": "abrió",
  "form_1p": "abrimos",
  "form_2p": "abristeis",
  "form_3p": "abrieron",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would open",
  "form_1s": "abriría",
  "form_2s": "abrirías",
  "form_3s": "abriría",
  "form_1p": "abriríamos",
  "form_2p": "abriríais",
  "form_3p": "abrirían",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have opened",
  "form_1s": "he abierto",
  "form_2s": "has abierto",
  "form_3s": "ha abierto",
  "form_1p": "hemos abierto",
  "form_2p": "habéis abierto",
  "form_3p": "han abierto",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have opened",
  "form_1s": "habré abierto",
  "form_2s": "habrás abierto",
  "form_3s": "habrá abierto",
  "form_1p": "habremos abierto",
  "form_2p": "habréis abierto",
  "form_3p": "habrán abierto",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had opened",
  "form_1s": "había abierto",
  "form_2s": "habías abierto",
  "form_3s": "había abierto",
  "form_1p": "habíamos abierto",
  "form_2p": "habíais abierto",
  "form_3p": "habían abierto",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had opened",
  "form_1s": "hube abierto",
  "form_2s": "hubiste abierto",
  "form_3s": "hubo abierto",
  "form_1p": "hubimos abierto",
  "form_2p": "hubisteis abierto",
  "form_3p": "hubieron abierto",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have opened",
  "form_1s": "habría abierto",
  "form_2s": "habrías abierto",
  "form_3s": "habría abierto",
  "form_1p": "habríamos abierto",
  "form_2p": "habríais abierto",
  "form_3p": "habrían abierto",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I open, am opening",
  "form_1s": "abra",
  "form_2s": "abras",
  "form_3s": "abra",
  "form_1p": "abramos",
  "form_2p": "abráis",
  "form_3p": "abran",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I opened, was opening",
  "form_1s": "abriera",
  "form_2s": "abrieras",
  "form_3s": "abriera",
  "form_1p": "abriéramos",
  "form_2p": "abrierais",
  "form_3p": "abrieran",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will open",
  "form_1s": "abriere",
  "form_2s": "abrieres",
  "form_3s": "abriere",
  "form_1p": "abriéremos",
  "form_2p": "abriereis",
  "form_3p": "abrieren",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have opened, opened",
  "form_1s": "haya abierto",
  "form_2s": "hayas abierto",
  "form_3s": "haya abierto",
  "form_1p": "hayamos abierto",
  "form_2p": "hayáis abierto",
  "form_3p": "hayan abierto",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have opened",
  "form_1s": "hubiere abierto",
  "form_2s": "hubieres abierto",
  "form_3s": "hubiere abierto",
  "form_1p": "hubiéremos abierto",
  "form_2p": "hubiereis abierto",
  "form_3p": "hubieren abierto",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had opened",
  "form_1s": "hubiera abierto",
  "form_2s": "hubieras abierto",
  "form_3s": "hubiera abierto",
  "form_1p": "hubiéramos abierto",
  "form_2p": "hubierais abierto",
  "form_3p": "hubieran abierto",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Open! Don't open!",
  "form_1s": "",
  "form_2s": "abre",
  "form_3s": "abrid",
  "form_1p": "",
  "form_2p": "abra",
  "form_3p": "abran",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "abrir",
  "infinitive_english": "to open",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Open! Don't open!",
  "form_1s": "",
  "form_2s": "no abras",
  "form_3s": "no abráis",
  "form_1p": "",
  "form_2p": "no abra",
  "form_3p": "no abran",
  "gerund": "abriendo",
  "gerund_english": "opening",
  "pastparticiple": "abierto",
  "pastparticiple_english": "opened"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I bore, am boring",
  "form_1s": "aburro",
  "form_2s": "aburres",
  "form_3s": "aburre",
  "form_1p": "aburrimos",
  "form_2p": "aburrís",
  "form_3p": "aburren",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will bore",
  "form_1s": "aburriré",
  "form_2s": "aburrirás",
  "form_3s": "aburrirá",
  "form_1p": "aburriremos",
  "form_2p": "aburriréis",
  "form_3p": "aburrirán",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was boring, used to bore, bored",
  "form_1s": "aburría",
  "form_2s": "aburrías",
  "form_3s": "aburría",
  "form_1p": "aburríamos",
  "form_2p": "aburríais",
  "form_3p": "aburrían",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I bored",
  "form_1s": "aburrí",
  "form_2s": "aburriste",
  "form_3s": "aburrió",
  "form_1p": "aburrimos",
  "form_2p": "aburristeis",
  "form_3p": "aburrieron",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would bore",
  "form_1s": "aburriría",
  "form_2s": "aburrirías",
  "form_3s": "aburriría",
  "form_1p": "aburriríamos",
  "form_2p": "aburriríais",
  "form_3p": "aburrirían",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have bored",
  "form_1s": "he aburrido",
  "form_2s": "has aburrido",
  "form_3s": "ha aburrido",
  "form_1p": "hemos aburrido",
  "form_2p": "habéis aburrido",
  "form_3p": "han aburrido",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have bored",
  "form_1s": "habré aburrido",
  "form_2s": "habrás aburrido",
  "form_3s": "habrá aburrido",
  "form_1p": "habremos aburrido",
  "form_2p": "habréis aburrido",
  "form_3p": "habrán aburrido",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had bored",
  "form_1s": "había aburrido",
  "form_2s": "habías aburrido",
  "form_3s": "había aburrido",
  "form_1p": "habíamos aburrido",
  "form_2p": "habíais aburrido",
  "form_3p": "habían aburrido",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had bored",
  "form_1s": "hube aburrido",
  "form_2s": "hubiste aburrido",
  "form_3s": "hubo aburrido",
  "form_1p": "hubimos aburrido",
  "form_2p": "hubisteis aburrido",
  "form_3p": "hubieron aburrido",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have bored",
  "form_1s": "habría aburrido",
  "form_2s": "habrías aburrido",
  "form_3s": "habría aburrido",
  "form_1p": "habríamos aburrido",
  "form_2p": "habríais aburrido",
  "form_3p": "habrían aburrido",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I bore, am boring",
  "form_1s": "aburra",
  "form_2s": "aburras",
  "form_3s": "aburra",
  "form_1p": "aburramos",
  "form_2p": "aburráis",
  "form_3p": "aburran",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I bored, was boring",
  "form_1s": "aburriera",
  "form_2s": "aburrieras",
  "form_3s": "aburriera",
  "form_1p": "aburriéramos",
  "form_2p": "aburrierais",
  "form_3p": "aburrieran",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will bore",
  "form_1s": "aburriere",
  "form_2s": "aburrieres",
  "form_3s": "aburriere",
  "form_1p": "aburriéremos",
  "form_2p": "aburriereis",
  "form_3p": "aburrieren",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have bored, bored",
  "form_1s": "haya aburrido",
  "form_2s": "hayas aburrido",
  "form_3s": "haya aburrido",
  "form_1p": "hayamos aburrido",
  "form_2p": "hayáis aburrido",
  "form_3p": "hayan aburrido",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have bored",
  "form_1s": "hubiere aburrido",
  "form_2s": "hubieres aburrido",
  "form_3s": "hubiere aburrido",
  "form_1p": "hubiéremos aburrido",
  "form_2p": "hubiereis aburrido",
  "form_3p": "hubieren aburrido",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had bored",
  "form_1s": "hubiera aburrido",
  "form_2s": "hubieras aburrido",
  "form_3s": "hubiera aburrido",
  "form_1p": "hubiéramos aburrido",
  "form_2p": "hubierais aburrido",
  "form_3p": "hubieran aburrido",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Bore! Don't bore!",
  "form_1s": "",
  "form_2s": "aburre",
  "form_3s": "aburrid",
  "form_1p": "",
  "form_2p": "aburra",
  "form_3p": "aburran",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrir",
  "infinitive_english": "to bore; to tire, weary",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Bore! Don't bore!",
  "form_1s": "",
  "form_2s": "no aburras",
  "form_3s": "no aburráis",
  "form_1p": "",
  "form_2p": "no aburra",
  "form_3p": "no aburran",
  "gerund": "aburriendo",
  "gerund_english": "boring",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I get bored, am getting bored",
  "form_1s": "me aburro",
  "form_2s": "te aburres",
  "form_3s": "se aburre",
  "form_1p": "nos aburrimos",
  "form_2p": "os aburrís",
  "form_3p": "se aburren",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will get bored",
  "form_1s": "me aburriré",
  "form_2s": "te aburrirás",
  "form_3s": "se aburrirá",
  "form_1p": "nos aburriremos",
  "form_2p": "os aburriréis",
  "form_3p": "se aburrirán",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was getting bored, used to get bored, got bored",
  "form_1s": "me aburría",
  "form_2s": "te aburrías",
  "form_3s": "se aburría",
  "form_1p": "nos aburríamos",
  "form_2p": "os aburríais",
  "form_3p": "se aburrían",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I got bored",
  "form_1s": "me aburrí",
  "form_2s": "te aburriste",
  "form_3s": "se aburrió",
  "form_1p": "nos aburrimos",
  "form_2p": "os aburristeis",
  "form_3p": "se aburrieron",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would get bored",
  "form_1s": "me aburriría",
  "form_2s": "te aburrirías",
  "form_3s": "se aburriría",
  "form_1p": "nos aburriríamos",
  "form_2p": "os aburriríais",
  "form_3p": "se aburrirían",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have gotten bored",
  "form_1s": "me he aburrido",
  "form_2s": "te has aburrido",
  "form_3s": "se ha aburrido",
  "form_1p": "nos hemos aburrido",
  "form_2p": "os habéis aburrido",
  "form_3p": "se han aburrido",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have gotten bored",
  "form_1s": "me habré aburrido",
  "form_2s": "te habrás aburrido",
  "form_3s": "se habrá aburrido",
  "form_1p": "nos habremos aburrido",
  "form_2p": "os habréis aburrido",
  "form_3p": "se habrán aburrido",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had gotten bored",
  "form_1s": "me había aburrido",
  "form_2s": "te habías aburrido",
  "form_3s": "se había aburrido",
  "form_1p": "nos habíamos aburrido",
  "form_2p": "os habíais aburrido",
  "form_3p": "se habían aburrido",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had gotten bored",
  "form_1s": "me hube aburrido",
  "form_2s": "te hubiste aburrido",
  "form_3s": "se hubo aburrido",
  "form_1p": "nos hubimos aburrido",
  "form_2p": "os hubisteis aburrido",
  "form_3p": "se hubieron aburrido",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have gotten bored",
  "form_1s": "me habría aburrido",
  "form_2s": "te habrías aburrido",
  "form_3s": "se habría aburrido",
  "form_1p": "nos habríamos aburrido",
  "form_2p": "os habríais aburrido",
  "form_3p": "se habrían aburrido",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I get bored, am getting bored",
  "form_1s": "me aburra",
  "form_2s": "te aburras",
  "form_3s": "se aburra",
  "form_1p": "nos aburramos",
  "form_2p": "os aburráis",
  "form_3p": "se aburran",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I got bored, was getting bored",
  "form_1s": "me aburriera",
  "form_2s": "te aburrieras",
  "form_3s": "se aburriera",
  "form_1p": "nos aburriéramos",
  "form_2p": "os aburrierais",
  "form_3p": "se aburrieran",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will get bored",
  "form_1s": "me aburriere",
  "form_2s": "te aburrieres",
  "form_3s": "se aburriere",
  "form_1p": "nos aburriéremos",
  "form_2p": "os aburriereis",
  "form_3p": "se aburrieren",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have gotten bored, got bored",
  "form_1s": "me haya aburrido",
  "form_2s": "te hayas aburrido",
  "form_3s": "se haya aburrido",
  "form_1p": "nos hayamos aburrido",
  "form_2p": "os hayáis aburrido",
  "form_3p": "se hayan aburrido",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have gotten bored",
  "form_1s": "me hubiere aburrido",
  "form_2s": "te hubieres aburrido",
  "form_3s": "se hubiere aburrido",
  "form_1p": "nos hubiéremos aburrido",
  "form_2p": "os hubiereis aburrido",
  "form_3p": "se hubieren aburrido",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had gotten bored",
  "form_1s": "me hubiera aburrido",
  "form_2s": "te hubieras aburrido",
  "form_3s": "se hubiera aburrido",
  "form_1p": "nos hubiéramos aburrido",
  "form_2p": "os hubierais aburrido",
  "form_3p": "se hubieran aburrido",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Get bored! Don't get bored!",
  "form_1s": "",
  "form_2s": "abúrrete",
  "form_3s": "aburríos",
  "form_1p": "",
  "form_2p": "abúrrase",
  "form_3p": "abúrranse",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "aburrirse",
  "infinitive_english": "to get bored, become bored, be bored",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Get bored! Don't get bored!",
  "form_1s": "",
  "form_2s": "no te aburras",
  "form_3s": "no os aburráis",
  "form_1p": "",
  "form_2p": "no se aburra",
  "form_3p": "no se aburran",
  "gerund": "aburriéndose",
  "gerund_english": "getting bored",
  "pastparticiple": "aburrido",
  "pastparticiple_english": "bored"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I go too far, am going too far",
  "form_1s": "abuso",
  "form_2s": "abusas",
  "form_3s": "abusa",
  "form_1p": "abusamos",
  "form_2p": "abusáis",
  "form_3p": "abusan",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will go too far",
  "form_1s": "abusaré",
  "form_2s": "abusarás",
  "form_3s": "abusará",
  "form_1p": "abusaremos",
  "form_2p": "abusaréis",
  "form_3p": "abusarán",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was going too far, used to go too far, went too far",
  "form_1s": "abusaba",
  "form_2s": "abusabas",
  "form_3s": "abusaba",
  "form_1p": "abusábamos",
  "form_2p": "abusabais",
  "form_3p": "abusaban",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I went too far",
  "form_1s": "abusé",
  "form_2s": "abusaste",
  "form_3s": "abusó",
  "form_1p": "abusamos",
  "form_2p": "abusasteis",
  "form_3p": "abusaron",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would go too far",
  "form_1s": "abusaría",
  "form_2s": "abusarías",
  "form_3s": "abusaría",
  "form_1p": "abusaríamos",
  "form_2p": "abusaríais",
  "form_3p": "abusarían",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have gone too far",
  "form_1s": "he abusado",
  "form_2s": "has abusado",
  "form_3s": "ha abusado",
  "form_1p": "hemos abusado",
  "form_2p": "habéis abusado",
  "form_3p": "han abusado",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have gone too far",
  "form_1s": "habré abusado",
  "form_2s": "habrás abusado",
  "form_3s": "habrá abusado",
  "form_1p": "habremos abusado",
  "form_2p": "habréis abusado",
  "form_3p": "habrán abusado",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had gone too far",
  "form_1s": "había abusado",
  "form_2s": "habías abusado",
  "form_3s": "había abusado",
  "form_1p": "habíamos abusado",
  "form_2p": "habíais abusado",
  "form_3p": "habían abusado",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had gone too far",
  "form_1s": "hube abusado",
  "form_2s": "hubiste abusado",
  "form_3s": "hubo abusado",
  "form_1p": "hubimos abusado",
  "form_2p": "hubisteis abusado",
  "form_3p": "hubieron abusado",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have gone too far",
  "form_1s": "habría abusado",
  "form_2s": "habrías abusado",
  "form_3s": "habría abusado",
  "form_1p": "habríamos abusado",
  "form_2p": "habríais abusado",
  "form_3p": "habrían abusado",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I go too far, am going too far",
  "form_1s": "abuse",
  "form_2s": "abuses",
  "form_3s": "abuse",
  "form_1p": "abusemos",
  "form_2p": "abuséis",
  "form_3p": "abusen",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I went too far, was going too far",
  "form_1s": "abusara",
  "form_2s": "abusaras",
  "form_3s": "abusara",
  "form_1p": "abusáramos",
  "form_2p": "abusarais",
  "form_3p": "abusaran",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will go too far",
  "form_1s": "abusare",
  "form_2s": "abusares",
  "form_3s": "abusare",
  "form_1p": "abusáremos",
  "form_2p": "abusareis",
  "form_3p": "abusaren",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have gone too far, went too far",
  "form_1s": "haya abusado",
  "form_2s": "hayas abusado",
  "form_3s": "haya abusado",
  "form_1p": "hayamos abusado",
  "form_2p": "hayáis abusado",
  "form_3p": "hayan abusado",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have gone too far",
  "form_1s": "hubiere abusado",
  "form_2s": "hubieres abusado",
  "form_3s": "hubiere abusado",
  "form_1p": "hubiéremos abusado",
  "form_2p": "hubiereis abusado",
  "form_3p": "hubieren abusado",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had gone too far",
  "form_1s": "hubiera abusado",
  "form_2s": "hubieras abusado",
  "form_3s": "hubiera abusado",
  "form_1p": "hubiéramos abusado",
  "form_2p": "hubierais abusado",
  "form_3p": "hubieran abusado",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Go too far! Don't go too far!",
  "form_1s": "",
  "form_2s": "abusa",
  "form_3s": "abusad",
  "form_1p": "",
  "form_2p": "abuse",
  "form_3p": "abusen",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "abusar",
  "infinitive_english": "to go too far, take advantage",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Go too far! Don't go too far!",
  "form_1s": "",
  "form_2s": "no abuses",
  "form_3s": "no abuséis",
  "form_1p": "",
  "form_2p": "no abuse",
  "form_3p": "no abusen",
  "gerund": "abusando",
  "gerund_english": "going too far",
  "pastparticiple": "abusado",
  "pastparticiple_english": "gone too far, abused"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I finish, am finishing",
  "form_1s": "acabo",
  "form_2s": "acabas",
  "form_3s": "acaba",
  "form_1p": "acabamos",
  "form_2p": "acabáis",
  "form_3p": "acaban",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will finish",
  "form_1s": "acabaré",
  "form_2s": "acabarás",
  "form_3s": "acabará",
  "form_1p": "acabaremos",
  "form_2p": "acabaréis",
  "form_3p": "acabarán",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was finishing, used to finish, finished",
  "form_1s": "acababa",
  "form_2s": "acababas",
  "form_3s": "acababa",
  "form_1p": "acabábamos",
  "form_2p": "acababais",
  "form_3p": "acababan",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I finished",
  "form_1s": "acabé",
  "form_2s": "acabaste",
  "form_3s": "acabó",
  "form_1p": "acabamos",
  "form_2p": "acabasteis",
  "form_3p": "acabaron",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would finish",
  "form_1s": "acabaría",
  "form_2s": "acabarías",
  "form_3s": "acabaría",
  "form_1p": "acabaríamos",
  "form_2p": "acabaríais",
  "form_3p": "acabarían",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have finished",
  "form_1s": "he acabado",
  "form_2s": "has acabado",
  "form_3s": "ha acabado",
  "form_1p": "hemos acabado",
  "form_2p": "habéis acabado",
  "form_3p": "han acabado",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have finished",
  "form_1s": "habré acabado",
  "form_2s": "habrás acabado",
  "form_3s": "habrá acabado",
  "form_1p": "habremos acabado",
  "form_2p": "habréis acabado",
  "form_3p": "habrán acabado",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had finished",
  "form_1s": "había acabado",
  "form_2s": "habías acabado",
  "form_3s": "había acabado",
  "form_1p": "habíamos acabado",
  "form_2p": "habíais acabado",
  "form_3p": "habían acabado",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had finished",
  "form_1s": "hube acabado",
  "form_2s": "hubiste acabado",
  "form_3s": "hubo acabado",
  "form_1p": "hubimos acabado",
  "form_2p": "hubisteis acabado",
  "form_3p": "hubieron acabado",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have finished",
  "form_1s": "habría acabado",
  "form_2s": "habrías acabado",
  "form_3s": "habría acabado",
  "form_1p": "habríamos acabado",
  "form_2p": "habríais acabado",
  "form_3p": "habrían acabado",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I finish, am finishing",
  "form_1s": "acabe",
  "form_2s": "acabes",
  "form_3s": "acabe",
  "form_1p": "acabemos",
  "form_2p": "acabéis",
  "form_3p": "acaben",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I finished, was finishing",
  "form_1s": "acabara",
  "form_2s": "acabaras",
  "form_3s": "acabara",
  "form_1p": "acabáramos",
  "form_2p": "acabarais",
  "form_3p": "acabaran",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will finish",
  "form_1s": "acabare",
  "form_2s": "acabares",
  "form_3s": "acabare",
  "form_1p": "acabáremos",
  "form_2p": "acabareis",
  "form_3p": "acabaren",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have finished, finished",
  "form_1s": "haya acabado",
  "form_2s": "hayas acabado",
  "form_3s": "haya acabado",
  "form_1p": "hayamos acabado",
  "form_2p": "hayáis acabado",
  "form_3p": "hayan acabado",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have finished",
  "form_1s": "hubiere acabado",
  "form_2s": "hubieres acabado",
  "form_3s": "hubiere acabado",
  "form_1p": "hubiéremos acabado",
  "form_2p": "hubiereis acabado",
  "form_3p": "hubieren acabado",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had finished",
  "form_1s": "hubiera acabado",
  "form_2s": "hubieras acabado",
  "form_3s": "hubiera acabado",
  "form_1p": "hubiéramos acabado",
  "form_2p": "hubierais acabado",
  "form_3p": "hubieran acabado",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Finish! Don't finish!",
  "form_1s": "",
  "form_2s": "acaba",
  "form_3s": "acabad",
  "form_1p": "",
  "form_2p": "acabe",
  "form_3p": "acaben",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acabar",
  "infinitive_english": "to finish, end",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Finish! Don't finish!",
  "form_1s": "",
  "form_2s": "no acabes",
  "form_3s": "no acabéis",
  "form_1p": "",
  "form_2p": "no acabe",
  "form_3p": "no acaben",
  "gerund": "acabando",
  "gerund_english": "finishing",
  "pastparticiple": "acabado",
  "pastparticiple_english": "finished"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I camp, am camping",
  "form_1s": "acampo",
  "form_2s": "acampas",
  "form_3s": "acampa",
  "form_1p": "acampamos",
  "form_2p": "acampáis",
  "form_3p": "acampan",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will camp",
  "form_1s": "acamparé",
  "form_2s": "acamparás",
  "form_3s": "acampará",
  "form_1p": "acamparemos",
  "form_2p": "acamparéis",
  "form_3p": "acamparán",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was camping, used to camp, camped",
  "form_1s": "acampaba",
  "form_2s": "acampabas",
  "form_3s": "acampaba",
  "form_1p": "acampábamos",
  "form_2p": "acampabais",
  "form_3p": "acampaban",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I camped",
  "form_1s": "acampé",
  "form_2s": "acampaste",
  "form_3s": "acampó",
  "form_1p": "acampamos",
  "form_2p": "acampasteis",
  "form_3p": "acamparon",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would camp",
  "form_1s": "acamparía",
  "form_2s": "acamparías",
  "form_3s": "acamparía",
  "form_1p": "acamparíamos",
  "form_2p": "acamparíais",
  "form_3p": "acamparían",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have camped",
  "form_1s": "he acampado",
  "form_2s": "has acampado",
  "form_3s": "ha acampado",
  "form_1p": "hemos acampado",
  "form_2p": "habéis acampado",
  "form_3p": "han acampado",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have camped",
  "form_1s": "habré acampado",
  "form_2s": "habrás acampado",
  "form_3s": "habrá acampado",
  "form_1p": "habremos acampado",
  "form_2p": "habréis acampado",
  "form_3p": "habrán acampado",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had camped",
  "form_1s": "había acampado",
  "form_2s": "habías acampado",
  "form_3s": "había acampado",
  "form_1p": "habíamos acampado",
  "form_2p": "habíais acampado",
  "form_3p": "habían acampado",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had camped",
  "form_1s": "hube acampado",
  "form_2s": "hubiste acampado",
  "form_3s": "hubo acampado",
  "form_1p": "hubimos acampado",
  "form_2p": "hubisteis acampado",
  "form_3p": "hubieron acampado",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have camped",
  "form_1s": "habría acampado",
  "form_2s": "habrías acampado",
  "form_3s": "habría acampado",
  "form_1p": "habríamos acampado",
  "form_2p": "habríais acampado",
  "form_3p": "habrían acampado",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I camp, am camping",
  "form_1s": "acampe",
  "form_2s": "acampes",
  "form_3s": "acampe",
  "form_1p": "acampemos",
  "form_2p": "acampéis",
  "form_3p": "acampen",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I camped, was camping",
  "form_1s": "acampara",
  "form_2s": "acamparas",
  "form_3s": "acampara",
  "form_1p": "acampáramos",
  "form_2p": "acamparais",
  "form_3p": "acamparan",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will camp",
  "form_1s": "acampare",
  "form_2s": "acampares",
  "form_3s": "acampare",
  "form_1p": "acampáremos",
  "form_2p": "acampareis",
  "form_3p": "acamparen",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have camped, camped",
  "form_1s": "haya acampado",
  "form_2s": "hayas acampado",
  "form_3s": "haya acampado",
  "form_1p": "hayamos acampado",
  "form_2p": "hayáis acampado",
  "form_3p": "hayan acampado",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have camped",
  "form_1s": "hubiere acampado",
  "form_2s": "hubieres acampado",
  "form_3s": "hubiere acampado",
  "form_1p": "hubiéremos acampado",
  "form_2p": "hubiereis acampado",
  "form_3p": "hubieren acampado",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had camped",
  "form_1s": "hubiera acampado",
  "form_2s": "hubieras acampado",
  "form_3s": "hubiera acampado",
  "form_1p": "hubiéramos acampado",
  "form_2p": "hubierais acampado",
  "form_3p": "hubieran acampado",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Camp! Don't camp!",
  "form_1s": "",
  "form_2s": "acampa",
  "form_3s": "acampad",
  "form_1p": "",
  "form_2p": "acampe",
  "form_3p": "acampen",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "acampar",
  "infinitive_english": "to camp, encamp, go camping",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Camp! Don't camp!",
  "form_1s": "",
  "form_2s": "no acampes",
  "form_3s": "no acampéis",
  "form_1p": "",
  "form_2p": "no acampe",
  "form_3p": "no acampen",
  "gerund": "acampando",
  "gerund_english": "camping",
  "pastparticiple": "acampado",
  "pastparticiple_english": "camped"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I accept, am accepting",
  "form_1s": "acepto",
  "form_2s": "aceptas",
  "form_3s": "acepta",
  "form_1p": "aceptamos",
  "form_2p": "aceptáis",
  "form_3p": "aceptan",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will accept",
  "form_1s": "aceptaré",
  "form_2s": "aceptarás",
  "form_3s": "aceptará",
  "form_1p": "aceptaremos",
  "form_2p": "aceptaréis",
  "form_3p": "aceptarán",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was accepting, used to accept, accepted",
  "form_1s": "aceptaba",
  "form_2s": "aceptabas",
  "form_3s": "aceptaba",
  "form_1p": "aceptábamos",
  "form_2p": "aceptabais",
  "form_3p": "aceptaban",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I accepted",
  "form_1s": "acepté",
  "form_2s": "aceptaste",
  "form_3s": "aceptó",
  "form_1p": "aceptamos",
  "form_2p": "aceptasteis",
  "form_3p": "aceptaron",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would accept",
  "form_1s": "aceptaría",
  "form_2s": "aceptarías",
  "form_3s": "aceptaría",
  "form_1p": "aceptaríamos",
  "form_2p": "aceptaríais",
  "form_3p": "aceptarían",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have accepted",
  "form_1s": "he aceptado",
  "form_2s": "has aceptado",
  "form_3s": "ha aceptado",
  "form_1p": "hemos aceptado",
  "form_2p": "habéis aceptado",
  "form_3p": "han aceptado",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have accepted",
  "form_1s": "habré aceptado",
  "form_2s": "habrás aceptado",
  "form_3s": "habrá aceptado",
  "form_1p": "habremos aceptado",
  "form_2p": "habréis aceptado",
  "form_3p": "habrán aceptado",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had accepted",
  "form_1s": "había aceptado",
  "form_2s": "habías aceptado",
  "form_3s": "había aceptado",
  "form_1p": "habíamos aceptado",
  "form_2p": "habíais aceptado",
  "form_3p": "habían aceptado",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had accepted",
  "form_1s": "hube aceptado",
  "form_2s": "hubiste aceptado",
  "form_3s": "hubo aceptado",
  "form_1p": "hubimos aceptado",
  "form_2p": "hubisteis aceptado",
  "form_3p": "hubieron aceptado",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have accepted",
  "form_1s": "habría aceptado",
  "form_2s": "habrías aceptado",
  "form_3s": "habría aceptado",
  "form_1p": "habríamos aceptado",
  "form_2p": "habríais aceptado",
  "form_3p": "habrían aceptado",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I accept, am accepting",
  "form_1s": "acepte",
  "form_2s": "aceptes",
  "form_3s": "acepte",
  "form_1p": "aceptemos",
  "form_2p": "aceptéis",
  "form_3p": "acepten",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I accepted, was accepting",
  "form_1s": "aceptara",
  "form_2s": "aceptaras",
  "form_3s": "aceptara",
  "form_1p": "aceptáramos",
  "form_2p": "aceptarais",
  "form_3p": "aceptaran",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will accept",
  "form_1s": "aceptare",
  "form_2s": "aceptares",
  "form_3s": "aceptare",
  "form_1p": "aceptáremos",
  "form_2p": "aceptareis",
  "form_3p": "aceptaren",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have accepted, accepted",
  "form_1s": "haya aceptado",
  "form_2s": "hayas aceptado",
  "form_3s": "haya aceptado",
  "form_1p": "hayamos aceptado",
  "form_2p": "hayáis aceptado",
  "form_3p": "hayan aceptado",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have accepted",
  "form_1s": "hubiere aceptado",
  "form_2s": "hubieres aceptado",
  "form_3s": "hubiere aceptado",
  "form_1p": "hubiéremos aceptado",
  "form_2p": "hubiereis aceptado",
  "form_3p": "hubieren aceptado",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had accepted",
  "form_1s": "hubiera aceptado",
  "form_2s": "hubieras aceptado",
  "form_3s": "hubiera aceptado",
  "form_1p": "hubiéramos aceptado",
  "form_2p": "hubierais aceptado",
  "form_3p": "hubieran aceptado",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Accept! Don't accept!",
  "form_1s": "",
  "form_2s": "acepta",
  "form_3s": "aceptad",
  "form_1p": "",
  "form_2p": "acepte",
  "form_3p": "acepten",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "aceptar",
  "infinitive_english": "to accept, approve; to agree to",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Accept! Don't accept!",
  "form_1s": "",
  "form_2s": "no aceptes",
  "form_3s": "no aceptéis",
  "form_1p": "",
  "form_2p": "no acepte",
  "form_3p": "no acepten",
  "gerund": "aceptando",
  "gerund_english": "accepting",
  "pastparticiple": "aceptado",
  "pastparticiple_english": "accepted"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I bring near(er), am bringing near(er)",
  "form_1s": "acerco",
  "form_2s": "acercas",
  "form_3s": "acerca",
  "form_1p": "acercamos",
  "form_2p": "acercáis",
  "form_3p": "acercan",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will bring near(er)",
  "form_1s": "acercaré",
  "form_2s": "acercarás",
  "form_3s": "acercará",
  "form_1p": "acercaremos",
  "form_2p": "acercaréis",
  "form_3p": "acercarán",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was bringing near(er), used to bring near(er), brought near(er)",
  "form_1s": "acercaba",
  "form_2s": "acercabas",
  "form_3s": "acercaba",
  "form_1p": "acercábamos",
  "form_2p": "acercabais",
  "form_3p": "acercaban",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I brought near(er)",
  "form_1s": "acerqué",
  "form_2s": "acercaste",
  "form_3s": "acercó",
  "form_1p": "acercamos",
  "form_2p": "acercasteis",
  "form_3p": "acercaron",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would bring near(er)",
  "form_1s": "acercaría",
  "form_2s": "acercarías",
  "form_3s": "acercaría",
  "form_1p": "acercaríamos",
  "form_2p": "acercaríais",
  "form_3p": "acercarían",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have brought near(er)",
  "form_1s": "he acercado",
  "form_2s": "has acercado",
  "form_3s": "ha acercado",
  "form_1p": "hemos acercado",
  "form_2p": "habéis acercado",
  "form_3p": "han acercado",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have brought near(er)",
  "form_1s": "habré acercado",
  "form_2s": "habrás acercado",
  "form_3s": "habrá acercado",
  "form_1p": "habremos acercado",
  "form_2p": "habréis acercado",
  "form_3p": "habrán acercado",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had brought near(er)",
  "form_1s": "había acercado",
  "form_2s": "habías acercado",
  "form_3s": "había acercado",
  "form_1p": "habíamos acercado",
  "form_2p": "habíais acercado",
  "form_3p": "habían acercado",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had brought near(er)",
  "form_1s": "hube acercado",
  "form_2s": "hubiste acercado",
  "form_3s": "hubo acercado",
  "form_1p": "hubimos acercado",
  "form_2p": "hubisteis acercado",
  "form_3p": "hubieron acercado",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have brought near(er)",
  "form_1s": "habría acercado",
  "form_2s": "habrías acercado",
  "form_3s": "habría acercado",
  "form_1p": "habríamos acercado",
  "form_2p": "habríais acercado",
  "form_3p": "habrían acercado",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I bring near(er), am bringing near(er)",
  "form_1s": "acerque",
  "form_2s": "acerques",
  "form_3s": "acerque",
  "form_1p": "acerquemos",
  "form_2p": "acerquéis",
  "form_3p": "acerquen",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I brought near(er), was bringing near(er)",
  "form_1s": "acercara",
  "form_2s": "acercaras",
  "form_3s": "acercara",
  "form_1p": "acercáramos",
  "form_2p": "acercarais",
  "form_3p": "acercaran",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will bring near(er)",
  "form_1s": "acercare",
  "form_2s": "acercares",
  "form_3s": "acercare",
  "form_1p": "acercáremos",
  "form_2p": "acercareis",
  "form_3p": "acercaren",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have brought near(er), brought near(er)",
  "form_1s": "haya acercado",
  "form_2s": "hayas acercado",
  "form_3s": "haya acercado",
  "form_1p": "hayamos acercado",
  "form_2p": "hayáis acercado",
  "form_3p": "hayan acercado",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have brought near(er)",
  "form_1s": "hubiere acercado",
  "form_2s": "hubieres acercado",
  "form_3s": "hubiere acercado",
  "form_1p": "hubiéremos acercado",
  "form_2p": "hubiereis acercado",
  "form_3p": "hubieren acercado",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had brought near(er)",
  "form_1s": "hubiera acercado",
  "form_2s": "hubieras acercado",
  "form_3s": "hubiera acercado",
  "form_1p": "hubiéramos acercado",
  "form_2p": "hubierais acercado",
  "form_3p": "hubieran acercado",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Bring near(er)! Don't bring near(er)!",
  "form_1s": "",
  "form_2s": "acerca",
  "form_3s": "acercad",
  "form_1p": "",
  "form_2p": "acerque",
  "form_3p": "acerquen",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercar",
  "infinitive_english": "to bring near[er], move [something] nearer",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Bring near(er)! Don't bring near(er)!",
  "form_1s": "",
  "form_2s": "no acerques",
  "form_3s": "no acerquéis",
  "form_1p": "",
  "form_2p": "no acerque",
  "form_3p": "no acerquen",
  "gerund": "acercando",
  "gerund_english": "bringing near(er)",
  "pastparticiple": "acercado",
  "pastparticiple_english": "brought near(er)"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I approach, am approaching",
  "form_1s": "me acerco",
  "form_2s": "te acercas",
  "form_3s": "se acerca",
  "form_1p": "nos acercamos",
  "form_2p": "os acercáis",
  "form_3p": "se acercan",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will approach",
  "form_1s": "me acercaré",
  "form_2s": "te acercarás",
  "form_3s": "se acercará",
  "form_1p": "nos acercaremos",
  "form_2p": "os acercaréis",
  "form_3p": "se acercarán",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was approaching, used to approach, approached",
  "form_1s": "me acercaba",
  "form_2s": "te acercabas",
  "form_3s": "se acercaba",
  "form_1p": "nos acercábamos",
  "form_2p": "os acercabais",
  "form_3p": "se acercaban",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I approached",
  "form_1s": "me acerqué",
  "form_2s": "te acercaste",
  "form_3s": "se acercó",
  "form_1p": "nos acercamos",
  "form_2p": "acercasteis",
  "form_3p": "se acercaron",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would approach",
  "form_1s": "me acercaría",
  "form_2s": "te acercarías",
  "form_3s": "se acercaría",
  "form_1p": "nos acercaríamos",
  "form_2p": "os acercaríais",
  "form_3p": "se acercarían",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have approached",
  "form_1s": "me he acercado",
  "form_2s": "te has acercado",
  "form_3s": "se ha acercado",
  "form_1p": "nos hemos acercado",
  "form_2p": "os habéis acercado",
  "form_3p": "se han acercado",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have approached",
  "form_1s": "me habré acercado",
  "form_2s": "te habrás acercado",
  "form_3s": "se habrá acercado",
  "form_1p": "nos habremos acercado",
  "form_2p": "os habréis acercado",
  "form_3p": "se habrán acercado",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had approached",
  "form_1s": "me había acercado",
  "form_2s": "te habías acercado",
  "form_3s": "se había acercado",
  "form_1p": "nos habíamos acercado",
  "form_2p": "os habíais acercado",
  "form_3p": "se habían acercado",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had approached",
  "form_1s": "me hube acercado",
  "form_2s": "te hubiste acercado",
  "form_3s": "se hubo acercado",
  "form_1p": "nos hubimos acercado",
  "form_2p": "os hubisteis acercado",
  "form_3p": "se hubieron acercado",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have approached",
  "form_1s": "me habría acercado",
  "form_2s": "te habrías acercado",
  "form_3s": "se habría acercado",
  "form_1p": "nos habríamos acercado",
  "form_2p": "os habríais acercado",
  "form_3p": "se habrían acercado",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I approach, am approaching",
  "form_1s": "me acerque",
  "form_2s": "te acerques",
  "form_3s": "se acerque",
  "form_1p": "nos acerquemos",
  "form_2p": "os acerquéis",
  "form_3p": "se acerquen",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I approached, was approaching",
  "form_1s": "me acercara",
  "form_2s": "te acercaras",
  "form_3s": "se acercara",
  "form_1p": "nos acercáramos",
  "form_2p": "os acercarais",
  "form_3p": "se acercaran",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will approach",
  "form_1s": "me acercare",
  "form_2s": "te acercares",
  "form_3s": "se acercare",
  "form_1p": "nos acercáremos",
  "form_2p": "os acercareis",
  "form_3p": "se acercaren",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have approached, approached",
  "form_1s": "me haya acercado",
  "form_2s": "te hayas acercado",
  "form_3s": "se haya acercado",
  "form_1p": "nos hayamos acercado",
  "form_2p": "os hayáis acercado",
  "form_3p": "se hayan acercado",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have approached",
  "form_1s": "me hubiere acercado",
  "form_2s": "te hubieres acercado",
  "form_3s": "se hubiere acercado",
  "form_1p": "nos hubiéremos acercado",
  "form_2p": "os hubiereis acercado",
  "form_3p": "se hubieren acercado",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had approached",
  "form_1s": "me hubiera acercado",
  "form_2s": "te hubieras acercado",
  "form_3s": "se hubiera acercado",
  "form_1p": "nos hubiéramos acercado",
  "form_2p": "os hubierais acercado",
  "form_3p": "se hubieran acercado",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Approach! Don't approach!",
  "form_1s": "",
  "form_2s": "acércate",
  "form_3s": "acercaos",
  "form_1p": "",
  "form_2p": "acérquese",
  "form_3p": "acérquense",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acercarse",
  "infinitive_english": "to approach",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Approach! Don't approach!",
  "form_1s": "",
  "form_2s": "no te acerques",
  "form_3s": "no os acerquéis",
  "form_1p": "",
  "form_2p": "no se acerque",
  "form_3p": "no se acerquen",
  "gerund": "acercándose",
  "gerund_english": "approaching",
  "pastparticiple": "acercado",
  "pastparticiple_english": "approached"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I accompany, am accompanying",
  "form_1s": "acompaño",
  "form_2s": "acompañas",
  "form_3s": "acompaña",
  "form_1p": "acompañamos",
  "form_2p": "acompañáis",
  "form_3p": "acompañan",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will accompany",
  "form_1s": "acompañaré",
  "form_2s": "acompañarás",
  "form_3s": "acompañará",
  "form_1p": "acompañaremos",
  "form_2p": "acompañaréis",
  "form_3p": "acompañarán",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was accompanying, used to accompany, accompanied",
  "form_1s": "acompañaba",
  "form_2s": "acompañabas",
  "form_3s": "acompañaba",
  "form_1p": "acompañábamos",
  "form_2p": "acompañabais",
  "form_3p": "acompañaban",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I accompanied",
  "form_1s": "acompañé",
  "form_2s": "acompañaste",
  "form_3s": "acompañó",
  "form_1p": "acompañamos",
  "form_2p": "acompañasteis",
  "form_3p": "acompañaron",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would accompany",
  "form_1s": "acompañaría",
  "form_2s": "acompañarías",
  "form_3s": "acompañaría",
  "form_1p": "acompañaríamos",
  "form_2p": "acompañaríais",
  "form_3p": "acompañarían",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have accompanied",
  "form_1s": "he acompañado",
  "form_2s": "has acompañado",
  "form_3s": "ha acompañado",
  "form_1p": "hemos acompañado",
  "form_2p": "habéis acompañado",
  "form_3p": "han acompañado",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have accompanied",
  "form_1s": "habré acompañado",
  "form_2s": "habrás acompañado",
  "form_3s": "habrá acompañado",
  "form_1p": "habremos acompañado",
  "form_2p": "habréis acompañado",
  "form_3p": "habrán acompañado",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had accompanied",
  "form_1s": "había acompañado",
  "form_2s": "habías acompañado",
  "form_3s": "había acompañado",
  "form_1p": "habíamos acompañado",
  "form_2p": "habíais acompañado",
  "form_3p": "habían acompañado",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had accompanied",
  "form_1s": "hube acompañado",
  "form_2s": "hubiste acompañado",
  "form_3s": "hubo acompañado",
  "form_1p": "hubimos acompañado",
  "form_2p": "hubisteis acompañado",
  "form_3p": "hubieron acompañado",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have accompanied",
  "form_1s": "habría acompañado",
  "form_2s": "habrías acompañado",
  "form_3s": "habría acompañado",
  "form_1p": "habríamos acompañado",
  "form_2p": "habríais acompañado",
  "form_3p": "habrían acompañado",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I accompany, am accompanying",
  "form_1s": "acompañe",
  "form_2s": "acompañes",
  "form_3s": "acompañe",
  "form_1p": "acompañemos",
  "form_2p": "acompañéis",
  "form_3p": "acompañen",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would decide",
  "form_1s": "acordaría",
  "form_2s": "acordarías",
  "form_3s": "acordaría",
  "form_1p": "acordaríamos",
  "form_2p": "acordaríais",
  "form_3p": "acordarían",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I accompanied, was accompanying",
  "form_1s": "acompañara",
  "form_2s": "acompañaras",
  "form_3s": "acompañara",
  "form_1p": "acompañáramos",
  "form_2p": "acompañarais",
  "form_3p": "acompañaran",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will accompany",
  "form_1s": "acompañare",
  "form_2s": "acompañares",
  "form_3s": "acompañare",
  "form_1p": "acompañáremos",
  "form_2p": "acompañareis",
  "form_3p": "acompañaren",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have accompanied, accompanied",
  "form_1s": "haya acompañado",
  "form_2s": "hayas acompañado",
  "form_3s": "haya acompañado",
  "form_1p": "hayamos acompañado",
  "form_2p": "hayáis acompañado",
  "form_3p": "hayan acompañado",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have accompanied",
  "form_1s": "hubiere acompañado",
  "form_2s": "hubieres acompañado",
  "form_3s": "hubiere acompañado",
  "form_1p": "hubiéremos acompañado",
  "form_2p": "hubiereis acompañado",
  "form_3p": "hubieren acompañado",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had accompanied",
  "form_1s": "hubiera acompañado",
  "form_2s": "hubieras acompañado",
  "form_3s": "hubiera acompañado",
  "form_1p": "hubiéramos acompañado",
  "form_2p": "hubierais acompañado",
  "form_3p": "hubieran acompañado",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Accompany! Don't accompany!",
  "form_1s": "",
  "form_2s": "acompaña",
  "form_3s": "acompañad",
  "form_1p": "",
  "form_2p": "acompañe",
  "form_3p": "acompañen",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "acompañar",
  "infinitive_english": "to accompany, go with, escort",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Accompany! Don't accompany!",
  "form_1s": "",
  "form_2s": "no acompañes",
  "form_3s": "no acompañéis",
  "form_1p": "",
  "form_2p": "no acompañe",
  "form_3p": "no acompañen",
  "gerund": "acompañando",
  "gerund_english": "accompanying",
  "pastparticiple": "acompañado",
  "pastparticiple_english": "accompanied"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I advise, am advising",
  "form_1s": "aconsejo",
  "form_2s": "aconsejas",
  "form_3s": "aconseja",
  "form_1p": "aconsejamos",
  "form_2p": "aconsejáis",
  "form_3p": "aconsejan",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will advise",
  "form_1s": "aconsejaré",
  "form_2s": "aconsejarás",
  "form_3s": "aconsejará",
  "form_1p": "aconsejaremos",
  "form_2p": "aconsejaréis",
  "form_3p": "aconsejarán",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was advising, used to advise, advised",
  "form_1s": "aconsejaba",
  "form_2s": "aconsejabas",
  "form_3s": "aconsejaba",
  "form_1p": "aconsejábamos",
  "form_2p": "aconsejabais",
  "form_3p": "aconsejaban",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I advised",
  "form_1s": "aconsejé",
  "form_2s": "aconsejaste",
  "form_3s": "aconsejó",
  "form_1p": "aconsejamos",
  "form_2p": "aconsejasteis",
  "form_3p": "aconsejaron",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would advise",
  "form_1s": "aconsejaría",
  "form_2s": "aconsejarías",
  "form_3s": "aconsejaría",
  "form_1p": "aconsejaríamos",
  "form_2p": "aconsejaríais",
  "form_3p": "aconsejarían",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have advisedn",
  "form_1s": "he aconsejado",
  "form_2s": "has aconsejado",
  "form_3s": "ha aconsejado",
  "form_1p": "hemos aconsejado",
  "form_2p": "habéis aconsejado",
  "form_3p": "han aconsejado",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have advisedn",
  "form_1s": "habré aconsejado",
  "form_2s": "habrás aconsejado",
  "form_3s": "habrá aconsejado",
  "form_1p": "habremos aconsejado",
  "form_2p": "habréis aconsejado",
  "form_3p": "habrán aconsejado",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had advisedn",
  "form_1s": "había aconsejado",
  "form_2s": "habías aconsejado",
  "form_3s": "había aconsejado",
  "form_1p": "habíamos aconsejado",
  "form_2p": "habíais aconsejado",
  "form_3p": "habían aconsejado",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had advisedn",
  "form_1s": "hube aconsejado",
  "form_2s": "hubiste aconsejado",
  "form_3s": "hubo aconsejado",
  "form_1p": "hubimos aconsejado",
  "form_2p": "hubisteis aconsejado",
  "form_3p": "hubieron aconsejado",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have advisedn",
  "form_1s": "habría aconsejado",
  "form_2s": "habrías aconsejado",
  "form_3s": "habría aconsejado",
  "form_1p": "habríamos aconsejado",
  "form_2p": "habríais aconsejado",
  "form_3p": "habrían aconsejado",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I advise, am advising",
  "form_1s": "aconseje",
  "form_2s": "aconsejes",
  "form_3s": "aconseje",
  "form_1p": "aconsejemos",
  "form_2p": "aconsejéis",
  "form_3p": "aconsejen",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I advised, was advising",
  "form_1s": "aconsejara",
  "form_2s": "aconsejaras",
  "form_3s": "aconsejara",
  "form_1p": "aconsejáramos",
  "form_2p": "aconsejarais",
  "form_3p": "aconsejaran",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will advise",
  "form_1s": "aconsejare",
  "form_2s": "aconsejares",
  "form_3s": "aconsejare",
  "form_1p": "aconsejáremos",
  "form_2p": "aconsejareis",
  "form_3p": "aconsejaren",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have advisedn, advised",
  "form_1s": "haya aconsejado",
  "form_2s": "hayas aconsejado",
  "form_3s": "haya aconsejado",
  "form_1p": "hayamos aconsejado",
  "form_2p": "hayáis aconsejado",
  "form_3p": "hayan aconsejado",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have advisedn",
  "form_1s": "hubiere aconsejado",
  "form_2s": "hubieres aconsejado",
  "form_3s": "hubiere aconsejado",
  "form_1p": "hubiéremos aconsejado",
  "form_2p": "hubiereis aconsejado",
  "form_3p": "hubieren aconsejado",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had advisedn",
  "form_1s": "hubiera aconsejado",
  "form_2s": "hubieras aconsejado",
  "form_3s": "hubiera aconsejado",
  "form_1p": "hubiéramos aconsejado",
  "form_2p": "hubierais aconsejado",
  "form_3p": "hubieran aconsejado",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Advise! Don't advise!",
  "form_1s": "",
  "form_2s": "aconseja",
  "form_3s": "aconsejad",
  "form_1p": "",
  "form_2p": "aconseje",
  "form_3p": "aconsejen",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "aconsejar",
  "infinitive_english": "to advise",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Advise! Don't advise!",
  "form_1s": "",
  "form_2s": "no aconsejes",
  "form_3s": "no aconsejéis",
  "form_1p": "",
  "form_2p": "no aconseje",
  "form_3p": "no aconsejen",
  "gerund": "aconsejando",
  "gerund_english": "advising",
  "pastparticiple": "aconsejado",
  "pastparticiple_english": "advisedn"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I happen, am happening",
  "form_1s": "acontezco",
  "form_2s": "aconteces",
  "form_3s": "acontece",
  "form_1p": "acontecemos",
  "form_2p": "acontecéis",
  "form_3p": "acontecen",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will happen",
  "form_1s": "aconteceré",
  "form_2s": "acontecerás",
  "form_3s": "acontecerá",
  "form_1p": "aconteceremos",
  "form_2p": "aconteceréis",
  "form_3p": "acontecerán",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was hapening, used to happen, happened",
  "form_1s": "acontecía",
  "form_2s": "acontecías",
  "form_3s": "acontecía",
  "form_1p": "acontecíamos",
  "form_2p": "acontecíais",
  "form_3p": "acontecían",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I happened",
  "form_1s": "acontecí",
  "form_2s": "aconteciste",
  "form_3s": "aconteció",
  "form_1p": "acontecimos",
  "form_2p": "acontecisteis",
  "form_3p": "acontecieron",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would happen",
  "form_1s": "acontecería",
  "form_2s": "acontecerías",
  "form_3s": "acontecería",
  "form_1p": "aconteceríamos",
  "form_2p": "aconteceríais",
  "form_3p": "acontecerían",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have happened",
  "form_1s": "he acontecido",
  "form_2s": "has acontecido",
  "form_3s": "ha acontecido",
  "form_1p": "hemos acontecido",
  "form_2p": "habéis acontecido",
  "form_3p": "han acontecido",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have happened",
  "form_1s": "habré acontecido",
  "form_2s": "habrás acontecido",
  "form_3s": "habrá acontecido",
  "form_1p": "habremos acontecido",
  "form_2p": "habréis acontecido",
  "form_3p": "habrán acontecido",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had happened",
  "form_1s": "había acontecido",
  "form_2s": "habías acontecido",
  "form_3s": "había acontecido",
  "form_1p": "habíamos acontecido",
  "form_2p": "habíais acontecido",
  "form_3p": "habían acontecido",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had happened",
  "form_1s": "hube acontecido",
  "form_2s": "hubiste acontecido",
  "form_3s": "hubo acontecido",
  "form_1p": "hubimos acontecido",
  "form_2p": "hubisteis acontecido",
  "form_3p": "hubieron acontecido",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have happened",
  "form_1s": "habría acontecido",
  "form_2s": "habrías acontecido",
  "form_3s": "habría acontecido",
  "form_1p": "habríamos acontecido",
  "form_2p": "habríais acontecido",
  "form_3p": "habrían acontecido",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I happen, am happening",
  "form_1s": "acontezca",
  "form_2s": "acontezcas",
  "form_3s": "acontezca",
  "form_1p": "acontezcamos",
  "form_2p": "acontezcáis",
  "form_3p": "acontezcan",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I happened, was happening",
  "form_1s": "aconteciera",
  "form_2s": "acontecieras",
  "form_3s": "aconteciera",
  "form_1p": "aconteciéramos",
  "form_2p": "acontecierais",
  "form_3p": "acontecieran",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will happen",
  "form_1s": "aconteciere",
  "form_2s": "acontecieres",
  "form_3s": "aconteciere",
  "form_1p": "aconteciéremos",
  "form_2p": "aconteciereis",
  "form_3p": "acontecieren",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have happened, happened",
  "form_1s": "haya acontecido",
  "form_2s": "hayas acontecido",
  "form_3s": "haya acontecido",
  "form_1p": "hayamos acontecido",
  "form_2p": "hayáis acontecido",
  "form_3p": "hayan acontecido",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have happened",
  "form_1s": "hubiere acontecido",
  "form_2s": "hubieres acontecido",
  "form_3s": "hubiere acontecido",
  "form_1p": "hubiéremos acontecido",
  "form_2p": "hubiereis acontecido",
  "form_3p": "hubieren acontecido",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had happened",
  "form_1s": "hubiera acontecido",
  "form_2s": "hubieras acontecido",
  "form_3s": "hubiera acontecido",
  "form_1p": "hubiéramos acontecido",
  "form_2p": "hubierais acontecido",
  "form_3p": "hubieran acontecido",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Happen! Don't happen!",
  "form_1s": "",
  "form_2s": "acontece",
  "form_3s": "aconteced",
  "form_1p": "",
  "form_2p": "acontezca",
  "form_3p": "acontezcan",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acontecer",
  "infinitive_english": "to happen, occur, come about",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Happen! Don't happen!",
  "form_1s": "",
  "form_2s": "no acontezcas",
  "form_3s": "no acontezcáis",
  "form_1p": "",
  "form_2p": "no acontezca",
  "form_3p": "no acontezcan",
  "gerund": "aconteciendo",
  "gerund_english": "happening",
  "pastparticiple": "acontecido",
  "pastparticiple_english": "happened"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I decide, am deciding",
  "form_1s": "acuerdo",
  "form_2s": "acuerdas",
  "form_3s": "acuerda",
  "form_1p": "acordamos",
  "form_2p": "acordáis",
  "form_3p": "acuerdan",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will decide",
  "form_1s": "acordaré",
  "form_2s": "acordarás",
  "form_3s": "acordará",
  "form_1p": "acordaremos",
  "form_2p": "acordaréis",
  "form_3p": "acordarán",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was deciding, used to decide, decided",
  "form_1s": "acordaba",
  "form_2s": "acordabas",
  "form_3s": "acordaba",
  "form_1p": "acordábamos",
  "form_2p": "acordabais",
  "form_3p": "acordaban",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I decided",
  "form_1s": "acordé",
  "form_2s": "acordaste",
  "form_3s": "acordó",
  "form_1p": "acordamos",
  "form_2p": "acordasteis",
  "form_3p": "acordaron",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have decided",
  "form_1s": "he acordado",
  "form_2s": "has acordado",
  "form_3s": "ha acordado",
  "form_1p": "hemos acordado",
  "form_2p": "habéis acordado",
  "form_3p": "han acordado",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have decided",
  "form_1s": "habré acordado",
  "form_2s": "habrás acordado",
  "form_3s": "habrá acordado",
  "form_1p": "habremos acordado",
  "form_2p": "habréis acordado",
  "form_3p": "habrán acordado",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had decided",
  "form_1s": "había acordado",
  "form_2s": "habías acordado",
  "form_3s": "había acordado",
  "form_1p": "habíamos acordado",
  "form_2p": "habíais acordado",
  "form_3p": "habían acordado",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had decided",
  "form_1s": "hube acordado",
  "form_2s": "hubiste acordado",
  "form_3s": "hubo acordado",
  "form_1p": "hubimos acordado",
  "form_2p": "hubisteis acordado",
  "form_3p": "hubieron acordado",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have decided",
  "form_1s": "habría acordado",
  "form_2s": "habrías acordado",
  "form_3s": "habría acordado",
  "form_1p": "habríamos acordado",
  "form_2p": "habríais acordado",
  "form_3p": "habrían acordado",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I decide, am deciding",
  "form_1s": "acuerde",
  "form_2s": "acuerdes",
  "form_3s": "acuerde",
  "form_1p": "acordemos",
  "form_2p": "acordéis",
  "form_3p": "acuerden",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I decided, was deciding",
  "form_1s": "acordara",
  "form_2s": "acordaras",
  "form_3s": "acordara",
  "form_1p": "acordáramos",
  "form_2p": "acordarais",
  "form_3p": "acordaran",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will decide",
  "form_1s": "acordare",
  "form_2s": "acordares",
  "form_3s": "acordare",
  "form_1p": "acordáremos",
  "form_2p": "acordareis",
  "form_3p": "acordaren",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have decided, decided",
  "form_1s": "haya acordado",
  "form_2s": "hayas acordado",
  "form_3s": "haya acordado",
  "form_1p": "hayamos acordado",
  "form_2p": "hayáis acordado",
  "form_3p": "hayan acordado",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have decided",
  "form_1s": "hubiere acordado",
  "form_2s": "hubieres acordado",
  "form_3s": "hubiere acordado",
  "form_1p": "hubiéremos acordado",
  "form_2p": "hubiereis acordado",
  "form_3p": "hubieren acordado",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had decided",
  "form_1s": "hubiera acordado",
  "form_2s": "hubieras acordado",
  "form_3s": "hubiera acordado",
  "form_1p": "hubiéramos acordado",
  "form_2p": "hubierais acordado",
  "form_3p": "hubieran acordado",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Decide! Don't decide!",
  "form_1s": "",
  "form_2s": "acuerda",
  "form_3s": "acordad",
  "form_1p": "",
  "form_2p": "acuerde",
  "form_3p": "acuerden",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordar",
  "infinitive_english": "to decide, resolve, agree [on]",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Decide! Don't decide!",
  "form_1s": "",
  "form_2s": "no acuerdes",
  "form_3s": "no acordéis",
  "form_1p": "",
  "form_2p": "no acuerde",
  "form_3p": "no acuerden",
  "gerund": "acordando",
  "gerund_english": "deciding",
  "pastparticiple": "acordado",
  "pastparticiple_english": "decided"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I remember, am remembering",
  "form_1s": "me acuerdo",
  "form_2s": "te acuerdas",
  "form_3s": "se acuerda",
  "form_1p": "nos acordamos",
  "form_2p": "os acordáis",
  "form_3p": "se acuerdan",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will remember",
  "form_1s": "me acordaré",
  "form_2s": "te acordarás",
  "form_3s": "se acordará",
  "form_1p": "nos acordaremos",
  "form_2p": "os acordaréis",
  "form_3p": "se acordarán",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was remembering, used to remember, remembered",
  "form_1s": "me acordaba",
  "form_2s": "te acordabas",
  "form_3s": "se acordaba",
  "form_1p": "nos acordábamos",
  "form_2p": "os acordabais",
  "form_3p": "se acordaban",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I remembered",
  "form_1s": "me acordé",
  "form_2s": "te acordaste",
  "form_3s": "se acordó",
  "form_1p": "nos acordamos",
  "form_2p": "os acordasteis",
  "form_3p": "se acordaron",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would remember",
  "form_1s": "me acordaría",
  "form_2s": "te acordarías",
  "form_3s": "se acordaría",
  "form_1p": "nos acordaríamos",
  "form_2p": "os acordaríais",
  "form_3p": "se acordarían",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have remembered",
  "form_1s": "me he acordado",
  "form_2s": "te has acordado",
  "form_3s": "se ha acordado",
  "form_1p": "nos hemos acordado",
  "form_2p": "os habéis acordado",
  "form_3p": "se han acordado",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have remembered",
  "form_1s": "me habré acordado",
  "form_2s": "te habrás acordado",
  "form_3s": "se habrá acordado",
  "form_1p": "nos habremos acordado",
  "form_2p": "os habréis acordado",
  "form_3p": "se habrán acordado",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had remembered",
  "form_1s": "me había acordado",
  "form_2s": "te habías acordado",
  "form_3s": "se había acordado",
  "form_1p": "nos habíamos acordado",
  "form_2p": "os habíais acordado",
  "form_3p": "se habían acordado",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had remembered",
  "form_1s": "me hube acordado",
  "form_2s": "te hubiste acordado",
  "form_3s": "se hubo acordado",
  "form_1p": "nos hubimos acordado",
  "form_2p": "os hubisteis acordado",
  "form_3p": "se hubieron acordado",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have remembered",
  "form_1s": "me habría acordado",
  "form_2s": "te habrías acordado",
  "form_3s": "se habría acordado",
  "form_1p": "nos habríamos acordado",
  "form_2p": "os habríais acordado",
  "form_3p": "se habrían acordado",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I remember, am remembering",
  "form_1s": "me acuerde",
  "form_2s": "te acuerdes",
  "form_3s": "se acuerde",
  "form_1p": "nos acordemos",
  "form_2p": "os acordéis",
  "form_3p": "se acuerden",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I remembered, was remembering",
  "form_1s": "me acordara",
  "form_2s": "te acordaras",
  "form_3s": "se acordara",
  "form_1p": "nos acordáramos",
  "form_2p": "os acordarais",
  "form_3p": "se acordaran",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will remember",
  "form_1s": "me acordare",
  "form_2s": "te acordares",
  "form_3s": "se acordare",
  "form_1p": "nos acordáremos",
  "form_2p": "os acordareis",
  "form_3p": "se acordaren",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have remembered, remembered",
  "form_1s": "me haya acordado",
  "form_2s": "te hayas acordado",
  "form_3s": "se haya acordado",
  "form_1p": "nos hayamos acordado",
  "form_2p": "os hayáis acordado",
  "form_3p": "se hayan acordado",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have remembered",
  "form_1s": "me hubiere acordado",
  "form_2s": "te hubieres acordado",
  "form_3s": "se hubiere acordado",
  "form_1p": "nos hubiéremos acordado",
  "form_2p": "os hubiereis acordado",
  "form_3p": "se hubieren acordado",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had remembered",
  "form_1s": "me hubiera acordado",
  "form_2s": "te hubieras acordado",
  "form_3s": "se hubiera acordado",
  "form_1p": "nos hubiéramos acordado",
  "form_2p": "os hubierais acordado",
  "form_3p": "se hubieran acordado",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Remember! Don't remember!",
  "form_1s": "",
  "form_2s": "acuérdate",
  "form_3s": "acordaos",
  "form_1p": "",
  "form_2p": "acuérdese",
  "form_3p": "acuérdense",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acordarse",
  "infinitive_english": "to remember",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Remember! Don't remember!",
  "form_1s": "",
  "form_2s": "no te acuerdes",
  "form_3s": "no os acordéis",
  "form_1p": "",
  "form_2p": "no se acuerde",
  "form_3p": "no se acuerden",
  "gerund": "acordándose",
  "gerund_english": "remembering",
  "pastparticiple": "acordado",
  "pastparticiple_english": "remembered"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I shorten, am shortening",
  "form_1s": "acorto",
  "form_2s": "acortas",
  "form_3s": "acorta",
  "form_1p": "acortamos",
  "form_2p": "acortáis",
  "form_3p": "acortan",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will shorten",
  "form_1s": "acortaré",
  "form_2s": "acortarás",
  "form_3s": "acortará",
  "form_1p": "acortaremos",
  "form_2p": "acortaréis",
  "form_3p": "acortarán",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was shortening, used to shorten, shortened",
  "form_1s": "acortaba",
  "form_2s": "acortabas",
  "form_3s": "acortaba",
  "form_1p": "acortábamos",
  "form_2p": "acortabais",
  "form_3p": "acortaban",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I shortened",
  "form_1s": "acorté",
  "form_2s": "acortaste",
  "form_3s": "acortó",
  "form_1p": "acortamos",
  "form_2p": "acortasteis",
  "form_3p": "acortaron",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would shorten",
  "form_1s": "acortaría",
  "form_2s": "acortarías",
  "form_3s": "acortaría",
  "form_1p": "acortaríamos",
  "form_2p": "acortaríais",
  "form_3p": "acortarían",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have shortened",
  "form_1s": "he acortado",
  "form_2s": "has acortado",
  "form_3s": "ha acortado",
  "form_1p": "hemos acortado",
  "form_2p": "habéis acortado",
  "form_3p": "han acortado",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have shortened",
  "form_1s": "habré acortado",
  "form_2s": "habrás acortado",
  "form_3s": "habrá acortado",
  "form_1p": "habremos acortado",
  "form_2p": "habréis acortado",
  "form_3p": "habrán acortado",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had shortened",
  "form_1s": "había acortado",
  "form_2s": "habías acortado",
  "form_3s": "había acortado",
  "form_1p": "habíamos acortado",
  "form_2p": "habíais acortado",
  "form_3p": "habían acortado",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had shortened",
  "form_1s": "hube acortado",
  "form_2s": "hubiste acortado",
  "form_3s": "hubo acortado",
  "form_1p": "hubimos acortado",
  "form_2p": "hubisteis acortado",
  "form_3p": "hubieron acortado",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have shortened",
  "form_1s": "habría acortado",
  "form_2s": "habrías acortado",
  "form_3s": "habría acortado",
  "form_1p": "habríamos acortado",
  "form_2p": "habríais acortado",
  "form_3p": "habrían acortado",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I shorten, am shortening",
  "form_1s": "acorte",
  "form_2s": "acortes",
  "form_3s": "acorte",
  "form_1p": "acortemos",
  "form_2p": "acortéis",
  "form_3p": "acorten",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I shortened, was shortening",
  "form_1s": "acortara",
  "form_2s": "acortaras",
  "form_3s": "acortara",
  "form_1p": "acortáramos",
  "form_2p": "acortarais",
  "form_3p": "acortaran",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will shorten",
  "form_1s": "acortare",
  "form_2s": "acortares",
  "form_3s": "acortare",
  "form_1p": "acortáremos",
  "form_2p": "acortareis",
  "form_3p": "acortaren",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have shortened, shortened",
  "form_1s": "haya acortado",
  "form_2s": "hayas acortado",
  "form_3s": "haya acortado",
  "form_1p": "hayamos acortado",
  "form_2p": "hayáis acortado",
  "form_3p": "hayan acortado",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have shortened",
  "form_1s": "hubiere acortado",
  "form_2s": "hubieres acortado",
  "form_3s": "hubiere acortado",
  "form_1p": "hubiéremos acortado",
  "form_2p": "hubiereis acortado",
  "form_3p": "hubieren acortado",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had shortened",
  "form_1s": "hubiera acortado",
  "form_2s": "hubieras acortado",
  "form_3s": "hubiera acortado",
  "form_1p": "hubiéramos acortado",
  "form_2p": "hubierais acortado",
  "form_3p": "hubieran acortado",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Shorten! Don't shorten!",
  "form_1s": "",
  "form_2s": "acorta",
  "form_3s": "acortad",
  "form_1p": "",
  "form_2p": "acorte",
  "form_3p": "acorten",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acortar",
  "infinitive_english": "to shorten",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Shorten! Don't shorten!",
  "form_1s": "",
  "form_2s": "no acortes",
  "form_3s": "no acortéis",
  "form_1p": "",
  "form_2p": "no acorte",
  "form_3p": "no acorten",
  "gerund": "acortando",
  "gerund_english": "shortening",
  "pastparticiple": "acortado",
  "pastparticiple_english": "shortened"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I put to bed, am putting to bed",
  "form_1s": "acuesto",
  "form_2s": "acuestas",
  "form_3s": "acuesta",
  "form_1p": "acostamos",
  "form_2p": "acostáis",
  "form_3p": "acuestan",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will put to bed",
  "form_1s": "acostaré",
  "form_2s": "acostarás",
  "form_3s": "acostará",
  "form_1p": "acostaremos",
  "form_2p": "acostaréis",
  "form_3p": "acostarán",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was putting to bed, used to put to bed, put to bed",
  "form_1s": "acostaba",
  "form_2s": "acostabas",
  "form_3s": "acostaba",
  "form_1p": "acostábamos",
  "form_2p": "acostabais",
  "form_3p": "acostaban",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I put to bed",
  "form_1s": "acosté",
  "form_2s": "acostaste",
  "form_3s": "acostó",
  "form_1p": "acostamos",
  "form_2p": "acostasteis",
  "form_3p": "acostaron",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would put to bed",
  "form_1s": "acostaría",
  "form_2s": "acostarías",
  "form_3s": "acostaría",
  "form_1p": "acostaríamos",
  "form_2p": "acostaríais",
  "form_3p": "acostarían",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have put to bed",
  "form_1s": "he acostado",
  "form_2s": "has acostado",
  "form_3s": "ha acostado",
  "form_1p": "hemos acostado",
  "form_2p": "habéis acostado",
  "form_3p": "han acostado",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have put to bed",
  "form_1s": "habré acostado",
  "form_2s": "habrás acostado",
  "form_3s": "habrá acostado",
  "form_1p": "habremos acostado",
  "form_2p": "habréis acostado",
  "form_3p": "habrán acostado",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had put to bed",
  "form_1s": "había acostado",
  "form_2s": "habías acostado",
  "form_3s": "había acostado",
  "form_1p": "habíamos acostado",
  "form_2p": "habíais acostado",
  "form_3p": "habían acostado",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had put to bed",
  "form_1s": "hube acostado",
  "form_2s": "hubiste acostado",
  "form_3s": "hubo acostado",
  "form_1p": "hubimos acostado",
  "form_2p": "hubisteis acostado",
  "form_3p": "hubieron acostado",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have put to bed",
  "form_1s": "habría acostado",
  "form_2s": "habrías acostado",
  "form_3s": "habría acostado",
  "form_1p": "habríamos acostado",
  "form_2p": "habríais acostado",
  "form_3p": "habrían acostado",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I put to bed, am putting to bed",
  "form_1s": "acueste",
  "form_2s": "acuestes",
  "form_3s": "acueste",
  "form_1p": "acostemos",
  "form_2p": "acostéis",
  "form_3p": "acuesten",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I put to bed, was putting to bed",
  "form_1s": "acostara",
  "form_2s": "acostaras",
  "form_3s": "acostara",
  "form_1p": "acostáramos",
  "form_2p": "acostarais",
  "form_3p": "acostaran",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will put to bed",
  "form_1s": "acostare",
  "form_2s": "acostares",
  "form_3s": "acostare",
  "form_1p": "acostáremos",
  "form_2p": "acostareis",
  "form_3p": "acostaren",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have put to bed, put to bed",
  "form_1s": "haya acostado",
  "form_2s": "hayas acostado",
  "form_3s": "haya acostado",
  "form_1p": "hayamos acostado",
  "form_2p": "hayáis acostado",
  "form_3p": "hayan acostado",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have put to bed",
  "form_1s": "hubiere acostado",
  "form_2s": "hubieres acostado",
  "form_3s": "hubiere acostado",
  "form_1p": "hubiéremos acostado",
  "form_2p": "hubiereis acostado",
  "form_3p": "hubieren acostado",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had put to bed",
  "form_1s": "hubiera acostado",
  "form_2s": "hubieras acostado",
  "form_3s": "hubiera acostado",
  "form_1p": "hubiéramos acostado",
  "form_2p": "hubierais acostado",
  "form_3p": "hubieran acostado",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Put to bed! Don't put to bed!",
  "form_1s": "",
  "form_2s": "acuesta",
  "form_3s": "acostad",
  "form_1p": "",
  "form_2p": "acueste",
  "form_3p": "acuesten",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostar",
  "infinitive_english": "to put to bed",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Put to bed! Don't put to bed!",
  "form_1s": "",
  "form_2s": "no acuestes",
  "form_3s": "no acostéis",
  "form_1p": "",
  "form_2p": "no acueste",
  "form_3p": "no acuesten",
  "gerund": "acostando",
  "gerund_english": "putting to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "put to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I go to bed, am going to bed",
  "form_1s": "me acuesto",
  "form_2s": "te acuestas",
  "form_3s": "se acuesta",
  "form_1p": "nos acostamos",
  "form_2p": "os acostáis",
  "form_3p": "se acuestan",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will go to bed",
  "form_1s": "me acostaré",
  "form_2s": "te acostarás",
  "form_3s": "se acostará",
  "form_1p": "nos acostaremos",
  "form_2p": "os acostaréis",
  "form_3p": "se acostarán",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was going to bed, used to go to bed, went to bed",
  "form_1s": "me acostaba",
  "form_2s": "te acostabas",
  "form_3s": "se acostaba",
  "form_1p": "nos acostábamos",
  "form_2p": "os acostabais",
  "form_3p": "se acostaban",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I went to bed",
  "form_1s": "me acosté",
  "form_2s": "te acostaste",
  "form_3s": "se acostó",
  "form_1p": "nos acostamos",
  "form_2p": "os acostasteis",
  "form_3p": "se acostaron",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would go to bed",
  "form_1s": "me acostaría",
  "form_2s": "te acostarías",
  "form_3s": "se acostaría",
  "form_1p": "nos acostaríamos",
  "form_2p": "os acostaríais",
  "form_3p": "se acostarían",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have gone to bed",
  "form_1s": "me he acostado",
  "form_2s": "te has acostado",
  "form_3s": "se ha acostado",
  "form_1p": "nos hemos acostado",
  "form_2p": "os habéis acostado",
  "form_3p": "se han acostado",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have gone to bed",
  "form_1s": "me habré acostado",
  "form_2s": "te habrás acostado",
  "form_3s": "se habrá acostado",
  "form_1p": "nos habremos acostado",
  "form_2p": "os habréis acostado",
  "form_3p": "se habrán acostado",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had gone to bed",
  "form_1s": "me había acostado",
  "form_2s": "te habías acostado",
  "form_3s": "se había acostado",
  "form_1p": "nos habíamos acostado",
  "form_2p": "os habíais acostado",
  "form_3p": "se habían acostado",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had gone to bed",
  "form_1s": "me hube acostado",
  "form_2s": "te hubiste acostado",
  "form_3s": "se hubo acostado",
  "form_1p": "nos hubimos acostado",
  "form_2p": "os hubisteis acostado",
  "form_3p": "se hubieron acostado",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have gone to bed",
  "form_1s": "me habría acostado",
  "form_2s": "te habrías acostado",
  "form_3s": "se habría acostado",
  "form_1p": "nos habríamos acostado",
  "form_2p": "os habríais acostado",
  "form_3p": "se habrían acostado",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I go to bed, am going to bed",
  "form_1s": "me acueste",
  "form_2s": "te acuestes",
  "form_3s": "se acueste",
  "form_1p": "nos acostemos",
  "form_2p": "os acostéis",
  "form_3p": "se acuesten",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I went to bed, was going to bed",
  "form_1s": "me acostara",
  "form_2s": "te acostaras",
  "form_3s": "se acostara",
  "form_1p": "nos acostáramos",
  "form_2p": "os acostarais",
  "form_3p": "se acostaran",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will go to bed",
  "form_1s": "me acostare",
  "form_2s": "te acostares",
  "form_3s": "se acostare",
  "form_1p": "nos acostáremos",
  "form_2p": "os acostareis",
  "form_3p": "se acostaren",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have gone to bed, went to bed",
  "form_1s": "me haya acostado",
  "form_2s": "te hayas acostado",
  "form_3s": "se haya acostado",
  "form_1p": "nos hayamos acostado",
  "form_2p": "os hayáis acostado",
  "form_3p": "se hayan acostado",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have gone to bed",
  "form_1s": "me hubiere acostado",
  "form_2s": "te hubieres acostado",
  "form_3s": "se hubiere acostado",
  "form_1p": "nos hubiéremos acostado",
  "form_2p": "os hubiereis acostado",
  "form_3p": "se hubieren acostado",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had gone to bed",
  "form_1s": "me hubiera acostado",
  "form_2s": "te hubieras acostado",
  "form_3s": "se hubiera acostado",
  "form_1p": "nos hubiéramos acostado",
  "form_2p": "os hubierais acostado",
  "form_3p": "se hubieran acostado",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Go to bed! Don't go to bed!",
  "form_1s": "",
  "form_2s": "acuéstate",
  "form_3s": "acostaos",
  "form_1p": "",
  "form_2p": "acuéstese",
  "form_3p": "acuéstense",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostarse",
  "infinitive_english": "to go to bed, lie down",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Go to bed! Don't go to bed!",
  "form_1s": "",
  "form_2s": "no te acuestes",
  "form_3s": "no os acostéis",
  "form_1p": "",
  "form_2p": "no se acueste",
  "form_3p": "no se acuesten",
  "gerund": "acostándose",
  "gerund_english": "going to bed",
  "pastparticiple": "acostado",
  "pastparticiple_english": "gone to bed"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am accustomed to",
  "form_1s": "acostumbro",
  "form_2s": "acostumbras",
  "form_3s": "acostumbra",
  "form_1p": "acostumbramos",
  "form_2p": "acostumbráis",
  "form_3p": "acostumbran",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will speak",
  "form_1s": "acostumbraré",
  "form_2s": "acostumbrarás",
  "form_3s": "acostumbrará",
  "form_1p": "acostumbraremos",
  "form_2p": "acostumbraréis",
  "form_3p": "acostumbrarán",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was accustomed to, used to be accustomed to, was accustomed to",
  "form_1s": "acostumbraba",
  "form_2s": "acostumbrabas",
  "form_3s": "acostumbraba",
  "form_1p": "acostumbrábamos",
  "form_2p": "acostumbrabais",
  "form_3p": "acostumbraban",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I was accustomed to",
  "form_1s": "acostumbré",
  "form_2s": "acostumbraste",
  "form_3s": "acostumbró",
  "form_1p": "acostumbramos",
  "form_2p": "acostumbrasteis",
  "form_3p": "acostumbraron",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would be accustomed to",
  "form_1s": "acostumbraría",
  "form_2s": "acostumbrarías",
  "form_3s": "acostumbraría",
  "form_1p": "acostumbraríamos",
  "form_2p": "acostumbraríais",
  "form_3p": "acostumbrarían",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been accustomed to",
  "form_1s": "he acostumbrado",
  "form_2s": "has acostumbrado",
  "form_3s": "ha acostumbrado",
  "form_1p": "hemos acostumbrado",
  "form_2p": "habéis acostumbrado",
  "form_3p": "han acostumbrado",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been accustomed to",
  "form_1s": "habré acostumbrado",
  "form_2s": "habrás acostumbrado",
  "form_3s": "habrá acostumbrado",
  "form_1p": "habremos acostumbrado",
  "form_2p": "habréis acostumbrado",
  "form_3p": "habrán acostumbrado",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have acted, acted",
  "form_1s": "haya actuado",
  "form_2s": "hayas actuado",
  "form_3s": "haya actuado",
  "form_1p": "hayamos actuado",
  "form_2p": "hayáis actuado",
  "form_3p": "hayan actuado",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been accustomed to",
  "form_1s": "había acostumbrado",
  "form_2s": "habías acostumbrado",
  "form_3s": "había acostumbrado",
  "form_1p": "habíamos acostumbrado",
  "form_2p": "habíais acostumbrado",
  "form_3p": "habían acostumbrado",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had been accustomed to",
  "form_1s": "hube acostumbrado",
  "form_2s": "hubiste acostumbrado",
  "form_3s": "hubo acostumbrado",
  "form_1p": "hubimos acostumbrado",
  "form_2p": "hubisteis acostumbrado",
  "form_3p": "hubieron acostumbrado",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have been accustomed to",
  "form_1s": "habría acostumbrado",
  "form_2s": "habrías acostumbrado",
  "form_3s": "habría acostumbrado",
  "form_1p": "habríamos acostumbrado",
  "form_2p": "habríais acostumbrado",
  "form_3p": "habrían acostumbrado",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am accustomed to",
  "form_1s": "acostumbre",
  "form_2s": "acostumbres",
  "form_3s": "acostumbre",
  "form_1p": "acostumbremos",
  "form_2p": "acostumbréis",
  "form_3p": "acostumbren",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was accustomed to, was accustomed to",
  "form_1s": "acostumbrara",
  "form_2s": "acostumbraras",
  "form_3s": "acostumbrara",
  "form_1p": "acostumbráramos",
  "form_2p": "acostumbrarais",
  "form_3p": "acostumbraran",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be accustomed to",
  "form_1s": "acostumbrare",
  "form_2s": "acostumbrares",
  "form_3s": "acostumbrare",
  "form_1p": "acostumbráremos",
  "form_2p": "acostumbrareis",
  "form_3p": "acostumbraren",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been accustomed to, was accustomed to",
  "form_1s": "haya acostumbrado",
  "form_2s": "hayas acostumbrado",
  "form_3s": "haya acostumbrado",
  "form_1p": "hayamos acostumbrado",
  "form_2p": "hayáis acostumbrado",
  "form_3p": "hayan acostumbrado",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been accustomed to",
  "form_1s": "hubiere acostumbrado",
  "form_2s": "hubieres acostumbrado",
  "form_3s": "hubiere acostumbrado",
  "form_1p": "hubiéremos acostumbrado",
  "form_2p": "hubiereis acostumbrado",
  "form_3p": "hubieren acostumbrado",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been accustomed to",
  "form_1s": "hubiera acostumbrado",
  "form_2s": "hubieras acostumbrado",
  "form_3s": "hubiera acostumbrado",
  "form_1p": "hubiéramos acostumbrado",
  "form_2p": "hubierais acostumbrado",
  "form_3p": "hubieran acostumbrado",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be accustomed to! Don't be accustomed to!",
  "form_1s": "",
  "form_2s": "acostumbra",
  "form_3s": "acostumbrad",
  "form_1p": "",
  "form_2p": "acostumbre",
  "form_3p": "acostumbren",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrar",
  "infinitive_english": "to be accustomed to, be in the habit of; to get",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be accustomed to! Don't be accustomed to!",
  "form_1s": "",
  "form_2s": "no acostumbres",
  "form_3s": "no acostumbréis",
  "form_1p": "",
  "form_2p": "no acostumbre",
  "form_3p": "no acostumbren",
  "gerund": "acostumbrando",
  "gerund_english": "being accustomed to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "been accustomed to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I get used to, am getting used to",
  "form_1s": "me acostumbro",
  "form_2s": "te acostumbras",
  "form_3s": "se acostumbra",
  "form_1p": "nos acostumbramos",
  "form_2p": "os acostumbráis",
  "form_3p": "se acostumbran",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will get used to",
  "form_1s": "me acostumbraré",
  "form_2s": "te acostumbrarás",
  "form_3s": "se acostumbrará",
  "form_1p": "nos acostumbraremos",
  "form_2p": "os acostumbraréis",
  "form_3p": "se acostumbrarán",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was getting used to, used to get used to, got used to",
  "form_1s": "me acostumbraba",
  "form_2s": "te acostumbrabas",
  "form_3s": "se acostumbraba",
  "form_1p": "nos acostumbrábamos",
  "form_2p": "os acostumbrabais",
  "form_3p": "se acostumbraban",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I got used to",
  "form_1s": "me acostumbré",
  "form_2s": "te acostumbraste",
  "form_3s": "se acostumbró",
  "form_1p": "nos acostumbramos",
  "form_2p": "os acostumbrasteis",
  "form_3p": "se acostumbraron",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would get used to",
  "form_1s": "me acostumbraría",
  "form_2s": "te acostumbrarías",
  "form_3s": "se acostumbraría",
  "form_1p": "nos acostumbraríamos",
  "form_2p": "os acostumbraríais",
  "form_3p": "se acostumbrarían",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have gotten used to",
  "form_1s": "me he acostumbrado",
  "form_2s": "te has acostumbrado",
  "form_3s": "se ha acostumbrado",
  "form_1p": "nos hemos acostumbrado",
  "form_2p": "os habéis acostumbrado",
  "form_3p": "se han acostumbrado",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have gotten used to",
  "form_1s": "me habré acostumbrado",
  "form_2s": "te habrás acostumbrado",
  "form_3s": "se habrá acostumbrado",
  "form_1p": "nos habremos acostumbrado",
  "form_2p": "os habréis acostumbrado",
  "form_3p": "se habrán acostumbrado",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had gotten used to",
  "form_1s": "me había acostumbrado",
  "form_2s": "te habías acostumbrado",
  "form_3s": "se había acostumbrado",
  "form_1p": "nos habíamos acostumbrado",
  "form_2p": "os habíais acostumbrado",
  "form_3p": "se habían acostumbrado",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had gotten used to",
  "form_1s": "me hube acostumbrado",
  "form_2s": "te hubiste acostumbrado",
  "form_3s": "se hubo acostumbrado",
  "form_1p": "nos hubimos acostumbrado",
  "form_2p": "os hubisteis acostumbrado",
  "form_3p": "se hubieron acostumbrado",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have gotten used to",
  "form_1s": "me habría acostumbrado",
  "form_2s": "te habrías acostumbrado",
  "form_3s": "se habría acostumbrado",
  "form_1p": "nos habríamos acostumbrado",
  "form_2p": "os habríais acostumbrado",
  "form_3p": "se habrían acostumbrado",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I get used to, am getting used to",
  "form_1s": "me acostumbre",
  "form_2s": "te acostumbres",
  "form_3s": "se acostumbre",
  "form_1p": "nos acostumbremos",
  "form_2p": "os acostumbréis",
  "form_3p": "se acostumbren",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I got used to, was getting used to",
  "form_1s": "me acostumbrara",
  "form_2s": "te acostumbraras",
  "form_3s": "se acostumbrara",
  "form_1p": "nos acostumbráramos",
  "form_2p": "os acostumbrarais",
  "form_3p": "se acostumbraran",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will get used to",
  "form_1s": "me acostumbrare",
  "form_2s": "te acostumbrares",
  "form_3s": "se acostumbrare",
  "form_1p": "nos acostumbráremos",
  "form_2p": "os acostumbrareis",
  "form_3p": "se acostumbraren",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have gotten used to, got used to",
  "form_1s": "me haya acostumbrado",
  "form_2s": "te hayas acostumbrado",
  "form_3s": "se haya acostumbrado",
  "form_1p": "nos hayamos acostumbrado",
  "form_2p": "os hayáis acostumbrado",
  "form_3p": "se hayan acostumbrado",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have gotten used to",
  "form_1s": "me hubiere acostumbrado",
  "form_2s": "te hubieres acostumbrado",
  "form_3s": "se hubiere acostumbrado",
  "form_1p": "nos hubiéremos acostumbrado",
  "form_2p": "os hubiereis acostumbrado",
  "form_3p": "se hubieren acostumbrado",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had gotten used to",
  "form_1s": "me hubiera acostumbrado",
  "form_2s": "te hubieras acostumbrado",
  "form_3s": "se hubiera acostumbrado",
  "form_1p": "nos hubiéramos acostumbrado",
  "form_2p": "os hubierais acostumbrado",
  "form_3p": "se hubieran acostumbrado",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "get used to! Don't get used to!",
  "form_1s": "",
  "form_2s": "acostúmbrate",
  "form_3s": "acostumbraos",
  "form_1p": "",
  "form_2p": "acostúmbrese",
  "form_3p": "acostúmbrense",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "acostumbrarse",
  "infinitive_english": "to get used to, get accustomed to",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "get used to! Don't get used to!",
  "form_1s": "",
  "form_2s": "no te acostumbres",
  "form_3s": "no os acostumbréis",
  "form_1p": "",
  "form_2p": "no se acostumbre",
  "form_3p": "no se acostumbren",
  "gerund": "acostumbrándose",
  "gerund_english": "getting used to",
  "pastparticiple": "acostumbrado",
  "pastparticiple_english": "got used to"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I act, am acting",
  "form_1s": "actúo",
  "form_2s": "actúas",
  "form_3s": "actúa",
  "form_1p": "actuamos",
  "form_2p": "actuáis",
  "form_3p": "actúan",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will act",
  "form_1s": "actuaré",
  "form_2s": "actuarás",
  "form_3s": "actuará",
  "form_1p": "actuaremos",
  "form_2p": "actuaréis",
  "form_3p": "actuarán",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was acting, used to act, acted",
  "form_1s": "actuaba",
  "form_2s": "actuabas",
  "form_3s": "actuaba",
  "form_1p": "actuábamos",
  "form_2p": "actuabais",
  "form_3p": "actuaban",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I acted",
  "form_1s": "actué",
  "form_2s": "actuaste",
  "form_3s": "actuó",
  "form_1p": "actuamos",
  "form_2p": "actuasteis",
  "form_3p": "actuaron",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would act",
  "form_1s": "actuaría",
  "form_2s": "actuarías",
  "form_3s": "actuaría",
  "form_1p": "actuaríamos",
  "form_2p": "actuaríais",
  "form_3p": "actuarían",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have acted",
  "form_1s": "he actuado",
  "form_2s": "has actuado",
  "form_3s": "ha actuado",
  "form_1p": "hemos actuado",
  "form_2p": "habéis actuado",
  "form_3p": "han actuado",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have acted",
  "form_1s": "habré actuado",
  "form_2s": "habrás actuado",
  "form_3s": "habrá actuado",
  "form_1p": "habremos actuado",
  "form_2p": "habréis actuado",
  "form_3p": "habrán actuado",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had acted",
  "form_1s": "había actuado",
  "form_2s": "habías actuado",
  "form_3s": "había actuado",
  "form_1p": "habíamos actuado",
  "form_2p": "habíais actuado",
  "form_3p": "habían actuado",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had acted",
  "form_1s": "hube actuado",
  "form_2s": "hubiste actuado",
  "form_3s": "hubo actuado",
  "form_1p": "hubimos actuado",
  "form_2p": "hubisteis actuado",
  "form_3p": "hubieron actuado",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have acted",
  "form_1s": "habría actuado",
  "form_2s": "habrías actuado",
  "form_3s": "habría actuado",
  "form_1p": "habríamos actuado",
  "form_2p": "habríais actuado",
  "form_3p": "habrían actuado",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I act, am acting",
  "form_1s": "actúe",
  "form_2s": "actúes",
  "form_3s": "actúe",
  "form_1p": "actuemos",
  "form_2p": "actuéis",
  "form_3p": "actúen",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I acted, was acting",
  "form_1s": "actuara",
  "form_2s": "actuaras",
  "form_3s": "actuara",
  "form_1p": "actuáramos",
  "form_2p": "actuarais",
  "form_3p": "actuaran",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will act",
  "form_1s": "actuare",
  "form_2s": "actuares",
  "form_3s": "actuare",
  "form_1p": "actuáremos",
  "form_2p": "actuareis",
  "form_3p": "actuaren",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have acted",
  "form_1s": "hubiere actuado",
  "form_2s": "hubieres actuado",
  "form_3s": "hubiere actuado",
  "form_1p": "hubiéremos actuado",
  "form_2p": "hubiereis actuado",
  "form_3p": "hubieren actuado",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had acted",
  "form_1s": "hubiera actuado",
  "form_2s": "hubieras actuado",
  "form_3s": "hubiera actuado",
  "form_1p": "hubiéramos actuado",
  "form_2p": "hubierais actuado",
  "form_3p": "hubieran actuado",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Act! Don't act!",
  "form_1s": "",
  "form_2s": "actúa",
  "form_3s": "actuad",
  "form_1p": "",
  "form_2p": "actúe",
  "form_3p": "actúen",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "actuar",
  "infinitive_english": "to act, perform, actuate, operate",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Act! Don't act!",
  "form_1s": "",
  "form_2s": "no actúes",
  "form_3s": "no actuéis",
  "form_1p": "",
  "form_2p": "no actúe",
  "form_3p": "no actúen",
  "gerund": "actuando",
  "gerund_english": "acting",
  "pastparticiple": "actuado",
  "pastparticiple_english": "acted"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I guess, am guessing",
  "form_1s": "adivino",
  "form_2s": "adivinas",
  "form_3s": "adivina",
  "form_1p": "adivinamos",
  "form_2p": "adivináis",
  "form_3p": "adivinan",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will guess",
  "form_1s": "adivinaré",
  "form_2s": "adivinarás",
  "form_3s": "adivinará",
  "form_1p": "adivinaremos",
  "form_2p": "adivinaréis",
  "form_3p": "adivinarán",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was guessing, used to guess, guessed",
  "form_1s": "adivinaba",
  "form_2s": "adivinabas",
  "form_3s": "adivinaba",
  "form_1p": "adivinábamos",
  "form_2p": "adivinabais",
  "form_3p": "adivinaban",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I guessed",
  "form_1s": "adiviné",
  "form_2s": "adivinaste",
  "form_3s": "adivinó",
  "form_1p": "adivinamos",
  "form_2p": "adivinasteis",
  "form_3p": "adivinaron",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would guess",
  "form_1s": "adivinaría",
  "form_2s": "adivinarías",
  "form_3s": "adivinaría",
  "form_1p": "adivinaríamos",
  "form_2p": "adivinaríais",
  "form_3p": "adivinarían",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have guessed",
  "form_1s": "he adivinado",
  "form_2s": "has adivinado",
  "form_3s": "ha adivinado",
  "form_1p": "hemos adivinado",
  "form_2p": "habéis adivinado",
  "form_3p": "han adivinado",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have guessed",
  "form_1s": "habré adivinado",
  "form_2s": "habrás adivinado",
  "form_3s": "habrá adivinado",
  "form_1p": "habremos adivinado",
  "form_2p": "habréis adivinado",
  "form_3p": "habrán adivinado",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had guessed",
  "form_1s": "había adivinado",
  "form_2s": "habías adivinado",
  "form_3s": "había adivinado",
  "form_1p": "habíamos adivinado",
  "form_2p": "habíais adivinado",
  "form_3p": "habían adivinado",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had guessed",
  "form_1s": "hube adivinado",
  "form_2s": "hubiste adivinado",
  "form_3s": "hubo adivinado",
  "form_1p": "hubimos adivinado",
  "form_2p": "hubisteis adivinado",
  "form_3p": "hubieron adivinado",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have guessed",
  "form_1s": "habría adivinado",
  "form_2s": "habrías adivinado",
  "form_3s": "habría adivinado",
  "form_1p": "habríamos adivinado",
  "form_2p": "habríais adivinado",
  "form_3p": "habrían adivinado",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I guess, am guessing",
  "form_1s": "adivine",
  "form_2s": "adivines",
  "form_3s": "adivine",
  "form_1p": "adivinemos",
  "form_2p": "adivinéis",
  "form_3p": "adivinen",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I guessed, was guessing",
  "form_1s": "adivinara",
  "form_2s": "adivinaras",
  "form_3s": "adivinara",
  "form_1p": "adivináramos",
  "form_2p": "adivinarais",
  "form_3p": "adivinaran",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will guess",
  "form_1s": "adivinare",
  "form_2s": "adivinares",
  "form_3s": "adivinare",
  "form_1p": "adivináremos",
  "form_2p": "adivinareis",
  "form_3p": "adivinaren",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have guessed, guessed",
  "form_1s": "haya adivinado",
  "form_2s": "hayas adivinado",
  "form_3s": "haya adivinado",
  "form_1p": "hayamos adivinado",
  "form_2p": "hayáis adivinado",
  "form_3p": "hayan adivinado",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have guessed",
  "form_1s": "hubiere adivinado",
  "form_2s": "hubieres adivinado",
  "form_3s": "hubiere adivinado",
  "form_1p": "hubiéremos adivinado",
  "form_2p": "hubiereis adivinado",
  "form_3p": "hubieren adivinado",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had guessed",
  "form_1s": "hubiera adivinado",
  "form_2s": "hubieras adivinado",
  "form_3s": "hubiera adivinado",
  "form_1p": "hubiéramos adivinado",
  "form_2p": "hubierais adivinado",
  "form_3p": "hubieran adivinado",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Guess! Don't guess!",
  "form_1s": "",
  "form_2s": "adivina",
  "form_3s": "adivinad",
  "form_1p": "",
  "form_2p": "adivine",
  "form_3p": "adivinen",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "adivinar",
  "infinitive_english": "to guess, fortell, prophesy; to guess correctly",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Guess! Don't guess!",
  "form_1s": "",
  "form_2s": "no adivines",
  "form_3s": "no adivinéis",
  "form_1p": "",
  "form_2p": "no adivine",
  "form_3p": "no adivinen",
  "gerund": "adivinando",
  "gerund_english": "guessing",
  "pastparticiple": "adivinado",
  "pastparticiple_english": "guessed"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I admire, am admiring",
  "form_1s": "admiro",
  "form_2s": "admiras",
  "form_3s": "admira",
  "form_1p": "admiramos",
  "form_2p": "admiráis",
  "form_3p": "admiran",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will admire",
  "form_1s": "admiraré",
  "form_2s": "admirarás",
  "form_3s": "admirará",
  "form_1p": "admiraremos",
  "form_2p": "admiraréis",
  "form_3p": "admirarán",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was admiring, used to admire, admired",
  "form_1s": "admiraba",
  "form_2s": "admirabas",
  "form_3s": "admiraba",
  "form_1p": "admirábamos",
  "form_2p": "admirabais",
  "form_3p": "admiraban",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I admired",
  "form_1s": "admiré",
  "form_2s": "admiraste",
  "form_3s": "admiró",
  "form_1p": "admiramos",
  "form_2p": "admirasteis",
  "form_3p": "admiraron",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would admire",
  "form_1s": "admiraría",
  "form_2s": "admirarías",
  "form_3s": "admiraría",
  "form_1p": "admiraríamos",
  "form_2p": "admiraríais",
  "form_3p": "admirarían",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have admired",
  "form_1s": "he admirado",
  "form_2s": "has admirado",
  "form_3s": "ha admirado",
  "form_1p": "hemos admirado",
  "form_2p": "habéis admirado",
  "form_3p": "han admirado",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have admired",
  "form_1s": "habré admirado",
  "form_2s": "habrás admirado",
  "form_3s": "habrá admirado",
  "form_1p": "habremos admirado",
  "form_2p": "habréis admirado",
  "form_3p": "habrán admirado",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had admired",
  "form_1s": "había admirado",
  "form_2s": "habías admirado",
  "form_3s": "había admirado",
  "form_1p": "habíamos admirado",
  "form_2p": "habíais admirado",
  "form_3p": "habían admirado",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had admired",
  "form_1s": "hube admirado",
  "form_2s": "hubiste admirado",
  "form_3s": "hubo admirado",
  "form_1p": "hubimos admirado",
  "form_2p": "hubisteis admirado",
  "form_3p": "hubieron admirado",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have admired",
  "form_1s": "habría admirado",
  "form_2s": "habrías admirado",
  "form_3s": "habría admirado",
  "form_1p": "habríamos admirado",
  "form_2p": "habríais admirado",
  "form_3p": "habrían admirado",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I admire, am admiring",
  "form_1s": "admire",
  "form_2s": "admires",
  "form_3s": "admire",
  "form_1p": "admiremos",
  "form_2p": "admiréis",
  "form_3p": "admiren",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I admired, was admiring",
  "form_1s": "admirara",
  "form_2s": "admiraras",
  "form_3s": "admirara",
  "form_1p": "admiráramos",
  "form_2p": "admirarais",
  "form_3p": "admiraran",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will admire",
  "form_1s": "admirare",
  "form_2s": "admirares",
  "form_3s": "admirare",
  "form_1p": "admiráremos",
  "form_2p": "admirareis",
  "form_3p": "admiraren",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have admired, admired",
  "form_1s": "haya admirado",
  "form_2s": "hayas admirado",
  "form_3s": "haya admirado",
  "form_1p": "hayamos admirado",
  "form_2p": "hayáis admirado",
  "form_3p": "hayan admirado",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have admired",
  "form_1s": "hubiere admirado",
  "form_2s": "hubieres admirado",
  "form_3s": "hubiere admirado",
  "form_1p": "hubiéremos admirado",
  "form_2p": "hubiereis admirado",
  "form_3p": "hubieren admirado",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had admired",
  "form_1s": "hubiera admirado",
  "form_2s": "hubieras admirado",
  "form_3s": "hubiera admirado",
  "form_1p": "hubiéramos admirado",
  "form_2p": "hubierais admirado",
  "form_3p": "hubieran admirado",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Admire! Don't admire!",
  "form_1s": "",
  "form_2s": "admira",
  "form_3s": "admirad",
  "form_1p": "",
  "form_2p": "admire",
  "form_3p": "admiren",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admirar",
  "infinitive_english": "to admire, respect, look up to",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Admire! Don't admire!",
  "form_1s": "",
  "form_2s": "no admires",
  "form_3s": "no admiréis",
  "form_1p": "",
  "form_2p": "no admire",
  "form_3p": "no admiren",
  "gerund": "admirando",
  "gerund_english": "admiring",
  "pastparticiple": "admirado",
  "pastparticiple_english": "admired"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I admit, am admitting",
  "form_1s": "admito",
  "form_2s": "admites",
  "form_3s": "admite",
  "form_1p": "admitimos",
  "form_2p": "admitís",
  "form_3p": "admiten",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will admit",
  "form_1s": "admitiré",
  "form_2s": "admitirás",
  "form_3s": "admitirá",
  "form_1p": "admitiremos",
  "form_2p": "admitiréis",
  "form_3p": "admitirán",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was admitting, used to admit, admitted",
  "form_1s": "admitía",
  "form_2s": "admitías",
  "form_3s": "admitía",
  "form_1p": "admitíamos",
  "form_2p": "admitíais",
  "form_3p": "admitían",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I admitted",
  "form_1s": "admití",
  "form_2s": "admitiste",
  "form_3s": "admitió",
  "form_1p": "admitimos",
  "form_2p": "admitisteis",
  "form_3p": "admitieron",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would admit",
  "form_1s": "admitiría",
  "form_2s": "admitirías",
  "form_3s": "admitiría",
  "form_1p": "admitiríamos",
  "form_2p": "admitiríais",
  "form_3p": "admitirían",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have admitted",
  "form_1s": "he admitido",
  "form_2s": "has admitido",
  "form_3s": "ha admitido",
  "form_1p": "hemos admitido",
  "form_2p": "habéis admitido",
  "form_3p": "han admitido",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have admitted",
  "form_1s": "habré admitido",
  "form_2s": "habrás admitido",
  "form_3s": "habrá admitido",
  "form_1p": "habremos admitido",
  "form_2p": "habréis admitido",
  "form_3p": "habrán admitido",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had admitted",
  "form_1s": "había admitido",
  "form_2s": "habías admitido",
  "form_3s": "había admitido",
  "form_1p": "habíamos admitido",
  "form_2p": "habíais admitido",
  "form_3p": "habían admitido",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had admitted",
  "form_1s": "hube admitido",
  "form_2s": "hubiste admitido",
  "form_3s": "hubo admitido",
  "form_1p": "hubimos admitido",
  "form_2p": "hubisteis admitido",
  "form_3p": "hubieron admitido",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have admitted",
  "form_1s": "habría admitido",
  "form_2s": "habrías admitido",
  "form_3s": "habría admitido",
  "form_1p": "habríamos admitido",
  "form_2p": "habríais admitido",
  "form_3p": "habrían admitido",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I admit, am admitting",
  "form_1s": "admita",
  "form_2s": "admitas",
  "form_3s": "admita",
  "form_1p": "admitamos",
  "form_2p": "admitáis",
  "form_3p": "admitan",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I admitted, was admitting",
  "form_1s": "admitiera",
  "form_2s": "admitieras",
  "form_3s": "admitiera",
  "form_1p": "admitiéramos",
  "form_2p": "admitierais",
  "form_3p": "admitieran",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will admit",
  "form_1s": "admitiere",
  "form_2s": "admitieres",
  "form_3s": "admitiere",
  "form_1p": "admitiéremos",
  "form_2p": "admitiereis",
  "form_3p": "admitieren",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have admitted, admitted",
  "form_1s": "haya admitido",
  "form_2s": "hayas admitido",
  "form_3s": "haya admitido",
  "form_1p": "hayamos admitido",
  "form_2p": "hayáis admitido",
  "form_3p": "hayan admitido",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have admitted",
  "form_1s": "hubiere admitido",
  "form_2s": "hubieres admitido",
  "form_3s": "hubiere admitido",
  "form_1p": "hubiéremos admitido",
  "form_2p": "hubiereis admitido",
  "form_3p": "hubieren admitido",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had admitted",
  "form_1s": "hubiera admitido",
  "form_2s": "hubieras admitido",
  "form_3s": "hubiera admitido",
  "form_1p": "hubiéramos admitido",
  "form_2p": "hubierais admitido",
  "form_3p": "hubieran admitido",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Admit! Don't admit!",
  "form_1s": "",
  "form_2s": "admite",
  "form_3s": "admitid",
  "form_1p": "",
  "form_2p": "admita",
  "form_3p": "admitan",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "admitir",
  "infinitive_english": "to admit, accept, allow, recognize",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Admit! Don't admit!",
  "form_1s": "",
  "form_2s": "no admitas",
  "form_3s": "no admitáis",
  "form_1p": "",
  "form_2p": "no admita",
  "form_3p": "no admitan",
  "gerund": "admitiendo",
  "gerund_english": "admitting",
  "pastparticiple": "admitido",
  "pastparticiple_english": "admitted"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I adore, am adoring",
  "form_1s": "adoro",
  "form_2s": "adoras",
  "form_3s": "adora",
  "form_1p": "adoramos",
  "form_2p": "adoráis",
  "form_3p": "adoran",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will adore",
  "form_1s": "adoraré",
  "form_2s": "adorarás",
  "form_3s": "adorará",
  "form_1p": "adoraremos",
  "form_2p": "adoraréis",
  "form_3p": "adorarán",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was adoring, used to adore, adored",
  "form_1s": "adoraba",
  "form_2s": "adorabas",
  "form_3s": "adoraba",
  "form_1p": "adorábamos",
  "form_2p": "adorabais",
  "form_3p": "adoraban",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I adored",
  "form_1s": "adoré",
  "form_2s": "adoraste",
  "form_3s": "adoró",
  "form_1p": "adoramos",
  "form_2p": "adorasteis",
  "form_3p": "adoraron",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would adore",
  "form_1s": "adoraría",
  "form_2s": "adorarías",
  "form_3s": "adoraría",
  "form_1p": "adoraríamos",
  "form_2p": "adoraríais",
  "form_3p": "adorarían",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have adored",
  "form_1s": "he adorado",
  "form_2s": "has adorado",
  "form_3s": "ha adorado",
  "form_1p": "hemos adorado",
  "form_2p": "habéis adorado",
  "form_3p": "han adorado",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have adored",
  "form_1s": "habré adorado",
  "form_2s": "habrás adorado",
  "form_3s": "habrá adorado",
  "form_1p": "habremos adorado",
  "form_2p": "habréis adorado",
  "form_3p": "habrán adorado",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had adored",
  "form_1s": "había adorado",
  "form_2s": "habías adorado",
  "form_3s": "había adorado",
  "form_1p": "habíamos adorado",
  "form_2p": "habíais adorado",
  "form_3p": "habían adorado",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had adored",
  "form_1s": "hube adorado",
  "form_2s": "hubiste adorado",
  "form_3s": "hubo adorado",
  "form_1p": "hubimos adorado",
  "form_2p": "hubisteis adorado",
  "form_3p": "hubieron adorado",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have adored",
  "form_1s": "habría adorado",
  "form_2s": "habrías adorado",
  "form_3s": "habría adorado",
  "form_1p": "habríamos adorado",
  "form_2p": "habríais adorado",
  "form_3p": "habrían adorado",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I adore, am adoring",
  "form_1s": "adore",
  "form_2s": "adores",
  "form_3s": "adore",
  "form_1p": "adoremos",
  "form_2p": "adoréis",
  "form_3p": "adoren",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I adored, was adoring",
  "form_1s": "adorara",
  "form_2s": "adoraras",
  "form_3s": "adorara",
  "form_1p": "adoráramos",
  "form_2p": "adorarais",
  "form_3p": "adoraran",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will adore",
  "form_1s": "adorare",
  "form_2s": "adorares",
  "form_3s": "adorare",
  "form_1p": "adoráremos",
  "form_2p": "adorareis",
  "form_3p": "adoraren",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have adored, adored",
  "form_1s": "haya adorado",
  "form_2s": "hayas adorado",
  "form_3s": "haya adorado",
  "form_1p": "hayamos adorado",
  "form_2p": "hayáis adorado",
  "form_3p": "hayan adorado",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have adored",
  "form_1s": "hubiere adorado",
  "form_2s": "hubieres adorado",
  "form_3s": "hubiere adorado",
  "form_1p": "hubiéremos adorado",
  "form_2p": "hubiereis adorado",
  "form_3p": "hubieren adorado",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had adored",
  "form_1s": "hubiera adorado",
  "form_2s": "hubieras adorado",
  "form_3s": "hubiera adorado",
  "form_1p": "hubiéramos adorado",
  "form_2p": "hubierais adorado",
  "form_3p": "hubieran adorado",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Adore! Don't adore!",
  "form_1s": "",
  "form_2s": "adora",
  "form_3s": "adorad",
  "form_1p": "",
  "form_2p": "adore",
  "form_3p": "adoren",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adorar",
  "infinitive_english": "to adore, worship",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Adore! Don't adore!",
  "form_1s": "",
  "form_2s": "no adores",
  "form_3s": "no adoréis",
  "form_1p": "",
  "form_2p": "no adore",
  "form_3p": "no adoren",
  "gerund": "adorando",
  "gerund_english": "adoring",
  "pastparticiple": "adorado",
  "pastparticiple_english": "adored"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I adorn, am adorning",
  "form_1s": "adorno",
  "form_2s": "adornas",
  "form_3s": "adorna",
  "form_1p": "adornamos",
  "form_2p": "adornáis",
  "form_3p": "adornan",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will adorn",
  "form_1s": "adornaré",
  "form_2s": "adornarás",
  "form_3s": "adornará",
  "form_1p": "adornaremos",
  "form_2p": "adornaréis",
  "form_3p": "adornarán",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was adorning, used to adorn, adorned",
  "form_1s": "adornaba",
  "form_2s": "adornabas",
  "form_3s": "adornaba",
  "form_1p": "adornábamos",
  "form_2p": "adornabais",
  "form_3p": "adornaban",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I adorned",
  "form_1s": "adorné",
  "form_2s": "adornaste",
  "form_3s": "adornó",
  "form_1p": "adornamos",
  "form_2p": "adornasteis",
  "form_3p": "adornaron",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would adorn",
  "form_1s": "adornaría",
  "form_2s": "adornarías",
  "form_3s": "adornaría",
  "form_1p": "adornaríamos",
  "form_2p": "adornaríais",
  "form_3p": "adornarían",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have adorned",
  "form_1s": "he adornado",
  "form_2s": "has adornado",
  "form_3s": "ha adornado",
  "form_1p": "hemos adornado",
  "form_2p": "habéis adornado",
  "form_3p": "han adornado",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have adorned",
  "form_1s": "habré adornado",
  "form_2s": "habrás adornado",
  "form_3s": "habrá adornado",
  "form_1p": "habremos adornado",
  "form_2p": "habréis adornado",
  "form_3p": "habrán adornado",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had adorned",
  "form_1s": "había adornado",
  "form_2s": "habías adornado",
  "form_3s": "había adornado",
  "form_1p": "habíamos adornado",
  "form_2p": "habíais adornado",
  "form_3p": "habían adornado",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had adorned",
  "form_1s": "hube adornado",
  "form_2s": "hubiste adornado",
  "form_3s": "hubo adornado",
  "form_1p": "hubimos adornado",
  "form_2p": "hubisteis adornado",
  "form_3p": "hubieron adornado",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have adorned",
  "form_1s": "habría adornado",
  "form_2s": "habrías adornado",
  "form_3s": "habría adornado",
  "form_1p": "habríamos adornado",
  "form_2p": "habríais adornado",
  "form_3p": "habrían adornado",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I adorn, am adorning",
  "form_1s": "adorne",
  "form_2s": "adornes",
  "form_3s": "adorne",
  "form_1p": "adornemos",
  "form_2p": "adornéis",
  "form_3p": "adornen",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I adorned, was adorning",
  "form_1s": "adornara",
  "form_2s": "adornaras",
  "form_3s": "adornara",
  "form_1p": "adornáramos",
  "form_2p": "adornarais",
  "form_3p": "adornaran",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will adorn",
  "form_1s": "adornare",
  "form_2s": "adornares",
  "form_3s": "adornare",
  "form_1p": "adornáremos",
  "form_2p": "adornareis",
  "form_3p": "adornaren",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have adorned, adorned",
  "form_1s": "haya adornado",
  "form_2s": "hayas adornado",
  "form_3s": "haya adornado",
  "form_1p": "hayamos adornado",
  "form_2p": "hayáis adornado",
  "form_3p": "hayan adornado",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have adorned",
  "form_1s": "hubiere adornado",
  "form_2s": "hubieres adornado",
  "form_3s": "hubiere adornado",
  "form_1p": "hubiéremos adornado",
  "form_2p": "hubiereis adornado",
  "form_3p": "hubieren adornado",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had adorned",
  "form_1s": "hubiera adornado",
  "form_2s": "hubieras adornado",
  "form_3s": "hubiera adornado",
  "form_1p": "hubiéramos adornado",
  "form_2p": "hubierais adornado",
  "form_3p": "hubieran adornado",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Adorn! Don't adorn!",
  "form_1s": "",
  "form_2s": "adorna",
  "form_3s": "adornad",
  "form_1p": "",
  "form_2p": "adorne",
  "form_3p": "adornen",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "adornar",
  "infinitive_english": "to adorn; to decorate, embellish; to garnish [food]",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Adorn! Don't adorn!",
  "form_1s": "",
  "form_2s": "no adornes",
  "form_3s": "no adornéis",
  "form_1p": "",
  "form_2p": "no adorne",
  "form_3p": "no adornen",
  "gerund": "adornando",
  "gerund_english": "adorning",
  "pastparticiple": "adornado",
  "pastparticiple_english": "adorned"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I notice, am noticing",
  "form_1s": "advierto",
  "form_2s": "adviertes",
  "form_3s": "advierte",
  "form_1p": "advertimos",
  "form_2p": "advertís",
  "form_3p": "advierten",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will notice",
  "form_1s": "advertiré",
  "form_2s": "advertirás",
  "form_3s": "advertirá",
  "form_1p": "advertiremos",
  "form_2p": "advertiréis",
  "form_3p": "advertirán",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was noticing, used to notice, noticed",
  "form_1s": "advertía",
  "form_2s": "advertías",
  "form_3s": "advertía",
  "form_1p": "advertíamos",
  "form_2p": "advertíais",
  "form_3p": "advertían",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I noticed",
  "form_1s": "advertí",
  "form_2s": "advertiste",
  "form_3s": "advirtió",
  "form_1p": "advertimos",
  "form_2p": "advertisteis",
  "form_3p": "advirtieron",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would notice",
  "form_1s": "advertiría",
  "form_2s": "advertirías",
  "form_3s": "advertiría",
  "form_1p": "advertiríamos",
  "form_2p": "advertiríais",
  "form_3p": "advertirían",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have noticed",
  "form_1s": "he advertido",
  "form_2s": "has advertido",
  "form_3s": "ha advertido",
  "form_1p": "hemos advertido",
  "form_2p": "habéis advertido",
  "form_3p": "han advertido",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have noticed",
  "form_1s": "habré advertido",
  "form_2s": "habrás advertido",
  "form_3s": "habrá advertido",
  "form_1p": "habremos advertido",
  "form_2p": "habréis advertido",
  "form_3p": "habrán advertido",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will make firm",
  "form_1s": "afirmaré",
  "form_2s": "afirmarás",
  "form_3s": "afirmará",
  "form_1p": "afirmaremos",
  "form_2p": "afirmaréis",
  "form_3p": "afirmarán",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had noticed",
  "form_1s": "había advertido",
  "form_2s": "habías advertido",
  "form_3s": "había advertido",
  "form_1p": "habíamos advertido",
  "form_2p": "habíais advertido",
  "form_3p": "habían advertido",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had noticed",
  "form_1s": "hube advertido",
  "form_2s": "hubiste advertido",
  "form_3s": "hubo advertido",
  "form_1p": "hubimos advertido",
  "form_2p": "hubisteis advertido",
  "form_3p": "hubieron advertido",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have noticed",
  "form_1s": "habría advertido",
  "form_2s": "habrías advertido",
  "form_3s": "habría advertido",
  "form_1p": "habríamos advertido",
  "form_2p": "habríais advertido",
  "form_3p": "habrían advertido",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I notice, am noticing",
  "form_1s": "advierta",
  "form_2s": "adviertas",
  "form_3s": "advierta",
  "form_1p": "advirtamos",
  "form_2p": "advirtáis",
  "form_3p": "adviertan",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I noticed, was noticing",
  "form_1s": "advirtiera",
  "form_2s": "advirtieras",
  "form_3s": "advirtiera",
  "form_1p": "advirtiéramos",
  "form_2p": "advirtierais",
  "form_3p": "advirtieran",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will notice",
  "form_1s": "advirtiere",
  "form_2s": "advirtieres",
  "form_3s": "advirtiere",
  "form_1p": "advirtiéremos",
  "form_2p": "advirtiereis",
  "form_3p": "advirtieren",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have noticed, noticed",
  "form_1s": "haya advertido",
  "form_2s": "hayas advertido",
  "form_3s": "haya advertido",
  "form_1p": "hayamos advertido",
  "form_2p": "hayáis advertido",
  "form_3p": "hayan advertido",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have noticed",
  "form_1s": "hubiere advertido",
  "form_2s": "hubieres advertido",
  "form_3s": "hubiere advertido",
  "form_1p": "hubiéremos advertido",
  "form_2p": "hubiereis advertido",
  "form_3p": "hubieren advertido",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had noticed",
  "form_1s": "hubiera advertido",
  "form_2s": "hubieras advertido",
  "form_3s": "hubiera advertido",
  "form_1p": "hubiéramos advertido",
  "form_2p": "hubierais advertido",
  "form_3p": "hubieran advertido",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Notice! Don't notice!",
  "form_1s": "",
  "form_2s": "advierte",
  "form_3s": "advertid",
  "form_1p": "",
  "form_2p": "advierta",
  "form_3p": "adviertan",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "advertir",
  "infinitive_english": "to notice, observe, advise, warn",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Notice! Don't notice!",
  "form_1s": "",
  "form_2s": "no adviertas",
  "form_3s": "no advirtáis",
  "form_1p": "",
  "form_2p": "no advierta",
  "form_3p": "no adviertan",
  "gerund": "advirtiendo",
  "gerund_english": "noticing",
  "pastparticiple": "advertido",
  "pastparticiple_english": "noticed"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I shave, am shaving",
  "form_1s": "afeito",
  "form_2s": "afeitas",
  "form_3s": "afeita",
  "form_1p": "afeitamos",
  "form_2p": "afeitáis",
  "form_3p": "afeitan",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will shave",
  "form_1s": "afeitaré",
  "form_2s": "afeitarás",
  "form_3s": "afeitará",
  "form_1p": "afeitaremos",
  "form_2p": "afeitaréis",
  "form_3p": "afeitarán",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was shaving, used to shave, shaved",
  "form_1s": "afeitaba",
  "form_2s": "afeitabas",
  "form_3s": "afeitaba",
  "form_1p": "afeitábamos",
  "form_2p": "afeitabais",
  "form_3p": "afeitaban",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I shaved",
  "form_1s": "afeité",
  "form_2s": "afeitaste",
  "form_3s": "afeitó",
  "form_1p": "afeitamos",
  "form_2p": "afeitasteis",
  "form_3p": "afeitaron",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would shave",
  "form_1s": "afeitaría",
  "form_2s": "afeitarías",
  "form_3s": "afeitaría",
  "form_1p": "afeitaríamos",
  "form_2p": "afeitaríais",
  "form_3p": "afeitarían",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have shaved",
  "form_1s": "he afeitado",
  "form_2s": "has afeitado",
  "form_3s": "ha afeitado",
  "form_1p": "hemos afeitado",
  "form_2p": "habéis afeitado",
  "form_3p": "han afeitado",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have shaved",
  "form_1s": "habré afeitado",
  "form_2s": "habrás afeitado",
  "form_3s": "habrá afeitado",
  "form_1p": "habremos afeitado",
  "form_2p": "habréis afeitado",
  "form_3p": "habrán afeitado",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had shaved",
  "form_1s": "había afeitado",
  "form_2s": "habías afeitado",
  "form_3s": "había afeitado",
  "form_1p": "habíamos afeitado",
  "form_2p": "habíais afeitado",
  "form_3p": "habían afeitado",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had shaved",
  "form_1s": "hube afeitado",
  "form_2s": "hubiste afeitado",
  "form_3s": "hubo afeitado",
  "form_1p": "hubimos afeitado",
  "form_2p": "hubisteis afeitado",
  "form_3p": "hubieron afeitado",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have shaved",
  "form_1s": "habría afeitado",
  "form_2s": "habrías afeitado",
  "form_3s": "habría afeitado",
  "form_1p": "habríamos afeitado",
  "form_2p": "habríais afeitado",
  "form_3p": "habrían afeitado",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I shave, am shaving",
  "form_1s": "afeite",
  "form_2s": "afeites",
  "form_3s": "afeite",
  "form_1p": "afeitemos",
  "form_2p": "afeitéis",
  "form_3p": "afeiten",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I shaved, was shaving",
  "form_1s": "afeitara",
  "form_2s": "afeitaras",
  "form_3s": "afeitara",
  "form_1p": "afeitáramos",
  "form_2p": "afeitarais",
  "form_3p": "afeitaran",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will shave",
  "form_1s": "afeitare",
  "form_2s": "afeitares",
  "form_3s": "afeitare",
  "form_1p": "afeitáremos",
  "form_2p": "afeitareis",
  "form_3p": "afeitaren",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have shaved, shaved",
  "form_1s": "haya afeitado",
  "form_2s": "hayas afeitado",
  "form_3s": "haya afeitado",
  "form_1p": "hayamos afeitado",
  "form_2p": "hayáis afeitado",
  "form_3p": "hayan afeitado",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have shaved",
  "form_1s": "hubiere afeitado",
  "form_2s": "hubieres afeitado",
  "form_3s": "hubiere afeitado",
  "form_1p": "hubiéremos afeitado",
  "form_2p": "hubiereis afeitado",
  "form_3p": "hubieren afeitado",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had shaved",
  "form_1s": "hubiera afeitado",
  "form_2s": "hubieras afeitado",
  "form_3s": "hubiera afeitado",
  "form_1p": "hubiéramos afeitado",
  "form_2p": "hubierais afeitado",
  "form_3p": "hubieran afeitado",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Shave! Don't shave!",
  "form_1s": "",
  "form_2s": "afeita",
  "form_3s": "afeitad",
  "form_1p": "",
  "form_2p": "afeite",
  "form_3p": "afeiten",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitar",
  "infinitive_english": "to shave",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Shave! Don't shave!",
  "form_1s": "",
  "form_2s": "no afeites",
  "form_3s": "no afeitéis",
  "form_1p": "",
  "form_2p": "no afeite",
  "form_3p": "no afeiten",
  "gerund": "afeitando",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I shave, am shaving",
  "form_1s": "me afeito",
  "form_2s": "te afeitas",
  "form_3s": "se afeita",
  "form_1p": "nos afeitamos",
  "form_2p": "os afeitáis",
  "form_3p": "se afeitan",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will shave",
  "form_1s": "me afeitaré",
  "form_2s": "te afeitarás",
  "form_3s": "se afeitará",
  "form_1p": "nos afeitaremos",
  "form_2p": "os afeitaréis",
  "form_3p": "se afeitarán",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was shaving, used to shave, shaved",
  "form_1s": "me afeitaba",
  "form_2s": "te afeitabas",
  "form_3s": "se afeitaba",
  "form_1p": "nos afeitábamos",
  "form_2p": "os afeitabais",
  "form_3p": "se afeitaban",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I shaved",
  "form_1s": "me afeité",
  "form_2s": "te afeitaste",
  "form_3s": "se afeitó",
  "form_1p": "nos afeitamos",
  "form_2p": "os afeitasteis",
  "form_3p": "se afeitaron",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would shave",
  "form_1s": "me afeitaría",
  "form_2s": "te afeitarías",
  "form_3s": "se afeitaría",
  "form_1p": "nos afeitaríamos",
  "form_2p": "os afeitaríais",
  "form_3p": "se afeitarían",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have shaved",
  "form_1s": "me he afeitado",
  "form_2s": "te has afeitado",
  "form_3s": "se ha afeitado",
  "form_1p": "nos hemos afeitado",
  "form_2p": "os habéis afeitado",
  "form_3p": "se han afeitado",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have shaved",
  "form_1s": "me habré afeitado",
  "form_2s": "te habrás afeitado",
  "form_3s": "se habrá afeitado",
  "form_1p": "nos habremos afeitado",
  "form_2p": "os habréis afeitado",
  "form_3p": "se habrán afeitado",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had shaved",
  "form_1s": "me había afeitado",
  "form_2s": "te habías afeitado",
  "form_3s": "se había afeitado",
  "form_1p": "nos habíamos afeitado",
  "form_2p": "os habíais afeitado",
  "form_3p": "se habían afeitado",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had shaved",
  "form_1s": "me hube afeitado",
  "form_2s": "te hubiste afeitado",
  "form_3s": "se hubo afeitado",
  "form_1p": "nos hubimos afeitado",
  "form_2p": "os hubisteis afeitado",
  "form_3p": "se hubieron afeitado",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have shaved",
  "form_1s": "me habría afeitado",
  "form_2s": "te habrías afeitado",
  "form_3s": "se habría afeitado",
  "form_1p": "nos habríamos afeitado",
  "form_2p": "os habríais afeitado",
  "form_3p": "se habrían afeitado",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I shave, am shaving",
  "form_1s": "me afeite",
  "form_2s": "te afeites",
  "form_3s": "se afeite",
  "form_1p": "nos afeitemos",
  "form_2p": "os afeitéis",
  "form_3p": "se afeiten",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I shaved, was shaving",
  "form_1s": "me afeitara",
  "form_2s": "te afeitaras",
  "form_3s": "se afeitara",
  "form_1p": "nos afeitáramos",
  "form_2p": "os afeitarais",
  "form_3p": "se afeitaran",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will shave",
  "form_1s": "me afeitare",
  "form_2s": "te afeitares",
  "form_3s": "se afeitare",
  "form_1p": "nos afeitáremos",
  "form_2p": "os afeitareis",
  "form_3p": "se afeitaren",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have shaved, shaved",
  "form_1s": "me haya afeitado",
  "form_2s": "te hayas afeitado",
  "form_3s": "se haya afeitado",
  "form_1p": "nos hayamos afeitado",
  "form_2p": "os hayáis afeitado",
  "form_3p": "se hayan afeitado",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have shaved",
  "form_1s": "me hubiere afeitado",
  "form_2s": "te hubieres afeitado",
  "form_3s": "se hubiere afeitado",
  "form_1p": "nos hubiéremos afeitado",
  "form_2p": "os hubiereis afeitado",
  "form_3p": "se hubieren afeitado",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had shaved",
  "form_1s": "me hubiera afeitado",
  "form_2s": "te hubieras afeitado",
  "form_3s": "se hubiera afeitado",
  "form_1p": "nos hubiéramos afeitado",
  "form_2p": "os hubierais afeitado",
  "form_3p": "se hubieran afeitado",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Shave! Don't shave!",
  "form_1s": "",
  "form_2s": "aféitate",
  "form_3s": "afeitaos",
  "form_1p": "",
  "form_2p": "aféitese",
  "form_3p": "aféitense",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afeitarse",
  "infinitive_english": "to shave [oneself]",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Shave! Don't shave!",
  "form_1s": "",
  "form_2s": "no te afeites",
  "form_3s": "no os afeitéis",
  "form_1p": "",
  "form_2p": "no se afeite",
  "form_3p": "no se afeiten",
  "gerund": "afeitándose",
  "gerund_english": "shaving",
  "pastparticiple": "afeitado",
  "pastparticiple_english": "shaved"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I make firm, am making firm",
  "form_1s": "afirmo",
  "form_2s": "afirmas",
  "form_3s": "afirma",
  "form_1p": "afirmamos",
  "form_2p": "afirmáis",
  "form_3p": "afirman",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was making firm, used to make firm, made firm",
  "form_1s": "afirmaba",
  "form_2s": "afirmabas",
  "form_3s": "afirmaba",
  "form_1p": "afirmábamos",
  "form_2p": "afirmabais",
  "form_3p": "afirmaban",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I made firm",
  "form_1s": "afirmé",
  "form_2s": "afirmaste",
  "form_3s": "afirmó",
  "form_1p": "afirmamos",
  "form_2p": "afirmasteis",
  "form_3p": "afirmaron",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would make firm",
  "form_1s": "afirmaría",
  "form_2s": "afirmarías",
  "form_3s": "afirmaría",
  "form_1p": "afirmaríamos",
  "form_2p": "afirmaríais",
  "form_3p": "afirmarían",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have made firm",
  "form_1s": "he afirmado",
  "form_2s": "has afirmado",
  "form_3s": "ha afirmado",
  "form_1p": "hemos afirmado",
  "form_2p": "habéis afirmado",
  "form_3p": "han afirmado",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have made firm",
  "form_1s": "habré afirmado",
  "form_2s": "habrás afirmado",
  "form_3s": "habrá afirmado",
  "form_1p": "habremos afirmado",
  "form_2p": "habréis afirmado",
  "form_3p": "habrán afirmado",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had made firm",
  "form_1s": "había afirmado",
  "form_2s": "habías afirmado",
  "form_3s": "había afirmado",
  "form_1p": "habíamos afirmado",
  "form_2p": "habíais afirmado",
  "form_3p": "habían afirmado",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had made firm",
  "form_1s": "hube afirmado",
  "form_2s": "hubiste afirmado",
  "form_3s": "hubo afirmado",
  "form_1p": "hubimos afirmado",
  "form_2p": "hubisteis afirmado",
  "form_3p": "hubieron afirmado",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have made firm",
  "form_1s": "habría afirmado",
  "form_2s": "habrías afirmado",
  "form_3s": "habría afirmado",
  "form_1p": "habríamos afirmado",
  "form_2p": "habríais afirmado",
  "form_3p": "habrían afirmado",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I make firm, am making firm",
  "form_1s": "afirme",
  "form_2s": "afirmes",
  "form_3s": "afirme",
  "form_1p": "afirmemos",
  "form_2p": "afirméis",
  "form_3p": "afirmen",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I made firm, was making firm",
  "form_1s": "afirmara",
  "form_2s": "afirmaras",
  "form_3s": "afirmara",
  "form_1p": "afirmáramos",
  "form_2p": "afirmarais",
  "form_3p": "afirmaran",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will make firm",
  "form_1s": "afirmare",
  "form_2s": "afirmares",
  "form_3s": "afirmare",
  "form_1p": "afirmáremos",
  "form_2p": "afirmareis",
  "form_3p": "afirmaren",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have made firm, made firm",
  "form_1s": "haya afirmado",
  "form_2s": "hayas afirmado",
  "form_3s": "haya afirmado",
  "form_1p": "hayamos afirmado",
  "form_2p": "hayáis afirmado",
  "form_3p": "hayan afirmado",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have made firm",
  "form_1s": "hubiere afirmado",
  "form_2s": "hubieres afirmado",
  "form_3s": "hubiere afirmado",
  "form_1p": "hubiéremos afirmado",
  "form_2p": "hubiereis afirmado",
  "form_3p": "hubieren afirmado",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had made firm",
  "form_1s": "hubiera afirmado",
  "form_2s": "hubieras afirmado",
  "form_3s": "hubiera afirmado",
  "form_1p": "hubiéramos afirmado",
  "form_2p": "hubierais afirmado",
  "form_3p": "hubieran afirmado",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Make firm! Don't make firm!",
  "form_1s": "",
  "form_2s": "afirma",
  "form_3s": "afirmad",
  "form_1p": "",
  "form_2p": "afirme",
  "form_3p": "afirmen",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afirmar",
  "infinitive_english": "to make firm, steady, strengthen; to affirm, state, assert",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Make firm! Don't make firm!",
  "form_1s": "",
  "form_2s": "no afirmes",
  "form_3s": "no afirméis",
  "form_1p": "",
  "form_2p": "no afirme",
  "form_3p": "no afirmen",
  "gerund": "afirmando",
  "gerund_english": "making firm",
  "pastparticiple": "afirmado",
  "pastparticiple_english": "made firm"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I afflict, am afflicting",
  "form_1s": "aflijo",
  "form_2s": "afliges",
  "form_3s": "aflige",
  "form_1p": "afligimos",
  "form_2p": "afligís",
  "form_3p": "afligen",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will afflict",
  "form_1s": "afligiré",
  "form_2s": "afligirás",
  "form_3s": "afligirá",
  "form_1p": "afligiremos",
  "form_2p": "afligiréis",
  "form_3p": "afligirán",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was afflicting, used to afflict, afflicted",
  "form_1s": "afligía",
  "form_2s": "afligías",
  "form_3s": "afligía",
  "form_1p": "afligíamos",
  "form_2p": "afligíais",
  "form_3p": "afligían",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I afflicted",
  "form_1s": "afligí",
  "form_2s": "afligiste",
  "form_3s": "afligió",
  "form_1p": "afligimos",
  "form_2p": "afligisteis",
  "form_3p": "afligieron",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would afflict",
  "form_1s": "afligiría",
  "form_2s": "afligirías",
  "form_3s": "afligiría",
  "form_1p": "afligiríamos",
  "form_2p": "afligiríais",
  "form_3p": "afligirían",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have aflficted",
  "form_1s": "he afligido",
  "form_2s": "has afligido",
  "form_3s": "ha afligido",
  "form_1p": "hemos afligido",
  "form_2p": "habéis afligido",
  "form_3p": "han afligido",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have afflicted",
  "form_1s": "habré afligido",
  "form_2s": "habrás afligido",
  "form_3s": "habrá afligido",
  "form_1p": "habremos afligido",
  "form_2p": "habréis afligido",
  "form_3p": "habrán afligido",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had afflicted",
  "form_1s": "había afligido",
  "form_2s": "habías afligido",
  "form_3s": "había afligido",
  "form_1p": "habíamos afligido",
  "form_2p": "habíais afligido",
  "form_3p": "habían afligido",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had afflicted",
  "form_1s": "hube afligido",
  "form_2s": "hubiste afligido",
  "form_3s": "hubo afligido",
  "form_1p": "hubimos afligido",
  "form_2p": "hubisteis afligido",
  "form_3p": "hubieron afligido",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have afflicted",
  "form_1s": "habría afligido",
  "form_2s": "habrías afligido",
  "form_3s": "habría afligido",
  "form_1p": "habríamos afligido",
  "form_2p": "habríais afligido",
  "form_3p": "habrían afligido",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I afflict, am afflicting",
  "form_1s": "aflija",
  "form_2s": "aflijas",
  "form_3s": "aflija",
  "form_1p": "aflijamos",
  "form_2p": "aflijáis",
  "form_3p": "aflijan",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I afflicted, was afflicting",
  "form_1s": "afligiera",
  "form_2s": "afligieras",
  "form_3s": "afligiera",
  "form_1p": "afligiéramos",
  "form_2p": "afligierais",
  "form_3p": "afligieran",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will afflict",
  "form_1s": "afligiere",
  "form_2s": "afligieres",
  "form_3s": "afligiere",
  "form_1p": "afligiéremos",
  "form_2p": "afligiereis",
  "form_3p": "afligieren",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have afflicted, afflicted",
  "form_1s": "haya afligido",
  "form_2s": "hayas afligido",
  "form_3s": "haya afligido",
  "form_1p": "hayamos afligido",
  "form_2p": "hayáis afligido",
  "form_3p": "hayan afligido",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have afflicted",
  "form_1s": "hubiere afligido",
  "form_2s": "hubieres afligido",
  "form_3s": "hubiere afligido",
  "form_1p": "hubiéremos afligido",
  "form_2p": "hubiereis afligido",
  "form_3p": "hubieren afligido",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had afflicted",
  "form_1s": "hubiera afligido",
  "form_2s": "hubieras afligido",
  "form_3s": "hubiera afligido",
  "form_1p": "hubiéramos afligido",
  "form_2p": "hubierais afligido",
  "form_3p": "hubieran afligido",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Afflict! Don't afflict!",
  "form_1s": "",
  "form_2s": "aflige",
  "form_3s": "afligid",
  "form_1p": "",
  "form_2p": "aflija",
  "form_3p": "aflijan",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "afligir",
  "infinitive_english": "to afflict, to grieve, to pain, to distress",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Afflict! Don't afflict!",
  "form_1s": "",
  "form_2s": "no aflijas",
  "form_3s": "no aflijáis",
  "form_1p": "",
  "form_2p": "no aflija",
  "form_3p": "no aflijan",
  "gerund": "afligiendo",
  "gerund_english": "afflicting",
  "pastparticiple": "afligido",
  "pastparticiple_english": "afflicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I predict, am predicting",
  "form_1s": "agüero",
  "form_2s": "agüeras",
  "form_3s": "agüera",
  "form_1p": "agoramos",
  "form_2p": "agoráis",
  "form_3p": "agüeran",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will predict",
  "form_1s": "agoraré",
  "form_2s": "agorarás",
  "form_3s": "agorará",
  "form_1p": "agoraremos",
  "form_2p": "agoraréis",
  "form_3p": "agorarán",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was predicting, used to predict, predicted",
  "form_1s": "agoraba",
  "form_2s": "agorabas",
  "form_3s": "agoraba",
  "form_1p": "agorábamos",
  "form_2p": "agorabais",
  "form_3p": "agoraban",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I predicted",
  "form_1s": "agoré",
  "form_2s": "agoraste",
  "form_3s": "agoró",
  "form_1p": "agoramos",
  "form_2p": "agorasteis",
  "form_3p": "agoraron",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would predict",
  "form_1s": "agoraría",
  "form_2s": "agorarías",
  "form_3s": "agoraría",
  "form_1p": "agoraríamos",
  "form_2p": "agoraríais",
  "form_3p": "agorarían",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have predicted",
  "form_1s": "he agorado",
  "form_2s": "has agorado",
  "form_3s": "ha agorado",
  "form_1p": "hemos agorado",
  "form_2p": "habéis agorado",
  "form_3p": "han agorado",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have predicted",
  "form_1s": "habré agorado",
  "form_2s": "habrás agorado",
  "form_3s": "habrá agorado",
  "form_1p": "habremos agorado",
  "form_2p": "habréis agorado",
  "form_3p": "habrán agorado",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had predicted",
  "form_1s": "había agorado",
  "form_2s": "habías agorado",
  "form_3s": "había agorado",
  "form_1p": "habíamos agorado",
  "form_2p": "habíais agorado",
  "form_3p": "habían agorado",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had predicted",
  "form_1s": "hube agorado",
  "form_2s": "hubiste agorado",
  "form_3s": "hubo agorado",
  "form_1p": "hubimos agorado",
  "form_2p": "hubisteis agorado",
  "form_3p": "hubieron agorado",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have predicted",
  "form_1s": "habría agorado",
  "form_2s": "habrías agorado",
  "form_3s": "habría agorado",
  "form_1p": "habríamos agorado",
  "form_2p": "habríais agorado",
  "form_3p": "habrían agorado",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I predict, am predicting",
  "form_1s": "agüere",
  "form_2s": "agüeres",
  "form_3s": "agüere",
  "form_1p": "agoremos",
  "form_2p": "agoréis",
  "form_3p": "agüeren",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I predicted, was predicting",
  "form_1s": "agorara",
  "form_2s": "agoraras",
  "form_3s": "agorara",
  "form_1p": "agoráramos",
  "form_2p": "agorarais",
  "form_3p": "agoraran",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will predict",
  "form_1s": "agorare",
  "form_2s": "agorares",
  "form_3s": "agorare",
  "form_1p": "agoráremos",
  "form_2p": "agorareis",
  "form_3p": "agoraren",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have predicted, predicted",
  "form_1s": "haya agorado",
  "form_2s": "hayas agorado",
  "form_3s": "haya agorado",
  "form_1p": "hayamos agorado",
  "form_2p": "hayáis agorado",
  "form_3p": "hayan agorado",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have predicted",
  "form_1s": "hubiere agorado",
  "form_2s": "hubieres agorado",
  "form_3s": "hubiere agorado",
  "form_1p": "hubiéremos agorado",
  "form_2p": "hubiereis agorado",
  "form_3p": "hubieren agorado",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had predicted",
  "form_1s": "hubiera agorado",
  "form_2s": "hubieras agorado",
  "form_3s": "hubiera agorado",
  "form_1p": "hubiéramos agorado",
  "form_2p": "hubierais agorado",
  "form_3p": "hubieran agorado",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Predict! Don't predict!",
  "form_1s": "",
  "form_2s": "agüera",
  "form_3s": "agorad",
  "form_1p": "",
  "form_2p": "agüere",
  "form_3p": "agüeren",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agorar",
  "infinitive_english": "to predict, prophesy",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Predict! Don't predict!",
  "form_1s": "",
  "form_2s": "no agüeres",
  "form_3s": "no agoréis",
  "form_1p": "",
  "form_2p": "no agüere",
  "form_3p": "no agüeren",
  "gerund": "agorando",
  "gerund_english": "predicting",
  "pastparticiple": "agorado",
  "pastparticiple_english": "predicted"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I please, am pleasing",
  "form_1s": "agrado",
  "form_2s": "agradas",
  "form_3s": "agrada",
  "form_1p": "agradamos",
  "form_2p": "agradáis",
  "form_3p": "agradan",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will please",
  "form_1s": "agradaré",
  "form_2s": "agradarás",
  "form_3s": "agradará",
  "form_1p": "agradaremos",
  "form_2p": "agradaréis",
  "form_3p": "agradarán",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was pleasing, used to please, pleased",
  "form_1s": "agradaba",
  "form_2s": "agradabas",
  "form_3s": "agradaba",
  "form_1p": "agradábamos",
  "form_2p": "agradabais",
  "form_3p": "agradaban",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I pleased",
  "form_1s": "agradé",
  "form_2s": "agradaste",
  "form_3s": "agradó",
  "form_1p": "agradamos",
  "form_2p": "agradasteis",
  "form_3p": "agradaron",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would please",
  "form_1s": "agradaría",
  "form_2s": "agradarías",
  "form_3s": "agradaría",
  "form_1p": "agradaríamos",
  "form_2p": "agradaríais",
  "form_3p": "agradarían",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have pleased",
  "form_1s": "he agradado",
  "form_2s": "has agradado",
  "form_3s": "ha agradado",
  "form_1p": "hemos agradado",
  "form_2p": "habéis agradado",
  "form_3p": "han agradado",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have pleased",
  "form_1s": "habré agradado",
  "form_2s": "habrás agradado",
  "form_3s": "habrá agradado",
  "form_1p": "habremos agradado",
  "form_2p": "habréis agradado",
  "form_3p": "habrán agradado",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had pleased",
  "form_1s": "había agradado",
  "form_2s": "habías agradado",
  "form_3s": "había agradado",
  "form_1p": "habíamos agradado",
  "form_2p": "habíais agradado",
  "form_3p": "habían agradado",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had pleased",
  "form_1s": "hube agradado",
  "form_2s": "hubiste agradado",
  "form_3s": "hubo agradado",
  "form_1p": "hubimos agradado",
  "form_2p": "hubisteis agradado",
  "form_3p": "hubieron agradado",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have pleased",
  "form_1s": "habría agradado",
  "form_2s": "habrías agradado",
  "form_3s": "habría agradado",
  "form_1p": "habríamos agradado",
  "form_2p": "habríais agradado",
  "form_3p": "habrían agradado",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I please, am pleasing",
  "form_1s": "agrade",
  "form_2s": "agrades",
  "form_3s": "agrade",
  "form_1p": "agrademos",
  "form_2p": "agradéis",
  "form_3p": "agraden",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I pleased, was pleasing",
  "form_1s": "agradara",
  "form_2s": "agradaras",
  "form_3s": "agradara",
  "form_1p": "agradáramos",
  "form_2p": "agradarais",
  "form_3p": "agradaran",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will please",
  "form_1s": "agradare",
  "form_2s": "agradares",
  "form_3s": "agradare",
  "form_1p": "agradáremos",
  "form_2p": "agradareis",
  "form_3p": "agradaren",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have pleased, pleased",
  "form_1s": "haya agradado",
  "form_2s": "hayas agradado",
  "form_3s": "haya agradado",
  "form_1p": "hayamos agradado",
  "form_2p": "hayáis agradado",
  "form_3p": "hayan agradado",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have pleased",
  "form_1s": "hubiere agradado",
  "form_2s": "hubieres agradado",
  "form_3s": "hubiere agradado",
  "form_1p": "hubiéremos agradado",
  "form_2p": "hubiereis agradado",
  "form_3p": "hubieren agradado",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had pleased",
  "form_1s": "hubiera agradado",
  "form_2s": "hubieras agradado",
  "form_3s": "hubiera agradado",
  "form_1p": "hubiéramos agradado",
  "form_2p": "hubierais agradado",
  "form_3p": "hubieran agradado",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Please! Don't please!",
  "form_1s": "",
  "form_2s": "agrada",
  "form_3s": "agradad",
  "form_1p": "",
  "form_2p": "agrade",
  "form_3p": "agraden",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradar",
  "infinitive_english": "to please, be pleasing",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Please! Don't please!",
  "form_1s": "",
  "form_2s": "no agrades",
  "form_3s": "no agradéis",
  "form_1p": "",
  "form_2p": "no agrade",
  "form_3p": "no agraden",
  "gerund": "agradando",
  "gerund_english": "pleasing",
  "pastparticiple": "agradado",
  "pastparticiple_english": "pleased"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am thankful for",
  "form_1s": "agradezco",
  "form_2s": "agradeces",
  "form_3s": "agradece",
  "form_1p": "agradecemos",
  "form_2p": "agradecéis",
  "form_3p": "agradecen",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be thankful for",
  "form_1s": "agradeceré",
  "form_2s": "agradecerás",
  "form_3s": "agradecerá",
  "form_1p": "agradeceremos",
  "form_2p": "agradeceréis",
  "form_3p": "agradecerán",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was being thankful for, used to be thankful for, was thankful for",
  "form_1s": "agradecía",
  "form_2s": "agradecías",
  "form_3s": "agradecía",
  "form_1p": "agradecíamos",
  "form_2p": "agradecíais",
  "form_3p": "agradecían",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I was thankful for",
  "form_1s": "agradecí",
  "form_2s": "agradeciste",
  "form_3s": "agradeció",
  "form_1p": "agradecimos",
  "form_2p": "agradecisteis",
  "form_3p": "agradecieron",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would be thankful for",
  "form_1s": "agradecería",
  "form_2s": "agradecerías",
  "form_3s": "agradecería",
  "form_1p": "agradeceríamos",
  "form_2p": "agradeceríais",
  "form_3p": "agradecerían",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been thankful for",
  "form_1s": "he agradecido",
  "form_2s": "has agradecido",
  "form_3s": "ha agradecido",
  "form_1p": "hemos agradecido",
  "form_2p": "habéis agradecido",
  "form_3p": "han agradecido",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been thankful for",
  "form_1s": "habré agradecido",
  "form_2s": "habrás agradecido",
  "form_3s": "habrá agradecido",
  "form_1p": "habremos agradecido",
  "form_2p": "habréis agradecido",
  "form_3p": "habrán agradecido",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been thankful for",
  "form_1s": "había agradecido",
  "form_2s": "habías agradecido",
  "form_3s": "había agradecido",
  "form_1p": "habíamos agradecido",
  "form_2p": "habíais agradecido",
  "form_3p": "habían agradecido",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had been thankful for",
  "form_1s": "hube agradecido",
  "form_2s": "hubiste agradecido",
  "form_3s": "hubo agradecido",
  "form_1p": "hubimos agradecido",
  "form_2p": "hubisteis agradecido",
  "form_3p": "hubieron agradecido",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have been thankful for",
  "form_1s": "habría agradecido",
  "form_2s": "habrías agradecido",
  "form_3s": "habría agradecido",
  "form_1p": "habríamos agradecido",
  "form_2p": "habríais agradecido",
  "form_3p": "habrían agradecido",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am thankful for",
  "form_1s": "agradezca",
  "form_2s": "agradezcas",
  "form_3s": "agradezca",
  "form_1p": "agradezcamos",
  "form_2p": "agradezcáis",
  "form_3p": "agradezcan",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was thankful for, was being thankful for",
  "form_1s": "agradeciera",
  "form_2s": "agradecieras",
  "form_3s": "agradeciera",
  "form_1p": "agradeciéramos",
  "form_2p": "agradecierais",
  "form_3p": "agradecieran",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be thankful for",
  "form_1s": "agradeciere",
  "form_2s": "agradecieres",
  "form_3s": "agradeciere",
  "form_1p": "agradeciéremos",
  "form_2p": "agradeciereis",
  "form_3p": "agradecieren",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been thankful for, was thankful for",
  "form_1s": "haya agradecido",
  "form_2s": "hayas agradecido",
  "form_3s": "haya agradecido",
  "form_1p": "hayamos agradecido",
  "form_2p": "hayáis agradecido",
  "form_3p": "hayan agradecido",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been thankful for",
  "form_1s": "hubiere agradecido",
  "form_2s": "hubieres agradecido",
  "form_3s": "hubiere agradecido",
  "form_1p": "hubiéremos agradecido",
  "form_2p": "hubiereis agradecido",
  "form_3p": "hubieren agradecido",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been thankful for",
  "form_1s": "hubiera agradecido",
  "form_2s": "hubieras agradecido",
  "form_3s": "hubiera agradecido",
  "form_1p": "hubiéramos agradecido",
  "form_2p": "hubierais agradecido",
  "form_3p": "hubieran agradecido",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be thankful for! Don't be thankful for!",
  "form_1s": "",
  "form_2s": "agradece",
  "form_3s": "agradeced",
  "form_1p": "",
  "form_2p": "agradezca",
  "form_3p": "agradezcan",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "agradecer",
  "infinitive_english": "to be thankful for",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be thankful for! Don't be thankful for!",
  "form_1s": "",
  "form_2s": "no agradezcas",
  "form_3s": "no agradezcáis",
  "form_1p": "",
  "form_2p": "no agradezca",
  "form_3p": "no agradezcan",
  "gerund": "agradeciendo",
  "gerund_english": "being thankful for",
  "pastparticiple": "agradecido",
  "pastparticiple_english": "thankful for"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I put up with, am putting up with",
  "form_1s": "aguanto",
  "form_2s": "aguantas",
  "form_3s": "aguanta",
  "form_1p": "aguantamos",
  "form_2p": "aguantáis",
  "form_3p": "aguantan",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will put up with",
  "form_1s": "aguantaré",
  "form_2s": "aguantarás",
  "form_3s": "aguantará",
  "form_1p": "aguantaremos",
  "form_2p": "aguantaréis",
  "form_3p": "aguantarán",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was putting up with, used to put up with, put up with",
  "form_1s": "aguantaba",
  "form_2s": "aguantabas",
  "form_3s": "aguantaba",
  "form_1p": "aguantábamos",
  "form_2p": "aguantabais",
  "form_3p": "aguantaban",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I put up with",
  "form_1s": "aguanté",
  "form_2s": "aguantaste",
  "form_3s": "aguantó",
  "form_1p": "aguantamos",
  "form_2p": "aguantasteis",
  "form_3p": "aguantaron",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would put up with",
  "form_1s": "aguantaría",
  "form_2s": "aguantarías",
  "form_3s": "aguantaría",
  "form_1p": "aguantaríamos",
  "form_2p": "aguantaríais",
  "form_3p": "aguantarían",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have put up with",
  "form_1s": "he aguantado",
  "form_2s": "has aguantado",
  "form_3s": "ha aguantado",
  "form_1p": "hemos aguantado",
  "form_2p": "habéis aguantado",
  "form_3p": "han aguantado",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have put up with",
  "form_1s": "habré aguantado",
  "form_2s": "habrás aguantado",
  "form_3s": "habrá aguantado",
  "form_1p": "habremos aguantado",
  "form_2p": "habréis aguantado",
  "form_3p": "habrán aguantado",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had put up with",
  "form_1s": "había aguantado",
  "form_2s": "habías aguantado",
  "form_3s": "había aguantado",
  "form_1p": "habíamos aguantado",
  "form_2p": "habíais aguantado",
  "form_3p": "habían aguantado",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had put up with",
  "form_1s": "hube aguantado",
  "form_2s": "hubiste aguantado",
  "form_3s": "hubo aguantado",
  "form_1p": "hubimos aguantado",
  "form_2p": "hubisteis aguantado",
  "form_3p": "hubieron aguantado",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have put up with",
  "form_1s": "habría aguantado",
  "form_2s": "habrías aguantado",
  "form_3s": "habría aguantado",
  "form_1p": "habríamos aguantado",
  "form_2p": "habríais aguantado",
  "form_3p": "habrían aguantado",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I put up with, am putting up with",
  "form_1s": "aguante",
  "form_2s": "aguantes",
  "form_3s": "aguante",
  "form_1p": "aguantemos",
  "form_2p": "aguantéis",
  "form_3p": "aguanten",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I put up with, was putting up with",
  "form_1s": "aguantara",
  "form_2s": "aguantaras",
  "form_3s": "aguantara",
  "form_1p": "aguantáramos",
  "form_2p": "aguantarais",
  "form_3p": "aguantaran",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will put up with",
  "form_1s": "aguantare",
  "form_2s": "aguantares",
  "form_3s": "aguantare",
  "form_1p": "aguantáremos",
  "form_2p": "aguantareis",
  "form_3p": "aguantaren",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have put up with, put up with",
  "form_1s": "haya aguantado",
  "form_2s": "hayas aguantado",
  "form_3s": "haya aguantado",
  "form_1p": "hayamos aguantado",
  "form_2p": "hayáis aguantado",
  "form_3p": "hayan aguantado",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have put up with",
  "form_1s": "hubiere aguantado",
  "form_2s": "hubieres aguantado",
  "form_3s": "hubiere aguantado",
  "form_1p": "hubiéremos aguantado",
  "form_2p": "hubiereis aguantado",
  "form_3p": "hubieren aguantado",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had put up with",
  "form_1s": "hubiera aguantado",
  "form_2s": "hubieras aguantado",
  "form_3s": "hubiera aguantado",
  "form_1p": "hubiéramos aguantado",
  "form_2p": "hubierais aguantado",
  "form_3p": "hubieran aguantado",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Put up with! Don't put up with!",
  "form_1s": "",
  "form_2s": "aguanta",
  "form_3s": "aguantad",
  "form_1p": "",
  "form_2p": "aguante",
  "form_3p": "aguanten",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "aguantar",
  "infinitive_english": "to put up with, endure, bear, stand",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Put up with! Don't put up with!",
  "form_1s": "",
  "form_2s": "no aguantes",
  "form_3s": "no aguantéis",
  "form_1p": "",
  "form_2p": "no aguante",
  "form_3p": "no aguanten",
  "gerund": "aguantando",
  "gerund_english": "putting up with",
  "pastparticiple": "aguantado",
  "pastparticiple_english": "put up with"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I hang, am hanging",
  "form_1s": "ahorco",
  "form_2s": "ahorcas",
  "form_3s": "ahorca",
  "form_1p": "ahorcamos",
  "form_2p": "ahorcáis",
  "form_3p": "ahorcan",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will hang",
  "form_1s": "ahorcaré",
  "form_2s": "ahorcarás",
  "form_3s": "ahorcará",
  "form_1p": "ahorcaremos",
  "form_2p": "ahorcaréis",
  "form_3p": "ahorcarán",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was hanging, used to hang, hanged",
  "form_1s": "ahorcaba",
  "form_2s": "ahorcabas",
  "form_3s": "ahorcaba",
  "form_1p": "ahorcábamos",
  "form_2p": "ahorcabais",
  "form_3p": "ahorcaban",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I hanged",
  "form_1s": "ahorqué",
  "form_2s": "ahorcaste",
  "form_3s": "ahorcó",
  "form_1p": "ahorcamos",
  "form_2p": "ahorcasteis",
  "form_3p": "ahorcaron",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would hang",
  "form_1s": "ahorcaría",
  "form_2s": "ahorcarías",
  "form_3s": "ahorcaría",
  "form_1p": "ahorcaríamos",
  "form_2p": "ahorcaríais",
  "form_3p": "ahorcarían",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have hanged",
  "form_1s": "he ahorcado",
  "form_2s": "has ahorcado",
  "form_3s": "ha ahorcado",
  "form_1p": "hemos ahorcado",
  "form_2p": "habéis ahorcado",
  "form_3p": "han ahorcado",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have hanged",
  "form_1s": "habré ahorcado",
  "form_2s": "habrás ahorcado",
  "form_3s": "habrá ahorcado",
  "form_1p": "habremos ahorcado",
  "form_2p": "habréis ahorcado",
  "form_3p": "habrán ahorcado",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had hanged",
  "form_1s": "había ahorcado",
  "form_2s": "habías ahorcado",
  "form_3s": "había ahorcado",
  "form_1p": "habíamos ahorcado",
  "form_2p": "habíais ahorcado",
  "form_3p": "habían ahorcado",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had hanged",
  "form_1s": "hube ahorcado",
  "form_2s": "hubiste ahorcado",
  "form_3s": "hubo ahorcado",
  "form_1p": "hubimos ahorcado",
  "form_2p": "hubisteis ahorcado",
  "form_3p": "hubieron ahorcado",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have hanged",
  "form_1s": "habría ahorcado",
  "form_2s": "habrías ahorcado",
  "form_3s": "habría ahorcado",
  "form_1p": "habríamos ahorcado",
  "form_2p": "habríais ahorcado",
  "form_3p": "habrían ahorcado",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I hang, am hanging",
  "form_1s": "ahorque",
  "form_2s": "ahorques",
  "form_3s": "ahorque",
  "form_1p": "ahorquemos",
  "form_2p": "ahorquéis",
  "form_3p": "ahorquen",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I hanged, was hanging",
  "form_1s": "ahorcara",
  "form_2s": "ahorcaras",
  "form_3s": "ahorcara",
  "form_1p": "ahorcáramos",
  "form_2p": "ahorcarais",
  "form_3p": "ahorcaran",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will hang",
  "form_1s": "ahorcare",
  "form_2s": "ahorcares",
  "form_3s": "ahorcare",
  "form_1p": "ahorcáremos",
  "form_2p": "ahorcareis",
  "form_3p": "ahorcaren",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have hanged, hanged",
  "form_1s": "haya ahorcado",
  "form_2s": "hayas ahorcado",
  "form_3s": "haya ahorcado",
  "form_1p": "hayamos ahorcado",
  "form_2p": "hayáis ahorcado",
  "form_3p": "hayan ahorcado",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have hanged",
  "form_1s": "hubiere ahorcado",
  "form_2s": "hubieres ahorcado",
  "form_3s": "hubiere ahorcado",
  "form_1p": "hubiéremos ahorcado",
  "form_2p": "hubiereis ahorcado",
  "form_3p": "hubieren ahorcado",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had hanged",
  "form_1s": "hubiera ahorcado",
  "form_2s": "hubieras ahorcado",
  "form_3s": "hubiera ahorcado",
  "form_1p": "hubiéramos ahorcado",
  "form_2p": "hubierais ahorcado",
  "form_3p": "hubieran ahorcado",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Hang! Don't hang!",
  "form_1s": "",
  "form_2s": "ahorca",
  "form_3s": "ahorcad",
  "form_1p": "",
  "form_2p": "ahorque",
  "form_3p": "ahorquen",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorcar",
  "infinitive_english": "to hang",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Hang! Don't hang!",
  "form_1s": "",
  "form_2s": "no ahorques",
  "form_3s": "no ahorquéis",
  "form_1p": "",
  "form_2p": "no ahorque",
  "form_3p": "no ahorquen",
  "gerund": "ahorcando",
  "gerund_english": "hanging",
  "pastparticiple": "ahorcado",
  "pastparticiple_english": "hanged"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I save, am saving",
  "form_1s": "ahorro",
  "form_2s": "ahorras",
  "form_3s": "ahorra",
  "form_1p": "ahorramos",
  "form_2p": "ahorráis",
  "form_3p": "ahorran",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will save",
  "form_1s": "ahorraré",
  "form_2s": "ahorrarás",
  "form_3s": "ahorrará",
  "form_1p": "ahorraremos",
  "form_2p": "ahorraréis",
  "form_3p": "ahorrarán",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was saving, used to save, saved",
  "form_1s": "ahorraba",
  "form_2s": "ahorrabas",
  "form_3s": "ahorraba",
  "form_1p": "ahorrábamos",
  "form_2p": "ahorrabais",
  "form_3p": "ahorraban",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I saved",
  "form_1s": "ahorré",
  "form_2s": "ahorraste",
  "form_3s": "ahorró",
  "form_1p": "ahorramos",
  "form_2p": "ahorrasteis",
  "form_3p": "ahorraron",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would save",
  "form_1s": "ahorraría",
  "form_2s": "ahorrarías",
  "form_3s": "ahorraría",
  "form_1p": "ahorraríamos",
  "form_2p": "ahorraríais",
  "form_3p": "ahorrarían",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have saved",
  "form_1s": "he ahorrado",
  "form_2s": "has ahorrado",
  "form_3s": "ha ahorrado",
  "form_1p": "hemos ahorrado",
  "form_2p": "habéis ahorrado",
  "form_3p": "han ahorrado",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have saved",
  "form_1s": "habré ahorrado",
  "form_2s": "habrás ahorrado",
  "form_3s": "habrá ahorrado",
  "form_1p": "habremos ahorrado",
  "form_2p": "habréis ahorrado",
  "form_3p": "habrán ahorrado",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had saved",
  "form_1s": "había ahorrado",
  "form_2s": "habías ahorrado",
  "form_3s": "había ahorrado",
  "form_1p": "habíamos ahorrado",
  "form_2p": "habíais ahorrado",
  "form_3p": "habían ahorrado",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had saved",
  "form_1s": "hube ahorrado",
  "form_2s": "hubiste ahorrado",
  "form_3s": "hubo ahorrado",
  "form_1p": "hubimos ahorrado",
  "form_2p": "hubisteis ahorrado",
  "form_3p": "hubieron ahorrado",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have saved",
  "form_1s": "habría ahorrado",
  "form_2s": "habrías ahorrado",
  "form_3s": "habría ahorrado",
  "form_1p": "habríamos ahorrado",
  "form_2p": "habríais ahorrado",
  "form_3p": "habrían ahorrado",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I save, am saving",
  "form_1s": "ahorre",
  "form_2s": "ahorres",
  "form_3s": "ahorre",
  "form_1p": "ahorremos",
  "form_2p": "ahorréis",
  "form_3p": "ahorren",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I saved, was saving",
  "form_1s": "ahorrara",
  "form_2s": "ahorraras",
  "form_3s": "ahorrara",
  "form_1p": "ahorráramos",
  "form_2p": "ahorrarais",
  "form_3p": "ahorraran",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will save",
  "form_1s": "ahorrare",
  "form_2s": "ahorrares",
  "form_3s": "ahorrare",
  "form_1p": "ahorráremos",
  "form_2p": "ahorrareis",
  "form_3p": "ahorraren",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have saved, saved",
  "form_1s": "haya ahorrado",
  "form_2s": "hayas ahorrado",
  "form_3s": "haya ahorrado",
  "form_1p": "hayamos ahorrado",
  "form_2p": "hayáis ahorrado",
  "form_3p": "hayan ahorrado",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have saved",
  "form_1s": "hubiere ahorrado",
  "form_2s": "hubieres ahorrado",
  "form_3s": "hubiere ahorrado",
  "form_1p": "hubiéremos ahorrado",
  "form_2p": "hubiereis ahorrado",
  "form_3p": "hubieren ahorrado",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had saved",
  "form_1s": "hubiera ahorrado",
  "form_2s": "hubieras ahorrado",
  "form_3s": "hubiera ahorrado",
  "form_1p": "hubiéramos ahorrado",
  "form_2p": "hubierais ahorrado",
  "form_3p": "hubieran ahorrado",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Save! Don't save!",
  "form_1s": "",
  "form_2s": "ahorra",
  "form_3s": "ahorrad",
  "form_1p": "",
  "form_2p": "ahorre",
  "form_3p": "ahorren",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "ahorrar",
  "infinitive_english": "to save",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Save! Don't save!",
  "form_1s": "",
  "form_2s": "no ahorres",
  "form_3s": "no ahorréis",
  "form_1p": "",
  "form_2p": "no ahorre",
  "form_3p": "no ahorren",
  "gerund": "ahorrando",
  "gerund_english": "saving",
  "pastparticiple": "ahorrado",
  "pastparticiple_english": "saved"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I reach, am reaching",
  "form_1s": "alcanzo",
  "form_2s": "alcanzas",
  "form_3s": "alcanza",
  "form_1p": "alcanzamos",
  "form_2p": "alcanzáis",
  "form_3p": "alcanzan",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will reach",
  "form_1s": "alcanzaré",
  "form_2s": "alcanzarás",
  "form_3s": "alcanzará",
  "form_1p": "alcanzaremos",
  "form_2p": "alcanzaréis",
  "form_3p": "alcanzarán",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was reaching, used to reach, reached",
  "form_1s": "alcanzaba",
  "form_2s": "alcanzabas",
  "form_3s": "alcanzaba",
  "form_1p": "alcanzábamos",
  "form_2p": "alcanzabais",
  "form_3p": "alcanzaban",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I reached",
  "form_1s": "alcancé",
  "form_2s": "alcanzaste",
  "form_3s": "alcanzó",
  "form_1p": "alcanzamos",
  "form_2p": "alcanzasteis",
  "form_3p": "alcanzaron",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would reach",
  "form_1s": "alcanzaría",
  "form_2s": "alcanzarías",
  "form_3s": "alcanzaría",
  "form_1p": "alcanzaríamos",
  "form_2p": "alcanzaríais",
  "form_3p": "alcanzarían",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have reached",
  "form_1s": "he alcanzado",
  "form_2s": "has alcanzado",
  "form_3s": "ha alcanzado",
  "form_1p": "hemos alcanzado",
  "form_2p": "habéis alcanzado",
  "form_3p": "han alcanzado",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have reached",
  "form_1s": "habré alcanzado",
  "form_2s": "habrás alcanzado",
  "form_3s": "habrá alcanzado",
  "form_1p": "habremos alcanzado",
  "form_2p": "habréis alcanzado",
  "form_3p": "habrán alcanzado",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had reached",
  "form_1s": "había alcanzado",
  "form_2s": "habías alcanzado",
  "form_3s": "había alcanzado",
  "form_1p": "habíamos alcanzado",
  "form_2p": "habíais alcanzado",
  "form_3p": "habían alcanzado",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had reached",
  "form_1s": "hube alcanzado",
  "form_2s": "hubiste alcanzado",
  "form_3s": "hubo alcanzado",
  "form_1p": "hubimos alcanzado",
  "form_2p": "hubisteis alcanzado",
  "form_3p": "hubieron alcanzado",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have reached",
  "form_1s": "habría alcanzado",
  "form_2s": "habrías alcanzado",
  "form_3s": "habría alcanzado",
  "form_1p": "habríamos alcanzado",
  "form_2p": "habríais alcanzado",
  "form_3p": "habrían alcanzado",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I reach, am reaching",
  "form_1s": "alcance",
  "form_2s": "alcances",
  "form_3s": "alcance",
  "form_1p": "alcancemos",
  "form_2p": "alcancéis",
  "form_3p": "alcancen",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I reached, was reaching",
  "form_1s": "alcanzara",
  "form_2s": "alcanzaras",
  "form_3s": "alcanzara",
  "form_1p": "alcanzáramos",
  "form_2p": "alcanzarais",
  "form_3p": "alcanzaran",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will reach",
  "form_1s": "alcanzare",
  "form_2s": "alcanzares",
  "form_3s": "alcanzare",
  "form_1p": "alcanzáremos",
  "form_2p": "alcanzareis",
  "form_3p": "alcanzaren",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have reached, reached",
  "form_1s": "haya alcanzado",
  "form_2s": "hayas alcanzado",
  "form_3s": "haya alcanzado",
  "form_1p": "hayamos alcanzado",
  "form_2p": "hayáis alcanzado",
  "form_3p": "hayan alcanzado",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have reached",
  "form_1s": "hubiere alcanzado",
  "form_2s": "hubieres alcanzado",
  "form_3s": "hubiere alcanzado",
  "form_1p": "hubiéremos alcanzado",
  "form_2p": "hubiereis alcanzado",
  "form_3p": "hubieren alcanzado",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had reached",
  "form_1s": "hubiera alcanzado",
  "form_2s": "hubieras alcanzado",
  "form_3s": "hubiera alcanzado",
  "form_1p": "hubiéramos alcanzado",
  "form_2p": "hubierais alcanzado",
  "form_3p": "hubieran alcanzado",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Reach! Don't reach!",
  "form_1s": "",
  "form_2s": "alcanza",
  "form_3s": "alcanzad",
  "form_1p": "",
  "form_2p": "alcance",
  "form_3p": "alcancen",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alcanzar",
  "infinitive_english": "to reach, catch, catch up to, catch up with",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Reach! Don't reach!",
  "form_1s": "",
  "form_2s": "no alcances",
  "form_3s": "no alcancéis",
  "form_1p": "",
  "form_2p": "no alcance",
  "form_3p": "no alcancen",
  "gerund": "alcanzando",
  "gerund_english": "reaching",
  "pastparticiple": "alcanzado",
  "pastparticiple_english": "reached"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I make happy, am making happy",
  "form_1s": "alegro",
  "form_2s": "alegras",
  "form_3s": "alegra",
  "form_1p": "alegramos",
  "form_2p": "alegráis",
  "form_3p": "alegran",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will make happy",
  "form_1s": "alegraré",
  "form_2s": "alegrarás",
  "form_3s": "alegrará",
  "form_1p": "alegraremos",
  "form_2p": "alegraréis",
  "form_3p": "alegrarán",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was making happy, used to make happy, made happy",
  "form_1s": "alegraba",
  "form_2s": "alegrabas",
  "form_3s": "alegraba",
  "form_1p": "alegrábamos",
  "form_2p": "alegrabais",
  "form_3p": "alegraban",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I made happy",
  "form_1s": "alegré",
  "form_2s": "alegraste",
  "form_3s": "alegró",
  "form_1p": "alegramos",
  "form_2p": "alegrasteis",
  "form_3p": "alegraron",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would make happy",
  "form_1s": "alegraría",
  "form_2s": "alegrarías",
  "form_3s": "alegraría",
  "form_1p": "alegraríamos",
  "form_2p": "alegraríais",
  "form_3p": "alegrarían",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have made happy",
  "form_1s": "he alegrado",
  "form_2s": "has alegrado",
  "form_3s": "ha alegrado",
  "form_1p": "hemos alegrado",
  "form_2p": "habéis alegrado",
  "form_3p": "han alegrado",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have made happy",
  "form_1s": "habré alegrado",
  "form_2s": "habrás alegrado",
  "form_3s": "habrá alegrado",
  "form_1p": "habremos alegrado",
  "form_2p": "habréis alegrado",
  "form_3p": "habrán alegrado",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had made happy",
  "form_1s": "había alegrado",
  "form_2s": "habías alegrado",
  "form_3s": "había alegrado",
  "form_1p": "habíamos alegrado",
  "form_2p": "habíais alegrado",
  "form_3p": "habían alegrado",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had made happy",
  "form_1s": "hube alegrado",
  "form_2s": "hubiste alegrado",
  "form_3s": "hubo alegrado",
  "form_1p": "hubimos alegrado",
  "form_2p": "hubisteis alegrado",
  "form_3p": "hubieron alegrado",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have made happy",
  "form_1s": "habría alegrado",
  "form_2s": "habrías alegrado",
  "form_3s": "habría alegrado",
  "form_1p": "habríamos alegrado",
  "form_2p": "habríais alegrado",
  "form_3p": "habrían alegrado",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I make happy, am making happy",
  "form_1s": "alegre",
  "form_2s": "alegres",
  "form_3s": "alegre",
  "form_1p": "alegremos",
  "form_2p": "alegréis",
  "form_3p": "alegren",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I made happy, was making happy",
  "form_1s": "alegrara",
  "form_2s": "alegraras",
  "form_3s": "alegrara",
  "form_1p": "alegráramos",
  "form_2p": "alegrarais",
  "form_3p": "alegraran",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will make happy",
  "form_1s": "alegrare",
  "form_2s": "alegrares",
  "form_3s": "alegrare",
  "form_1p": "alegráremos",
  "form_2p": "alegrareis",
  "form_3p": "alegraren",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have made happy, made happy",
  "form_1s": "haya alegrado",
  "form_2s": "hayas alegrado",
  "form_3s": "haya alegrado",
  "form_1p": "hayamos alegrado",
  "form_2p": "hayáis alegrado",
  "form_3p": "hayan alegrado",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have made happy",
  "form_1s": "hubiere alegrado",
  "form_2s": "hubieres alegrado",
  "form_3s": "hubiere alegrado",
  "form_1p": "hubiéremos alegrado",
  "form_2p": "hubiereis alegrado",
  "form_3p": "hubieren alegrado",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had made happy",
  "form_1s": "hubiera alegrado",
  "form_2s": "hubieras alegrado",
  "form_3s": "hubiera alegrado",
  "form_1p": "hubiéramos alegrado",
  "form_2p": "hubierais alegrado",
  "form_3p": "hubieran alegrado",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Make happy! Don't make happy!",
  "form_1s": "",
  "form_2s": "alegra",
  "form_3s": "alegrad",
  "form_1p": "",
  "form_2p": "alegre",
  "form_3p": "alegren",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrar",
  "infinitive_english": "to make happy, cheer [up], gladden",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Make happy! Don't make happy!",
  "form_1s": "",
  "form_2s": "no alegres",
  "form_3s": "no alegréis",
  "form_1p": "",
  "form_2p": "no alegre",
  "form_3p": "no alegren",
  "gerund": "alegrando",
  "gerund_english": "making happy",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "made happy"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am glad",
  "form_1s": "me alegro",
  "form_2s": "te alegras",
  "form_3s": "se alegra",
  "form_1p": "nos alegramos",
  "form_2p": "os alegráis",
  "form_3p": "se alegran",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be glad",
  "form_1s": "me alegraré",
  "form_2s": "te alegrarás",
  "form_3s": "se alegrará",
  "form_1p": "nos alegraremos",
  "form_2p": "os alegraréis",
  "form_3p": "se alegrarán",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was glad, used to be glad",
  "form_1s": "me alegraba",
  "form_2s": "te alegrabas",
  "form_3s": "se alegraba",
  "form_1p": "nos alegrábamos",
  "form_2p": "os alegrabais",
  "form_3p": "se alegraban",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I was glad",
  "form_1s": "me alegré",
  "form_2s": "te alegraste",
  "form_3s": "se alegró",
  "form_1p": "nos alegramos",
  "form_2p": "alegrasteis",
  "form_3p": "se alegraron",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would be glad",
  "form_1s": "me alegraría",
  "form_2s": "te alegrarías",
  "form_3s": "se alegraría",
  "form_1p": "nos alegraríamos",
  "form_2p": "os alegraríais",
  "form_3p": "se alegrarían",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been glad",
  "form_1s": "me he alegrado",
  "form_2s": "te has alegrado",
  "form_3s": "se ha alegrado",
  "form_1p": "nos hemos alegrado",
  "form_2p": "os habéis alegrado",
  "form_3p": "se han alegrado",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been glad",
  "form_1s": "me habré alegrado",
  "form_2s": "te habrás alegrado",
  "form_3s": "se habrá alegrado",
  "form_1p": "nos habremos alegrado",
  "form_2p": "os habréis alegrado",
  "form_3p": "se habrán alegrado",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been glad",
  "form_1s": "me había alegrado",
  "form_2s": "te habías alegrado",
  "form_3s": "se había alegrado",
  "form_1p": "nos habíamos alegrado",
  "form_2p": "os habíais alegrado",
  "form_3p": "se habían alegrado",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had been glad",
  "form_1s": "me hube alegrado",
  "form_2s": "te hubiste alegrado",
  "form_3s": "se hubo alegrado",
  "form_1p": "nos hubimos alegrado",
  "form_2p": "os hubisteis alegrado",
  "form_3p": "se hubieron alegrado",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have been glad",
  "form_1s": "me habría alegrado",
  "form_2s": "te habrías alegrado",
  "form_3s": "se habría alegrado",
  "form_1p": "nos habríamos alegrado",
  "form_2p": "os habríais alegrado",
  "form_3p": "se habrían alegrado",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I be glad",
  "form_1s": "me alegre",
  "form_2s": "te alegres",
  "form_3s": "se alegre",
  "form_1p": "nos alegremos",
  "form_2p": "os alegréis",
  "form_3p": "se alegren",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was glad",
  "form_1s": "me alegrara",
  "form_2s": "te alegraras",
  "form_3s": "se alegrara",
  "form_1p": "nos alegráramos",
  "form_2p": "os alegrarais",
  "form_3p": "se alegraran",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be glad",
  "form_1s": "me alegrare",
  "form_2s": "te alegrares",
  "form_3s": "se alegrare",
  "form_1p": "nos alegráremos",
  "form_2p": "os alegrareis",
  "form_3p": "se alegraren",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been glad, was glad",
  "form_1s": "me haya alegrado",
  "form_2s": "te hayas alegrado",
  "form_3s": "se haya alegrado",
  "form_1p": "nos hayamos alegrado",
  "form_2p": "os hayáis alegrado",
  "form_3p": "se hayan alegrado",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been glad",
  "form_1s": "me hubiere alegrado",
  "form_2s": "te hubieres alegrado",
  "form_3s": "se hubiere alegrado",
  "form_1p": "nos hubiéremos alegrado",
  "form_2p": "os hubiereis alegrado",
  "form_3p": "se hubieren alegrado",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been glad",
  "form_1s": "me hubiera alegrado",
  "form_2s": "te hubieras alegrado",
  "form_3s": "se hubiera alegrado",
  "form_1p": "nos hubiéramos alegrado",
  "form_2p": "os hubierais alegrado",
  "form_3p": "se hubieran alegrado",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be glad! Don't be glad!",
  "form_1s": "",
  "form_2s": "alégrate",
  "form_3s": "alegraos",
  "form_1p": "",
  "form_2p": "alégrese",
  "form_3p": "alégrense",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alegrarse",
  "infinitive_english": "to be glad, happy; to become/get happy; to rejoice",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be glad! Don't be glad!",
  "form_1s": "",
  "form_2s": "no te alegres",
  "form_3s": "no os alegréis",
  "form_1p": "",
  "form_2p": "no se alegre",
  "form_3p": "no se alegren",
  "gerund": "alegrándose",
  "gerund_english": "being glad",
  "pastparticiple": "alegrado",
  "pastparticiple_english": "been glad"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I encourage, am encouraging",
  "form_1s": "aliento",
  "form_2s": "alientas",
  "form_3s": "alienta",
  "form_1p": "alentamos",
  "form_2p": "alentáis",
  "form_3p": "alientan",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will encourage",
  "form_1s": "alentaré",
  "form_2s": "alentarás",
  "form_3s": "alentará",
  "form_1p": "alentaremos",
  "form_2p": "alentaréis",
  "form_3p": "alentarán",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was encouraging, used to encourage, encouraged",
  "form_1s": "alentaba",
  "form_2s": "alentabas",
  "form_3s": "alentaba",
  "form_1p": "alentábamos",
  "form_2p": "alentabais",
  "form_3p": "alentaban",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I encouraged",
  "form_1s": "alenté",
  "form_2s": "alentaste",
  "form_3s": "alentó",
  "form_1p": "alentamos",
  "form_2p": "alentasteis",
  "form_3p": "alentaron",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would encourage",
  "form_1s": "alentaría",
  "form_2s": "alentarías",
  "form_3s": "alentaría",
  "form_1p": "alentaríamos",
  "form_2p": "alentaríais",
  "form_3p": "alentarían",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have encouraged",
  "form_1s": "he alentado",
  "form_2s": "has alentado",
  "form_3s": "ha alentado",
  "form_1p": "hemos alentado",
  "form_2p": "habéis alentado",
  "form_3p": "han alentado",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have encouraged",
  "form_1s": "habré alentado",
  "form_2s": "habrás alentado",
  "form_3s": "habrá alentado",
  "form_1p": "habremos alentado",
  "form_2p": "habréis alentado",
  "form_3p": "habrán alentado",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had encouraged",
  "form_1s": "había alentado",
  "form_2s": "habías alentado",
  "form_3s": "había alentado",
  "form_1p": "habíamos alentado",
  "form_2p": "habíais alentado",
  "form_3p": "habían alentado",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had encouraged",
  "form_1s": "hube alentado",
  "form_2s": "hubiste alentado",
  "form_3s": "hubo alentado",
  "form_1p": "hubimos alentado",
  "form_2p": "hubisteis alentado",
  "form_3p": "hubieron alentado",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have encouraged",
  "form_1s": "habría alentado",
  "form_2s": "habrías alentado",
  "form_3s": "habría alentado",
  "form_1p": "habríamos alentado",
  "form_2p": "habríais alentado",
  "form_3p": "habrían alentado",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I encourage, am encouraging",
  "form_1s": "aliente",
  "form_2s": "alientes",
  "form_3s": "aliente",
  "form_1p": "alentemos",
  "form_2p": "alentéis",
  "form_3p": "alienten",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I encouraged, was encouraging",
  "form_1s": "alentara",
  "form_2s": "alentaras",
  "form_3s": "alentara",
  "form_1p": "alentáramos",
  "form_2p": "alentarais",
  "form_3p": "alentaran",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will encourage",
  "form_1s": "alentare",
  "form_2s": "alentares",
  "form_3s": "alentare",
  "form_1p": "alentáremos",
  "form_2p": "alentareis",
  "form_3p": "alentaren",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have encouraged, encouraged",
  "form_1s": "haya alentado",
  "form_2s": "hayas alentado",
  "form_3s": "haya alentado",
  "form_1p": "hayamos alentado",
  "form_2p": "hayáis alentado",
  "form_3p": "hayan alentado",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have encouraged",
  "form_1s": "hubiere alentado",
  "form_2s": "hubieres alentado",
  "form_3s": "hubiere alentado",
  "form_1p": "hubiéremos alentado",
  "form_2p": "hubiereis alentado",
  "form_3p": "hubieren alentado",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had encouraged",
  "form_1s": "hubiera alentado",
  "form_2s": "hubieras alentado",
  "form_3s": "hubiera alentado",
  "form_1p": "hubiéramos alentado",
  "form_2p": "hubierais alentado",
  "form_3p": "hubieran alentado",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Encourage! Don't encourage!",
  "form_1s": "",
  "form_2s": "alienta",
  "form_3s": "alentad",
  "form_1p": "",
  "form_2p": "aliente",
  "form_3p": "alienten",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "alentar",
  "infinitive_english": "to encourage, cheer, inspire, bolster up",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Encourage! Don't encourage!",
  "form_1s": "",
  "form_2s": "no alientes",
  "form_3s": "no alentéis",
  "form_1p": "",
  "form_2p": "no aliente",
  "form_3p": "no alienten",
  "gerund": "alentando",
  "gerund_english": "encouraging",
  "pastparticiple": "alentado",
  "pastparticiple_english": "encouraged"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I alleviate, am alleviating",
  "form_1s": "alivio",
  "form_2s": "alivias",
  "form_3s": "alivia",
  "form_1p": "aliviamos",
  "form_2p": "aliviáis",
  "form_3p": "alivian",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will alleviate",
  "form_1s": "aliviaré",
  "form_2s": "aliviarás",
  "form_3s": "aliviará",
  "form_1p": "aliviaremos",
  "form_2p": "aliviaréis",
  "form_3p": "aliviarán",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was alleviating, used to alleviate, alleviated",
  "form_1s": "aliviaba",
  "form_2s": "aliviabas",
  "form_3s": "aliviaba",
  "form_1p": "aliviábamos",
  "form_2p": "aliviabais",
  "form_3p": "aliviaban",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I alleviated",
  "form_1s": "alivié",
  "form_2s": "aliviaste",
  "form_3s": "alivió",
  "form_1p": "aliviamos",
  "form_2p": "aliviasteis",
  "form_3p": "aliviaron",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would alleviate",
  "form_1s": "aliviaría",
  "form_2s": "aliviarías",
  "form_3s": "aliviaría",
  "form_1p": "aliviaríamos",
  "form_2p": "aliviaríais",
  "form_3p": "aliviarían",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have alleviated",
  "form_1s": "he aliviado",
  "form_2s": "has aliviado",
  "form_3s": "ha aliviado",
  "form_1p": "hemos aliviado",
  "form_2p": "habéis aliviado",
  "form_3p": "han aliviado",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have alleviated",
  "form_1s": "habré aliviado",
  "form_2s": "habrás aliviado",
  "form_3s": "habrá aliviado",
  "form_1p": "habremos aliviado",
  "form_2p": "habréis aliviado",
  "form_3p": "habrán aliviado",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had alleviated",
  "form_1s": "había aliviado",
  "form_2s": "habías aliviado",
  "form_3s": "había aliviado",
  "form_1p": "habíamos aliviado",
  "form_2p": "habíais aliviado",
  "form_3p": "habían aliviado",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had alleviated",
  "form_1s": "hube aliviado",
  "form_2s": "hubiste aliviado",
  "form_3s": "hubo aliviado",
  "form_1p": "hubimos aliviado",
  "form_2p": "hubisteis aliviado",
  "form_3p": "hubieron aliviado",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have alleviated",
  "form_1s": "habría aliviado",
  "form_2s": "habrías aliviado",
  "form_3s": "habría aliviado",
  "form_1p": "habríamos aliviado",
  "form_2p": "habríais aliviado",
  "form_3p": "habrían aliviado",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I alleviate, am alleviating",
  "form_1s": "alivie",
  "form_2s": "alivies",
  "form_3s": "alivie",
  "form_1p": "aliviemos",
  "form_2p": "aliviéis",
  "form_3p": "alivien",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I alleviated, was alleviating",
  "form_1s": "aliviara",
  "form_2s": "aliviaras",
  "form_3s": "aliviara",
  "form_1p": "aliviáramos",
  "form_2p": "aliviarais",
  "form_3p": "aliviaran",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will alleviate",
  "form_1s": "aliviare",
  "form_2s": "aliviares",
  "form_3s": "aliviare",
  "form_1p": "aliviáremos",
  "form_2p": "aliviareis",
  "form_3p": "aliviaren",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have alleviated, alleviated",
  "form_1s": "haya aliviado",
  "form_2s": "hayas aliviado",
  "form_3s": "haya aliviado",
  "form_1p": "hayamos aliviado",
  "form_2p": "hayáis aliviado",
  "form_3p": "hayan aliviado",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have alleviated",
  "form_1s": "hubiere aliviado",
  "form_2s": "hubieres aliviado",
  "form_3s": "hubiere aliviado",
  "form_1p": "hubiéremos aliviado",
  "form_2p": "hubiereis aliviado",
  "form_3p": "hubieren aliviado",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had alleviated",
  "form_1s": "hubiera aliviado",
  "form_2s": "hubieras aliviado",
  "form_3s": "hubiera aliviado",
  "form_1p": "hubiéramos aliviado",
  "form_2p": "hubierais aliviado",
  "form_3p": "hubieran aliviado",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Alleviate! Don't alleviate!",
  "form_1s": "",
  "form_2s": "alivia",
  "form_3s": "aliviad",
  "form_1p": "",
  "form_2p": "alivie",
  "form_3p": "alivien",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "aliviar",
  "infinitive_english": "to alleviate, ease, lessen, lighthen, relieve",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Alleviate! Don't alleviate!",
  "form_1s": "",
  "form_2s": "no alivies",
  "form_3s": "no aliviéis",
  "form_1p": "",
  "form_2p": "no alivie",
  "form_3p": "no alivien",
  "gerund": "aliviando",
  "gerund_english": "alleviating",
  "pastparticiple": "aliviado",
  "pastparticiple_english": "alleviated"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I lunch, am lunching",
  "form_1s": "almuerzo",
  "form_2s": "almuerzas",
  "form_3s": "almuerza",
  "form_1p": "almorzamos",
  "form_2p": "almorzáis",
  "form_3p": "almuerzan",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will lunch",
  "form_1s": "almorzaré",
  "form_2s": "almorzarás",
  "form_3s": "almorzará",
  "form_1p": "almorzaremos",
  "form_2p": "almorzaréis",
  "form_3p": "almorzarán",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was lunching, used to lunch, lunched",
  "form_1s": "almorzaba",
  "form_2s": "almorzabas",
  "form_3s": "almorzaba",
  "form_1p": "almorzábamos",
  "form_2p": "almorzabais",
  "form_3p": "almorzaban",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I lunched",
  "form_1s": "almorcé",
  "form_2s": "almorzaste",
  "form_3s": "almorzó",
  "form_1p": "almorzamos",
  "form_2p": "almorzasteis",
  "form_3p": "almorzaron",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would lunch",
  "form_1s": "almorzaría",
  "form_2s": "almorzarías",
  "form_3s": "almorzaría",
  "form_1p": "almorzaríamos",
  "form_2p": "almorzaríais",
  "form_3p": "almorzarían",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have lunched",
  "form_1s": "he almorzado",
  "form_2s": "has almorzado",
  "form_3s": "ha almorzado",
  "form_1p": "hemos almorzado",
  "form_2p": "habéis almorzado",
  "form_3p": "han almorzado",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have lunched",
  "form_1s": "habré almorzado",
  "form_2s": "habrás almorzado",
  "form_3s": "habrá almorzado",
  "form_1p": "habremos almorzado",
  "form_2p": "habréis almorzado",
  "form_3p": "habrán almorzado",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had lunched",
  "form_1s": "había almorzado",
  "form_2s": "habías almorzado",
  "form_3s": "había almorzado",
  "form_1p": "habíamos almorzado",
  "form_2p": "habíais almorzado",
  "form_3p": "habían almorzado",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had lunched",
  "form_1s": "hube almorzado",
  "form_2s": "hubiste almorzado",
  "form_3s": "hubo almorzado",
  "form_1p": "hubimos almorzado",
  "form_2p": "hubisteis almorzado",
  "form_3p": "hubieron almorzado",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have lunched",
  "form_1s": "habría almorzado",
  "form_2s": "habrías almorzado",
  "form_3s": "habría almorzado",
  "form_1p": "habríamos almorzado",
  "form_2p": "habríais almorzado",
  "form_3p": "habrían almorzado",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I lunch, am lunching",
  "form_1s": "almuerce",
  "form_2s": "almuerces",
  "form_3s": "almuerce",
  "form_1p": "almorcemos",
  "form_2p": "almorcéis",
  "form_3p": "almuercen",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I lunched, was lunching",
  "form_1s": "almorzara",
  "form_2s": "almorzaras",
  "form_3s": "almorzara",
  "form_1p": "almorzáramos",
  "form_2p": "almorzarais",
  "form_3p": "almorzaran",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will lunch",
  "form_1s": "almorzare",
  "form_2s": "almorzares",
  "form_3s": "almorzare",
  "form_1p": "almorzáremos",
  "form_2p": "almorzareis",
  "form_3p": "almorzaren",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have lunched, lunched",
  "form_1s": "haya almorzado",
  "form_2s": "hayas almorzado",
  "form_3s": "haya almorzado",
  "form_1p": "hayamos almorzado",
  "form_2p": "hayáis almorzado",
  "form_3p": "hayan almorzado",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have lunched",
  "form_1s": "hubiere almorzado",
  "form_2s": "hubieres almorzado",
  "form_3s": "hubiere almorzado",
  "form_1p": "hubiéremos almorzado",
  "form_2p": "hubiereis almorzado",
  "form_3p": "hubieren almorzado",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had lunched",
  "form_1s": "hubiera almorzado",
  "form_2s": "hubieras almorzado",
  "form_3s": "hubiera almorzado",
  "form_1p": "hubiéramos almorzado",
  "form_2p": "hubierais almorzado",
  "form_3p": "hubieran almorzado",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "lunch! Don't lunch!",
  "form_1s": "",
  "form_2s": "almuerza",
  "form_3s": "almorzad",
  "form_1p": "",
  "form_2p": "almuerce",
  "form_3p": "almuercen",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "almorzar",
  "infinitive_english": "to lunch, eat lunch, have lunch",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "lunch! Don't lunch!",
  "form_1s": "",
  "form_2s": "no almuerces",
  "form_3s": "no almorcéis",
  "form_1p": "",
  "form_2p": "no almuerce",
  "form_3p": "no almuercen",
  "gerund": "almorzando",
  "gerund_english": "lunching",
  "pastparticiple": "almorzado",
  "pastparticiple_english": "lunched"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I rent, am renting",
  "form_1s": "alquilo",
  "form_2s": "alquilas",
  "form_3s": "alquila",
  "form_1p": "alquilamos",
  "form_2p": "alquiláis",
  "form_3p": "alquilan",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will rent",
  "form_1s": "alquilaré",
  "form_2s": "alquilarás",
  "form_3s": "alquilará",
  "form_1p": "alquilaremos",
  "form_2p": "alquilaréis",
  "form_3p": "alquilarán",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was renting, used to rent, rented",
  "form_1s": "alquilaba",
  "form_2s": "alquilabas",
  "form_3s": "alquilaba",
  "form_1p": "alquilábamos",
  "form_2p": "alquilabais",
  "form_3p": "alquilaban",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I rented",
  "form_1s": "alquilé",
  "form_2s": "alquilaste",
  "form_3s": "alquiló",
  "form_1p": "alquilamos",
  "form_2p": "alquilasteis",
  "form_3p": "alquilaron",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would rent",
  "form_1s": "alquilaría",
  "form_2s": "alquilarías",
  "form_3s": "alquilaría",
  "form_1p": "alquilaríamos",
  "form_2p": "alquilaríais",
  "form_3p": "alquilarían",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have rented",
  "form_1s": "he alquilado",
  "form_2s": "has alquilado",
  "form_3s": "ha alquilado",
  "form_1p": "hemos alquilado",
  "form_2p": "habéis alquilado",
  "form_3p": "han alquilado",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have rented",
  "form_1s": "habré alquilado",
  "form_2s": "habrás alquilado",
  "form_3s": "habrá alquilado",
  "form_1p": "habremos alquilado",
  "form_2p": "habréis alquilado",
  "form_3p": "habrán alquilado",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had rented",
  "form_1s": "había alquilado",
  "form_2s": "habías alquilado",
  "form_3s": "había alquilado",
  "form_1p": "habíamos alquilado",
  "form_2p": "habíais alquilado",
  "form_3p": "habían alquilado",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had rented",
  "form_1s": "hube alquilado",
  "form_2s": "hubiste alquilado",
  "form_3s": "hubo alquilado",
  "form_1p": "hubimos alquilado",
  "form_2p": "hubisteis alquilado",
  "form_3p": "hubieron alquilado",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have rented",
  "form_1s": "habría alquilado",
  "form_2s": "habrías alquilado",
  "form_3s": "habría alquilado",
  "form_1p": "habríamos alquilado",
  "form_2p": "habríais alquilado",
  "form_3p": "habrían alquilado",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I rent, am renting",
  "form_1s": "alquile",
  "form_2s": "alquiles",
  "form_3s": "alquile",
  "form_1p": "alquilemos",
  "form_2p": "alquiléis",
  "form_3p": "alquilen",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I rented, was renting",
  "form_1s": "alquilara",
  "form_2s": "alquilaras",
  "form_3s": "alquilara",
  "form_1p": "alquiláramos",
  "form_2p": "alquilarais",
  "form_3p": "alquilaran",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will rent",
  "form_1s": "alquilare",
  "form_2s": "alquilares",
  "form_3s": "alquilare",
  "form_1p": "alquiláremos",
  "form_2p": "alquilareis",
  "form_3p": "alquilaren",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have rented, rented",
  "form_1s": "haya alquilado",
  "form_2s": "hayas alquilado",
  "form_3s": "haya alquilado",
  "form_1p": "hayamos alquilado",
  "form_2p": "hayáis alquilado",
  "form_3p": "hayan alquilado",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have rented",
  "form_1s": "hubiere alquilado",
  "form_2s": "hubieres alquilado",
  "form_3s": "hubiere alquilado",
  "form_1p": "hubiéremos alquilado",
  "form_2p": "hubiereis alquilado",
  "form_3p": "hubieren alquilado",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had rented",
  "form_1s": "hubiera alquilado",
  "form_2s": "hubieras alquilado",
  "form_3s": "hubiera alquilado",
  "form_1p": "hubiéramos alquilado",
  "form_2p": "hubierais alquilado",
  "form_3p": "hubieran alquilado",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Rent! Don't rent!",
  "form_1s": "",
  "form_2s": "alquila",
  "form_3s": "alquilad",
  "form_1p": "",
  "form_2p": "alquile",
  "form_3p": "alquilen",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "alquilar",
  "infinitive_english": "to rent; to rent out, let",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Rent! Don't rent!",
  "form_1s": "",
  "form_2s": "no alquiles",
  "form_3s": "no alquiléis",
  "form_1p": "",
  "form_2p": "no alquile",
  "form_3p": "no alquilen",
  "gerund": "alquilando",
  "gerund_english": "renting",
  "pastparticiple": "alquilado",
  "pastparticiple_english": "rented"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I dawn, am dawning",
  "form_1s": "amanezco",
  "form_2s": "amaneces",
  "form_3s": "amanece",
  "form_1p": "amanecemos",
  "form_2p": "amanecéis",
  "form_3p": "amanecen",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will dawn",
  "form_1s": "amaneceré",
  "form_2s": "amanecerás",
  "form_3s": "amanecerá",
  "form_1p": "amaneceremos",
  "form_2p": "amaneceréis",
  "form_3p": "amanecerán",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was dawning, used to dawn, dawned",
  "form_1s": "amanecía",
  "form_2s": "amanecías",
  "form_3s": "amanecía",
  "form_1p": "amanecíamos",
  "form_2p": "amanecíais",
  "form_3p": "amanecían",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I dawned",
  "form_1s": "amanecí",
  "form_2s": "amaneciste",
  "form_3s": "amaneció",
  "form_1p": "amanecimos",
  "form_2p": "amanecisteis",
  "form_3p": "amanecieron",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would dawn",
  "form_1s": "amanecería",
  "form_2s": "amanecerías",
  "form_3s": "amanecería",
  "form_1p": "amaneceríamos",
  "form_2p": "amaneceríais",
  "form_3p": "amanecerían",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have dawned",
  "form_1s": "he amanecido",
  "form_2s": "has amanecido",
  "form_3s": "ha amanecido",
  "form_1p": "hemos amanecido",
  "form_2p": "habéis amanecido",
  "form_3p": "han amanecido",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have dawned",
  "form_1s": "habré amanecido",
  "form_2s": "habrás amanecido",
  "form_3s": "habrá amanecido",
  "form_1p": "habremos amanecido",
  "form_2p": "habréis amanecido",
  "form_3p": "habrán amanecido",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had dawned",
  "form_1s": "había amanecido",
  "form_2s": "habías amanecido",
  "form_3s": "había amanecido",
  "form_1p": "habíamos amanecido",
  "form_2p": "habíais amanecido",
  "form_3p": "habían amanecido",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had dawned",
  "form_1s": "hube amanecido",
  "form_2s": "hubiste amanecido",
  "form_3s": "hubo amanecido",
  "form_1p": "hubimos amanecido",
  "form_2p": "hubisteis amanecido",
  "form_3p": "hubieron amanecido",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have dawned",
  "form_1s": "habría amanecido",
  "form_2s": "habrías amanecido",
  "form_3s": "habría amanecido",
  "form_1p": "habríamos amanecido",
  "form_2p": "habríais amanecido",
  "form_3p": "habrían amanecido",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I dawn, am dawning",
  "form_1s": "amanezca",
  "form_2s": "amanezcas",
  "form_3s": "amanezca",
  "form_1p": "amanezcamos",
  "form_2p": "amanezcáis",
  "form_3p": "amanezcan",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I dawned, was dawning",
  "form_1s": "amaneciera",
  "form_2s": "amanecieras",
  "form_3s": "amaneciera",
  "form_1p": "amaneciéramos",
  "form_2p": "amanecierais",
  "form_3p": "amanecieran",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will dawn",
  "form_1s": "amaneciere",
  "form_2s": "amanecieres",
  "form_3s": "amaneciere",
  "form_1p": "amaneciéremos",
  "form_2p": "amaneciereis",
  "form_3p": "amanecieren",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have dawned, dawned",
  "form_1s": "haya amanecido",
  "form_2s": "hayas amanecido",
  "form_3s": "haya amanecido",
  "form_1p": "hayamos amanecido",
  "form_2p": "hayáis amanecido",
  "form_3p": "hayan amanecido",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have dawned",
  "form_1s": "hubiere amanecido",
  "form_2s": "hubieres amanecido",
  "form_3s": "hubiere amanecido",
  "form_1p": "hubiéremos amanecido",
  "form_2p": "hubiereis amanecido",
  "form_3p": "hubieren amanecido",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had dawned",
  "form_1s": "hubiera amanecido",
  "form_2s": "hubieras amanecido",
  "form_3s": "hubiera amanecido",
  "form_1p": "hubiéramos amanecido",
  "form_2p": "hubierais amanecido",
  "form_3p": "hubieran amanecido",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Dawn! Don't dawn!",
  "form_1s": "",
  "form_2s": "amanece",
  "form_3s": "amaneced",
  "form_1p": "",
  "form_2p": "amanezca",
  "form_3p": "amanezcan",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amanecer",
  "infinitive_english": "to dawn",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Dawn! Don't dawn!",
  "form_1s": "",
  "form_2s": "no amanezcas",
  "form_3s": "no amanezcáis",
  "form_1p": "",
  "form_2p": "no amanezca",
  "form_3p": "no amanezcan",
  "gerund": "amaneciendo",
  "gerund_english": "dawning",
  "pastparticiple": "amanecido",
  "pastparticiple_english": "dawned"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I love, am loving",
  "form_1s": "amo",
  "form_2s": "amas",
  "form_3s": "ama",
  "form_1p": "amamos",
  "form_2p": "amáis",
  "form_3p": "aman",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will love",
  "form_1s": "amaré",
  "form_2s": "amarás",
  "form_3s": "amará",
  "form_1p": "amaremos",
  "form_2p": "amaréis",
  "form_3p": "amarán",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was loving, used to love, loved",
  "form_1s": "amaba",
  "form_2s": "amabas",
  "form_3s": "amaba",
  "form_1p": "amábamos",
  "form_2p": "amabais",
  "form_3p": "amaban",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I loved",
  "form_1s": "amé",
  "form_2s": "amaste",
  "form_3s": "amó",
  "form_1p": "amamos",
  "form_2p": "amasteis",
  "form_3p": "amaron",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would love",
  "form_1s": "amaría",
  "form_2s": "amarías",
  "form_3s": "amaría",
  "form_1p": "amaríamos",
  "form_2p": "amaríais",
  "form_3p": "amarían",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have loved",
  "form_1s": "he amado",
  "form_2s": "has amado",
  "form_3s": "ha amado",
  "form_1p": "hemos amado",
  "form_2p": "habéis amado",
  "form_3p": "han amado",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have loved",
  "form_1s": "habré amado",
  "form_2s": "habrás amado",
  "form_3s": "habrá amado",
  "form_1p": "habremos amado",
  "form_2p": "habréis amado",
  "form_3p": "habrán amado",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had loved",
  "form_1s": "había amado",
  "form_2s": "habías amado",
  "form_3s": "había amado",
  "form_1p": "habíamos amado",
  "form_2p": "habíais amado",
  "form_3p": "habían amado",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had loved",
  "form_1s": "hube amado",
  "form_2s": "hubiste amado",
  "form_3s": "hubo amado",
  "form_1p": "hubimos amado",
  "form_2p": "hubisteis amado",
  "form_3p": "hubieron amado",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have loved",
  "form_1s": "habría amado",
  "form_2s": "habrías amado",
  "form_3s": "habría amado",
  "form_1p": "habríamos amado",
  "form_2p": "habríais amado",
  "form_3p": "habrían amado",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I love, am loving",
  "form_1s": "ame",
  "form_2s": "ames",
  "form_3s": "ame",
  "form_1p": "amemos",
  "form_2p": "améis",
  "form_3p": "amen",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I loved, was loving",
  "form_1s": "amara",
  "form_2s": "amaras",
  "form_3s": "amara",
  "form_1p": "amáramos",
  "form_2p": "amarais",
  "form_3p": "amaran",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will love",
  "form_1s": "amare",
  "form_2s": "amares",
  "form_3s": "amare",
  "form_1p": "amáremos",
  "form_2p": "amareis",
  "form_3p": "amaren",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have loved, loved",
  "form_1s": "haya amado",
  "form_2s": "hayas amado",
  "form_3s": "haya amado",
  "form_1p": "hayamos amado",
  "form_2p": "hayáis amado",
  "form_3p": "hayan amado",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have loved",
  "form_1s": "hubiere amado",
  "form_2s": "hubieres amado",
  "form_3s": "hubiere amado",
  "form_1p": "hubiéremos amado",
  "form_2p": "hubiereis amado",
  "form_3p": "hubieren amado",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had loved",
  "form_1s": "hubiera amado",
  "form_2s": "hubieras amado",
  "form_3s": "hubiera amado",
  "form_1p": "hubiéramos amado",
  "form_2p": "hubierais amado",
  "form_3p": "hubieran amado",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Love! Don't love!",
  "form_1s": "",
  "form_2s": "ama",
  "form_3s": "amad",
  "form_1p": "",
  "form_2p": "ame",
  "form_3p": "amen",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amar",
  "infinitive_english": "to love",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Love! Don't love!",
  "form_1s": "",
  "form_2s": "no ames",
  "form_3s": "no améis",
  "form_1p": "",
  "form_2p": "no ame",
  "form_3p": "no amen",
  "gerund": "amando",
  "gerund_english": "loving",
  "pastparticiple": "amado",
  "pastparticiple_english": "loved"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I threaten, am threatening",
  "form_1s": "amenazo",
  "form_2s": "amenazas",
  "form_3s": "amenaza",
  "form_1p": "amenazamos",
  "form_2p": "amenazáis",
  "form_3p": "amenazan",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will threaten",
  "form_1s": "amenazaré",
  "form_2s": "amenazarás",
  "form_3s": "amenazará",
  "form_1p": "amenazaremos",
  "form_2p": "amenazaréis",
  "form_3p": "amenazarán",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was threatening, used to threaten, threatened",
  "form_1s": "amenazaba",
  "form_2s": "amenazabas",
  "form_3s": "amenazaba",
  "form_1p": "amenazábamos",
  "form_2p": "amenazabais",
  "form_3p": "amenazaban",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I threatened",
  "form_1s": "amenacé",
  "form_2s": "amenazaste",
  "form_3s": "amenazó",
  "form_1p": "amenazamos",
  "form_2p": "amenazasteis",
  "form_3p": "amenazaron",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would threaten",
  "form_1s": "amenazaría",
  "form_2s": "amenazarías",
  "form_3s": "amenazaría",
  "form_1p": "amenazaríamos",
  "form_2p": "amenazaríais",
  "form_3p": "amenazarían",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have threatened",
  "form_1s": "he amenazado",
  "form_2s": "has amenazado",
  "form_3s": "ha amenazado",
  "form_1p": "hemos amenazado",
  "form_2p": "habéis amenazado",
  "form_3p": "han amenazado",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have threatened",
  "form_1s": "habré amenazado",
  "form_2s": "habrás amenazado",
  "form_3s": "habrá amenazado",
  "form_1p": "habremos amenazado",
  "form_2p": "habréis amenazado",
  "form_3p": "habrán amenazado",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had threatened",
  "form_1s": "había amenazado",
  "form_2s": "habías amenazado",
  "form_3s": "había amenazado",
  "form_1p": "habíamos amenazado",
  "form_2p": "habíais amenazado",
  "form_3p": "habían amenazado",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had threatened",
  "form_1s": "hube amenazado",
  "form_2s": "hubiste amenazado",
  "form_3s": "hubo amenazado",
  "form_1p": "hubimos amenazado",
  "form_2p": "hubisteis amenazado",
  "form_3p": "hubieron amenazado",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have threatened",
  "form_1s": "habría amenazado",
  "form_2s": "habrías amenazado",
  "form_3s": "habría amenazado",
  "form_1p": "habríamos amenazado",
  "form_2p": "habríais amenazado",
  "form_3p": "habrían amenazado",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I threaten, am threatening",
  "form_1s": "amenace",
  "form_2s": "amenaces",
  "form_3s": "amenace",
  "form_1p": "amenacemos",
  "form_2p": "amenacéis",
  "form_3p": "amenacen",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I threatened, was threatening",
  "form_1s": "amenazara",
  "form_2s": "amenazaras",
  "form_3s": "amenazara",
  "form_1p": "amenazáramos",
  "form_2p": "amenazarais",
  "form_3p": "amenazaran",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will threaten",
  "form_1s": "amenazare",
  "form_2s": "amenazares",
  "form_3s": "amenazare",
  "form_1p": "amenazáremos",
  "form_2p": "amenazareis",
  "form_3p": "amenazaren",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have threatened, threatened",
  "form_1s": "haya amenazado",
  "form_2s": "hayas amenazado",
  "form_3s": "haya amenazado",
  "form_1p": "hayamos amenazado",
  "form_2p": "hayáis amenazado",
  "form_3p": "hayan amenazado",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have threatened",
  "form_1s": "hubiere amenazado",
  "form_2s": "hubieres amenazado",
  "form_3s": "hubiere amenazado",
  "form_1p": "hubiéremos amenazado",
  "form_2p": "hubiereis amenazado",
  "form_3p": "hubieren amenazado",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had threatened",
  "form_1s": "hubiera amenazado",
  "form_2s": "hubieras amenazado",
  "form_3s": "hubiera amenazado",
  "form_1p": "hubiéramos amenazado",
  "form_2p": "hubierais amenazado",
  "form_3p": "hubieran amenazado",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Threaten! Don't threaten!",
  "form_1s": "",
  "form_2s": "amenaza",
  "form_3s": "amenazad",
  "form_1p": "",
  "form_2p": "amenace",
  "form_3p": "amenacen",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "amenazar",
  "infinitive_english": "to threaten, menace",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Threaten! Don't threaten!",
  "form_1s": "",
  "form_2s": "no amenaces",
  "form_3s": "no amenacéis",
  "form_1p": "",
  "form_2p": "no amenace",
  "form_3p": "no amenacen",
  "gerund": "amenazando",
  "gerund_english": "threatening",
  "pastparticiple": "amenazado",
  "pastparticiple_english": "threatened"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I walk, am walking",
  "form_1s": "ando",
  "form_2s": "andas",
  "form_3s": "anda",
  "form_1p": "andamos",
  "form_2p": "andáis",
  "form_3p": "andan",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will walk",
  "form_1s": "andaré",
  "form_2s": "andarás",
  "form_3s": "andará",
  "form_1p": "andaremos",
  "form_2p": "andaréis",
  "form_3p": "andarán",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was walking, used to walk, walked",
  "form_1s": "andaba",
  "form_2s": "andabas",
  "form_3s": "andaba",
  "form_1p": "andábamos",
  "form_2p": "andabais",
  "form_3p": "andaban",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I walked",
  "form_1s": "anduve",
  "form_2s": "anduviste",
  "form_3s": "anduvo",
  "form_1p": "anduvimos",
  "form_2p": "anduvisteis",
  "form_3p": "anduvieron",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would walk",
  "form_1s": "andaría",
  "form_2s": "andarías",
  "form_3s": "andaría",
  "form_1p": "andaríamos",
  "form_2p": "andaríais",
  "form_3p": "andarían",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have walked",
  "form_1s": "he andado",
  "form_2s": "has andado",
  "form_3s": "ha andado",
  "form_1p": "hemos andado",
  "form_2p": "habéis andado",
  "form_3p": "han andado",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have walked",
  "form_1s": "habré andado",
  "form_2s": "habrás andado",
  "form_3s": "habrá andado",
  "form_1p": "habremos andado",
  "form_2p": "habréis andado",
  "form_3p": "habrán andado",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had walked",
  "form_1s": "había andado",
  "form_2s": "habías andado",
  "form_3s": "había andado",
  "form_1p": "habíamos andado",
  "form_2p": "habíais andado",
  "form_3p": "habían andado",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had walked",
  "form_1s": "hube andado",
  "form_2s": "hubiste andado",
  "form_3s": "hubo andado",
  "form_1p": "hubimos andado",
  "form_2p": "hubisteis andado",
  "form_3p": "hubieron andado",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have walked",
  "form_1s": "habría andado",
  "form_2s": "habrías andado",
  "form_3s": "habría andado",
  "form_1p": "habríamos andado",
  "form_2p": "habríais andado",
  "form_3p": "habrían andado",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I walk, am walking",
  "form_1s": "ande",
  "form_2s": "andes",
  "form_3s": "ande",
  "form_1p": "andemos",
  "form_2p": "andéis",
  "form_3p": "anden",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I walked, was walking",
  "form_1s": "anduviera",
  "form_2s": "anduvieras",
  "form_3s": "anduviera",
  "form_1p": "anduviéramos",
  "form_2p": "anduvierais",
  "form_3p": "anduvieran",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will walk",
  "form_1s": "anduviere",
  "form_2s": "anduvieres",
  "form_3s": "anduviere",
  "form_1p": "anduviéremos",
  "form_2p": "anduviereis",
  "form_3p": "anduvieren",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have walked, walked",
  "form_1s": "haya andado",
  "form_2s": "hayas andado",
  "form_3s": "haya andado",
  "form_1p": "hayamos andado",
  "form_2p": "hayáis andado",
  "form_3p": "hayan andado",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have walked",
  "form_1s": "hubiere andado",
  "form_2s": "hubieres andado",
  "form_3s": "hubiere andado",
  "form_1p": "hubiéremos andado",
  "form_2p": "hubiereis andado",
  "form_3p": "hubieren andado",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had walked",
  "form_1s": "hubiera andado",
  "form_2s": "hubieras andado",
  "form_3s": "hubiera andado",
  "form_1p": "hubiéramos andado",
  "form_2p": "hubierais andado",
  "form_3p": "hubieran andado",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Walk! Don't walk!",
  "form_1s": "",
  "form_2s": "anda",
  "form_3s": "andad",
  "form_1p": "",
  "form_2p": "ande",
  "form_3p": "anden",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "andar",
  "infinitive_english": "to walk, go",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Walk! Don't walk!",
  "form_1s": "",
  "form_2s": "no andes",
  "form_3s": "no andéis",
  "form_1p": "",
  "form_2p": "no ande",
  "form_3p": "no anden",
  "gerund": "andando",
  "gerund_english": "walking",
  "pastparticiple": "andado",
  "pastparticiple_english": "walked"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am eager for",
  "form_1s": "anhelo",
  "form_2s": "anhelas",
  "form_3s": "anhela",
  "form_1p": "anhelamos",
  "form_2p": "anheláis",
  "form_3p": "anhelan",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be eager for",
  "form_1s": "anhelaré",
  "form_2s": "anhelarás",
  "form_3s": "anhelará",
  "form_1p": "anhelaremos",
  "form_2p": "anhelaréis",
  "form_3p": "anhelarán",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was eager for, used to be eager for",
  "form_1s": "anhelaba",
  "form_2s": "anhelabas",
  "form_3s": "anhelaba",
  "form_1p": "anhelábamos",
  "form_2p": "anhelabais",
  "form_3p": "anhelaban",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I was eager for",
  "form_1s": "anhelé",
  "form_2s": "anhelaste",
  "form_3s": "anheló",
  "form_1p": "anhelamos",
  "form_2p": "anhelasteis",
  "form_3p": "anhelaron",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would be eager for",
  "form_1s": "anhelaría",
  "form_2s": "anhelarías",
  "form_3s": "anhelaría",
  "form_1p": "anhelaríamos",
  "form_2p": "anhelaríais",
  "form_3p": "anhelarían",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been eager for",
  "form_1s": "he anhelado",
  "form_2s": "has anhelado",
  "form_3s": "ha anhelado",
  "form_1p": "hemos anhelado",
  "form_2p": "habéis anhelado",
  "form_3p": "han anhelado",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been eager for",
  "form_1s": "habré anhelado",
  "form_2s": "habrás anhelado",
  "form_3s": "habrá anhelado",
  "form_1p": "habremos anhelado",
  "form_2p": "habréis anhelado",
  "form_3p": "habrán anhelado",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been eager for",
  "form_1s": "había anhelado",
  "form_2s": "habías anhelado",
  "form_3s": "había anhelado",
  "form_1p": "habíamos anhelado",
  "form_2p": "habíais anhelado",
  "form_3p": "habían anhelado",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had been eager for",
  "form_1s": "hube anhelado",
  "form_2s": "hubiste anhelado",
  "form_3s": "hubo anhelado",
  "form_1p": "hubimos anhelado",
  "form_2p": "hubisteis anhelado",
  "form_3p": "hubieron anhelado",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have been eager for",
  "form_1s": "habría anhelado",
  "form_2s": "habrías anhelado",
  "form_3s": "habría anhelado",
  "form_1p": "habríamos anhelado",
  "form_2p": "habríais anhelado",
  "form_3p": "habrían anhelado",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am eager for",
  "form_1s": "anhele",
  "form_2s": "anheles",
  "form_3s": "anhele",
  "form_1p": "anhelemos",
  "form_2p": "anheléis",
  "form_3p": "anhelen",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was eager for",
  "form_1s": "anhelara",
  "form_2s": "anhelaras",
  "form_3s": "anhelara",
  "form_1p": "anheláramos",
  "form_2p": "anhelarais",
  "form_3p": "anhelaran",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be eager for",
  "form_1s": "anhelare",
  "form_2s": "anhelares",
  "form_3s": "anhelare",
  "form_1p": "anheláremos",
  "form_2p": "anhelareis",
  "form_3p": "anhelaren",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been eager for",
  "form_1s": "haya anhelado",
  "form_2s": "hayas anhelado",
  "form_3s": "haya anhelado",
  "form_1p": "hayamos anhelado",
  "form_2p": "hayáis anhelado",
  "form_3p": "hayan anhelado",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been eager for",
  "form_1s": "hubiere anhelado",
  "form_2s": "hubieres anhelado",
  "form_3s": "hubiere anhelado",
  "form_1p": "hubiéremos anhelado",
  "form_2p": "hubiereis anhelado",
  "form_3p": "hubieren anhelado",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been eager for",
  "form_1s": "hubiera anhelado",
  "form_2s": "hubieras anhelado",
  "form_3s": "hubiera anhelado",
  "form_1p": "hubiéramos anhelado",
  "form_2p": "hubierais anhelado",
  "form_3p": "hubieran anhelado",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be eager for! Don't be eager for!",
  "form_1s": "",
  "form_2s": "anhela",
  "form_3s": "anhelad",
  "form_1p": "",
  "form_2p": "anhele",
  "form_3p": "anhelen",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anhelar",
  "infinitive_english": "to be eager for/to, long for/to, yearn for/to",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be eager for! Don't be eager for!",
  "form_1s": "",
  "form_2s": "no anheles",
  "form_3s": "no anheléis",
  "form_1p": "",
  "form_2p": "no anhele",
  "form_3p": "no anhelen",
  "gerund": "anhelando",
  "gerund_english": "be eager foring",
  "pastparticiple": "anhelado",
  "pastparticiple_english": "eager for"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I announce, am announcing",
  "form_1s": "anuncio",
  "form_2s": "anuncias",
  "form_3s": "anuncia",
  "form_1p": "anunciamos",
  "form_2p": "anunciáis",
  "form_3p": "anuncian",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will announce",
  "form_1s": "anunciaré",
  "form_2s": "anunciarás",
  "form_3s": "anunciará",
  "form_1p": "anunciaremos",
  "form_2p": "anunciaréis",
  "form_3p": "anunciarán",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was announcing, used to announce, announced",
  "form_1s": "anunciaba",
  "form_2s": "anunciabas",
  "form_3s": "anunciaba",
  "form_1p": "anunciábamos",
  "form_2p": "anunciabais",
  "form_3p": "anunciaban",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I announced",
  "form_1s": "anuncié",
  "form_2s": "anunciaste",
  "form_3s": "anunció",
  "form_1p": "anunciamos",
  "form_2p": "anunciasteis",
  "form_3p": "anunciaron",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would announce",
  "form_1s": "anunciaría",
  "form_2s": "anunciarías",
  "form_3s": "anunciaría",
  "form_1p": "anunciaríamos",
  "form_2p": "anunciaríais",
  "form_3p": "anunciarían",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have announced",
  "form_1s": "he anunciado",
  "form_2s": "has anunciado",
  "form_3s": "ha anunciado",
  "form_1p": "hemos anunciado",
  "form_2p": "habéis anunciado",
  "form_3p": "han anunciado",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have announced",
  "form_1s": "habré anunciado",
  "form_2s": "habrás anunciado",
  "form_3s": "habrá anunciado",
  "form_1p": "habremos anunciado",
  "form_2p": "habréis anunciado",
  "form_3p": "habrán anunciado",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had announced",
  "form_1s": "había anunciado",
  "form_2s": "habías anunciado",
  "form_3s": "había anunciado",
  "form_1p": "habíamos anunciado",
  "form_2p": "habíais anunciado",
  "form_3p": "habían anunciado",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had announced",
  "form_1s": "hube anunciado",
  "form_2s": "hubiste anunciado",
  "form_3s": "hubo anunciado",
  "form_1p": "hubimos anunciado",
  "form_2p": "hubisteis anunciado",
  "form_3p": "hubieron anunciado",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have announced",
  "form_1s": "habría anunciado",
  "form_2s": "habrías anunciado",
  "form_3s": "habría anunciado",
  "form_1p": "habríamos anunciado",
  "form_2p": "habríais anunciado",
  "form_3p": "habrían anunciado",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I announce, am announcing",
  "form_1s": "anuncie",
  "form_2s": "anuncies",
  "form_3s": "anuncie",
  "form_1p": "anunciemos",
  "form_2p": "anunciéis",
  "form_3p": "anuncien",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I announced, was announcing",
  "form_1s": "anunciara",
  "form_2s": "anunciaras",
  "form_3s": "anunciara",
  "form_1p": "anunciáramos",
  "form_2p": "anunciarais",
  "form_3p": "anunciaran",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will announce",
  "form_1s": "anunciare",
  "form_2s": "anunciares",
  "form_3s": "anunciare",
  "form_1p": "anunciáremos",
  "form_2p": "anunciareis",
  "form_3p": "anunciaren",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have announced, announced",
  "form_1s": "haya anunciado",
  "form_2s": "hayas anunciado",
  "form_3s": "haya anunciado",
  "form_1p": "hayamos anunciado",
  "form_2p": "hayáis anunciado",
  "form_3p": "hayan anunciado",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have announced",
  "form_1s": "hubiere anunciado",
  "form_2s": "hubieres anunciado",
  "form_3s": "hubiere anunciado",
  "form_1p": "hubiéremos anunciado",
  "form_2p": "hubiereis anunciado",
  "form_3p": "hubieren anunciado",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had announced",
  "form_1s": "hubiera anunciado",
  "form_2s": "hubieras anunciado",
  "form_3s": "hubiera anunciado",
  "form_1p": "hubiéramos anunciado",
  "form_2p": "hubierais anunciado",
  "form_3p": "hubieran anunciado",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Announce! Don't announce!",
  "form_1s": "",
  "form_2s": "anuncia",
  "form_3s": "anunciad",
  "form_1p": "",
  "form_2p": "anuncie",
  "form_3p": "anuncien",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "anunciar",
  "infinitive_english": "to announce",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Announce! Don't announce!",
  "form_1s": "",
  "form_2s": "no anuncies",
  "form_3s": "no anunciéis",
  "form_1p": "",
  "form_2p": "no anuncie",
  "form_3p": "no anuncien",
  "gerund": "anunciando",
  "gerund_english": "announcing",
  "pastparticiple": "anunciado",
  "pastparticiple_english": "announced"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I add, am adding",
  "form_1s": "añado",
  "form_2s": "añades",
  "form_3s": "añade",
  "form_1p": "añadimos",
  "form_2p": "añadís",
  "form_3p": "añaden",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will add",
  "form_1s": "añadiré",
  "form_2s": "añadirás",
  "form_3s": "añadirá",
  "form_1p": "añadiremos",
  "form_2p": "añadiréis",
  "form_3p": "añadirán",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was adding, used to add, added",
  "form_1s": "añadía",
  "form_2s": "añadías",
  "form_3s": "añadía",
  "form_1p": "añadíamos",
  "form_2p": "añadíais",
  "form_3p": "añadían",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I added",
  "form_1s": "añadí",
  "form_2s": "añadiste",
  "form_3s": "añadió",
  "form_1p": "añadimos",
  "form_2p": "añadisteis",
  "form_3p": "añadieron",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would add",
  "form_1s": "añadiría",
  "form_2s": "añadirías",
  "form_3s": "añadiría",
  "form_1p": "añadiríamos",
  "form_2p": "añadiríais",
  "form_3p": "añadirían",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have added",
  "form_1s": "he añadido",
  "form_2s": "has añadido",
  "form_3s": "ha añadido",
  "form_1p": "hemos añadido",
  "form_2p": "habéis añadido",
  "form_3p": "han añadido",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have added",
  "form_1s": "habré añadido",
  "form_2s": "habrás añadido",
  "form_3s": "habrá añadido",
  "form_1p": "habremos añadido",
  "form_2p": "habréis añadido",
  "form_3p": "habrán añadido",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had added",
  "form_1s": "había añadido",
  "form_2s": "habías añadido",
  "form_3s": "había añadido",
  "form_1p": "habíamos añadido",
  "form_2p": "habíais añadido",
  "form_3p": "habían añadido",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had added",
  "form_1s": "hube añadido",
  "form_2s": "hubiste añadido",
  "form_3s": "hubo añadido",
  "form_1p": "hubimos añadido",
  "form_2p": "hubisteis añadido",
  "form_3p": "hubieron añadido",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have added",
  "form_1s": "habría añadido",
  "form_2s": "habrías añadido",
  "form_3s": "habría añadido",
  "form_1p": "habríamos añadido",
  "form_2p": "habríais añadido",
  "form_3p": "habrían añadido",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I add, am adding",
  "form_1s": "añada",
  "form_2s": "añadas",
  "form_3s": "añada",
  "form_1p": "añadamos",
  "form_2p": "añadáis",
  "form_3p": "añadan",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I added, was adding",
  "form_1s": "añadiera",
  "form_2s": "añadieras",
  "form_3s": "añadiera",
  "form_1p": "añadiéramos",
  "form_2p": "añadierais",
  "form_3p": "añadieran",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will add",
  "form_1s": "añadiere",
  "form_2s": "añadieres",
  "form_3s": "añadiere",
  "form_1p": "añadiéremos",
  "form_2p": "añadiereis",
  "form_3p": "añadieren",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have added, added",
  "form_1s": "haya añadido",
  "form_2s": "hayas añadido",
  "form_3s": "haya añadido",
  "form_1p": "hayamos añadido",
  "form_2p": "hayáis añadido",
  "form_3p": "hayan añadido",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have added",
  "form_1s": "hubiere añadido",
  "form_2s": "hubieres añadido",
  "form_3s": "hubiere añadido",
  "form_1p": "hubiéremos añadido",
  "form_2p": "hubiereis añadido",
  "form_3p": "hubieren añadido",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had added",
  "form_1s": "hubiera añadido",
  "form_2s": "hubieras añadido",
  "form_3s": "hubiera añadido",
  "form_1p": "hubiéramos añadido",
  "form_2p": "hubierais añadido",
  "form_3p": "hubieran añadido",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Add! Don't add!",
  "form_1s": "",
  "form_2s": "añade",
  "form_3s": "añadid",
  "form_1p": "",
  "form_2p": "añada",
  "form_3p": "añadan",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "añadir",
  "infinitive_english": "to add; to increase",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Add! Don't add!",
  "form_1s": "",
  "form_2s": "no añadas",
  "form_3s": "no añadáis",
  "form_1p": "",
  "form_2p": "no añada",
  "form_3p": "no añadan",
  "gerund": "añadiendo",
  "gerund_english": "adding",
  "pastparticiple": "añadido",
  "pastparticiple_english": "added"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I extinguish, am extinguishing",
  "form_1s": "apago",
  "form_2s": "apagas",
  "form_3s": "apaga",
  "form_1p": "apagamos",
  "form_2p": "apagáis",
  "form_3p": "apagan",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will extinguish",
  "form_1s": "apagaré",
  "form_2s": "apagarás",
  "form_3s": "apagará",
  "form_1p": "apagaremos",
  "form_2p": "apagaréis",
  "form_3p": "apagarán",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I supported, was supporting",
  "form_1s": "apoyara",
  "form_2s": "apoyaras",
  "form_3s": "apoyara",
  "form_1p": "apoyáramos",
  "form_2p": "apoyarais",
  "form_3p": "apoyaran",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was extinguishing, used to extinguish, extinguished",
  "form_1s": "apagaba",
  "form_2s": "apagabas",
  "form_3s": "apagaba",
  "form_1p": "apagábamos",
  "form_2p": "apagabais",
  "form_3p": "apagaban",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I extinguished",
  "form_1s": "apagué",
  "form_2s": "apagaste",
  "form_3s": "apagó",
  "form_1p": "apagamos",
  "form_2p": "apagasteis",
  "form_3p": "apagaron",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would extinguish",
  "form_1s": "apagaría",
  "form_2s": "apagarías",
  "form_3s": "apagaría",
  "form_1p": "apagaríamos",
  "form_2p": "apagaríais",
  "form_3p": "apagarían",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have extinguished",
  "form_1s": "he apagado",
  "form_2s": "has apagado",
  "form_3s": "ha apagado",
  "form_1p": "hemos apagado",
  "form_2p": "habéis apagado",
  "form_3p": "han apagado",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have extinguished",
  "form_1s": "habré apagado",
  "form_2s": "habrás apagado",
  "form_3s": "habrá apagado",
  "form_1p": "habremos apagado",
  "form_2p": "habréis apagado",
  "form_3p": "habrán apagado",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had extinguished",
  "form_1s": "había apagado",
  "form_2s": "habías apagado",
  "form_3s": "había apagado",
  "form_1p": "habíamos apagado",
  "form_2p": "habíais apagado",
  "form_3p": "habían apagado",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had extinguished",
  "form_1s": "hube apagado",
  "form_2s": "hubiste apagado",
  "form_3s": "hubo apagado",
  "form_1p": "hubimos apagado",
  "form_2p": "hubisteis apagado",
  "form_3p": "hubieron apagado",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have extinguished",
  "form_1s": "habría apagado",
  "form_2s": "habrías apagado",
  "form_3s": "habría apagado",
  "form_1p": "habríamos apagado",
  "form_2p": "habríais apagado",
  "form_3p": "habrían apagado",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I extinguish, am extinguishing",
  "form_1s": "apague",
  "form_2s": "apagues",
  "form_3s": "apague",
  "form_1p": "apaguemos",
  "form_2p": "apaguéis",
  "form_3p": "apaguen",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I extinguished, was extinguishing",
  "form_1s": "apagara",
  "form_2s": "apagaras",
  "form_3s": "apagara",
  "form_1p": "apagáramos",
  "form_2p": "apagarais",
  "form_3p": "apagaran",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will extinguish",
  "form_1s": "apagare",
  "form_2s": "apagares",
  "form_3s": "apagare",
  "form_1p": "apagáremos",
  "form_2p": "apagareis",
  "form_3p": "apagaren",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have extinguished, extinguished",
  "form_1s": "haya apagado",
  "form_2s": "hayas apagado",
  "form_3s": "haya apagado",
  "form_1p": "hayamos apagado",
  "form_2p": "hayáis apagado",
  "form_3p": "hayan apagado",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have extinguished",
  "form_1s": "hubiere apagado",
  "form_2s": "hubieres apagado",
  "form_3s": "hubiere apagado",
  "form_1p": "hubiéremos apagado",
  "form_2p": "hubiereis apagado",
  "form_3p": "hubieren apagado",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had extinguished",
  "form_1s": "hubiera apagado",
  "form_2s": "hubieras apagado",
  "form_3s": "hubiera apagado",
  "form_1p": "hubiéramos apagado",
  "form_2p": "hubierais apagado",
  "form_3p": "hubieran apagado",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Extinguish! Don't extinguish!",
  "form_1s": "",
  "form_2s": "apaga",
  "form_3s": "apagad",
  "form_1p": "",
  "form_2p": "apague",
  "form_3p": "apaguen",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "apagar",
  "infinitive_english": "to extinguish, put out, turn off",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Extinguish! Don't extinguish!",
  "form_1s": "",
  "form_2s": "no apagues",
  "form_3s": "no apaguéis",
  "form_1p": "",
  "form_2p": "no apague",
  "form_3p": "no apaguen",
  "gerund": "apagando",
  "gerund_english": "extinguishing",
  "pastparticiple": "apagado",
  "pastparticiple_english": "extinguished"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I appear, am appearing",
  "form_1s": "aparezco",
  "form_2s": "apareces",
  "form_3s": "aparece",
  "form_1p": "aparecemos",
  "form_2p": "aparecéis",
  "form_3p": "aparecen",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will appear",
  "form_1s": "apareceré",
  "form_2s": "aparecerás",
  "form_3s": "aparecerá",
  "form_1p": "apareceremos",
  "form_2p": "apareceréis",
  "form_3p": "aparecerán",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was appearing, used to appear, appeared",
  "form_1s": "aparecía",
  "form_2s": "aparecías",
  "form_3s": "aparecía",
  "form_1p": "aparecíamos",
  "form_2p": "aparecíais",
  "form_3p": "aparecían",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I appeared",
  "form_1s": "aparecí",
  "form_2s": "apareciste",
  "form_3s": "apareció",
  "form_1p": "aparecimos",
  "form_2p": "aparecisteis",
  "form_3p": "aparecieron",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would appear",
  "form_1s": "aparecería",
  "form_2s": "aparecerías",
  "form_3s": "aparecería",
  "form_1p": "apareceríamos",
  "form_2p": "apareceríais",
  "form_3p": "aparecerían",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have appeared",
  "form_1s": "he aparecido",
  "form_2s": "has aparecido",
  "form_3s": "ha aparecido",
  "form_1p": "hemos aparecido",
  "form_2p": "habéis aparecido",
  "form_3p": "han aparecido",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have appeared",
  "form_1s": "habré aparecido",
  "form_2s": "habrás aparecido",
  "form_3s": "habrá aparecido",
  "form_1p": "habremos aparecido",
  "form_2p": "habréis aparecido",
  "form_3p": "habrán aparecido",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had appeared",
  "form_1s": "había aparecido",
  "form_2s": "habías aparecido",
  "form_3s": "había aparecido",
  "form_1p": "habíamos aparecido",
  "form_2p": "habíais aparecido",
  "form_3p": "habían aparecido",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had appeared",
  "form_1s": "hube aparecido",
  "form_2s": "hubiste aparecido",
  "form_3s": "hubo aparecido",
  "form_1p": "hubimos aparecido",
  "form_2p": "hubisteis aparecido",
  "form_3p": "hubieron aparecido",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have appeared",
  "form_1s": "habría aparecido",
  "form_2s": "habrías aparecido",
  "form_3s": "habría aparecido",
  "form_1p": "habríamos aparecido",
  "form_2p": "habríais aparecido",
  "form_3p": "habrían aparecido",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I appear, am appearing",
  "form_1s": "aparezca",
  "form_2s": "aparezcas",
  "form_3s": "aparezca",
  "form_1p": "aparezcamos",
  "form_2p": "aparezcáis",
  "form_3p": "aparezcan",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I appeared, was appearing",
  "form_1s": "apareciera",
  "form_2s": "aparecieras",
  "form_3s": "apareciera",
  "form_1p": "apareciéramos",
  "form_2p": "aparecierais",
  "form_3p": "aparecieran",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will appear",
  "form_1s": "apareciere",
  "form_2s": "aparecieres",
  "form_3s": "apareciere",
  "form_1p": "apareciéremos",
  "form_2p": "apareciereis",
  "form_3p": "aparecieren",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have appeared, appeared",
  "form_1s": "haya aparecido",
  "form_2s": "hayas aparecido",
  "form_3s": "haya aparecido",
  "form_1p": "hayamos aparecido",
  "form_2p": "hayáis aparecido",
  "form_3p": "hayan aparecido",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have appeared",
  "form_1s": "hubiere aparecido",
  "form_2s": "hubieres aparecido",
  "form_3s": "hubiere aparecido",
  "form_1p": "hubiéremos aparecido",
  "form_2p": "hubiereis aparecido",
  "form_3p": "hubieren aparecido",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had appeared",
  "form_1s": "hubiera aparecido",
  "form_2s": "hubieras aparecido",
  "form_3s": "hubiera aparecido",
  "form_1p": "hubiéramos aparecido",
  "form_2p": "hubierais aparecido",
  "form_3p": "hubieran aparecido",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Appear! Don't appear!",
  "form_1s": "",
  "form_2s": "aparece",
  "form_3s": "apareced",
  "form_1p": "",
  "form_2p": "aparezca",
  "form_3p": "aparezcan",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aparecer",
  "infinitive_english": "to appear",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Appear! Don't appear!",
  "form_1s": "",
  "form_2s": "no aparezcas",
  "form_3s": "no aparezcáis",
  "form_1p": "",
  "form_2p": "no aparezca",
  "form_3p": "no aparezcan",
  "gerund": "apareciendo",
  "gerund_english": "appearing",
  "pastparticiple": "aparecido",
  "pastparticiple_english": "appeared"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I applaud, am applauding",
  "form_1s": "aplaudo",
  "form_2s": "aplaudes",
  "form_3s": "aplaude",
  "form_1p": "aplaudimos",
  "form_2p": "aplaudís",
  "form_3p": "aplauden",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will applaud",
  "form_1s": "aplaudiré",
  "form_2s": "aplaudirás",
  "form_3s": "aplaudirá",
  "form_1p": "aplaudiremos",
  "form_2p": "aplaudiréis",
  "form_3p": "aplaudirán",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was applauding, used to applaud, applauded",
  "form_1s": "aplaudía",
  "form_2s": "aplaudías",
  "form_3s": "aplaudía",
  "form_1p": "aplaudíamos",
  "form_2p": "aplaudíais",
  "form_3p": "aplaudían",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I applauded",
  "form_1s": "aplaudí",
  "form_2s": "aplaudiste",
  "form_3s": "aplaudió",
  "form_1p": "aplaudimos",
  "form_2p": "aplaudisteis",
  "form_3p": "aplaudieron",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would applaud",
  "form_1s": "aplaudiría",
  "form_2s": "aplaudirías",
  "form_3s": "aplaudiría",
  "form_1p": "aplaudiríamos",
  "form_2p": "aplaudiríais",
  "form_3p": "aplaudirían",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have applauded",
  "form_1s": "he aplaudido",
  "form_2s": "has aplaudido",
  "form_3s": "ha aplaudido",
  "form_1p": "hemos aplaudido",
  "form_2p": "habéis aplaudido",
  "form_3p": "han aplaudido",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have applauded",
  "form_1s": "habré aplaudido",
  "form_2s": "habrás aplaudido",
  "form_3s": "habrá aplaudido",
  "form_1p": "habremos aplaudido",
  "form_2p": "habréis aplaudido",
  "form_3p": "habrán aplaudido",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had applauded",
  "form_1s": "había aplaudido",
  "form_2s": "habías aplaudido",
  "form_3s": "había aplaudido",
  "form_1p": "habíamos aplaudido",
  "form_2p": "habíais aplaudido",
  "form_3p": "habían aplaudido",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had applauded",
  "form_1s": "hube aplaudido",
  "form_2s": "hubiste aplaudido",
  "form_3s": "hubo aplaudido",
  "form_1p": "hubimos aplaudido",
  "form_2p": "hubisteis aplaudido",
  "form_3p": "hubieron aplaudido",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have applauded",
  "form_1s": "habría aplaudido",
  "form_2s": "habrías aplaudido",
  "form_3s": "habría aplaudido",
  "form_1p": "habríamos aplaudido",
  "form_2p": "habríais aplaudido",
  "form_3p": "habrían aplaudido",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I applaud, am applauding",
  "form_1s": "aplauda",
  "form_2s": "aplaudas",
  "form_3s": "aplauda",
  "form_1p": "aplaudamos",
  "form_2p": "aplaudáis",
  "form_3p": "aplaudan",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I applauded, was applauding",
  "form_1s": "aplaudiera",
  "form_2s": "aplaudieras",
  "form_3s": "aplaudiera",
  "form_1p": "aplaudiéramos",
  "form_2p": "aplaudierais",
  "form_3p": "aplaudieran",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will applaud",
  "form_1s": "aplaudiere",
  "form_2s": "aplaudieres",
  "form_3s": "aplaudiere",
  "form_1p": "aplaudiéremos",
  "form_2p": "aplaudiereis",
  "form_3p": "aplaudieren",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have applauded, applauded",
  "form_1s": "haya aplaudido",
  "form_2s": "hayas aplaudido",
  "form_3s": "haya aplaudido",
  "form_1p": "hayamos aplaudido",
  "form_2p": "hayáis aplaudido",
  "form_3p": "hayan aplaudido",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have applauded",
  "form_1s": "hubiere aplaudido",
  "form_2s": "hubieres aplaudido",
  "form_3s": "hubiere aplaudido",
  "form_1p": "hubiéremos aplaudido",
  "form_2p": "hubiereis aplaudido",
  "form_3p": "hubieren aplaudido",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had applauded",
  "form_1s": "hubiera aplaudido",
  "form_2s": "hubieras aplaudido",
  "form_3s": "hubiera aplaudido",
  "form_1p": "hubiéramos aplaudido",
  "form_2p": "hubierais aplaudido",
  "form_3p": "hubieran aplaudido",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Applaud! Don't applaud!",
  "form_1s": "",
  "form_2s": "aplaude",
  "form_3s": "aplaudid",
  "form_1p": "",
  "form_2p": "aplauda",
  "form_3p": "aplaudan",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplaudir",
  "infinitive_english": "to applaud, cheer, clap",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Applaud! Don't applaud!",
  "form_1s": "",
  "form_2s": "no aplaudas",
  "form_3s": "no aplaudáis",
  "form_1p": "",
  "form_2p": "no aplauda",
  "form_3p": "no aplaudan",
  "gerund": "aplaudiendo",
  "gerund_english": "applauding",
  "pastparticiple": "aplaudido",
  "pastparticiple_english": "applauded"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I apply, am applying",
  "form_1s": "aplico",
  "form_2s": "aplicas",
  "form_3s": "aplica",
  "form_1p": "aplicamos",
  "form_2p": "aplicáis",
  "form_3p": "aplican",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will apply",
  "form_1s": "aplicaré",
  "form_2s": "aplicarás",
  "form_3s": "aplicará",
  "form_1p": "aplicaremos",
  "form_2p": "aplicaréis",
  "form_3p": "aplicarán",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was applying, used to apply, applied",
  "form_1s": "aplicaba",
  "form_2s": "aplicabas",
  "form_3s": "aplicaba",
  "form_1p": "aplicábamos",
  "form_2p": "aplicabais",
  "form_3p": "aplicaban",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I applied",
  "form_1s": "apliqué",
  "form_2s": "aplicaste",
  "form_3s": "aplicó",
  "form_1p": "aplicamos",
  "form_2p": "aplicasteis",
  "form_3p": "aplicaron",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would apply",
  "form_1s": "aplicaría",
  "form_2s": "aplicarías",
  "form_3s": "aplicaría",
  "form_1p": "aplicaríamos",
  "form_2p": "aplicaríais",
  "form_3p": "aplicarían",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have applied",
  "form_1s": "he aplicado",
  "form_2s": "has aplicado",
  "form_3s": "ha aplicado",
  "form_1p": "hemos aplicado",
  "form_2p": "habéis aplicado",
  "form_3p": "han aplicado",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have applied",
  "form_1s": "habré aplicado",
  "form_2s": "habrás aplicado",
  "form_3s": "habrá aplicado",
  "form_1p": "habremos aplicado",
  "form_2p": "habréis aplicado",
  "form_3p": "habrán aplicado",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had applied",
  "form_1s": "había aplicado",
  "form_2s": "habías aplicado",
  "form_3s": "había aplicado",
  "form_1p": "habíamos aplicado",
  "form_2p": "habíais aplicado",
  "form_3p": "habían aplicado",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had applied",
  "form_1s": "hube aplicado",
  "form_2s": "hubiste aplicado",
  "form_3s": "hubo aplicado",
  "form_1p": "hubimos aplicado",
  "form_2p": "hubisteis aplicado",
  "form_3p": "hubieron aplicado",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have applied",
  "form_1s": "habría aplicado",
  "form_2s": "habrías aplicado",
  "form_3s": "habría aplicado",
  "form_1p": "habríamos aplicado",
  "form_2p": "habríais aplicado",
  "form_3p": "habrían aplicado",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I apply, am applying",
  "form_1s": "aplique",
  "form_2s": "apliques",
  "form_3s": "aplique",
  "form_1p": "apliquemos",
  "form_2p": "apliquéis",
  "form_3p": "apliquen",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I applied, was applying",
  "form_1s": "aplicara",
  "form_2s": "aplicaras",
  "form_3s": "aplicara",
  "form_1p": "aplicáramos",
  "form_2p": "aplicarais",
  "form_3p": "aplicaran",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will apply",
  "form_1s": "aplicare",
  "form_2s": "aplicares",
  "form_3s": "aplicare",
  "form_1p": "aplicáremos",
  "form_2p": "aplicareis",
  "form_3p": "aplicaren",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have applied, applied",
  "form_1s": "haya aplicado",
  "form_2s": "hayas aplicado",
  "form_3s": "haya aplicado",
  "form_1p": "hayamos aplicado",
  "form_2p": "hayáis aplicado",
  "form_3p": "hayan aplicado",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have applied",
  "form_1s": "hubiere aplicado",
  "form_2s": "hubieres aplicado",
  "form_3s": "hubiere aplicado",
  "form_1p": "hubiéremos aplicado",
  "form_2p": "hubiereis aplicado",
  "form_3p": "hubieren aplicado",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had applied",
  "form_1s": "hubiera aplicado",
  "form_2s": "hubieras aplicado",
  "form_3s": "hubiera aplicado",
  "form_1p": "hubiéramos aplicado",
  "form_2p": "hubierais aplicado",
  "form_3p": "hubieran aplicado",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Apply! Don't apply!",
  "form_1s": "",
  "form_2s": "aplica",
  "form_3s": "aplicad",
  "form_1p": "",
  "form_2p": "aplique",
  "form_3p": "apliquen",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "aplicar",
  "infinitive_english": "to apply",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Apply! Don't apply!",
  "form_1s": "",
  "form_2s": "no apliques",
  "form_3s": "no apliquéis",
  "form_1p": "",
  "form_2p": "no aplique",
  "form_3p": "no apliquen",
  "gerund": "aplicando",
  "gerund_english": "applying",
  "pastparticiple": "aplicado",
  "pastparticiple_english": "applied"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I bet, am betting",
  "form_1s": "apuesto",
  "form_2s": "apuestas",
  "form_3s": "apuesta",
  "form_1p": "apostamos",
  "form_2p": "apostáis",
  "form_3p": "apuestan",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will bet",
  "form_1s": "apostaré",
  "form_2s": "apostarás",
  "form_3s": "apostará",
  "form_1p": "apostaremos",
  "form_2p": "apostaréis",
  "form_3p": "apostarán",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was betting, used to bet, bet",
  "form_1s": "apostaba",
  "form_2s": "apostabas",
  "form_3s": "apostaba",
  "form_1p": "apostábamos",
  "form_2p": "apostabais",
  "form_3p": "apostaban",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I bet",
  "form_1s": "aposté",
  "form_2s": "apostaste",
  "form_3s": "apostó",
  "form_1p": "apostamos",
  "form_2p": "apostasteis",
  "form_3p": "apostaron",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would bet",
  "form_1s": "apostaría",
  "form_2s": "apostarías",
  "form_3s": "apostaría",
  "form_1p": "apostaríamos",
  "form_2p": "apostaríais",
  "form_3p": "apostarían",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have bet",
  "form_1s": "he apostado",
  "form_2s": "has apostado",
  "form_3s": "ha apostado",
  "form_1p": "hemos apostado",
  "form_2p": "habéis apostado",
  "form_3p": "han apostado",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have bet",
  "form_1s": "habré apostado",
  "form_2s": "habrás apostado",
  "form_3s": "habrá apostado",
  "form_1p": "habremos apostado",
  "form_2p": "habréis apostado",
  "form_3p": "habrán apostado",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had bet",
  "form_1s": "había apostado",
  "form_2s": "habías apostado",
  "form_3s": "había apostado",
  "form_1p": "habíamos apostado",
  "form_2p": "habíais apostado",
  "form_3p": "habían apostado",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had bet",
  "form_1s": "hube apostado",
  "form_2s": "hubiste apostado",
  "form_3s": "hubo apostado",
  "form_1p": "hubimos apostado",
  "form_2p": "hubisteis apostado",
  "form_3p": "hubieron apostado",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have bet",
  "form_1s": "habría apostado",
  "form_2s": "habrías apostado",
  "form_3s": "habría apostado",
  "form_1p": "habríamos apostado",
  "form_2p": "habríais apostado",
  "form_3p": "habrían apostado",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I bet, am betting",
  "form_1s": "apueste",
  "form_2s": "apuestes",
  "form_3s": "apueste",
  "form_1p": "apostemos",
  "form_2p": "apostéis",
  "form_3p": "apuesten",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I bet, was betting",
  "form_1s": "apostara",
  "form_2s": "apostaras",
  "form_3s": "apostara",
  "form_1p": "apostáramos",
  "form_2p": "apostarais",
  "form_3p": "apostaran",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will bet",
  "form_1s": "apostare",
  "form_2s": "apostares",
  "form_3s": "apostare",
  "form_1p": "apostáremos",
  "form_2p": "apostareis",
  "form_3p": "apostaren",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have bet, bet",
  "form_1s": "haya apostado",
  "form_2s": "hayas apostado",
  "form_3s": "haya apostado",
  "form_1p": "hayamos apostado",
  "form_2p": "hayáis apostado",
  "form_3p": "hayan apostado",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have bet",
  "form_1s": "hubiere apostado",
  "form_2s": "hubieres apostado",
  "form_3s": "hubiere apostado",
  "form_1p": "hubiéremos apostado",
  "form_2p": "hubiereis apostado",
  "form_3p": "hubieren apostado",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had bet",
  "form_1s": "hubiera apostado",
  "form_2s": "hubieras apostado",
  "form_3s": "hubiera apostado",
  "form_1p": "hubiéramos apostado",
  "form_2p": "hubierais apostado",
  "form_3p": "hubieran apostado",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Bet! Don't bet!",
  "form_1s": "",
  "form_2s": "apuesta",
  "form_3s": "apostad",
  "form_1p": "",
  "form_2p": "apueste",
  "form_3p": "apuesten",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apostar",
  "infinitive_english": "to bet, wager",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Bet! Don't bet!",
  "form_1s": "",
  "form_2s": "no apuestes",
  "form_3s": "no apostéis",
  "form_1p": "",
  "form_2p": "no apueste",
  "form_3p": "no apuesten",
  "gerund": "apostando",
  "gerund_english": "betting",
  "pastparticiple": "apostado",
  "pastparticiple_english": "bet"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I support, am supporting",
  "form_1s": "apoyo",
  "form_2s": "apoyas",
  "form_3s": "apoya",
  "form_1p": "apoyamos",
  "form_2p": "apoyáis",
  "form_3p": "apoyan",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will support",
  "form_1s": "apoyaré",
  "form_2s": "apoyarás",
  "form_3s": "apoyará",
  "form_1p": "apoyaremos",
  "form_2p": "apoyaréis",
  "form_3p": "apoyarán",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was supporting, used to support, supported",
  "form_1s": "apoyaba",
  "form_2s": "apoyabas",
  "form_3s": "apoyaba",
  "form_1p": "apoyábamos",
  "form_2p": "apoyabais",
  "form_3p": "apoyaban",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I supported",
  "form_1s": "apoyé",
  "form_2s": "apoyaste",
  "form_3s": "apoyó",
  "form_1p": "apoyamos",
  "form_2p": "apoyasteis",
  "form_3p": "apoyaron",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would support",
  "form_1s": "apoyaría",
  "form_2s": "apoyarías",
  "form_3s": "apoyaría",
  "form_1p": "apoyaríamos",
  "form_2p": "apoyaríais",
  "form_3p": "apoyarían",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have supported",
  "form_1s": "he apoyado",
  "form_2s": "has apoyado",
  "form_3s": "ha apoyado",
  "form_1p": "hemos apoyado",
  "form_2p": "habéis apoyado",
  "form_3p": "han apoyado",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have supported",
  "form_1s": "habré apoyado",
  "form_2s": "habrás apoyado",
  "form_3s": "habrá apoyado",
  "form_1p": "habremos apoyado",
  "form_2p": "habréis apoyado",
  "form_3p": "habrán apoyado",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had supported",
  "form_1s": "había apoyado",
  "form_2s": "habías apoyado",
  "form_3s": "había apoyado",
  "form_1p": "habíamos apoyado",
  "form_2p": "habíais apoyado",
  "form_3p": "habían apoyado",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had supported",
  "form_1s": "hube apoyado",
  "form_2s": "hubiste apoyado",
  "form_3s": "hubo apoyado",
  "form_1p": "hubimos apoyado",
  "form_2p": "hubisteis apoyado",
  "form_3p": "hubieron apoyado",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have supported",
  "form_1s": "habría apoyado",
  "form_2s": "habrías apoyado",
  "form_3s": "habría apoyado",
  "form_1p": "habríamos apoyado",
  "form_2p": "habríais apoyado",
  "form_3p": "habrían apoyado",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I support, am supporting",
  "form_1s": "apoye",
  "form_2s": "apoyes",
  "form_3s": "apoye",
  "form_1p": "apoyemos",
  "form_2p": "apoyéis",
  "form_3p": "apoyen",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will support",
  "form_1s": "apoyare",
  "form_2s": "apoyares",
  "form_3s": "apoyare",
  "form_1p": "apoyáremos",
  "form_2p": "apoyareis",
  "form_3p": "apoyaren",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have supported, supported",
  "form_1s": "haya apoyado",
  "form_2s": "hayas apoyado",
  "form_3s": "haya apoyado",
  "form_1p": "hayamos apoyado",
  "form_2p": "hayáis apoyado",
  "form_3p": "hayan apoyado",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have supported",
  "form_1s": "hubiere apoyado",
  "form_2s": "hubieres apoyado",
  "form_3s": "hubiere apoyado",
  "form_1p": "hubiéremos apoyado",
  "form_2p": "hubiereis apoyado",
  "form_3p": "hubieren apoyado",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had supported",
  "form_1s": "hubiera apoyado",
  "form_2s": "hubieras apoyado",
  "form_3s": "hubiera apoyado",
  "form_1p": "hubiéramos apoyado",
  "form_2p": "hubierais apoyado",
  "form_3p": "hubieran apoyado",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Support! Don't support!",
  "form_1s": "",
  "form_2s": "apoya",
  "form_3s": "apoyad",
  "form_1p": "",
  "form_2p": "apoye",
  "form_3p": "apoyen",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apoyar",
  "infinitive_english": "to support, hold up, prop up; to back",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Support! Don't support!",
  "form_1s": "",
  "form_2s": "no apoyes",
  "form_3s": "no apoyéis",
  "form_1p": "",
  "form_2p": "no apoye",
  "form_3p": "no apoyen",
  "gerund": "apoyando",
  "gerund_english": "supporting",
  "pastparticiple": "apoyado",
  "pastparticiple_english": "supported"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I appreciate, am appreciating",
  "form_1s": "aprecio",
  "form_2s": "aprecias",
  "form_3s": "aprecia",
  "form_1p": "apreciamos",
  "form_2p": "apreciáis",
  "form_3p": "aprecian",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will appreciate",
  "form_1s": "apreciaré",
  "form_2s": "apreciarás",
  "form_3s": "apreciará",
  "form_1p": "apreciaremos",
  "form_2p": "apreciaréis",
  "form_3p": "apreciarán",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was appreciating, used to appreciate, appreciated",
  "form_1s": "apreciaba",
  "form_2s": "apreciabas",
  "form_3s": "apreciaba",
  "form_1p": "apreciábamos",
  "form_2p": "apreciabais",
  "form_3p": "apreciaban",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I appreciated",
  "form_1s": "aprecié",
  "form_2s": "apreciaste",
  "form_3s": "apreció",
  "form_1p": "apreciamos",
  "form_2p": "apreciasteis",
  "form_3p": "apreciaron",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would appreciate",
  "form_1s": "apreciaría",
  "form_2s": "apreciarías",
  "form_3s": "apreciaría",
  "form_1p": "apreciaríamos",
  "form_2p": "apreciaríais",
  "form_3p": "apreciarían",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have appreciated",
  "form_1s": "he apreciado",
  "form_2s": "has apreciado",
  "form_3s": "ha apreciado",
  "form_1p": "hemos apreciado",
  "form_2p": "habéis apreciado",
  "form_3p": "han apreciado",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have appreciated",
  "form_1s": "habré apreciado",
  "form_2s": "habrás apreciado",
  "form_3s": "habrá apreciado",
  "form_1p": "habremos apreciado",
  "form_2p": "habréis apreciado",
  "form_3p": "habrán apreciado",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had appreciated",
  "form_1s": "había apreciado",
  "form_2s": "habías apreciado",
  "form_3s": "había apreciado",
  "form_1p": "habíamos apreciado",
  "form_2p": "habíais apreciado",
  "form_3p": "habían apreciado",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had appreciated",
  "form_1s": "hube apreciado",
  "form_2s": "hubiste apreciado",
  "form_3s": "hubo apreciado",
  "form_1p": "hubimos apreciado",
  "form_2p": "hubisteis apreciado",
  "form_3p": "hubieron apreciado",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have appreciated",
  "form_1s": "habría apreciado",
  "form_2s": "habrías apreciado",
  "form_3s": "habría apreciado",
  "form_1p": "habríamos apreciado",
  "form_2p": "habríais apreciado",
  "form_3p": "habrían apreciado",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I appreciate, am appreciating",
  "form_1s": "aprecie",
  "form_2s": "aprecies",
  "form_3s": "aprecie",
  "form_1p": "apreciemos",
  "form_2p": "apreciéis",
  "form_3p": "aprecien",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I appreciated, was appreciating",
  "form_1s": "apreciara",
  "form_2s": "apreciaras",
  "form_3s": "apreciara",
  "form_1p": "apreciáramos",
  "form_2p": "apreciarais",
  "form_3p": "apreciaran",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will appreciate",
  "form_1s": "apreciare",
  "form_2s": "apreciares",
  "form_3s": "apreciare",
  "form_1p": "apreciáremos",
  "form_2p": "apreciareis",
  "form_3p": "apreciaren",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have appreciated, appreciated",
  "form_1s": "haya apreciado",
  "form_2s": "hayas apreciado",
  "form_3s": "haya apreciado",
  "form_1p": "hayamos apreciado",
  "form_2p": "hayáis apreciado",
  "form_3p": "hayan apreciado",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have appreciated",
  "form_1s": "hubiere apreciado",
  "form_2s": "hubieres apreciado",
  "form_3s": "hubiere apreciado",
  "form_1p": "hubiéremos apreciado",
  "form_2p": "hubiereis apreciado",
  "form_3p": "hubieren apreciado",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had appreciated",
  "form_1s": "hubiera apreciado",
  "form_2s": "hubieras apreciado",
  "form_3s": "hubiera apreciado",
  "form_1p": "hubiéramos apreciado",
  "form_2p": "hubierais apreciado",
  "form_3p": "hubieran apreciado",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "appreciate! Don't appreciate!",
  "form_1s": "",
  "form_2s": "aprecia",
  "form_3s": "apreciad",
  "form_1p": "",
  "form_2p": "aprecie",
  "form_3p": "aprecien",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "apreciar",
  "infinitive_english": "to appreciate, value, esteem, estimate, notice",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "appreciate! Don't appreciate!",
  "form_1s": "",
  "form_2s": "no aprecies",
  "form_3s": "no apreciéis",
  "form_1p": "",
  "form_2p": "no aprecie",
  "form_3p": "no aprecien",
  "gerund": "apreciando",
  "gerund_english": "appreciating",
  "pastparticiple": "apreciado",
  "pastparticiple_english": "appreciated"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I learn, am learning",
  "form_1s": "aprendo",
  "form_2s": "aprendes",
  "form_3s": "aprende",
  "form_1p": "aprendemos",
  "form_2p": "aprendéis",
  "form_3p": "aprenden",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will learn",
  "form_1s": "aprenderé",
  "form_2s": "aprenderás",
  "form_3s": "aprenderá",
  "form_1p": "aprenderemos",
  "form_2p": "aprenderéis",
  "form_3p": "aprenderán",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was learning, used to learn, learned",
  "form_1s": "aprendía",
  "form_2s": "aprendías",
  "form_3s": "aprendía",
  "form_1p": "aprendíamos",
  "form_2p": "aprendíais",
  "form_3p": "aprendían",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I learned",
  "form_1s": "aprendí",
  "form_2s": "aprendiste",
  "form_3s": "aprendió",
  "form_1p": "aprendimos",
  "form_2p": "aprendisteis",
  "form_3p": "aprendieron",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would learn",
  "form_1s": "aprendería",
  "form_2s": "aprenderías",
  "form_3s": "aprendería",
  "form_1p": "aprenderíamos",
  "form_2p": "aprenderíais",
  "form_3p": "aprenderían",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have learned",
  "form_1s": "he aprendido",
  "form_2s": "has aprendido",
  "form_3s": "ha aprendido",
  "form_1p": "hemos aprendido",
  "form_2p": "habéis aprendido",
  "form_3p": "han aprendido",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have learned",
  "form_1s": "habré aprendido",
  "form_2s": "habrás aprendido",
  "form_3s": "habrá aprendido",
  "form_1p": "habremos aprendido",
  "form_2p": "habréis aprendido",
  "form_3p": "habrán aprendido",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had learned",
  "form_1s": "había aprendido",
  "form_2s": "habías aprendido",
  "form_3s": "había aprendido",
  "form_1p": "habíamos aprendido",
  "form_2p": "habíais aprendido",
  "form_3p": "habían aprendido",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had learned",
  "form_1s": "hube aprendido",
  "form_2s": "hubiste aprendido",
  "form_3s": "hubo aprendido",
  "form_1p": "hubimos aprendido",
  "form_2p": "hubisteis aprendido",
  "form_3p": "hubieron aprendido",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have learned",
  "form_1s": "habría aprendido",
  "form_2s": "habrías aprendido",
  "form_3s": "habría aprendido",
  "form_1p": "habríamos aprendido",
  "form_2p": "habríais aprendido",
  "form_3p": "habrían aprendido",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I learn, am learning",
  "form_1s": "aprenda",
  "form_2s": "aprendas",
  "form_3s": "aprenda",
  "form_1p": "aprendamos",
  "form_2p": "aprendáis",
  "form_3p": "aprendan",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I learned, was learning",
  "form_1s": "aprendiera",
  "form_2s": "aprendieras",
  "form_3s": "aprendiera",
  "form_1p": "aprendiéramos",
  "form_2p": "aprendierais",
  "form_3p": "aprendieran",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will learn",
  "form_1s": "aprendiere",
  "form_2s": "aprendieres",
  "form_3s": "aprendiere",
  "form_1p": "aprendiéremos",
  "form_2p": "aprendiereis",
  "form_3p": "aprendieren",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have learned, learned",
  "form_1s": "haya aprendido",
  "form_2s": "hayas aprendido",
  "form_3s": "haya aprendido",
  "form_1p": "hayamos aprendido",
  "form_2p": "hayáis aprendido",
  "form_3p": "hayan aprendido",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have learned",
  "form_1s": "hubiere aprendido",
  "form_2s": "hubieres aprendido",
  "form_3s": "hubiere aprendido",
  "form_1p": "hubiéremos aprendido",
  "form_2p": "hubiereis aprendido",
  "form_3p": "hubieren aprendido",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had learned",
  "form_1s": "hubiera aprendido",
  "form_2s": "hubieras aprendido",
  "form_3s": "hubiera aprendido",
  "form_1p": "hubiéramos aprendido",
  "form_2p": "hubierais aprendido",
  "form_3p": "hubieran aprendido",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Learn! Don't learn!",
  "form_1s": "",
  "form_2s": "aprende",
  "form_3s": "aprended",
  "form_1p": "",
  "form_2p": "aprenda",
  "form_3p": "aprendan",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "aprender",
  "infinitive_english": "to learn",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Learn! Don't learn!",
  "form_1s": "",
  "form_2s": "no aprendas",
  "form_3s": "no aprendáis",
  "form_1p": "",
  "form_2p": "no aprenda",
  "form_3p": "no aprendan",
  "gerund": "aprendiendo",
  "gerund_english": "learning",
  "pastparticiple": "aprendido",
  "pastparticiple_english": "learned"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am too tight, am being too tight",
  "form_1s": "aprieto",
  "form_2s": "aprietas",
  "form_3s": "aprieta",
  "form_1p": "apretamos",
  "form_2p": "apretáis",
  "form_3p": "aprietan",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be too tight",
  "form_1s": "apretaré",
  "form_2s": "apretarás",
  "form_3s": "apretará",
  "form_1p": "apretaremos",
  "form_2p": "apretaréis",
  "form_3p": "apretarán",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was being too tight, used to be too tight, was too tight",
  "form_1s": "apretaba",
  "form_2s": "apretabas",
  "form_3s": "apretaba",
  "form_1p": "apretábamos",
  "form_2p": "apretabais",
  "form_3p": "apretaban",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I was too tight",
  "form_1s": "apreté",
  "form_2s": "apretaste",
  "form_3s": "apretó",
  "form_1p": "apretamos",
  "form_2p": "apretasteis",
  "form_3p": "apretaron",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would be too tight",
  "form_1s": "apretaría",
  "form_2s": "apretarías",
  "form_3s": "apretaría",
  "form_1p": "apretaríamos",
  "form_2p": "apretaríais",
  "form_3p": "apretarían",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been too tight",
  "form_1s": "he apretado",
  "form_2s": "has apretado",
  "form_3s": "ha apretado",
  "form_1p": "hemos apretado",
  "form_2p": "habéis apretado",
  "form_3p": "han apretado",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I attend, am attending",
  "form_1s": "asista",
  "form_2s": "asistas",
  "form_3s": "asista",
  "form_1p": "asistamos",
  "form_2p": "asistáis",
  "form_3p": "asistan",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been too tight",
  "form_1s": "habré apretado",
  "form_2s": "habrás apretado",
  "form_3s": "habrá apretado",
  "form_1p": "habremos apretado",
  "form_2p": "habréis apretado",
  "form_3p": "habrán apretado",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been too tight",
  "form_1s": "había apretado",
  "form_2s": "habías apretado",
  "form_3s": "había apretado",
  "form_1p": "habíamos apretado",
  "form_2p": "habíais apretado",
  "form_3p": "habían apretado",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had been too tight",
  "form_1s": "hube apretado",
  "form_2s": "hubiste apretado",
  "form_3s": "hubo apretado",
  "form_1p": "hubimos apretado",
  "form_2p": "hubisteis apretado",
  "form_3p": "hubieron apretado",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have been too tight",
  "form_1s": "habría apretado",
  "form_2s": "habrías apretado",
  "form_3s": "habría apretado",
  "form_1p": "habríamos apretado",
  "form_2p": "habríais apretado",
  "form_3p": "habrían apretado",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am too tight, am being too tight",
  "form_1s": "apriete",
  "form_2s": "aprietes",
  "form_3s": "apriete",
  "form_1p": "apretemos",
  "form_2p": "apretéis",
  "form_3p": "aprieten",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was too tight, was being too tight",
  "form_1s": "apretara",
  "form_2s": "apretaras",
  "form_3s": "apretara",
  "form_1p": "apretáramos",
  "form_2p": "apretarais",
  "form_3p": "apretaran",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be too tight",
  "form_1s": "apretare",
  "form_2s": "apretares",
  "form_3s": "apretare",
  "form_1p": "apretáremos",
  "form_2p": "apretareis",
  "form_3p": "apretaren",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been too tight, was too tight",
  "form_1s": "haya apretado",
  "form_2s": "hayas apretado",
  "form_3s": "haya apretado",
  "form_1p": "hayamos apretado",
  "form_2p": "hayáis apretado",
  "form_3p": "hayan apretado",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been too tight",
  "form_1s": "hubiere apretado",
  "form_2s": "hubieres apretado",
  "form_3s": "hubiere apretado",
  "form_1p": "hubiéremos apretado",
  "form_2p": "hubiereis apretado",
  "form_3p": "hubieren apretado",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been too tight",
  "form_1s": "hubiera apretado",
  "form_2s": "hubieras apretado",
  "form_3s": "hubiera apretado",
  "form_1p": "hubiéramos apretado",
  "form_2p": "hubierais apretado",
  "form_3p": "hubieran apretado",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be too tight! Don't be too tight!",
  "form_1s": "",
  "form_2s": "aprieta",
  "form_3s": "apretad",
  "form_1p": "",
  "form_2p": "apriete",
  "form_3p": "aprieten",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "apretar",
  "infinitive_english": "to be too tight; to squeeze; to tighten [up]; to press [down/against]",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be too tight! Don't be too tight!",
  "form_1s": "",
  "form_2s": "no aprietes",
  "form_3s": "no apretéis",
  "form_1p": "",
  "form_2p": "no apriete",
  "form_3p": "no aprieten",
  "gerund": "apretando",
  "gerund_english": "being too tight",
  "pastparticiple": "apretado",
  "pastparticiple_english": "was too tight"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I pass, am passing",
  "form_1s": "apruebo",
  "form_2s": "apruebas",
  "form_3s": "aprueba",
  "form_1p": "aprobamos",
  "form_2p": "aprobáis",
  "form_3p": "aprueban",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will pass",
  "form_1s": "aprobaré",
  "form_2s": "aprobarás",
  "form_3s": "aprobará",
  "form_1p": "aprobaremos",
  "form_2p": "aprobaréis",
  "form_3p": "aprobarán",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was passing, used to pass, passed",
  "form_1s": "aprobaba",
  "form_2s": "aprobabas",
  "form_3s": "aprobaba",
  "form_1p": "aprobábamos",
  "form_2p": "aprobabais",
  "form_3p": "aprobaban",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I passed",
  "form_1s": "aprobé",
  "form_2s": "aprobaste",
  "form_3s": "aprobó",
  "form_1p": "aprobamos",
  "form_2p": "aprobasteis",
  "form_3p": "aprobaron",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would pass",
  "form_1s": "aprobaría",
  "form_2s": "aprobarías",
  "form_3s": "aprobaría",
  "form_1p": "aprobaríamos",
  "form_2p": "aprobaríais",
  "form_3p": "aprobarían",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have passed",
  "form_1s": "he aprobado",
  "form_2s": "has aprobado",
  "form_3s": "ha aprobado",
  "form_1p": "hemos aprobado",
  "form_2p": "habéis aprobado",
  "form_3p": "han aprobado",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have passed",
  "form_1s": "habré aprobado",
  "form_2s": "habrás aprobado",
  "form_3s": "habrá aprobado",
  "form_1p": "habremos aprobado",
  "form_2p": "habréis aprobado",
  "form_3p": "habrán aprobado",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had passed",
  "form_1s": "había aprobado",
  "form_2s": "habías aprobado",
  "form_3s": "había aprobado",
  "form_1p": "habíamos aprobado",
  "form_2p": "habíais aprobado",
  "form_3p": "habían aprobado",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had passed",
  "form_1s": "hube aprobado",
  "form_2s": "hubiste aprobado",
  "form_3s": "hubo aprobado",
  "form_1p": "hubimos aprobado",
  "form_2p": "hubisteis aprobado",
  "form_3p": "hubieron aprobado",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have passed",
  "form_1s": "habría aprobado",
  "form_2s": "habrías aprobado",
  "form_3s": "habría aprobado",
  "form_1p": "habríamos aprobado",
  "form_2p": "habríais aprobado",
  "form_3p": "habrían aprobado",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I pass, am passing",
  "form_1s": "apruebe",
  "form_2s": "apruebes",
  "form_3s": "apruebe",
  "form_1p": "aprobemos",
  "form_2p": "aprobéis",
  "form_3p": "aprueben",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I passed, was passing",
  "form_1s": "aprobara",
  "form_2s": "aprobaras",
  "form_3s": "aprobara",
  "form_1p": "aprobáramos",
  "form_2p": "aprobarais",
  "form_3p": "aprobaran",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will pass",
  "form_1s": "aprobare",
  "form_2s": "aprobares",
  "form_3s": "aprobare",
  "form_1p": "aprobáremos",
  "form_2p": "aprobareis",
  "form_3p": "aprobaren",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have passed, passed",
  "form_1s": "haya aprobado",
  "form_2s": "hayas aprobado",
  "form_3s": "haya aprobado",
  "form_1p": "hayamos aprobado",
  "form_2p": "hayáis aprobado",
  "form_3p": "hayan aprobado",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have passed",
  "form_1s": "hubiere aprobado",
  "form_2s": "hubieres aprobado",
  "form_3s": "hubiere aprobado",
  "form_1p": "hubiéremos aprobado",
  "form_2p": "hubiereis aprobado",
  "form_3p": "hubieren aprobado",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had passed",
  "form_1s": "hubiera aprobado",
  "form_2s": "hubieras aprobado",
  "form_3s": "hubiera aprobado",
  "form_1p": "hubiéramos aprobado",
  "form_2p": "hubierais aprobado",
  "form_3p": "hubieran aprobado",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Pass! Don't pass!",
  "form_1s": "",
  "form_2s": "aprueba",
  "form_3s": "aprobad",
  "form_1p": "",
  "form_2p": "apruebe",
  "form_3p": "aprueben",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "aprobar",
  "infinitive_english": "to pass",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Pass! Don't pass!",
  "form_1s": "",
  "form_2s": "no apruebes",
  "form_3s": "no aprobéis",
  "form_1p": "",
  "form_2p": "no apruebe",
  "form_3p": "no aprueben",
  "gerund": "aprobando",
  "gerund_english": "passing",
  "pastparticiple": "aprobado",
  "pastparticiple_english": "passed"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I arrange, am arranging",
  "form_1s": "arreglo",
  "form_2s": "arreglas",
  "form_3s": "arregla",
  "form_1p": "arreglamos",
  "form_2p": "arregláis",
  "form_3p": "arreglan",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will arrange",
  "form_1s": "arreglaré",
  "form_2s": "arreglarás",
  "form_3s": "arreglará",
  "form_1p": "arreglaremos",
  "form_2p": "arreglaréis",
  "form_3p": "arreglarán",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was arranging, used to arrange, arranged",
  "form_1s": "arreglaba",
  "form_2s": "arreglabas",
  "form_3s": "arreglaba",
  "form_1p": "arreglábamos",
  "form_2p": "arreglabais",
  "form_3p": "arreglaban",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I arranged",
  "form_1s": "arreglé",
  "form_2s": "arreglaste",
  "form_3s": "arregló",
  "form_1p": "arreglamos",
  "form_2p": "arreglasteis",
  "form_3p": "arreglaron",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would arrange",
  "form_1s": "arreglaría",
  "form_2s": "arreglarías",
  "form_3s": "arreglaría",
  "form_1p": "arreglaríamos",
  "form_2p": "arreglaríais",
  "form_3p": "arreglarían",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have arranged",
  "form_1s": "he arreglado",
  "form_2s": "has arreglado",
  "form_3s": "ha arreglado",
  "form_1p": "hemos arreglado",
  "form_2p": "habéis arreglado",
  "form_3p": "han arreglado",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have arranged",
  "form_1s": "habré arreglado",
  "form_2s": "habrás arreglado",
  "form_3s": "habrá arreglado",
  "form_1p": "habremos arreglado",
  "form_2p": "habréis arreglado",
  "form_3p": "habrán arreglado",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had arranged",
  "form_1s": "había arreglado",
  "form_2s": "habías arreglado",
  "form_3s": "había arreglado",
  "form_1p": "habíamos arreglado",
  "form_2p": "habíais arreglado",
  "form_3p": "habían arreglado",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had arranged",
  "form_1s": "hube arreglado",
  "form_2s": "hubiste arreglado",
  "form_3s": "hubo arreglado",
  "form_1p": "hubimos arreglado",
  "form_2p": "hubisteis arreglado",
  "form_3p": "hubieron arreglado",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have arranged",
  "form_1s": "habría arreglado",
  "form_2s": "habrías arreglado",
  "form_3s": "habría arreglado",
  "form_1p": "habríamos arreglado",
  "form_2p": "habríais arreglado",
  "form_3p": "habrían arreglado",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I arrange, am arranging",
  "form_1s": "arregle",
  "form_2s": "arregles",
  "form_3s": "arregle",
  "form_1p": "arreglemos",
  "form_2p": "arregléis",
  "form_3p": "arreglen",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I arranged, was arranging",
  "form_1s": "arreglara",
  "form_2s": "arreglaras",
  "form_3s": "arreglara",
  "form_1p": "arregláramos",
  "form_2p": "arreglarais",
  "form_3p": "arreglaran",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will arrange",
  "form_1s": "arreglare",
  "form_2s": "arreglares",
  "form_3s": "arreglare",
  "form_1p": "arregláremos",
  "form_2p": "arreglareis",
  "form_3p": "arreglaren",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have arranged, arranged",
  "form_1s": "haya arreglado",
  "form_2s": "hayas arreglado",
  "form_3s": "haya arreglado",
  "form_1p": "hayamos arreglado",
  "form_2p": "hayáis arreglado",
  "form_3p": "hayan arreglado",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have arranged",
  "form_1s": "hubiere arreglado",
  "form_2s": "hubieres arreglado",
  "form_3s": "hubiere arreglado",
  "form_1p": "hubiéremos arreglado",
  "form_2p": "hubiereis arreglado",
  "form_3p": "hubieren arreglado",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had arranged",
  "form_1s": "hubiera arreglado",
  "form_2s": "hubieras arreglado",
  "form_3s": "hubiera arreglado",
  "form_1p": "hubiéramos arreglado",
  "form_2p": "hubierais arreglado",
  "form_3p": "hubieran arreglado",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Arrange! Don't arrange!",
  "form_1s": "",
  "form_2s": "arregla",
  "form_3s": "arreglad",
  "form_1p": "",
  "form_2p": "arregle",
  "form_3p": "arreglen",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "arreglar",
  "infinitive_english": "to arrange, settle, fix up, repair, tidy up",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Arrange! Don't arrange!",
  "form_1s": "",
  "form_2s": "no arregles",
  "form_3s": "no arregléis",
  "form_1p": "",
  "form_2p": "no arregle",
  "form_3p": "no arreglen",
  "gerund": "arreglando",
  "gerund_english": "arranging",
  "pastparticiple": "arreglado",
  "pastparticiple_english": "arranged"
}, {
  "infinitive": "ayudar",
  "infinitive_english": "to help",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I help, am helping",
  "form_1s": "ayudo",
  "form_2s": "ayudas",
  "form_3s": "ayuda",
  "form_1p": "ayudamos",
  "form_2p": "ayudáis",
  "form_3p": "ayudan",
  "gerund": "ayudando",
  "gerund_english": "helping",
  "pastparticiple": "ayudado",
  "pastparticiple_english": "helped"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I repent, am repenting",
  "form_1s": "me arrepiento",
  "form_2s": "te arrepientes",
  "form_3s": "se arrepiente",
  "form_1p": "nos arrepentimos",
  "form_2p": "os arrepentís",
  "form_3p": "se arrepienten",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will repent",
  "form_1s": "me arrepentiré",
  "form_2s": "te arrepentirás",
  "form_3s": "se arrepentirá",
  "form_1p": "nos arrepentiremos",
  "form_2p": "os arrepentiréis",
  "form_3p": "se arrepentirán",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was repenting, used to repent, repented",
  "form_1s": "me arrepentía",
  "form_2s": "te arrepentías",
  "form_3s": "se arrepentía",
  "form_1p": "nos arrepentíamos",
  "form_2p": "os arrepentíais",
  "form_3p": "se arrepentían",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I repented",
  "form_1s": "me arrepentí",
  "form_2s": "te arrepentiste",
  "form_3s": "se arrepintió",
  "form_1p": "nos arrepentimos",
  "form_2p": "os arrepentisteis",
  "form_3p": "se arrepintieron",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would repent",
  "form_1s": "me arrepentiría",
  "form_2s": "te arrepentirías",
  "form_3s": "se arrepentiría",
  "form_1p": "nos arrepentiríamos",
  "form_2p": "os arrepentiríais",
  "form_3p": "se arrepentirían",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have repented",
  "form_1s": "me he arrepentido",
  "form_2s": "te has arrepentido",
  "form_3s": "se ha arrepentido",
  "form_1p": "nos hemos arrepentido",
  "form_2p": "os habéis arrepentido",
  "form_3p": "se han arrepentido",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have repented",
  "form_1s": "me habré arrepentido",
  "form_2s": "te habrás arrepentido",
  "form_3s": "se habrá arrepentido",
  "form_1p": "nos habremos arrepentido",
  "form_2p": "os habréis arrepentido",
  "form_3p": "se habrán arrepentido",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had repented",
  "form_1s": "me había arrepentido",
  "form_2s": "te habías arrepentido",
  "form_3s": "se había arrepentido",
  "form_1p": "nos habíamos arrepentido",
  "form_2p": "os habíais arrepentido",
  "form_3p": "se habían arrepentido",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had repented",
  "form_1s": "me hube arrepentido",
  "form_2s": "te hubiste arrepentido",
  "form_3s": "se hubo arrepentido",
  "form_1p": "nos hubimos arrepentido",
  "form_2p": "os hubisteis arrepentido",
  "form_3p": "se hubieron arrepentido",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have repented",
  "form_1s": "me habría arrepentido",
  "form_2s": "te habrías arrepentido",
  "form_3s": "se habría arrepentido",
  "form_1p": "nos habríamos arrepentido",
  "form_2p": "os habríais arrepentido",
  "form_3p": "se habrían arrepentido",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I repent, am repenting",
  "form_1s": "me arrepienta",
  "form_2s": "te arrepientas",
  "form_3s": "se arrepienta",
  "form_1p": "nos arrepintamos",
  "form_2p": "os arrepintáis",
  "form_3p": "se arrepientan",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I repented, was repenting",
  "form_1s": "me arrepintiera",
  "form_2s": "te arrepintieras",
  "form_3s": "se arrepintiera",
  "form_1p": "nos arrepintiéramos",
  "form_2p": "os arrepintierais",
  "form_3p": "se arrepintieran",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will repent",
  "form_1s": "me arrepintiere",
  "form_2s": "te arrepintieres",
  "form_3s": "se arrepintiere",
  "form_1p": "nos arrepintiéremos",
  "form_2p": "os arrepintiereis",
  "form_3p": "se arrepintieren",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have repented, repented",
  "form_1s": "me haya arrepentido",
  "form_2s": "te hayas arrepentido",
  "form_3s": "se haya arrepentido",
  "form_1p": "nos hayamos arrepentido",
  "form_2p": "os hayáis arrepentido",
  "form_3p": "se hayan arrepentido",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have repented",
  "form_1s": "me hubiere arrepentido",
  "form_2s": "te hubieres arrepentido",
  "form_3s": "se hubiere arrepentido",
  "form_1p": "nos hubiéremos arrepentido",
  "form_2p": "os hubiereis arrepentido",
  "form_3p": "se hubieren arrepentido",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had repented",
  "form_1s": "me hubiera arrepentido",
  "form_2s": "te hubieras arrepentido",
  "form_3s": "se hubiera arrepentido",
  "form_1p": "nos hubiéramos arrepentido",
  "form_2p": "os hubierais arrepentido",
  "form_3p": "se hubieran arrepentido",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Repent! Don't repent!",
  "form_1s": "",
  "form_2s": "arrepiéntete",
  "form_3s": "arrepentíos",
  "form_1p": "",
  "form_2p": "arrepiéntase",
  "form_3p": "arrepiéntanse",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrepentirse",
  "infinitive_english": "to repent, be repentant, regret",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Repent! Don't repent!",
  "form_1s": "",
  "form_2s": "no te arrepientas",
  "form_3s": "no os arrepentáis",
  "form_1p": "",
  "form_2p": "no se arrepienta",
  "form_3p": "no se arrepientan",
  "gerund": "arrepintiéndose",
  "gerund_english": "repenting",
  "pastparticiple": "arrepentido",
  "pastparticiple_english": "repented"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I throw, am throwing",
  "form_1s": "arrojo",
  "form_2s": "arrojas",
  "form_3s": "arroja",
  "form_1p": "arrojamos",
  "form_2p": "arrojáis",
  "form_3p": "arrojan",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will throw",
  "form_1s": "arrojaré",
  "form_2s": "arrojarás",
  "form_3s": "arrojará",
  "form_1p": "arrojaremos",
  "form_2p": "arrojaréis",
  "form_3p": "arrojarán",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was throwing, used to throw, threw",
  "form_1s": "arrojaba",
  "form_2s": "arrojabas",
  "form_3s": "arrojaba",
  "form_1p": "arrojábamos",
  "form_2p": "arrojabais",
  "form_3p": "arrojaban",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I threw",
  "form_1s": "arrojé",
  "form_2s": "arrojaste",
  "form_3s": "arrojó",
  "form_1p": "arrojamos",
  "form_2p": "arrojasteis",
  "form_3p": "arrojaron",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would throw",
  "form_1s": "arrojaría",
  "form_2s": "arrojarías",
  "form_3s": "arrojaría",
  "form_1p": "arrojaríamos",
  "form_2p": "arrojaríais",
  "form_3p": "arrojarían",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have thrown",
  "form_1s": "he arrojado",
  "form_2s": "has arrojado",
  "form_3s": "ha arrojado",
  "form_1p": "hemos arrojado",
  "form_2p": "habéis arrojado",
  "form_3p": "han arrojado",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have thrown",
  "form_1s": "habré arrojado",
  "form_2s": "habrás arrojado",
  "form_3s": "habrá arrojado",
  "form_1p": "habremos arrojado",
  "form_2p": "habréis arrojado",
  "form_3p": "habrán arrojado",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had thrown",
  "form_1s": "había arrojado",
  "form_2s": "habías arrojado",
  "form_3s": "había arrojado",
  "form_1p": "habíamos arrojado",
  "form_2p": "habíais arrojado",
  "form_3p": "habían arrojado",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had thrown",
  "form_1s": "hube arrojado",
  "form_2s": "hubiste arrojado",
  "form_3s": "hubo arrojado",
  "form_1p": "hubimos arrojado",
  "form_2p": "hubisteis arrojado",
  "form_3p": "hubieron arrojado",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have thrown",
  "form_1s": "habría arrojado",
  "form_2s": "habrías arrojado",
  "form_3s": "habría arrojado",
  "form_1p": "habríamos arrojado",
  "form_2p": "habríais arrojado",
  "form_3p": "habrían arrojado",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I throw, am throwing",
  "form_1s": "arroje",
  "form_2s": "arrojes",
  "form_3s": "arroje",
  "form_1p": "arrojemos",
  "form_2p": "arrojéis",
  "form_3p": "arrojen",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I threw, was throwing",
  "form_1s": "arrojara",
  "form_2s": "arrojaras",
  "form_3s": "arrojara",
  "form_1p": "arrojáramos",
  "form_2p": "arrojarais",
  "form_3p": "arrojaran",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will throw",
  "form_1s": "arrojare",
  "form_2s": "arrojares",
  "form_3s": "arrojare",
  "form_1p": "arrojáremos",
  "form_2p": "arrojareis",
  "form_3p": "arrojaren",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have thrown, threw",
  "form_1s": "haya arrojado",
  "form_2s": "hayas arrojado",
  "form_3s": "haya arrojado",
  "form_1p": "hayamos arrojado",
  "form_2p": "hayáis arrojado",
  "form_3p": "hayan arrojado",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have thrown",
  "form_1s": "hubiere arrojado",
  "form_2s": "hubieres arrojado",
  "form_3s": "hubiere arrojado",
  "form_1p": "hubiéremos arrojado",
  "form_2p": "hubiereis arrojado",
  "form_3p": "hubieren arrojado",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had thrown",
  "form_1s": "hubiera arrojado",
  "form_2s": "hubieras arrojado",
  "form_3s": "hubiera arrojado",
  "form_1p": "hubiéramos arrojado",
  "form_2p": "hubierais arrojado",
  "form_3p": "hubieran arrojado",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Throw! Don't throw!",
  "form_1s": "",
  "form_2s": "arroja",
  "form_3s": "arrojad",
  "form_1p": "",
  "form_2p": "arroje",
  "form_3p": "arrojen",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "arrojar",
  "infinitive_english": "to throw, hurl, cast, toss",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Throw! Don't throw!",
  "form_1s": "",
  "form_2s": "no arrojes",
  "form_3s": "no arrojéis",
  "form_1p": "",
  "form_2p": "no arroje",
  "form_3p": "no arrojen",
  "gerund": "arrojando",
  "gerund_english": "throwing",
  "pastparticiple": "arrojado",
  "pastparticiple_english": "thrown"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I attend, am attending",
  "form_1s": "asisto",
  "form_2s": "asistes",
  "form_3s": "asiste",
  "form_1p": "asistimos",
  "form_2p": "asistís",
  "form_3p": "asisten",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will attend",
  "form_1s": "asistiré",
  "form_2s": "asistirás",
  "form_3s": "asistirá",
  "form_1p": "asistiremos",
  "form_2p": "asistiréis",
  "form_3p": "asistirán",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was attending, used to attend, attended",
  "form_1s": "asistía",
  "form_2s": "asistías",
  "form_3s": "asistía",
  "form_1p": "asistíamos",
  "form_2p": "asistíais",
  "form_3p": "asistían",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I attended",
  "form_1s": "asistí",
  "form_2s": "asististe",
  "form_3s": "asistió",
  "form_1p": "asistimos",
  "form_2p": "asististeis",
  "form_3p": "asistieron",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would attend",
  "form_1s": "asistiría",
  "form_2s": "asistirías",
  "form_3s": "asistiría",
  "form_1p": "asistiríamos",
  "form_2p": "asistiríais",
  "form_3p": "asistirían",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have attended",
  "form_1s": "he asistido",
  "form_2s": "has asistido",
  "form_3s": "ha asistido",
  "form_1p": "hemos asistido",
  "form_2p": "habéis asistido",
  "form_3p": "han asistido",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have attended",
  "form_1s": "habré asistido",
  "form_2s": "habrás asistido",
  "form_3s": "habrá asistido",
  "form_1p": "habremos asistido",
  "form_2p": "habréis asistido",
  "form_3p": "habrán asistido",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had attended",
  "form_1s": "había asistido",
  "form_2s": "habías asistido",
  "form_3s": "había asistido",
  "form_1p": "habíamos asistido",
  "form_2p": "habíais asistido",
  "form_3p": "habían asistido",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had attended",
  "form_1s": "hube asistido",
  "form_2s": "hubiste asistido",
  "form_3s": "hubo asistido",
  "form_1p": "hubimos asistido",
  "form_2p": "hubisteis asistido",
  "form_3p": "hubieron asistido",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have attended",
  "form_1s": "habría asistido",
  "form_2s": "habrías asistido",
  "form_3s": "habría asistido",
  "form_1p": "habríamos asistido",
  "form_2p": "habríais asistido",
  "form_3p": "habrían asistido",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I attended, was attending",
  "form_1s": "asistiera",
  "form_2s": "asistieras",
  "form_3s": "asistiera",
  "form_1p": "asistiéramos",
  "form_2p": "asistierais",
  "form_3p": "asistieran",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will attend",
  "form_1s": "asistiere",
  "form_2s": "asistieres",
  "form_3s": "asistiere",
  "form_1p": "asistiéremos",
  "form_2p": "asistiereis",
  "form_3p": "asistieren",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have attended, attended",
  "form_1s": "haya asistido",
  "form_2s": "hayas asistido",
  "form_3s": "haya asistido",
  "form_1p": "hayamos asistido",
  "form_2p": "hayáis asistido",
  "form_3p": "hayan asistido",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have attended",
  "form_1s": "hubiere asistido",
  "form_2s": "hubieres asistido",
  "form_3s": "hubiere asistido",
  "form_1p": "hubiéremos asistido",
  "form_2p": "hubiereis asistido",
  "form_3p": "hubieren asistido",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had attended",
  "form_1s": "hubiera asistido",
  "form_2s": "hubieras asistido",
  "form_3s": "hubiera asistido",
  "form_1p": "hubiéramos asistido",
  "form_2p": "hubierais asistido",
  "form_3p": "hubieran asistido",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Attend! Don't attend!",
  "form_1s": "",
  "form_2s": "asiste",
  "form_3s": "asistid",
  "form_1p": "",
  "form_2p": "asista",
  "form_3p": "asistan",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asistir",
  "infinitive_english": "to attend",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Attend! Don't attend!",
  "form_1s": "",
  "form_2s": "no asistas",
  "form_3s": "no asistáis",
  "form_1p": "",
  "form_2p": "no asista",
  "form_3p": "no asistan",
  "gerund": "asistiendo",
  "gerund_english": "attending",
  "pastparticiple": "asistido",
  "pastparticiple_english": "attended"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I associate, am associating",
  "form_1s": "asocio",
  "form_2s": "asocias",
  "form_3s": "asocia",
  "form_1p": "asociamos",
  "form_2p": "asociáis",
  "form_3p": "asocian",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will associate",
  "form_1s": "asociaré",
  "form_2s": "asociarás",
  "form_3s": "asociará",
  "form_1p": "asociaremos",
  "form_2p": "asociaréis",
  "form_3p": "asociarán",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was associating, used to associate, associated",
  "form_1s": "asociaba",
  "form_2s": "asociabas",
  "form_3s": "asociaba",
  "form_1p": "asociábamos",
  "form_2p": "asociabais",
  "form_3p": "asociaban",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I associated",
  "form_1s": "asocié",
  "form_2s": "asociaste",
  "form_3s": "asoció",
  "form_1p": "asociamos",
  "form_2p": "asociasteis",
  "form_3p": "asociaron",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would associate",
  "form_1s": "asociaría",
  "form_2s": "asociarías",
  "form_3s": "asociaría",
  "form_1p": "asociaríamos",
  "form_2p": "asociaríais",
  "form_3p": "asociarían",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have associated",
  "form_1s": "he asociado",
  "form_2s": "has asociado",
  "form_3s": "ha asociado",
  "form_1p": "hemos asociado",
  "form_2p": "habéis asociado",
  "form_3p": "han asociado",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have associated",
  "form_1s": "habré asociado",
  "form_2s": "habrás asociado",
  "form_3s": "habrá asociado",
  "form_1p": "habremos asociado",
  "form_2p": "habréis asociado",
  "form_3p": "habrán asociado",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had associated",
  "form_1s": "había asociado",
  "form_2s": "habías asociado",
  "form_3s": "había asociado",
  "form_1p": "habíamos asociado",
  "form_2p": "habíais asociado",
  "form_3p": "habían asociado",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had associated",
  "form_1s": "hube asociado",
  "form_2s": "hubiste asociado",
  "form_3s": "hubo asociado",
  "form_1p": "hubimos asociado",
  "form_2p": "hubisteis asociado",
  "form_3p": "hubieron asociado",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have associated",
  "form_1s": "habría asociado",
  "form_2s": "habrías asociado",
  "form_3s": "habría asociado",
  "form_1p": "habríamos asociado",
  "form_2p": "habríais asociado",
  "form_3p": "habrían asociado",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I associate, am associating",
  "form_1s": "asocie",
  "form_2s": "asocies",
  "form_3s": "asocie",
  "form_1p": "asociemos",
  "form_2p": "asociéis",
  "form_3p": "asocien",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I associated, was associating",
  "form_1s": "asociara",
  "form_2s": "asociaras",
  "form_3s": "asociara",
  "form_1p": "asociáramos",
  "form_2p": "asociarais",
  "form_3p": "asociaran",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will associate",
  "form_1s": "asociare",
  "form_2s": "asociares",
  "form_3s": "asociare",
  "form_1p": "asociáremos",
  "form_2p": "asociareis",
  "form_3p": "asociaren",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have associated, associated",
  "form_1s": "haya asociado",
  "form_2s": "hayas asociado",
  "form_3s": "haya asociado",
  "form_1p": "hayamos asociado",
  "form_2p": "hayáis asociado",
  "form_3p": "hayan asociado",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have associated",
  "form_1s": "hubiere asociado",
  "form_2s": "hubieres asociado",
  "form_3s": "hubiere asociado",
  "form_1p": "hubiéremos asociado",
  "form_2p": "hubiereis asociado",
  "form_3p": "hubieren asociado",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had associated",
  "form_1s": "hubiera asociado",
  "form_2s": "hubieras asociado",
  "form_3s": "hubiera asociado",
  "form_1p": "hubiéramos asociado",
  "form_2p": "hubierais asociado",
  "form_3p": "hubieran asociado",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Associate! Don't associate!",
  "form_1s": "",
  "form_2s": "asocia",
  "form_3s": "asociad",
  "form_1p": "",
  "form_2p": "asocie",
  "form_3p": "asocien",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "asociar",
  "infinitive_english": "to associate; to pool, put together",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Associate! Don't associate!",
  "form_1s": "",
  "form_2s": "no asocies",
  "form_3s": "no asociéis",
  "form_1p": "",
  "form_2p": "no asocie",
  "form_3p": "no asocien",
  "gerund": "asociando",
  "gerund_english": "associating",
  "pastparticiple": "asociado",
  "pastparticiple_english": "associated"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I breath in, am breathing in",
  "form_1s": "aspiro",
  "form_2s": "aspiras",
  "form_3s": "aspira",
  "form_1p": "aspiramos",
  "form_2p": "aspiráis",
  "form_3p": "aspiran",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will breath in",
  "form_1s": "aspiraré",
  "form_2s": "aspirarás",
  "form_3s": "aspirará",
  "form_1p": "aspiraremos",
  "form_2p": "aspiraréis",
  "form_3p": "aspirarán",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was breathing in, used to breath in, breathed in",
  "form_1s": "aspiraba",
  "form_2s": "aspirabas",
  "form_3s": "aspiraba",
  "form_1p": "aspirábamos",
  "form_2p": "aspirabais",
  "form_3p": "aspiraban",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I breathed in",
  "form_1s": "aspiré",
  "form_2s": "aspiraste",
  "form_3s": "aspiró",
  "form_1p": "aspiramos",
  "form_2p": "aspirasteis",
  "form_3p": "aspiraron",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would breath in",
  "form_1s": "aspiraría",
  "form_2s": "aspirarías",
  "form_3s": "aspiraría",
  "form_1p": "aspiraríamos",
  "form_2p": "aspiraríais",
  "form_3p": "aspirarían",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have breathed in",
  "form_1s": "he aspirado",
  "form_2s": "has aspirado",
  "form_3s": "ha aspirado",
  "form_1p": "hemos aspirado",
  "form_2p": "habéis aspirado",
  "form_3p": "han aspirado",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have breathed in",
  "form_1s": "habré aspirado",
  "form_2s": "habrás aspirado",
  "form_3s": "habrá aspirado",
  "form_1p": "habremos aspirado",
  "form_2p": "habréis aspirado",
  "form_3p": "habrán aspirado",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had breathed in",
  "form_1s": "había aspirado",
  "form_2s": "habías aspirado",
  "form_3s": "había aspirado",
  "form_1p": "habíamos aspirado",
  "form_2p": "habíais aspirado",
  "form_3p": "habían aspirado",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had breathed in",
  "form_1s": "hube aspirado",
  "form_2s": "hubiste aspirado",
  "form_3s": "hubo aspirado",
  "form_1p": "hubimos aspirado",
  "form_2p": "hubisteis aspirado",
  "form_3p": "hubieron aspirado",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have breathed in",
  "form_1s": "habría aspirado",
  "form_2s": "habrías aspirado",
  "form_3s": "habría aspirado",
  "form_1p": "habríamos aspirado",
  "form_2p": "habríais aspirado",
  "form_3p": "habrían aspirado",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I breath in, am breathing in",
  "form_1s": "aspire",
  "form_2s": "aspires",
  "form_3s": "aspire",
  "form_1p": "aspiremos",
  "form_2p": "aspiréis",
  "form_3p": "aspiren",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I breathed in, was breathing in",
  "form_1s": "aspirara",
  "form_2s": "aspiraras",
  "form_3s": "aspirara",
  "form_1p": "aspiráramos",
  "form_2p": "aspirarais",
  "form_3p": "aspiraran",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will breath in",
  "form_1s": "aspirare",
  "form_2s": "aspirares",
  "form_3s": "aspirare",
  "form_1p": "aspiráremos",
  "form_2p": "aspirareis",
  "form_3p": "aspiraren",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have breathed in, breathed in",
  "form_1s": "haya aspirado",
  "form_2s": "hayas aspirado",
  "form_3s": "haya aspirado",
  "form_1p": "hayamos aspirado",
  "form_2p": "hayáis aspirado",
  "form_3p": "hayan aspirado",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have breathed in",
  "form_1s": "hubiere aspirado",
  "form_2s": "hubieres aspirado",
  "form_3s": "hubiere aspirado",
  "form_1p": "hubiéremos aspirado",
  "form_2p": "hubiereis aspirado",
  "form_3p": "hubieren aspirado",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had breathed in",
  "form_1s": "hubiera aspirado",
  "form_2s": "hubieras aspirado",
  "form_3s": "hubiera aspirado",
  "form_1p": "hubiéramos aspirado",
  "form_2p": "hubierais aspirado",
  "form_3p": "hubieran aspirado",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Breath in! Don't breath in!",
  "form_1s": "",
  "form_2s": "aspira",
  "form_3s": "aspirad",
  "form_1p": "",
  "form_2p": "aspire",
  "form_3p": "aspiren",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "aspirar",
  "infinitive_english": "to breath in, inhale; to suck in; to aspirate; to aspire",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Breath in! Don't breath in!",
  "form_1s": "",
  "form_2s": "no aspires",
  "form_3s": "no aspiréis",
  "form_1p": "",
  "form_2p": "no aspire",
  "form_3p": "no aspiren",
  "gerund": "aspirando",
  "gerund_english": "breathing in",
  "pastparticiple": "aspirado",
  "pastparticiple_english": "breathed in"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I frighten, am frightening",
  "form_1s": "asusto",
  "form_2s": "asustas",
  "form_3s": "asusta",
  "form_1p": "asustamos",
  "form_2p": "asustáis",
  "form_3p": "asustan",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will frighten",
  "form_1s": "asustaré",
  "form_2s": "asustarás",
  "form_3s": "asustará",
  "form_1p": "asustaremos",
  "form_2p": "asustaréis",
  "form_3p": "asustarán",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was frightening, used to frighten, frightened",
  "form_1s": "asustaba",
  "form_2s": "asustabas",
  "form_3s": "asustaba",
  "form_1p": "asustábamos",
  "form_2p": "asustabais",
  "form_3p": "asustaban",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I frightened",
  "form_1s": "asusté",
  "form_2s": "asustaste",
  "form_3s": "asustó",
  "form_1p": "asustamos",
  "form_2p": "asustasteis",
  "form_3p": "asustaron",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would frighten",
  "form_1s": "asustaría",
  "form_2s": "asustarías",
  "form_3s": "asustaría",
  "form_1p": "asustaríamos",
  "form_2p": "asustaríais",
  "form_3p": "asustarían",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have frightened",
  "form_1s": "he asustado",
  "form_2s": "has asustado",
  "form_3s": "ha asustado",
  "form_1p": "hemos asustado",
  "form_2p": "habéis asustado",
  "form_3p": "han asustado",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "ayudar",
  "infinitive_english": "to help",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will help",
  "form_1s": "ayudaré",
  "form_2s": "ayudarás",
  "form_3s": "ayudará",
  "form_1p": "ayudaremos",
  "form_2p": "ayudaréis",
  "form_3p": "ayudarán",
  "gerund": "ayudando",
  "gerund_english": "helping",
  "pastparticiple": "ayudado",
  "pastparticiple_english": "helped"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have frightened",
  "form_1s": "habré asustado",
  "form_2s": "habrás asustado",
  "form_3s": "habrá asustado",
  "form_1p": "habremos asustado",
  "form_2p": "habréis asustado",
  "form_3p": "habrán asustado",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had frightened",
  "form_1s": "había asustado",
  "form_2s": "habías asustado",
  "form_3s": "había asustado",
  "form_1p": "habíamos asustado",
  "form_2p": "habíais asustado",
  "form_3p": "habían asustado",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had frightened",
  "form_1s": "hube asustado",
  "form_2s": "hubiste asustado",
  "form_3s": "hubo asustado",
  "form_1p": "hubimos asustado",
  "form_2p": "hubisteis asustado",
  "form_3p": "hubieron asustado",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have frightened",
  "form_1s": "habría asustado",
  "form_2s": "habrías asustado",
  "form_3s": "habría asustado",
  "form_1p": "habríamos asustado",
  "form_2p": "habríais asustado",
  "form_3p": "habrían asustado",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I frighten, am frightening",
  "form_1s": "asuste",
  "form_2s": "asustes",
  "form_3s": "asuste",
  "form_1p": "asustemos",
  "form_2p": "asustéis",
  "form_3p": "asusten",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I frightened, was frightening",
  "form_1s": "asustara",
  "form_2s": "asustaras",
  "form_3s": "asustara",
  "form_1p": "asustáramos",
  "form_2p": "asustarais",
  "form_3p": "asustaran",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will frighten",
  "form_1s": "asustare",
  "form_2s": "asustares",
  "form_3s": "asustare",
  "form_1p": "asustáremos",
  "form_2p": "asustareis",
  "form_3p": "asustaren",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have frightened, frightened",
  "form_1s": "haya asustado",
  "form_2s": "hayas asustado",
  "form_3s": "haya asustado",
  "form_1p": "hayamos asustado",
  "form_2p": "hayáis asustado",
  "form_3p": "hayan asustado",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have frightened",
  "form_1s": "hubiere asustado",
  "form_2s": "hubieres asustado",
  "form_3s": "hubiere asustado",
  "form_1p": "hubiéremos asustado",
  "form_2p": "hubiereis asustado",
  "form_3p": "hubieren asustado",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had frightened",
  "form_1s": "hubiera asustado",
  "form_2s": "hubieras asustado",
  "form_3s": "hubiera asustado",
  "form_1p": "hubiéramos asustado",
  "form_2p": "hubierais asustado",
  "form_3p": "hubieran asustado",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Frighten! Don't frighten!",
  "form_1s": "",
  "form_2s": "asusta",
  "form_3s": "asustad",
  "form_1p": "",
  "form_2p": "asuste",
  "form_3p": "asusten",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustar",
  "infinitive_english": "to frighten, scare, startle",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Frighten! Don't frighten!",
  "form_1s": "",
  "form_2s": "no asustes",
  "form_3s": "no asustéis",
  "form_1p": "",
  "form_2p": "no asuste",
  "form_3p": "no asusten",
  "gerund": "asustando",
  "gerund_english": "frightening",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am frightened, am being frightened",
  "form_1s": "me asusto",
  "form_2s": "te asustas",
  "form_3s": "se asusta",
  "form_1p": "nos asustamos",
  "form_2p": "os asustáis",
  "form_3p": "se asustan",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be frightened",
  "form_1s": "me asustaré",
  "form_2s": "te asustarás",
  "form_3s": "se asustará",
  "form_1p": "nos asustaremos",
  "form_2p": "os asustaréis",
  "form_3p": "se asustarán",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was being frightened, used to be frightened, was frightened",
  "form_1s": "me asustaba",
  "form_2s": "te asustabas",
  "form_3s": "se asustaba",
  "form_1p": "nos asustábamos",
  "form_2p": "os asustabais",
  "form_3p": "se asustaban",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I was frightened",
  "form_1s": "me asusté",
  "form_2s": "te asustaste",
  "form_3s": "se asustó",
  "form_1p": "nos asustamos",
  "form_2p": "os asustasteis",
  "form_3p": "se asustaron",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would be frightened",
  "form_1s": "me asustaría",
  "form_2s": "te asustarías",
  "form_3s": "se asustaría",
  "form_1p": "nos asustaríamos",
  "form_2p": "os asustaríais",
  "form_3p": "se asustarían",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been frightened",
  "form_1s": "me he asustado",
  "form_2s": "te has asustado",
  "form_3s": "se ha asustado",
  "form_1p": "nos hemos asustado",
  "form_2p": "os habéis asustado",
  "form_3p": "se han asustado",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been frightened",
  "form_1s": "me habré asustado",
  "form_2s": "te habrás asustado",
  "form_3s": "se habrá asustado",
  "form_1p": "nos habremos asustado",
  "form_2p": "os habréis asustado",
  "form_3p": "se habrán asustado",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been frightened",
  "form_1s": "me había asustado",
  "form_2s": "te habías asustado",
  "form_3s": "se había asustado",
  "form_1p": "nos habíamos asustado",
  "form_2p": "os habíais asustado",
  "form_3p": "se habían asustado",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had been frightened",
  "form_1s": "me hube asustado",
  "form_2s": "te hubiste asustado",
  "form_3s": "se hubo asustado",
  "form_1p": "nos hubimos asustado",
  "form_2p": "os hubisteis asustado",
  "form_3p": "se hubieron asustado",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have been frightened",
  "form_1s": "me habría asustado",
  "form_2s": "te habrías asustado",
  "form_3s": "se habría asustado",
  "form_1p": "nos habríamos asustado",
  "form_2p": "os habríais asustado",
  "form_3p": "se habrían asustado",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I am frightened, am being frightened",
  "form_1s": "me asuste",
  "form_2s": "te asustes",
  "form_3s": "se asuste",
  "form_1p": "nos asustemos",
  "form_2p": "os asustéis",
  "form_3p": "se asusten",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was frightened, was being frightened",
  "form_1s": "me asustara",
  "form_2s": "te asustaras",
  "form_3s": "se asustara",
  "form_1p": "nos asustáramos",
  "form_2p": "os asustarais",
  "form_3p": "se asustaran",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will be frightened",
  "form_1s": "me asustare",
  "form_2s": "te asustares",
  "form_3s": "se asustare",
  "form_1p": "nos asustáremos",
  "form_2p": "os asustareis",
  "form_3p": "se asustaren",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have been frightened, was frightened",
  "form_1s": "me haya asustado",
  "form_2s": "te hayas asustado",
  "form_3s": "se haya asustado",
  "form_1p": "nos hayamos asustado",
  "form_2p": "os hayáis asustado",
  "form_3p": "se hayan asustado",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have been frightened",
  "form_1s": "me hubiere asustado",
  "form_2s": "te hubieres asustado",
  "form_3s": "se hubiere asustado",
  "form_1p": "nos hubiéremos asustado",
  "form_2p": "os hubiereis asustado",
  "form_3p": "se hubieren asustado",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had been frightened",
  "form_1s": "me hubiera asustado",
  "form_2s": "te hubieras asustado",
  "form_3s": "se hubiera asustado",
  "form_1p": "nos hubiéramos asustado",
  "form_2p": "os hubierais asustado",
  "form_3p": "se hubieran asustado",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be frightened! Don't be frightened!",
  "form_1s": "",
  "form_2s": "asústate",
  "form_3s": "asustaos",
  "form_1p": "",
  "form_2p": "asústese",
  "form_3p": "asústense",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "asustarse",
  "infinitive_english": "to be frightened [oneself]",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Be frightened! Don't be frightened!",
  "form_1s": "",
  "form_2s": "no te asustes",
  "form_3s": "no os asustéis",
  "form_1p": "",
  "form_2p": "no se asuste",
  "form_3p": "no se asusten",
  "gerund": "asustándose",
  "gerund_english": "being frightened",
  "pastparticiple": "asustado",
  "pastparticiple_english": "frightened"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I attack, am attacking",
  "form_1s": "ataco",
  "form_2s": "atacas",
  "form_3s": "ataca",
  "form_1p": "atacamos",
  "form_2p": "atacáis",
  "form_3p": "atacan",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will attack",
  "form_1s": "atacaré",
  "form_2s": "atacarás",
  "form_3s": "atacará",
  "form_1p": "atacaremos",
  "form_2p": "atacaréis",
  "form_3p": "atacarán",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was attacking, used to attack, attacked",
  "form_1s": "atacaba",
  "form_2s": "atacabas",
  "form_3s": "atacaba",
  "form_1p": "atacábamos",
  "form_2p": "atacabais",
  "form_3p": "atacaban",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I attacked",
  "form_1s": "ataqué",
  "form_2s": "atacaste",
  "form_3s": "atacó",
  "form_1p": "atacamos",
  "form_2p": "atacasteis",
  "form_3p": "atacaron",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would attack",
  "form_1s": "atacaría",
  "form_2s": "atacarías",
  "form_3s": "atacaría",
  "form_1p": "atacaríamos",
  "form_2p": "atacaríais",
  "form_3p": "atacarían",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have attacked",
  "form_1s": "he atacado",
  "form_2s": "has atacado",
  "form_3s": "ha atacado",
  "form_1p": "hemos atacado",
  "form_2p": "habéis atacado",
  "form_3p": "han atacado",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have attacked",
  "form_1s": "habré atacado",
  "form_2s": "habrás atacado",
  "form_3s": "habrá atacado",
  "form_1p": "habremos atacado",
  "form_2p": "habréis atacado",
  "form_3p": "habrán atacado",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had attacked",
  "form_1s": "había atacado",
  "form_2s": "habías atacado",
  "form_3s": "había atacado",
  "form_1p": "habíamos atacado",
  "form_2p": "habíais atacado",
  "form_3p": "habían atacado",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had attacked",
  "form_1s": "hube atacado",
  "form_2s": "hubiste atacado",
  "form_3s": "hubo atacado",
  "form_1p": "hubimos atacado",
  "form_2p": "hubisteis atacado",
  "form_3p": "hubieron atacado",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have attacked",
  "form_1s": "habría atacado",
  "form_2s": "habrías atacado",
  "form_3s": "habría atacado",
  "form_1p": "habríamos atacado",
  "form_2p": "habríais atacado",
  "form_3p": "habrían atacado",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I attack, am attacking",
  "form_1s": "ataque",
  "form_2s": "ataques",
  "form_3s": "ataque",
  "form_1p": "ataquemos",
  "form_2p": "ataquéis",
  "form_3p": "ataquen",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I attacked, was attacking",
  "form_1s": "atacara",
  "form_2s": "atacaras",
  "form_3s": "atacara",
  "form_1p": "atacáramos",
  "form_2p": "atacarais",
  "form_3p": "atacaran",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will attack",
  "form_1s": "atacare",
  "form_2s": "atacares",
  "form_3s": "atacare",
  "form_1p": "atacáremos",
  "form_2p": "atacareis",
  "form_3p": "atacaren",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have attacked, attacked",
  "form_1s": "haya atacado",
  "form_2s": "hayas atacado",
  "form_3s": "haya atacado",
  "form_1p": "hayamos atacado",
  "form_2p": "hayáis atacado",
  "form_3p": "hayan atacado",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have attacked",
  "form_1s": "hubiere atacado",
  "form_2s": "hubieres atacado",
  "form_3s": "hubiere atacado",
  "form_1p": "hubiéremos atacado",
  "form_2p": "hubiereis atacado",
  "form_3p": "hubieren atacado",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had attacked",
  "form_1s": "hubiera atacado",
  "form_2s": "hubieras atacado",
  "form_3s": "hubiera atacado",
  "form_1p": "hubiéramos atacado",
  "form_2p": "hubierais atacado",
  "form_3p": "hubieran atacado",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Attack! Don't attack!",
  "form_1s": "",
  "form_2s": "ataca",
  "form_3s": "atacad",
  "form_1p": "",
  "form_2p": "ataque",
  "form_3p": "ataquen",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atacar",
  "infinitive_english": "to attack",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Attack! Don't attack!",
  "form_1s": "",
  "form_2s": "no ataques",
  "form_3s": "no ataquéis",
  "form_1p": "",
  "form_2p": "no ataque",
  "form_3p": "no ataquen",
  "gerund": "atacando",
  "gerund_english": "attacking",
  "pastparticiple": "atacado",
  "pastparticiple_english": "attacked"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I attend to, am attending to",
  "form_1s": "atiendo",
  "form_2s": "atiendes",
  "form_3s": "atiende",
  "form_1p": "atendemos",
  "form_2p": "atendéis",
  "form_3p": "atienden",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will attend to",
  "form_1s": "atenderé",
  "form_2s": "atenderás",
  "form_3s": "atenderá",
  "form_1p": "atenderemos",
  "form_2p": "atenderéis",
  "form_3p": "atenderán",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was attending to, used to attend to, attended to",
  "form_1s": "atendía",
  "form_2s": "atendías",
  "form_3s": "atendía",
  "form_1p": "atendíamos",
  "form_2p": "atendíais",
  "form_3p": "atendían",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I attended to",
  "form_1s": "atendí",
  "form_2s": "atendiste",
  "form_3s": "atendió",
  "form_1p": "atendimos",
  "form_2p": "atendisteis",
  "form_3p": "atendieron",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would attend to",
  "form_1s": "atendería",
  "form_2s": "atenderías",
  "form_3s": "atendería",
  "form_1p": "atenderíamos",
  "form_2p": "atenderíais",
  "form_3p": "atenderían",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have attended to",
  "form_1s": "he atendido",
  "form_2s": "has atendido",
  "form_3s": "ha atendido",
  "form_1p": "hemos atendido",
  "form_2p": "habéis atendido",
  "form_3p": "han atendido",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have attended to",
  "form_1s": "habré atendido",
  "form_2s": "habrás atendido",
  "form_3s": "habrá atendido",
  "form_1p": "habremos atendido",
  "form_2p": "habréis atendido",
  "form_3p": "habrán atendido",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had attended to",
  "form_1s": "había atendido",
  "form_2s": "habías atendido",
  "form_3s": "había atendido",
  "form_1p": "habíamos atendido",
  "form_2p": "habíais atendido",
  "form_3p": "habían atendido",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito anterior",
  "tense_english": "Preterite (Archaic)",
  "verb_english": "I had attended to",
  "form_1s": "hube atendido",
  "form_2s": "hubiste atendido",
  "form_3s": "hubo atendido",
  "form_1p": "hubimos atendido",
  "form_2p": "hubisteis atendido",
  "form_3p": "hubieron atendido",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional perfecto",
  "tense_english": "Conditional Perfect",
  "verb_english": "I would have attended to",
  "form_1s": "habría atendido",
  "form_2s": "habrías atendido",
  "form_3s": "habría atendido",
  "form_1p": "habríamos atendido",
  "form_2p": "habríais atendido",
  "form_3p": "habrían atendido",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I attend to, am attending to",
  "form_1s": "atienda",
  "form_2s": "atiendas",
  "form_3s": "atienda",
  "form_1p": "atendamos",
  "form_2p": "atendáis",
  "form_3p": "atiendan",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I attended to, was attending to",
  "form_1s": "atendiera",
  "form_2s": "atendieras",
  "form_3s": "atendiera",
  "form_1p": "atendiéramos",
  "form_2p": "atendierais",
  "form_3p": "atendieran",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will attend to",
  "form_1s": "atendiere",
  "form_2s": "atendieres",
  "form_3s": "atendiere",
  "form_1p": "atendiéremos",
  "form_2p": "atendiereis",
  "form_3p": "atendieren",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have attended to, attended to",
  "form_1s": "haya atendido",
  "form_2s": "hayas atendido",
  "form_3s": "haya atendido",
  "form_1p": "hayamos atendido",
  "form_2p": "hayáis atendido",
  "form_3p": "hayan atendido",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have attended to",
  "form_1s": "hubiere atendido",
  "form_2s": "hubieres atendido",
  "form_3s": "hubiere atendido",
  "form_1p": "hubiéremos atendido",
  "form_2p": "hubiereis atendido",
  "form_3p": "hubieren atendido",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Subjuntivo",
  "mood_english": "Subjunctive",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had attended to",
  "form_1s": "hubiera atendido",
  "form_2s": "hubieras atendido",
  "form_3s": "hubiera atendido",
  "form_1p": "hubiéramos atendido",
  "form_2p": "hubierais atendido",
  "form_3p": "hubieran atendido",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Imperativo Afirmativo",
  "mood_english": "Imperative Affirmative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Attend to! Don't attend to!",
  "form_1s": "",
  "form_2s": "atiende",
  "form_3s": "atended",
  "form_1p": "",
  "form_2p": "atienda",
  "form_3p": "atiendan",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atender",
  "infinitive_english": "to attend to, pay attention to",
  "mood": "Imperativo Negativo",
  "mood_english": "Imperative Negative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "Attend to! Don't attend to!",
  "form_1s": "",
  "form_2s": "no atiendas",
  "form_3s": "no atendáis",
  "form_1p": "",
  "form_2p": "no atienda",
  "form_3p": "no atiendan",
  "gerund": "atendiendo",
  "gerund_english": "attending to",
  "pastparticiple": "atendido",
  "pastparticiple_english": "attended to"
}, {
  "infinitive": "atraer",
  "infinitive_english": "to attract, draw, lure",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente",
  "tense_english": "Present",
  "verb_english": "I attract, am attracting",
  "form_1s": "atraigo",
  "form_2s": "atraes",
  "form_3s": "atrae",
  "form_1p": "atraemos",
  "form_2p": "atraéis",
  "form_3p": "atraen",
  "gerund": "atrayendo",
  "gerund_english": "attracting",
  "pastparticiple": "atraído",
  "pastparticiple_english": "attracted"
}, {
  "infinitive": "atraer",
  "infinitive_english": "to attract, draw, lure",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro",
  "tense_english": "Future",
  "verb_english": "I will attract",
  "form_1s": "atraeré",
  "form_2s": "atraerás",
  "form_3s": "atraerá",
  "form_1p": "atraeremos",
  "form_2p": "atraeréis",
  "form_3p": "atraerán",
  "gerund": "atrayendo",
  "gerund_english": "attracting",
  "pastparticiple": "atraído",
  "pastparticiple_english": "attracted"
}, {
  "infinitive": "atraer",
  "infinitive_english": "to attract, draw, lure",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Imperfecto",
  "tense_english": "Imperfect",
  "verb_english": "I was attracting, used to attract, attracted",
  "form_1s": "atraía",
  "form_2s": "atraías",
  "form_3s": "atraía",
  "form_1p": "atraíamos",
  "form_2p": "atraíais",
  "form_3p": "atraían",
  "gerund": "atrayendo",
  "gerund_english": "attracting",
  "pastparticiple": "atraído",
  "pastparticiple_english": "attracted"
}, {
  "infinitive": "atraer",
  "infinitive_english": "to attract, draw, lure",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pretérito",
  "tense_english": "Preterite",
  "verb_english": "I attracted",
  "form_1s": "atraje",
  "form_2s": "atrajiste",
  "form_3s": "atrajo",
  "form_1p": "atrajimos",
  "form_2p": "atrajisteis",
  "form_3p": "atrajeron",
  "gerund": "atrayendo",
  "gerund_english": "attracting",
  "pastparticiple": "atraído",
  "pastparticiple_english": "attracted"
}, {
  "infinitive": "atraer",
  "infinitive_english": "to attract, draw, lure",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Condicional",
  "tense_english": "Conditional",
  "verb_english": "I would attract",
  "form_1s": "atraería",
  "form_2s": "atraerías",
  "form_3s": "atraería",
  "form_1p": "atraeríamos",
  "form_2p": "atraeríais",
  "form_3p": "atraerían",
  "gerund": "atrayendo",
  "gerund_english": "attracting",
  "pastparticiple": "atraído",
  "pastparticiple_english": "attracted"
}, {
  "infinitive": "atraer",
  "infinitive_english": "to attract, draw, lure",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Presente perfecto",
  "tense_english": "Present Perfect",
  "verb_english": "I have attracted",
  "form_1s": "he atraído",
  "form_2s": "has atraído",
  "form_3s": "ha atraído",
  "form_1p": "hemos atraído",
  "form_2p": "habéis atraído",
  "form_3p": "han atraído",
  "gerund": "atrayendo",
  "gerund_english": "attracting",
  "pastparticiple": "atraído",
  "pastparticiple_english": "attracted"
}, {
  "infinitive": "atraer",
  "infinitive_english": "to attract, draw, lure",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Futuro perfecto",
  "tense_english": "Future Perfect",
  "verb_english": "I will have attracted",
  "form_1s": "habré atraído",
  "form_2s": "habrás atraído",
  "form_3s": "habrá atraído",
  "form_1p": "habremos atraído",
  "form_2p": "habréis atraído",
  "form_3p": "habrán atraído",
  "gerund": "atrayendo",
  "gerund_english": "attracting",
  "pastparticiple": "atraído",
  "pastparticiple_english": "attracted"
}, {
  "infinitive": "atraer",
  "infinitive_english": "to attract, draw, lure",
  "mood": "Indicativo",
  "mood_english": "Indicative",
  "tense": "Pluscuamperfecto",
  "tense_english": "Past Perfect",
  "verb_english": "I had attracted",
  "form_1s": "había atraído",
  "form_2s": "habías atraído",
  "form_3s": "había atraído",
  "form_1p": "habíamos atraído",
  "form_2p": "habíais atraído",
  "form_3p": "habían atraído",
  "gerund": "atrayendo",
  "gerund_english": "attracting",
  "pastparticiple": "atraído",
  "pastparticiple_english": "attracted"
}];
var _default = miniData;
exports.default = _default;
},{}],"data/beginnerData.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var presentData = [{
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I run, am running',
  form_1s: 'corro',
  form_2s: 'corres',
  form_3s: 'corre',
  form_1p: 'corremos',
  form_3p: 'corren',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I run, am running',
  form_1s: 'voy a correr',
  form_2s: 'vas a correr',
  form_3s: 'va a correr',
  form_1p: 'vamos a correr',
  form_3p: 'van a correr',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'correr',
  infinitive_english: 'to run',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I ran',
  form_1s: 'corrí',
  form_2s: 'corriste',
  form_3s: 'corrió',
  form_1p: 'corrimos',
  form_3p: 'corrieron',
  pastparticiple: 'corrido',
  pastparticiple_english: 'run'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I come, am coming',
  form_1s: 'vengo',
  form_2s: 'vienes',
  form_3s: 'viene',
  form_1p: 'venimos',
  form_3p: 'vienen',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I come, am coming',
  form_1s: 'voy a venir',
  form_2s: 'vas a venir',
  form_3s: 'va a venir',
  form_1p: 'vamos a venir',
  form_3p: 'van a venir',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'venir',
  infinitive_english: 'to come',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I came',
  form_1s: 'vine',
  form_2s: 'viniste',
  form_3s: 'vino',
  form_1p: 'vinimos',
  form_3p: 'vinieron',
  pastparticiple: 'venido',
  pastparticiple_english: 'come'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I say, am saying',
  form_1s: 'digo',
  form_2s: 'dices',
  form_3s: 'dice',
  form_1p: 'decimos',
  form_3p: 'dicen',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I say, am saying',
  form_1s: 'voy a decir',
  form_2s: 'vas a decir',
  form_3s: 'va a decir',
  form_1p: 'vamos a decir',
  form_3p: 'van a decir',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'decir',
  infinitive_english: 'to say',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I said',
  form_1s: 'dije',
  form_2s: 'dijiste',
  form_3s: 'dijo',
  form_1p: 'dijimos',
  form_3p: 'dijeron',
  pastparticiple: 'dicho',
  pastparticiple_english: 'said'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am able, can',
  form_1s: 'puedo',
  form_2s: 'puedes',
  form_3s: 'puede',
  form_1p: 'podemos',
  form_3p: 'pueden',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I am able, can',
  form_1s: 'voy a poder',
  form_2s: 'vas a poder',
  form_3s: 'va a poder',
  form_1p: 'vamos a poder',
  form_3p: 'van a poder',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'poder',
  infinitive_english: 'to be able, can',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I was able, could',
  form_1s: 'pude',
  form_2s: 'pudiste',
  form_3s: 'pudo',
  form_1p: 'pudimos',
  form_3p: 'pudieron',
  pastparticiple: 'podido',
  pastparticiple_english: 'been able'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I give, am giving',
  form_1s: 'doy',
  form_2s: 'das',
  form_3s: 'da',
  form_1p: 'damos',
  form_3p: 'dan',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I give, am giving',
  form_1s: 'voy a dar',
  form_2s: 'vas a dar',
  form_3s: 'va a dar',
  form_1p: 'vamos a dar',
  form_3p: 'van a dar',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'dar',
  infinitive_english: 'to give',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I gave',
  form_1s: 'di',
  form_2s: 'diste',
  form_3s: 'dio',
  form_1p: 'dimos',
  form_3p: 'dieron',
  pastparticiple: 'dado',
  pastparticiple_english: 'given'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I see, am seeing',
  form_1s: 'veo',
  form_2s: 'ves',
  form_3s: 've',
  form_1p: 'vemos',
  form_3p: 'ven',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I see, am seeing',
  form_1s: 'voy a ver',
  form_2s: 'vas a ver',
  form_3s: 'va a ver',
  form_1p: 'vamos a ver',
  form_3p: 'van a ver',
  pastparticiple: 'visto',
  pastparticiple_english: 'see'
}, {
  infinitive: 'ver',
  infinitive_english: 'to see',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I saw',
  form_1s: 'vi',
  form_2s: 'viste',
  form_3s: 'vio',
  form_1p: 'vimos',
  form_3p: 'vieron',
  pastparticiple: 'visto',
  pastparticiple_english: 'seen'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I know',
  form_1s: 'sé',
  form_2s: 'sabes',
  form_3s: 'sabe',
  form_1p: 'sabemos',
  form_3p: 'saben',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I know',
  form_1s: 'voy a saber',
  form_2s: 'vas a saber',
  form_3s: 'va a saber',
  form_1p: 'vamos a saber',
  form_3p: 'van a saber',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'saber',
  infinitive_english: 'to know',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I knew',
  form_1s: 'supe',
  form_2s: 'supiste',
  form_3s: 'supo',
  form_1p: 'supimos',
  form_3p: 'supieron',
  pastparticiple: 'sabido',
  pastparticiple_english: 'known'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I speak, am speaking',
  form_1s: 'hablo',
  form_2s: 'hablas',
  form_3s: 'habla',
  form_1p: 'hablamos',
  form_3p: 'hablan',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I speak, am speaking',
  form_1s: 'voy a hablar',
  form_2s: 'vas a hablar',
  form_3s: 'va a hablar',
  form_1p: 'vamos a hablar',
  form_3p: 'van a hablar',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'hablar',
  infinitive_english: 'to speak',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I spoke',
  form_1s: 'hablé',
  form_2s: 'hablaste',
  form_3s: 'habló',
  form_1p: 'hablamos',
  form_3p: 'hablaron',
  pastparticiple: 'hablado',
  pastparticiple_english: 'spoken'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am',
  form_1s: 'estoy',
  form_2s: 'estás',
  form_3s: 'está',
  form_1p: 'estamos',
  form_3p: 'están',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I am',
  form_1s: 'voy a estar',
  form_2s: 'vas a estar',
  form_3s: 'va a estar',
  form_1p: 'vamos a estar',
  form_3p: 'van a estar',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'estar',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I was',
  form_1s: 'estuve',
  form_2s: 'estuviste',
  form_3s: 'estuvo',
  form_1p: 'estuvimos',
  form_3p: 'estuvieron',
  pastparticiple: 'estado',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I am',
  form_1s: 'soy',
  form_2s: 'eres',
  form_3s: 'es',
  form_1p: 'somos',
  form_3p: 'son',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I am',
  form_1s: 'voy a ser',
  form_2s: 'vas a ser',
  form_3s: 'va a ser',
  form_1p: 'vamos a ser',
  form_3p: 'van a ser',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'ser',
  infinitive_english: 'to be',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I was',
  form_1s: 'fui',
  form_2s: 'fuiste',
  form_3s: 'fue',
  form_1p: 'fuimos',
  form_3p: 'fueron',
  pastparticiple: 'sido',
  pastparticiple_english: 'been'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I have, am having',
  form_1s: 'tengo',
  form_2s: 'tienes',
  form_3s: 'tiene',
  form_1p: 'tenemos',
  form_3p: 'tienen',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I have, am having',
  form_1s: 'voy a tener',
  form_2s: 'vas a tener',
  form_3s: 'va a tener',
  form_1p: 'vamos a tener',
  form_3p: 'van a tener',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'tener',
  infinitive_english: 'to have',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I had',
  form_1s: 'tuve',
  form_2s: 'tuviste',
  form_3s: 'tuvo',
  form_1p: 'tuvimos',
  form_3p: 'tuvieron',
  pastparticiple: 'tenido',
  pastparticiple_english: 'had'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I do, am doing',
  form_1s: 'hago',
  form_2s: 'haces',
  form_3s: 'hace',
  form_1p: 'hacemos',
  form_3p: 'hacen',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I do, am doing',
  form_1s: 'voy a hacer',
  form_2s: 'vas a hacer',
  form_3s: 'va a hacer',
  form_1p: 'vamos a hacer',
  form_3p: 'van a hacer',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'hacer',
  infinitive_english: 'to do, make',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I did',
  form_1s: 'hice',
  form_2s: 'hiciste',
  form_3s: 'hizo',
  form_1p: 'hicimos',
  form_3p: 'hicieron',
  pastparticiple: 'hecho',
  pastparticiple_english: 'done'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I go, am going',
  form_1s: 'voy',
  form_2s: 'vas',
  form_3s: 'va',
  form_1p: 'vamos',
  form_3p: 'van',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I go, am going',
  form_1s: 'voy a ir',
  form_2s: 'vas a ir',
  form_3s: 'va a ir',
  form_1p: 'vamos a ir',
  form_3p: 'van a ir',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'ir',
  infinitive_english: 'to go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I went',
  form_1s: 'fui',
  form_2s: 'fuiste',
  form_3s: 'fue',
  form_1p: 'fuimos',
  form_3p: 'fueron',
  pastparticiple: 'ido',
  pastparticiple_english: 'gone'
}, {
  infinitive: 'alquilar',
  infinitive_english: 'to rent',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I rent, am renting',
  form_1s: 'alquilo',
  form_2s: 'alquilas',
  form_3s: 'alquila',
  form_1p: 'alquilamos',
  form_3p: 'alquilan',
  pastparticiple: 'alquilado',
  pastparticiple_english: 'rented'
}, {
  infinitive: 'alquilar',
  infinitive_english: 'to rent',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I rent, am renting',
  form_1s: 'voy a alquilar',
  form_2s: 'vas a alquilar',
  form_3s: 'va a alquilar',
  form_1p: 'vamos a alquilar',
  form_3p: 'van a alquilar',
  pastparticiple: 'alguilado',
  pastparticiple_english: 'rented'
}, {
  infinitive: 'alquilar',
  infinitive_english: 'to rent',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I rented',
  form_1s: 'alquilé',
  form_2s: 'alquilaste',
  form_3s: 'alquiló',
  form_1p: 'alquilamos',
  form_3p: 'alquilaron',
  pastparticiple: 'alquilado',
  pastparticiple_english: 'rented'
}, {
  infinitive: 'necesitar',
  infinitive_english: 'to need, require',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I need, am needing',
  form_1s: 'necesito',
  form_2s: 'necesitas',
  form_3s: 'necesita',
  form_1p: 'necesitamos',
  form_3p: 'necesitan',
  pastparticiple: 'necesitado',
  pastparticiple_english: 'needed'
}, {
  infinitive: 'necesitar',
  infinitive_english: 'to need, require',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I need, am needing',
  form_1s: 'voy a necesitar',
  form_2s: 'vas a necesitar',
  form_3s: 'va a necesitar',
  form_1p: 'vamos a necesitar',
  form_3p: 'van a necesitar',
  pastparticiple: 'necesitado',
  pastparticiple_english: 'needed'
}, {
  infinitive: 'necesitar',
  infinitive_english: 'to need, require',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I needed',
  form_1s: 'necesité',
  form_2s: 'necesitaste',
  form_3s: 'necesitó',
  form_1p: 'necesitamos',
  form_3p: 'necesitaron',
  pastparticiple: 'necesitado',
  pastparticiple_english: 'needed'
}, {
  infinitive: 'amar',
  infinitive_english: 'to love',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I love, am loving',
  form_1s: 'amo',
  form_2s: 'amas',
  form_3s: 'ama',
  form_1p: 'amamos',
  form_3p: 'aman',
  pastparticiple: 'amado',
  pastparticiple_english: 'loved'
}, {
  infinitive: 'amar',
  infinitive_english: 'to love',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I love, am loving',
  form_1s: 'voy a amar',
  form_2s: 'vas a amar',
  form_3s: 'va a amar',
  form_1p: 'vamos a amar',
  form_3p: 'van a amar',
  pastparticiple: 'amado',
  pastparticiple_english: 'loved'
}, {
  infinitive: 'amar',
  infinitive_english: 'to love',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I loved',
  form_1s: 'amé',
  form_2s: 'amaste',
  form_3s: 'amó',
  form_1p: 'amamos',
  form_3p: 'amaron',
  pastparticiple: 'amado',
  pastparticiple_english: 'loved'
}, {
  infinitive: 'enviar',
  infinitive_english: 'to send',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I send, am sending',
  form_1s: 'envío',
  form_2s: 'envías',
  form_3s: 'envía',
  form_1p: 'enviamos',
  form_3p: 'envían',
  pastparticiple: 'enviado',
  pastparticiple_english: 'sent'
}, {
  infinitive: 'enviar',
  infinitive_english: 'to send',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I send, am sending',
  form_1s: 'voy a enviar',
  form_2s: 'vas a enviar',
  form_3s: 'va a enviar',
  form_1p: 'vamos a enviar',
  form_3p: 'van a enviar',
  pastparticiple: 'enviado',
  pastparticiple_english: 'sent'
}, {
  infinitive: 'enviar',
  infinitive_english: 'to send',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I sent',
  form_1s: 'envié',
  form_2s: 'enviaste',
  form_3s: 'envió',
  form_1p: 'enviamos',
  form_3p: 'enviaron',
  pastparticiple: 'enviado',
  pastparticiple_english: 'sent'
}, {
  infinitive: 'olvidar',
  infinitive_english: 'to forget',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I forget, am forgetting',
  form_1s: 'olvido',
  form_2s: 'olvidas',
  form_3s: 'olvida',
  form_1p: 'olvidamos',
  form_3p: 'olvidan',
  pastparticiple: 'olvidado',
  pastparticiple_english: 'forgotten'
}, {
  infinitive: 'olvidar',
  infinitive_english: 'to forget',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I forget, am forgetting',
  form_1s: 'voy a olvidar',
  form_2s: 'vas a olvidar',
  form_3s: 'va a olvidar',
  form_1p: 'vamos a olvidar',
  form_3p: 'van a olvidar',
  pastparticiple: 'ido',
  pastparticiple_english: 'forgotten'
}, {
  infinitive: 'olvidar',
  infinitive_english: 'to forget',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I forgot',
  form_1s: 'olvidé',
  form_2s: 'olvidaste',
  form_3s: 'olvidó',
  form_1p: 'olvidamos',
  form_3p: 'olvidaron',
  pastparticiple: 'olvidado',
  pastparticiple_english: 'forgotten'
}, {
  infinitive: 'escuchar',
  infinitive_english: 'to listen to, hear',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I listen to, am listening to',
  form_1s: 'escucho',
  form_2s: 'escuchas',
  form_3s: 'escucha',
  form_1p: 'escuchamos',
  form_3p: 'escuchan',
  pastparticiple: 'escuchado',
  pastparticiple_english: 'listened to'
}, {
  infinitive: 'escuchar',
  infinitive_english: 'to listen to, hear',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I listen to, am listening to',
  form_1s: 'voy a escuchar',
  form_2s: 'vas a escuchar',
  form_3s: 'va a escuchar',
  form_1p: 'vamos a escuchar',
  form_3p: 'van a escuchar',
  pastparticiple: 'escuchado',
  pastparticiple_english: 'listened to'
}, {
  infinitive: 'escuchar',
  infinitive_english: 'to listen to, hear',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I listened to',
  form_1s: 'escuché',
  form_2s: 'escuchaste',
  form_3s: 'escuchó',
  form_1p: 'escuchamos',
  form_3p: 'escucharon',
  pastparticiple: 'escuchado',
  pastparticiple_english: 'listened to'
}, {
  infinitive: 'pagar',
  infinitive_english: 'to pay, pay for',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I pay, am paying',
  form_1s: 'pago',
  form_2s: 'pagas',
  form_3s: 'paga',
  form_1p: 'pagamos',
  form_3p: 'pagan',
  pastparticiple: 'pagado',
  pastparticiple_english: 'paid'
}, {
  infinitive: 'pagar',
  infinitive_english: 'to pay, pay for',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I pay, am paying',
  form_1s: 'voy a pagar',
  form_2s: 'vas a pagar',
  form_3s: 'va a pagar',
  form_1p: 'vamos a pagar',
  form_3p: 'van a pagar',
  pastparticiple: 'pagado',
  pastparticiple_english: 'paid'
}, {
  infinitive: 'pagar',
  infinitive_english: 'to pay, pay for',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I paid',
  form_1s: 'pagué',
  form_2s: 'pagaste',
  form_3s: 'pagó',
  form_1p: 'pagamos',
  form_3p: 'pagaron',
  pastparticiple: 'pagado',
  pastparticiple_english: 'paid'
}, {
  infinitive: 'ayudar',
  infinitive_english: 'to help',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I help, am helping',
  form_1s: 'ayudo',
  form_2s: 'ayudas',
  form_3s: 'ayuda',
  form_1p: 'ayudamos',
  form_3p: 'ayudan',
  pastparticiple: 'ayudado',
  pastparticiple_english: 'helped'
}, {
  infinitive: 'ayudar',
  infinitive_english: 'to help',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I help, am helping',
  form_1s: 'voy a ayudar',
  form_2s: 'vas a ayudar',
  form_3s: 'va a ayudar',
  form_1p: 'vamos a ayudar',
  form_3p: 'van a ayudar',
  pastparticiple: 'ayudado',
  pastparticiple_english: 'help'
}, {
  infinitive: 'ayudar',
  infinitive_english: 'to help',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I helped',
  form_1s: 'ayudé',
  form_2s: 'ayudaste',
  form_3s: 'ayudó',
  form_1p: 'ayudamos',
  form_3p: 'ayudaron',
  pastparticiple: 'ayudado',
  pastparticiple_english: 'helped'
}, {
  infinitive: 'esperar',
  infinitive_english: 'to hope',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I hope, am hoping',
  form_1s: 'espero',
  form_2s: 'esperas',
  form_3s: 'espera',
  form_1p: 'esperamos',
  form_3p: 'esperan',
  pastparticiple: 'esperado',
  pastparticiple_english: 'hoped'
}, {
  infinitive: 'esperar',
  infinitive_english: 'to hope',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I hope, am hoping',
  form_1s: 'voy a esperar',
  form_2s: 'vas a esperar',
  form_3s: 'va a esperar',
  form_1p: 'vamos a esperar',
  form_3p: 'van a esperar',
  pastparticiple: 'esperado',
  pastparticiple_english: 'hoped'
}, {
  infinitive: 'esperar',
  infinitive_english: 'to hope',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I hoped',
  form_1s: 'esperé',
  form_2s: 'esperaste',
  form_3s: 'esperó',
  form_1p: 'esperamos',
  form_3p: 'esperaron',
  pastparticiple: 'esperado',
  pastparticiple_english: 'hoped'
}, {
  infinitive: 'practicar',
  infinitive_english: 'to practice',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I practice, am practicing',
  form_1s: 'practico',
  form_2s: 'practicas',
  form_3s: 'practica',
  form_1p: 'practicamos',
  form_3p: 'practican',
  pastparticiple: 'practicado',
  pastparticiple_english: 'practiced'
}, {
  infinitive: 'practicar',
  infinitive_english: 'to practice',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I practice, am practicing',
  form_1s: 'voy a practicar',
  form_2s: 'vas a practicar',
  form_3s: 'va a practicar',
  form_1p: 'vamos a practicar',
  form_3p: 'van a practicar',
  pastparticiple: 'practicado',
  pastparticiple_english: 'practiced'
}, {
  infinitive: 'practicar',
  infinitive_english: 'to practice',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I practiced',
  form_1s: 'practiqué',
  form_2s: 'practicaste',
  form_3s: 'practicó',
  form_1p: 'practicamos',
  form_3p: 'practicaron',
  pastparticiple: 'practicado',
  pastparticiple_english: 'practiced'
}, {
  infinitive: 'bailar',
  infinitive_english: 'dance',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I dance, am dancing',
  form_1s: 'bailo',
  form_2s: 'bailas',
  form_3s: 'baila',
  form_1p: 'bailamos',
  form_3p: 'bailan',
  pastparticiple: 'bailado',
  pastparticiple_english: 'danced'
}, {
  infinitive: 'bailar',
  infinitive_english: 'to dance',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I dance, am dancing',
  form_1s: 'voy a bailar',
  form_2s: 'vas a bailar',
  form_3s: 'va a bailar',
  form_1p: 'vamos a bailar',
  form_3p: 'van a bailar',
  pastparticiple: 'bailado',
  pastparticiple_english: 'danced'
}, {
  infinitive: 'bailar',
  infinitive_english: 'to dance',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I danced',
  form_1s: 'bailé',
  form_2s: 'bailaste',
  form_3s: 'bailó',
  form_1p: 'bailamos',
  form_3p: 'bailaron',
  pastparticiple: 'bailado',
  pastparticiple_english: 'danced'
}, {
  infinitive: 'estudiar',
  infinitive_english: 'to study',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I study, am studying',
  form_1s: 'estudio',
  form_2s: 'estudias',
  form_3s: 'estudia',
  form_1p: 'estudiamos',
  form_3p: 'estudian',
  pastparticiple: 'estudiado',
  pastparticiple_english: 'studied'
}, {
  infinitive: 'estudiar',
  infinitive_english: 'to study',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I study, am studying',
  form_1s: 'voy a estudiar',
  form_2s: 'vas a estudiar',
  form_3s: 'va a estudiar',
  form_1p: 'vamos a estudiar',
  form_3p: 'van a estudiar',
  pastparticiple: 'estudiado',
  pastparticiple_english: 'studied'
}, {
  infinitive: 'estudiar',
  infinitive_english: 'to study',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I studied',
  form_1s: 'estudié',
  form_2s: 'estudiaste',
  form_3s: 'estudió',
  form_1p: 'estudiamos',
  form_3p: 'estudiaron',
  pastparticiple: 'estudiado',
  pastparticiple_english: 'studied'
}, {
  infinitive: 'preguntar',
  infinitive_english: 'to ask',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I ask, am asking',
  form_1s: 'pregunto',
  form_2s: 'preguntas',
  form_3s: 'pregunta',
  form_1p: 'preguntamos',
  form_3p: 'preguntan',
  pastparticiple: 'preguntado',
  pastparticiple_english: 'asked'
}, {
  infinitive: 'preguntar',
  infinitive_english: 'to ask',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I ask, am asking',
  form_1s: 'voy a preguntar',
  form_2s: 'vas a preguntar',
  form_3s: 'va a preguntar',
  form_1p: 'vamos a preguntar',
  form_3p: 'van a preguntar',
  pastparticiple: 'preguntado',
  pastparticiple_english: 'asked'
}, {
  infinitive: 'preguntar',
  infinitive_english: 'to ask',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I asked',
  form_1s: 'pregunté',
  form_2s: 'preguntaste',
  form_3s: 'preguntó',
  form_1p: 'preguntamos',
  form_3p: 'preguntaron',
  pastparticiple: 'preguntado',
  pastparticiple_english: 'asked'
}, {
  infinitive: 'buscar',
  infinitive_english: 'to search for, look for',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I search for, am searching for',
  form_1s: 'busco',
  form_2s: 'buscas',
  form_3s: 'busca',
  form_1p: 'buscamos',
  form_3p: 'buscan',
  pastparticiple: 'buscado',
  pastparticiple_english: 'searched for'
}, {
  infinitive: 'buscar',
  infinitive_english: 'to search',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I search for, am searching for',
  form_1s: 'voy a buscar',
  form_2s: 'vas a buscar',
  form_3s: 'va a buscar',
  form_1p: 'vamos a buscar',
  form_3p: 'van a buscar',
  pastparticiple: 'buscado',
  pastparticiple_english: 'searched for'
}, {
  infinitive: 'buscar',
  infinitive_english: 'to search',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I searched for',
  form_1s: 'busqué',
  form_2s: 'buscaste',
  form_3s: 'buscó',
  form_1p: 'buscamos',
  form_3p: 'buscaron',
  pastparticiple: 'buscado',
  pastparticiple_english: 'searched for'
}, {
  infinitive: 'firmar',
  infinitive_english: 'to sign',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I sign, am signing',
  form_1s: 'firmo',
  form_2s: 'firmas',
  form_3s: 'firma',
  form_1p: 'firmamos',
  form_3p: 'firman',
  pastparticiple: 'firmado',
  pastparticiple_english: 'signed'
}, {
  infinitive: 'firmar',
  infinitive_english: 'to sign',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I sign, am signing',
  form_1s: 'voy a firmar',
  form_2s: 'vas a firmar',
  form_3s: 'va a firmar',
  form_1p: 'vamos a firmar',
  form_3p: 'van a firmar',
  pastparticiple: 'firmado',
  pastparticiple_english: 'signed'
}, {
  infinitive: 'firmar',
  infinitive_english: 'to sign',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I signed',
  form_1s: 'firmé',
  form_2s: 'firmaste',
  form_3s: 'firmó',
  form_1p: 'firmamos',
  form_3p: 'firmaron',
  pastparticiple: 'firmado',
  pastparticiple_english: 'signed'
}, {
  infinitive: 'preparar',
  infinitive_english: 'to prepare',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I prepare, am preparing',
  form_1s: 'preparo',
  form_2s: 'preparas',
  form_3s: 'prepara',
  form_1p: 'preparamos',
  form_3p: 'preparan',
  pastparticiple: 'preparado',
  pastparticiple_english: 'prepared'
}, {
  infinitive: 'preparar',
  infinitive_english: 'to prepare',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I prepare, am preparing',
  form_1s: 'voy a preparar',
  form_2s: 'vas a preparar',
  form_3s: 'va a preparar',
  form_1p: 'vamos a preparar',
  form_3p: 'van a preparar',
  pastparticiple: 'preparado',
  pastparticiple_english: 'prepared'
}, {
  infinitive: 'preparar',
  infinitive_english: 'to prepare',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I prepared',
  form_1s: 'preparé',
  form_2s: 'preparaste',
  form_3s: 'preparó',
  form_1p: 'preparamos',
  form_3p: 'prepararon',
  pastparticiple: 'preparado',
  pastparticiple_english: 'prepared'
}, {
  infinitive: 'caminar',
  infinitive_english: 'to walk, go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I walk, am walking',
  form_1s: 'camino',
  form_2s: 'caminas',
  form_3s: 'camina',
  form_1p: 'caminamos',
  form_3p: 'caminan',
  pastparticiple: 'caminado',
  pastparticiple_english: 'walked'
}, {
  infinitive: 'caminar',
  infinitive_english: 'to walk, go',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I walk, am walking',
  form_1s: 'voy a caminar',
  form_2s: 'vas a caminar',
  form_3s: 'va a caminar',
  form_1p: 'vamos a caminar',
  form_3p: 'van a caminar',
  pastparticiple: 'caminado',
  pastparticiple_english: 'walked'
}, {
  infinitive: 'caminar',
  infinitive_english: 'to walk, go',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I walked',
  form_1s: 'caminé',
  form_2s: 'caminaste',
  form_3s: 'caminó',
  form_1p: 'caminamos',
  form_3p: 'caminaron',
  pastparticiple: 'caminado',
  pastparticiple_english: 'walked'
}, {
  infinitive: 'ganar',
  infinitive_english: 'to win, gain',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I win, am winning',
  form_1s: 'gano',
  form_2s: 'ganas',
  form_3s: 'gana',
  form_1p: 'ganamos',
  form_3p: 'ganan',
  pastparticiple: 'ganado',
  pastparticiple_english: 'won'
}, {
  infinitive: 'ganar',
  infinitive_english: 'to win, gain',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I win, am winning',
  form_1s: 'voy a ganar',
  form_2s: 'vas a ganar',
  form_3s: 'va a ganar',
  form_1p: 'vamos a ganar',
  form_3p: 'van a ganar',
  pastparticiple: 'ganado',
  pastparticiple_english: 'won'
}, {
  infinitive: 'ganar',
  infinitive_english: 'to win, gain',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I won',
  form_1s: 'gané',
  form_2s: 'ganaste',
  form_3s: 'ganó',
  form_1p: 'ganamos',
  form_3p: 'ganaron',
  pastparticiple: 'ganado',
  pastparticiple_english: 'won'
}, {
  infinitive: 'regresar',
  infinitive_english: 'to return, go back',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I return, am returning',
  form_1s: 'regreso',
  form_2s: 'regresas',
  form_3s: 'regresa',
  form_1p: 'regresamos',
  form_3p: 'regresan',
  pastparticiple: 'regresado',
  pastparticiple_english: 'returned'
}, {
  infinitive: 'regresar',
  infinitive_english: 'to return, go back',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I return, am returning',
  form_1s: 'voy a regresar',
  form_2s: 'vas a regresar',
  form_3s: 'va a regresar',
  form_1p: 'vamos a regresar',
  form_3p: 'van a regresar',
  pastparticiple: 'regresado',
  pastparticiple_english: 'returned'
}, {
  infinitive: 'regresar',
  infinitive_english: 'to return, go back',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I returned',
  form_1s: 'regresé',
  form_2s: 'regresaste',
  form_3s: 'regresó',
  form_1p: 'regresamos',
  form_3p: 'regresaron',
  pastparticiple: 'regresado',
  pastparticiple_english: 'returned'
}, {
  infinitive: 'gastar',
  infinitive_english: 'to spend',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I spend, am spending',
  form_1s: 'gasto',
  form_2s: 'gastas',
  form_3s: 'gasta',
  form_1p: 'gastamos',
  form_3p: 'gastan',
  pastparticiple: 'gastado',
  pastparticiple_english: 'spent'
}, {
  infinitive: 'gastar',
  infinitive_english: 'to spend',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I spend, am spending',
  form_1s: 'voy a gastar',
  form_2s: 'vas a gastar',
  form_3s: 'va a gastar',
  form_1p: 'vamos a gastar',
  form_3p: 'van a gastar',
  pastparticiple: 'gastado',
  pastparticiple_english: 'spent'
}, {
  infinitive: 'gastar',
  infinitive_english: 'to spend',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I spent',
  form_1s: 'gasté',
  form_2s: 'gastaste',
  form_3s: 'gastó',
  form_1p: 'gastamos',
  form_3p: 'gastaron',
  pastparticiple: 'gastado',
  pastparticiple_english: 'spent'
}, {
  infinitive: 'saludar',
  infinitive_english: 'to greet',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I greet, am greeting',
  form_1s: 'saludo',
  form_2s: 'saludas',
  form_3s: 'saluda',
  form_1p: 'saludamos',
  form_3p: 'saludan',
  pastparticiple: 'saludado',
  pastparticiple_english: 'greeted'
}, {
  infinitive: 'saludar',
  infinitive_english: 'to greet',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I greet, am greeting',
  form_1s: 'voy a saludar',
  form_2s: 'vas a saludar',
  form_3s: 'va a saludar',
  form_1p: 'vamos a saludar',
  form_3p: 'van a saludar',
  pastparticiple: 'saludado',
  pastparticiple_english: 'greeted'
}, {
  infinitive: 'saludar',
  infinitive_english: 'to greet',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I greeted',
  form_1s: 'saludé',
  form_2s: 'saludaste',
  form_3s: 'saludó',
  form_1p: 'saludamos',
  form_3p: 'saludaron',
  pastparticiple: 'saludado',
  pastparticiple_english: 'greeted'
}, {
  infinitive: 'cocinar',
  infinitive_english: 'to cook',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I cook, am cooking',
  form_1s: 'cocino',
  form_2s: 'cocinas',
  form_3s: 'cocina',
  form_1p: 'cocinamos',
  form_3p: 'cocinan',
  pastparticiple: 'cocinado',
  pastparticiple_english: 'cooked'
}, {
  infinitive: 'cocinar',
  infinitive_english: 'to cook',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I cook, am cooking',
  form_1s: 'voy a cocinar',
  form_2s: 'vas a cocinar',
  form_3s: 'va a cocinar',
  form_1p: 'vamos a cocinar',
  form_3p: 'van a cocinar',
  pastparticiple: 'cocinado',
  pastparticiple_english: 'cooked'
}, {
  infinitive: 'cocinar',
  infinitive_english: 'to cook',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I cooked',
  form_1s: 'cociné',
  form_2s: 'cocinaste',
  form_3s: 'cocinó',
  form_1p: 'cocinamos',
  form_3p: 'cocinaron',
  pastparticiple: 'cocinado',
  pastparticiple_english: 'cooked'
}, {
  infinitive: 'tocar',
  infinitive_english: 'to touch',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I touch, am touching',
  form_1s: 'toco',
  form_2s: 'tocas',
  form_3s: 'toca',
  form_1p: 'tocamos',
  form_3p: 'tocan',
  pastparticiple: 'tocado',
  pastparticiple_english: 'touched'
}, {
  infinitive: 'tocar',
  infinitive_english: 'to touch',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I touch, am touching',
  form_1s: 'voy a tocar',
  form_2s: 'vas a tocar',
  form_3s: 'va a tocar',
  form_1p: 'vamos a tocar',
  form_3p: 'van a tocar',
  pastparticiple: 'tocado',
  pastparticiple_english: 'touched'
}, {
  infinitive: 'tocar',
  infinitive_english: 'to touch',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I touched',
  form_1s: 'toqué',
  form_2s: 'tocaste',
  form_3s: 'tocó',
  form_1p: 'tocamos',
  form_3p: 'tocaron',
  pastparticiple: 'tocado',
  pastparticiple_english: 'touched'
}, {
  infinitive: 'comprar',
  infinitive_english: 'to buy, purchase',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I buy, am buying',
  form_1s: 'compro',
  form_2s: 'compras',
  form_3s: 'compra',
  form_1p: 'compramos',
  form_3p: 'compran',
  pastparticiple: 'comprado',
  pastparticiple_english: 'bought'
}, {
  infinitive: 'comprar',
  infinitive_english: 'to buy, purchase',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I buy, am buying',
  form_1s: 'voy a comprar',
  form_2s: 'vas a comprar',
  form_3s: 'va a comprar',
  form_1p: 'vamos a comprar',
  form_3p: 'van a comprar',
  pastparticiple: 'comprado',
  pastparticiple_english: 'bought'
}, {
  infinitive: 'comprar',
  infinitive_english: 'to buy, purchase',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I bought',
  form_1s: 'compré',
  form_2s: 'compraste',
  form_3s: 'compró',
  form_1p: 'compramos',
  form_3p: 'compraron',
  pastparticiple: 'comprado',
  pastparticiple_english: 'bought'
}, {
  infinitive: 'lavar',
  infinitive_english: 'to wash',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I wash, am washing',
  form_1s: 'lavo',
  form_2s: 'lavas',
  form_3s: 'lava',
  form_1p: 'lavamos',
  form_3p: 'lavan',
  pastparticiple: 'lavado',
  pastparticiple_english: 'washed'
}, {
  infinitive: 'lavar',
  infinitive_english: 'to wash',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I wash, am washing',
  form_1s: 'voy a lavar',
  form_2s: 'vas a lavar',
  form_3s: 'va a lavar',
  form_1p: 'vamos a lavar',
  form_3p: 'van a lavar',
  pastparticiple: 'lavado',
  pastparticiple_english: 'washed'
}, {
  infinitive: 'lavar',
  infinitive_english: 'to wash',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I washed',
  form_1s: 'lavé',
  form_2s: 'lavaste',
  form_3s: 'lavó',
  form_1p: 'lavamos',
  form_3p: 'lavaron',
  pastparticiple: 'lavado',
  pastparticiple_english: 'washed'
}, {
  infinitive: 'tomar',
  infinitive_english: 'to take, drink',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I take, am taking',
  form_1s: 'tomo',
  form_2s: 'tomas',
  form_3s: 'toma',
  form_1p: 'tomamos',
  form_3p: 'toman',
  pastparticiple: 'tomado',
  pastparticiple_english: 'taken'
}, {
  infinitive: 'tomar',
  infinitive_english: 'to take',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I take, am taking',
  form_1s: 'voy a tomar',
  form_2s: 'vas a tomar',
  form_3s: 'va a tomar',
  form_1p: 'vamos a tomar',
  form_3p: 'van a tomar',
  pastparticiple: 'tomado',
  pastparticiple_english: 'taken'
}, {
  infinitive: 'tomar',
  infinitive_english: 'to take, drink',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I took',
  form_1s: 'tomé',
  form_2s: 'tomaste',
  form_3s: 'tomó',
  form_1p: 'tomamos',
  form_3p: 'tomaron',
  pastparticiple: 'tomado',
  pastparticiple_english: 'taken'
}, {
  infinitive: 'contestar',
  infinitive_english: 'to answer',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I answer, am answering',
  form_1s: 'contesto',
  form_2s: 'contestas',
  form_3s: 'contesta',
  form_1p: 'contestamos',
  form_3p: 'contestan',
  pastparticiple: 'contestado',
  pastparticiple_english: 'answered'
}, {
  infinitive: 'contestar',
  infinitive_english: 'to answer',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I answer, am answering',
  form_1s: 'voy a contestar',
  form_2s: 'vas a contestar',
  form_3s: 'va a contestar',
  form_1p: 'vamos a contestar',
  form_3p: 'van a contestar',
  pastparticiple: 'contestado',
  pastparticiple_english: 'answered'
}, {
  infinitive: 'contestar',
  infinitive_english: 'to answer',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I answered',
  form_1s: 'contesté',
  form_2s: 'contestaste',
  form_3s: 'contestó',
  form_1p: 'contestamos',
  form_3p: 'contestaron',
  pastparticiple: 'contestado',
  pastparticiple_english: 'answered'
}, {
  infinitive: 'llegar',
  infinitive_english: 'to arrive',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I arrive, am arriving',
  form_1s: 'llego',
  form_2s: 'llegas',
  form_3s: 'llega',
  form_1p: 'llegamos',
  form_3p: 'llegan',
  pastparticiple: 'llegado',
  pastparticiple_english: 'arrived'
}, {
  infinitive: 'llegar',
  infinitive_english: 'to arrive',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I arrive, am arriving',
  form_1s: 'voy a llegar',
  form_2s: 'vas a llegar',
  form_3s: 'va a llegar',
  form_1p: 'vamos a llegar',
  form_3p: 'van a llegar',
  pastparticiple: 'llegado',
  pastparticiple_english: 'arrived'
}, {
  infinitive: 'llegar',
  infinitive_english: 'to arrive',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I arrived',
  form_1s: 'llegué',
  form_2s: 'llegaste',
  form_3s: 'llegó',
  form_1p: 'llegamos',
  form_3p: 'llegaron',
  pastparticiple: 'llegado',
  pastparticiple_english: 'arrived'
}, {
  infinitive: 'trabajar',
  infinitive_english: 'to work',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I work, am working',
  form_1s: 'trabajo',
  form_2s: 'trabajas',
  form_3s: 'trabaja',
  form_1p: 'trabajamos',
  form_3p: 'trabajan',
  pastparticiple: 'trabajado',
  pastparticiple_english: 'worked'
}, {
  infinitive: 'trabajar',
  infinitive_english: 'to work',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I work, am working',
  form_1s: 'voy a trabajar',
  form_2s: 'vas a trabajar',
  form_3s: 'va a trabajar',
  form_1p: 'vamos a trabajar',
  form_3p: 'van a trabajar',
  pastparticiple: 'trabajado',
  pastparticiple_english: 'worked'
}, {
  infinitive: 'trabajar',
  infinitive_english: 'to work',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I worked',
  form_1s: 'trabajé',
  form_2s: 'trabajaste',
  form_3s: 'trabajó',
  form_1p: 'trabajamos',
  form_3p: 'trabajaron',
  pastparticiple: 'trabajado',
  pastparticiple_english: 'worked'
}, {
  infinitive: 'dejar',
  infinitive_english: 'to leave, allow',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I leave, am leaving',
  form_1s: 'dejo',
  form_2s: 'dejas',
  form_3s: 'deja',
  form_1p: 'dejamos',
  form_3p: 'dejan',
  pastparticiple: 'dejado',
  pastparticiple_english: 'left'
}, {
  infinitive: 'dejar',
  infinitive_english: 'to leave, allow',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I leave, am leaving',
  form_1s: 'voy a dejar',
  form_2s: 'vas a dejar',
  form_3s: 'va a dejar',
  form_1p: 'vamos a dejar',
  form_3p: 'van a dejar',
  pastparticiple: 'dejado',
  pastparticiple_english: 'left'
}, {
  infinitive: 'dejar',
  infinitive_english: 'to leave, allow',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I left',
  form_1s: 'dejé',
  form_2s: 'dejaste',
  form_3s: 'dejó',
  form_1p: 'dejamos',
  form_3p: 'dejaron',
  pastparticiple: 'dejado',
  pastparticiple_english: 'left'
}, {
  infinitive: 'llevar',
  infinitive_english: 'to carry, wear',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I carry, am carrying',
  form_1s: 'llevo',
  form_2s: 'llevas',
  form_3s: 'lleva',
  form_1p: 'llevamos',
  form_3p: 'llevan',
  pastparticiple: 'llevado',
  pastparticiple_english: 'carried'
}, {
  infinitive: 'llevar',
  infinitive_english: 'to carry, wear',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I carry, am carrying',
  form_1s: 'voy a llevar',
  form_2s: 'vas a llevar',
  form_3s: 'va a llevar',
  form_1p: 'vamos a llevar',
  form_3p: 'van a llevar',
  pastparticiple: 'llevado',
  pastparticiple_english: 'carried'
}, {
  infinitive: 'llevar',
  infinitive_english: 'to carry, wear',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I carried',
  form_1s: 'llevé',
  form_2s: 'llevaste',
  form_3s: 'llevó',
  form_1p: 'llevamos',
  form_3p: 'llevaron',
  pastparticiple: 'llevado',
  pastparticiple_english: 'carried'
}, {
  infinitive: 'viajar',
  infinitive_english: 'to travel',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I travel, am traveling',
  form_1s: 'viajo',
  form_2s: 'viajas',
  form_3s: 'viaja',
  form_1p: 'viajamos',
  form_3p: 'viajan',
  pastparticiple: 'viajado',
  pastparticiple_english: 'traveled'
}, {
  infinitive: 'viajar',
  infinitive_english: 'to travel',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I travel, am travelling',
  form_1s: 'voy a viajar',
  form_2s: 'vas a viajar',
  form_3s: 'va a viajar',
  form_1p: 'vamos a viajar',
  form_3p: 'van a viajar',
  pastparticiple: 'viajado',
  pastparticiple_english: 'travelled'
}, {
  infinitive: 'viajar',
  infinitive_english: 'to travel',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I traveled',
  form_1s: 'viajé',
  form_2s: 'viajaste',
  form_3s: 'viajó',
  form_1p: 'viajamos',
  form_3p: 'viajaron',
  pastparticiple: 'viajado',
  pastparticiple_english: 'traveled'
}, {
  infinitive: 'desear',
  infinitive_english: 'to desire, wish',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I desire, am desiring',
  form_1s: 'deseo',
  form_2s: 'deseas',
  form_3s: 'desea',
  form_1p: 'deseamos',
  form_3p: 'desean',
  pastparticiple: 'deseado',
  pastparticiple_english: 'desired'
}, {
  infinitive: 'desear',
  infinitive_english: 'to desire, wish',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I desire, am desiring',
  form_1s: 'voy a desear',
  form_2s: 'vas a desear',
  form_3s: 'va a desear',
  form_1p: 'vamos a desear',
  form_3p: 'van a desear',
  pastparticiple: 'deseado',
  pastparticiple_english: 'desired'
}, {
  infinitive: 'desear',
  infinitive_english: 'to desire, wish',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I desired',
  form_1s: 'deseé',
  form_2s: 'deseaste',
  form_3s: 'deseó',
  form_1p: 'deseamos',
  form_3p: 'desearon',
  pastparticiple: 'deseado',
  pastparticiple_english: 'desired'
}, {
  infinitive: 'mandar',
  infinitive_english: 'to order',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I order, am ordering',
  form_1s: 'mando',
  form_2s: 'mandas',
  form_3s: 'manda',
  form_1p: 'mandamos',
  form_3p: 'mandan',
  pastparticiple: 'mandado',
  pastparticiple_english: 'ordered'
}, {
  infinitive: 'mandar',
  infinitive_english: 'to order',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I order, am ordering',
  form_1s: 'voy a mandar',
  form_2s: 'vas a mandar',
  form_3s: 'va a mandar',
  form_1p: 'vamos a mandar',
  form_3p: 'van a mandar',
  pastparticiple: 'mandado',
  pastparticiple_english: 'ordered'
}, {
  infinitive: 'mandar',
  infinitive_english: 'to order',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I ordered',
  form_1s: 'mandé',
  form_2s: 'mandaste',
  form_3s: 'mandó',
  form_1p: 'mandamos',
  form_3p: 'mandaron',
  pastparticiple: 'mandado',
  pastparticiple_english: 'ordered'
}, {
  infinitive: 'visitar',
  infinitive_english: 'to visit',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I visit, am visiting',
  form_1s: 'visito',
  form_2s: 'visitas',
  form_3s: 'visita',
  form_1p: 'visitamos',
  form_3p: 'visitan',
  pastparticiple: 'visitado',
  pastparticiple_english: 'visited'
}, {
  infinitive: 'visitar',
  infinitive_english: 'to [eng]',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I [eng], am [eng]ing',
  form_1s: 'voy a visitar',
  form_2s: 'vas a visitar',
  form_3s: 'va a visitar',
  form_1p: 'vamos a visitar',
  form_3p: 'van a visitar',
  pastparticiple: 'visitado',
  pastparticiple_english: '[eng]ed'
}, {
  infinitive: 'visitar',
  infinitive_english: 'to visit',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I visited',
  form_1s: 'visité',
  form_2s: 'visitaste',
  form_3s: 'visitó',
  form_1p: 'visitamos',
  form_3p: 'visitaron',
  pastparticiple: 'visitado',
  pastparticiple_english: 'visited'
}, {
  infinitive: 'enseñar',
  infinitive_english: 'to teach',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I teach, am teaching',
  form_1s: 'enseño',
  form_2s: 'enseñas',
  form_3s: 'enseña',
  form_1p: 'enseñamos',
  form_3p: 'enseñan',
  pastparticiple: 'enseñado',
  pastparticiple_english: 'taught'
}, {
  infinitive: 'enseñar',
  infinitive_english: 'to teach',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I teach, am teaching',
  form_1s: 'voy a enseñar',
  form_2s: 'vas a enseñar',
  form_3s: 'va a enseñar',
  form_1p: 'vamos a enseñar',
  form_3p: 'van a enseñar',
  pastparticiple: 'enseñado',
  pastparticiple_english: 'taught'
}, {
  infinitive: 'enseñar',
  infinitive_english: 'to teach',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I taught',
  form_1s: 'enseñé',
  form_2s: 'enseñaste',
  form_3s: 'enseñó',
  form_1p: 'enseñamos',
  form_3p: 'enseñaron',
  pastparticiple: 'enseñado',
  pastparticiple_english: 'taught'
}, {
  infinitive: 'mirar',
  infinitive_english: 'to watch, look at',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I watch, am watching',
  form_1s: 'miro',
  form_2s: 'miras',
  form_3s: 'mira',
  form_1p: 'miramos',
  form_3p: 'miran',
  pastparticiple: 'mirado',
  pastparticiple_english: 'watched'
}, {
  infinitive: 'mirar',
  infinitive_english: 'to watch, look at',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I watch, am watching',
  form_1s: 'voy a mirar',
  form_2s: 'vas a mirar',
  form_3s: 'va a mirar',
  form_1p: 'vamos a mirar',
  form_3p: 'van a mirar',
  pastparticiple: 'mirado',
  pastparticiple_english: 'watched'
}, {
  infinitive: 'mirar',
  infinitive_english: 'to watch, look at',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I watched',
  form_1s: 'miré',
  form_2s: 'miraste',
  form_3s: 'miró',
  form_1p: 'miramos',
  form_3p: 'miraron',
  pastparticiple: 'mirado',
  pastparticiple_english: 'watched'
}, {
  infinitive: 'aprender',
  infinitive_english: 'to learn',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I learn, am learning',
  form_1s: 'aprendo',
  form_2s: 'aprendes',
  form_3s: 'aprende',
  form_1p: 'aprendemos',
  form_3p: 'aprenden',
  pastparticiple: 'aprendido',
  pastparticiple_english: 'learned'
}, {
  infinitive: 'aprender',
  infinitive_english: 'to learn',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I learn, am learning',
  form_1s: 'voy a aprender',
  form_2s: 'vas a aprender',
  form_3s: 'va a aprender',
  form_1p: 'vamos a aprender',
  form_3p: 'van a aprender',
  pastparticiple: 'aprendido',
  pastparticiple_english: 'learned'
}, {
  infinitive: 'aprender',
  infinitive_english: 'to learn',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I learned',
  form_1s: 'aprendí',
  form_2s: 'aprendiste',
  form_3s: 'aprendió',
  form_1p: 'aprendimos',
  form_3p: 'aprendieron',
  pastparticiple: 'aprendido',
  pastparticiple_english: 'learned'
}, {
  infinitive: 'creer',
  infinitive_english: 'to believe, think',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I believe, am believing',
  form_1s: 'creo',
  form_2s: 'crees',
  form_3s: 'cree',
  form_1p: 'creemos',
  form_3p: 'creen',
  pastparticiple: 'creído',
  pastparticiple_english: 'believed'
}, {
  infinitive: 'creer',
  infinitive_english: 'to believe, think',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I believe, am believing',
  form_1s: 'voy a creer',
  form_2s: 'vas a creer',
  form_3s: 'va a creer',
  form_1p: 'vamos a creer',
  form_3p: 'van a creer',
  pastparticiple: 'creído',
  pastparticiple_english: 'believed'
}, {
  infinitive: 'creer',
  infinitive_english: 'to believe, think',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I believed',
  form_1s: 'creí',
  form_2s: 'creíste',
  form_3s: 'creyó',
  form_1p: 'creímos',
  form_3p: 'creyeron',
  pastparticiple: 'creído',
  pastparticiple_english: 'believed'
}, {
  infinitive: 'responder',
  infinitive_english: 'to respond, answer, reply to',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I respond, am responding',
  form_1s: 'respondo',
  form_2s: 'respondes',
  form_3s: 'responde',
  form_1p: 'respondemos',
  form_3p: 'responden',
  pastparticiple: 'respondido',
  pastparticiple_english: 'responded'
}, {
  infinitive: 'responder',
  infinitive_english: 'to respond, answer, reply to',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I respond, am responding',
  form_1s: 'voy a responder',
  form_2s: 'vas a responder',
  form_3s: 'va a responder',
  form_1p: 'vamos a responder',
  form_3p: 'van a responder',
  pastparticiple: 'respondido',
  pastparticiple_english: 'responded'
}, {
  infinitive: 'responder',
  infinitive_english: 'to respond, answer, reply to',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I responded',
  form_1s: 'respondí',
  form_2s: 'respondiste',
  form_3s: 'respondió',
  form_1p: 'respondimos',
  form_3p: 'respondieron',
  pastparticiple: 'respondido',
  pastparticiple_english: 'responded'
}, {
  infinitive: 'beber',
  infinitive_english: 'to drink',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I drink, am drinking',
  form_1s: 'bebo',
  form_2s: 'bebes',
  form_3s: 'bebe',
  form_1p: 'bebemos',
  form_3p: 'beben',
  pastparticiple: 'bebido',
  pastparticiple_english: 'drunk'
}, {
  infinitive: 'beber',
  infinitive_english: 'to drink',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I drink, am drinking',
  form_1s: 'voy a beber',
  form_2s: 'vas a beber',
  form_3s: 'va a beber',
  form_1p: 'vamos a beber',
  form_3p: 'van a beber',
  pastparticiple: 'bebido',
  pastparticiple_english: 'drunk'
}, {
  infinitive: 'beber',
  infinitive_english: 'to drink',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I drank',
  form_1s: 'bebí',
  form_2s: 'bebiste',
  form_3s: 'bebió',
  form_1p: 'bebimos',
  form_3p: 'bebieron',
  pastparticiple: 'bebido',
  pastparticiple_english: 'drunk'
}, {
  infinitive: 'deber',
  infinitive_english: 'to have to; to owe',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I owe, am owing',
  form_1s: 'debo',
  form_2s: 'debes',
  form_3s: 'debe',
  form_1p: 'debemos',
  form_3p: 'deben',
  pastparticiple: 'debido',
  pastparticiple_english: 'owed'
}, {
  infinitive: 'deber',
  infinitive_english: 'to have to; to owe',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I owe, am owing',
  form_1s: 'voy a deber',
  form_2s: 'vas a deber',
  form_3s: 'va a deber',
  form_1p: 'vamos a deber',
  form_3p: 'van a deber',
  pastparticiple: 'debido',
  pastparticiple_english: 'owed'
}, {
  infinitive: 'deber',
  infinitive_english: 'to have to; to owe',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I owed',
  form_1s: 'debí',
  form_2s: 'debiste',
  form_3s: 'debió',
  form_1p: 'debimos',
  form_3p: 'debieron',
  pastparticiple: 'debido',
  pastparticiple_english: 'owed'
}, {
  infinitive: 'prometer',
  infinitive_english: 'to promise',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I promise, am promising',
  form_1s: 'prometo',
  form_2s: 'prometes',
  form_3s: 'promete',
  form_1p: 'prometemos',
  form_3p: 'prometen',
  pastparticiple: 'prometido',
  pastparticiple_english: 'promised'
}, {
  infinitive: 'prometer',
  infinitive_english: 'to promise',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I promise, am promising',
  form_1s: 'voy a prometer',
  form_2s: 'vas a prometer',
  form_3s: 'va a prometer',
  form_1p: 'vamos a prometer',
  form_3p: 'van a prometer',
  pastparticiple: 'prometido',
  pastparticiple_english: 'promised'
}, {
  infinitive: 'prometer',
  infinitive_english: 'to promise',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I promised',
  form_1s: 'prometí',
  form_2s: 'prometiste',
  form_3s: 'prometió',
  form_1p: 'prometimos',
  form_3p: 'prometieron',
  pastparticiple: 'prometido',
  pastparticiple_english: 'promised'
}, {
  infinitive: 'comer',
  infinitive_english: 'to eat',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I eat, am eating',
  form_1s: 'como',
  form_2s: 'comes',
  form_3s: 'come',
  form_1p: 'comemos',
  form_3p: 'comen',
  pastparticiple: 'comido',
  pastparticiple_english: 'eaten'
}, {
  infinitive: 'comer',
  infinitive_english: 'to eat',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I eat, am eating',
  form_1s: 'voy a comer',
  form_2s: 'vas a comer',
  form_3s: 'va a comer',
  form_1p: 'vamos a comer',
  form_3p: 'van a comer',
  pastparticiple: 'comido',
  pastparticiple_english: 'eaten'
}, {
  infinitive: 'comer',
  infinitive_english: 'to eat',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I ate',
  form_1s: 'comí',
  form_2s: 'comiste',
  form_3s: 'comió',
  form_1p: 'comimos',
  form_3p: 'comieron',
  pastparticiple: 'comido',
  pastparticiple_english: 'eaten'
}, {
  infinitive: 'esconder',
  infinitive_english: 'to hide',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I hide, am hiding',
  form_1s: 'escondo',
  form_2s: 'escondes',
  form_3s: 'esconde',
  form_1p: 'escondemos',
  form_3p: 'esconden',
  pastparticiple: 'escondido',
  pastparticiple_english: 'hidden'
}, {
  infinitive: 'esconder',
  infinitive_english: 'to hide',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I hide, am hiding',
  form_1s: 'voy a esconder',
  form_2s: 'vas a esconder',
  form_3s: 'va a esconder',
  form_1p: 'vamos a esconder',
  form_3p: 'van a esconder',
  pastparticiple: 'escondido',
  pastparticiple_english: 'hidden'
}, {
  infinitive: 'esconder',
  infinitive_english: 'to hide',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I hid',
  form_1s: 'escondí',
  form_2s: 'escondiste',
  form_3s: 'escondió',
  form_1p: 'escondimos',
  form_3p: 'escondieron',
  pastparticiple: 'escondido',
  pastparticiple_english: 'hidden'
}, {
  infinitive: 'romper',
  infinitive_english: 'to break',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I break, am breaking',
  form_1s: 'rompo',
  form_2s: 'rompes',
  form_3s: 'rompe',
  form_1p: 'rompemos',
  form_3p: 'rompen',
  pastparticiple: 'roto',
  pastparticiple_english: 'broken'
}, {
  infinitive: 'romper',
  infinitive_english: 'to break',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I break, am breaking',
  form_1s: 'voy a romper',
  form_2s: 'vas a romper',
  form_3s: 'va a romper',
  form_1p: 'vamos a romper',
  form_3p: 'van a romper',
  pastparticiple: 'roto',
  pastparticiple_english: 'broken'
}, {
  infinitive: 'romper',
  infinitive_english: 'to break',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I broke',
  form_1s: 'rompí',
  form_2s: 'rompiste',
  form_3s: 'rompió',
  form_1p: 'rompimos',
  form_3p: 'rompieron',
  pastparticiple: 'roto',
  pastparticiple_english: 'broken'
}, {
  infinitive: 'comprender',
  infinitive_english: 'to understand',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I understand, am understanding',
  form_1s: 'comprendo',
  form_2s: 'comprendes',
  form_3s: 'comprende',
  form_1p: 'comprendemos',
  form_3p: 'comprenden',
  pastparticiple: 'comprendido',
  pastparticiple_english: 'understood'
}, {
  infinitive: 'comprender',
  infinitive_english: 'to understand',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I understand, am understanding',
  form_1s: 'voy a comprender',
  form_2s: 'vas a comprender',
  form_3s: 'va a comprender',
  form_1p: 'vamos a comprender',
  form_3p: 'van a comprender',
  pastparticiple: 'comprendido',
  pastparticiple_english: 'understood'
}, {
  infinitive: 'comprender',
  infinitive_english: 'to understand',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I understood',
  form_1s: 'comprendí',
  form_2s: 'comprendiste',
  form_3s: 'comprendió',
  form_1p: 'comprendimos',
  form_3p: 'comprendieron',
  pastparticiple: 'comprendido',
  pastparticiple_english: 'understood'
}, {
  infinitive: 'leer',
  infinitive_english: 'to read',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I read, am reading',
  form_1s: 'leo',
  form_2s: 'lees',
  form_3s: 'lee',
  form_1p: 'leemos',
  form_3p: 'leen',
  pastparticiple: 'leído',
  pastparticiple_english: 'read'
}, {
  infinitive: 'leer',
  infinitive_english: 'to read',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I read, am reading',
  form_1s: 'voy a leer',
  form_2s: 'vas a leer',
  form_3s: 'va a leer',
  form_1p: 'vamos a leer',
  form_3p: 'van a leer',
  pastparticiple: 'leído',
  pastparticiple_english: 'read'
}, {
  infinitive: 'leer',
  infinitive_english: 'to read',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I read',
  form_1s: 'leí',
  form_2s: 'leíste',
  form_3s: 'leyó',
  form_1p: 'leímos',
  form_3p: 'leyeron',
  pastparticiple: 'leído',
  pastparticiple_english: 'read'
}, {
  infinitive: 'temer',
  infinitive_english: 'to fear',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I fear, am fearing',
  form_1s: 'temo',
  form_2s: 'temes',
  form_3s: 'teme',
  form_1p: 'tememos',
  form_3p: 'temen',
  pastparticiple: 'temido',
  pastparticiple_english: 'feared'
}, {
  infinitive: 'temer',
  infinitive_english: 'to fear',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I fear, am fearing',
  form_1s: 'voy a temer',
  form_2s: 'vas a temer',
  form_3s: 'va a temer',
  form_1p: 'vamos a temer',
  form_3p: 'van a temer',
  pastparticiple: 'temido',
  pastparticiple_english: 'feared'
}, {
  infinitive: 'temer',
  infinitive_english: 'to fear',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I feared',
  form_1s: 'temí',
  form_2s: 'temiste',
  form_3s: 'temió',
  form_1p: 'temimos',
  form_3p: 'temieron',
  pastparticiple: 'temido',
  pastparticiple_english: 'feared'
}, {
  infinitive: 'meter',
  infinitive_english: 'to put [into], place, insert',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I put, am putting',
  form_1s: 'meto',
  form_2s: 'metes',
  form_3s: 'mete',
  form_1p: 'metemos',
  form_3p: 'meten',
  pastparticiple: 'metido',
  pastparticiple_english: 'put'
}, {
  infinitive: 'meter',
  infinitive_english: 'to put [into], place, insert',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I put, am putting',
  form_1s: 'voy a meter',
  form_2s: 'vas a meter',
  form_3s: 'va a meter',
  form_1p: 'vamos a meter',
  form_3p: 'van a meter',
  pastparticiple: 'metido',
  pastparticiple_english: 'put'
}, {
  infinitive: 'meter',
  infinitive_english: 'to put [into], place, insert',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I put',
  form_1s: 'metí',
  form_2s: 'metiste',
  form_3s: 'metió',
  form_1p: 'metimos',
  form_3p: 'metieron',
  pastparticiple: 'metido',
  pastparticiple_english: 'put'
}, {
  infinitive: 'vender',
  infinitive_english: 'to sell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I sell, am selling',
  form_1s: 'vendo',
  form_2s: 'vendes',
  form_3s: 'vende',
  form_1p: 'vendemos',
  form_3p: 'venden',
  pastparticiple: 'vendido',
  pastparticiple_english: 'sold'
}, {
  infinitive: 'vender',
  infinitive_english: 'to sell',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I sell, am selling',
  form_1s: 'voy a vender',
  form_2s: 'vas a vender',
  form_3s: 'va a vender',
  form_1p: 'vamos a vender',
  form_3p: 'van a vender',
  pastparticiple: 'vendido',
  pastparticiple_english: 'sold'
}, {
  infinitive: 'vender',
  infinitive_english: 'to sell',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I sold',
  form_1s: 'vendí',
  form_2s: 'vendiste',
  form_3s: 'vendió',
  form_1p: 'vendimos',
  form_3p: 'vendieron',
  pastparticiple: 'vendido',
  pastparticiple_english: 'sold'
}, {
  infinitive: 'escoger',
  infinitive_english: 'to choose, select, pick',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I choose, am choosing',
  form_1s: 'escojo',
  form_2s: 'escoges',
  form_3s: 'escoge',
  form_1p: 'escogemos',
  form_3p: 'escogen',
  pastparticiple: 'escogido',
  pastparticiple_english: 'chosen'
}, {
  infinitive: 'escoger',
  infinitive_english: 'to choose, select, pick',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I choose, am choosing',
  form_1s: 'voy a escoger',
  form_2s: 'vas a escoger',
  form_3s: 'va a escoger',
  form_1p: 'vamos a escoger',
  form_3p: 'van a escoger',
  pastparticiple: 'escogido',
  pastparticiple_english: 'choosen'
}, {
  infinitive: 'escoger',
  infinitive_english: 'to choose, select, pick',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I chose',
  form_1s: 'escogí',
  form_2s: 'escogiste',
  form_3s: 'escogió',
  form_1p: 'escogimos',
  form_3p: 'escogieron',
  pastparticiple: 'escogido',
  pastparticiple_english: 'chosen'
}, {
  infinitive: 'abrir',
  infinitive_english: 'to open',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I open, am opening',
  form_1s: 'abro',
  form_2s: 'abres',
  form_3s: 'abre',
  form_1p: 'abrimos',
  form_3p: 'abren',
  pastparticiple: 'abierto',
  pastparticiple_english: 'opened'
}, {
  infinitive: 'abrir',
  infinitive_english: 'to open',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I open, am opening',
  form_1s: 'voy a abrir',
  form_2s: 'vas a abrir',
  form_3s: 'va a abrir',
  form_1p: 'vamos a abrir',
  form_3p: 'van a abrir',
  pastparticiple: 'abierto',
  pastparticiple_english: 'opened'
}, {
  infinitive: 'abrir',
  infinitive_english: 'to open',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I opened',
  form_1s: 'abrí',
  form_2s: 'abriste',
  form_3s: 'abrió',
  form_1p: 'abrimos',
  form_3p: 'abrieron',
  pastparticiple: 'abierto',
  pastparticiple_english: 'opened'
}, {
  infinitive: 'descubrir',
  infinitive_english: 'to discover',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I discover, am discovering',
  form_1s: 'descubro',
  form_2s: 'descubres',
  form_3s: 'descubre',
  form_1p: 'descubrimos',
  form_3p: 'descubren',
  pastparticiple: 'descubierto',
  pastparticiple_english: 'discovered'
}, {
  infinitive: 'descubrir',
  infinitive_english: 'to discover',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I discover, am discovering',
  form_1s: 'voy a descubrir',
  form_2s: 'vas a descubrir',
  form_3s: 'va a descubrir',
  form_1p: 'vamos a descubrir',
  form_3p: 'van a descubrir',
  pastparticiple: 'descubierto',
  pastparticiple_english: 'discovered'
}, {
  infinitive: 'descubrir',
  infinitive_english: 'to discover',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I discovered',
  form_1s: 'descubrí',
  form_2s: 'descubriste',
  form_3s: 'descubrió',
  form_1p: 'descubrimos',
  form_3p: 'descubrieron',
  pastparticiple: 'descubierto',
  pastparticiple_english: 'discovered'
}, {
  infinitive: 'permitir',
  infinitive_english: 'to permit, allow',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I permit, am permitting',
  form_1s: 'permito',
  form_2s: 'permites',
  form_3s: 'permite',
  form_1p: 'permitimos',
  form_3p: 'permiten',
  pastparticiple: 'permitido',
  pastparticiple_english: 'permitted'
}, {
  infinitive: 'permitir',
  infinitive_english: 'to permit, allow',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I permit, am permitting',
  form_1s: 'voy a permitir',
  form_2s: 'vas a permitir',
  form_3s: 'va a permitir',
  form_1p: 'vamos a permitir',
  form_3p: 'van a permitir',
  pastparticiple: 'permitido',
  pastparticiple_english: 'permitted'
}, {
  infinitive: 'permitir',
  infinitive_english: 'to permit, allow',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I permitted',
  form_1s: 'permití',
  form_2s: 'permitiste',
  form_3s: 'permitió',
  form_1p: 'permitimos',
  form_3p: 'permitieron',
  pastparticiple: 'permitido',
  pastparticiple_english: 'permitted'
}, {
  infinitive: 'admitir',
  infinitive_english: 'to admit',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I admit, am admitting',
  form_1s: 'admito',
  form_2s: 'admites',
  form_3s: 'admite',
  form_1p: 'admitimos',
  form_3p: 'admiten',
  pastparticiple: 'admitido',
  pastparticiple_english: 'admitted'
}, {
  infinitive: 'admitir',
  infinitive_english: 'to admit',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I admit, am admitting',
  form_1s: 'voy a admitir',
  form_2s: 'vas a admitir',
  form_3s: 'va a admitir',
  form_1p: 'vamos a admitir',
  form_3p: 'van a admitir',
  pastparticiple: 'admitido',
  pastparticiple_english: 'admitted'
}, {
  infinitive: 'admitir',
  infinitive_english: 'to admit',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I admitted',
  form_1s: 'admití',
  form_2s: 'admitiste',
  form_3s: 'admitió',
  form_1p: 'admitimos',
  form_3p: 'admitieron',
  pastparticiple: 'admitido',
  pastparticiple_english: 'admitted'
}, {
  infinitive: 'recibir',
  infinitive_english: 'to receive',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I receive, am receiving',
  form_1s: 'recibo',
  form_2s: 'recibes',
  form_3s: 'recibe',
  form_1p: 'recibimos',
  form_3p: 'reciben',
  pastparticiple: 'recibido',
  pastparticiple_english: 'received'
}, {
  infinitive: 'recibir',
  infinitive_english: 'to receive',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I receive, am receiving',
  form_1s: 'voy a recibir',
  form_2s: 'vas a recibir',
  form_3s: 'va a recibir',
  form_1p: 'vamos a recibir',
  form_3p: 'van a recibir',
  pastparticiple: 'recibido',
  pastparticiple_english: 'received'
}, {
  infinitive: 'recibir',
  infinitive_english: 'to receive',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I received',
  form_1s: 'recibí',
  form_2s: 'recibiste',
  form_3s: 'recibió',
  form_1p: 'recibimos',
  form_3p: 'recibieron',
  pastparticiple: 'recibido',
  pastparticiple_english: 'received'
}, {
  infinitive: 'asistir',
  infinitive_english: 'to attend',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I attend, am attending',
  form_1s: 'asisto',
  form_2s: 'asistes',
  form_3s: 'asiste',
  form_1p: 'asistimos',
  form_3p: 'asisten',
  pastparticiple: 'asistido',
  pastparticiple_english: 'attended'
}, {
  infinitive: 'asistir',
  infinitive_english: 'to attend',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I attend, am attending',
  form_1s: 'voy a asistir',
  form_2s: 'vas a asistir',
  form_3s: 'va a asistir',
  form_1p: 'vamos a asistir',
  form_3p: 'van a asistir',
  pastparticiple: 'asistido',
  pastparticiple_english: 'attended'
}, {
  infinitive: 'asistir',
  infinitive_english: 'to attend',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I attended',
  form_1s: 'asistí',
  form_2s: 'asististe',
  form_3s: 'asistió',
  form_1p: 'asistimos',
  form_3p: 'asistieron',
  pastparticiple: 'asistido',
  pastparticiple_english: 'attended'
}, {
  infinitive: 'subir',
  infinitive_english: 'to go up, climb',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I go up, am going up',
  form_1s: 'subo',
  form_2s: 'subes',
  form_3s: 'sube',
  form_1p: 'subimos',
  form_3p: 'suben',
  pastparticiple: 'subido',
  pastparticiple_english: 'went up'
}, {
  infinitive: 'subir',
  infinitive_english: 'to go up, climb',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I go up, am going up',
  form_1s: 'voy a subir',
  form_2s: 'vas a subir',
  form_3s: 'va a subir',
  form_1p: 'vamos a subir',
  form_3p: 'van a subir',
  pastparticiple: 'subido',
  pastparticiple_english: 'went up'
}, {
  infinitive: 'subir',
  infinitive_english: 'to go up, climb',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I went up',
  form_1s: 'subí',
  form_2s: 'subiste',
  form_3s: 'subió',
  form_1p: 'subimos',
  form_3p: 'subieron',
  pastparticiple: 'subido',
  pastparticiple_english: 'went up'
}, {
  infinitive: 'cubrir',
  infinitive_english: 'to cover',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I cover, am covering',
  form_1s: 'cubro',
  form_2s: 'cubres',
  form_3s: 'cubre',
  form_1p: 'cubrimos',
  form_3p: 'cubren',
  pastparticiple: 'cubierto',
  pastparticiple_english: 'covered'
}, {
  infinitive: 'cubrir',
  infinitive_english: 'to cover',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I cover, am covering',
  form_1s: 'voy a cubrir',
  form_2s: 'vas a cubrir',
  form_3s: 'va a cubrir',
  form_1p: 'vamos a cubrir',
  form_3p: 'van a cubrir',
  pastparticiple: 'cubierto',
  pastparticiple_english: 'covered'
}, {
  infinitive: 'cubrir',
  infinitive_english: 'to cover',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I covered',
  form_1s: 'cubrí',
  form_2s: 'cubriste',
  form_3s: 'cubrió',
  form_1p: 'cubrimos',
  form_3p: 'cubrieron',
  pastparticiple: 'cubierto',
  pastparticiple_english: 'covered'
}, {
  infinitive: 'sufrir',
  infinitive_english: 'to suffer',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I suffer, am suffering',
  form_1s: 'sufro',
  form_2s: 'sufres',
  form_3s: 'sufre',
  form_1p: 'sufrimos',
  form_3p: 'sufren',
  pastparticiple: 'sufrido',
  pastparticiple_english: 'suffered'
}, {
  infinitive: 'sufrir',
  infinitive_english: 'to suffer',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I suffer, am suffering',
  form_1s: 'voy a sufrir',
  form_2s: 'vas a sufrir',
  form_3s: 'va a sufrir',
  form_1p: 'vamos a sufrir',
  form_3p: 'van a sufrir',
  pastparticiple: 'sufrido',
  pastparticiple_english: 'suffered'
}, {
  infinitive: 'sufrir',
  infinitive_english: 'to suffer; to undergo, experience, put up with',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I suffered',
  form_1s: 'sufrí',
  form_2s: 'sufriste',
  form_3s: 'sufrió',
  form_1p: 'sufrimos',
  form_3p: 'sufrieron',
  pastparticiple: 'sufrido',
  pastparticiple_english: 'suffered'
}, {
  infinitive: 'decidir',
  infinitive_english: 'to decide',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I decide, am deciding',
  form_1s: 'decido',
  form_2s: 'decides',
  form_3s: 'decide',
  form_1p: 'decidimos',
  form_3p: 'deciden',
  pastparticiple: 'decidido',
  pastparticiple_english: 'decided'
}, {
  infinitive: 'decidir',
  infinitive_english: 'to decide',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I decide, am deciding',
  form_1s: 'voy a decidir',
  form_2s: 'vas a decidir',
  form_3s: 'va a decidir',
  form_1p: 'vamos a decidir',
  form_3p: 'van a decidir',
  pastparticiple: 'decidido',
  pastparticiple_english: 'decided'
}, {
  infinitive: 'decidir',
  infinitive_english: 'to decide',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I decided',
  form_1s: 'decidí',
  form_2s: 'decidiste',
  form_3s: 'decidió',
  form_1p: 'decidimos',
  form_3p: 'decidieron',
  pastparticiple: 'decidido',
  pastparticiple_english: 'decided'
}, {
  infinitive: 'unir',
  infinitive_english: 'to unite, to join',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I unite, am uniting',
  form_1s: 'uno',
  form_2s: 'unes',
  form_3s: 'une',
  form_1p: 'unimos',
  form_3p: 'unen',
  pastparticiple: 'unido',
  pastparticiple_english: 'united'
}, {
  infinitive: 'unir',
  infinitive_english: 'to unite, join',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I unite, am uniting',
  form_1s: 'voy a unir',
  form_2s: 'vas a unir',
  form_3s: 'va a unir',
  form_1p: 'vamos a unir',
  form_3p: 'van a unir',
  pastparticiple: 'unido',
  pastparticiple_english: 'united'
}, {
  infinitive: 'unir',
  infinitive_english: 'to unite, join',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I united',
  form_1s: 'uní',
  form_2s: 'uniste',
  form_3s: 'unió',
  form_1p: 'unimos',
  form_3p: 'unieron',
  pastparticiple: 'unido',
  pastparticiple_english: 'united'
}, {
  infinitive: 'describir',
  infinitive_english: 'to describe',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I describe, am describing',
  form_1s: 'describo',
  form_2s: 'describes',
  form_3s: 'describe',
  form_1p: 'describimos',
  form_3p: 'describen',
  pastparticiple: 'descrito',
  pastparticiple_english: 'described'
}, {
  infinitive: 'describir',
  infinitive_english: 'to describe',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I describe, am describing',
  form_1s: 'voy a describir',
  form_2s: 'vas a describir',
  form_3s: 'va a describir',
  form_1p: 'vamos a describir',
  form_3p: 'van a describir',
  pastparticiple: 'descrito',
  pastparticiple_english: 'described'
}, {
  infinitive: 'describir',
  infinitive_english: 'to describe',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I described',
  form_1s: 'describí',
  form_2s: 'describiste',
  form_3s: 'describió',
  form_1p: 'describimos',
  form_3p: 'describieron',
  pastparticiple: 'descrito',
  pastparticiple_english: 'described'
}, {
  infinitive: 'vivir',
  infinitive_english: 'to live',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Presente',
  tense_english: 'Present',
  verb_english: 'I live, am living',
  form_1s: 'vivo',
  form_2s: 'vives',
  form_3s: 'vive',
  form_1p: 'vivimos',
  form_3p: 'viven',
  pastparticiple: 'vivido',
  pastparticiple_english: 'lived'
}, {
  infinitive: 'vivir',
  infinitive_english: 'to live',
  mood: 'Próximo',
  mood_english: 'Near',
  tense: 'Futuro',
  tense_english: 'Future',
  verb_english: 'I live, am living',
  form_1s: 'voy a vivir',
  form_2s: 'vas a vivir',
  form_3s: 'va a vivir',
  form_1p: 'vamos a vivir',
  form_3p: 'van a vivir',
  pastparticiple: 'vivido',
  pastparticiple_english: 'lived'
}, {
  infinitive: 'vivir',
  infinitive_english: 'to live',
  mood: 'Indicativo',
  mood_english: 'Indicative',
  tense: 'Pretérito',
  tense_english: 'Preterite',
  verb_english: 'I lived',
  form_1s: 'viví',
  form_2s: 'viviste',
  form_3s: 'vivió',
  form_1p: 'vivimos',
  form_3p: 'vivieron',
  pastparticiple: 'vivido',
  pastparticiple_english: 'lived'
}];
var _default = presentData;
exports.default = _default;
},{}],"components/Filters/VerbTensesFilters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VerbTenseFilters = void 0;

var _miniData = _interopRequireDefault(require("../../data/miniData"));

var _beginnerData = _interopRequireDefault(require("../../data/beginnerData"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LevelOne = _beginnerData.default.filter(function (verb) {
  return verb.tense_english === 'Present' && verb.mood_english === 'Indicative';
});

var Two = _beginnerData.default.filter(function (verb) {
  return verb.tense_english === 'Preterite' && verb.mood_english === 'Indicative';
});

var LevelTwo = LevelOne.concat(Two);

var LevelThree = _miniData.default.filter(function (verb) {
  return verb.tense_english === 'Present' && verb.mood_english === 'Indicative' || verb.tense_english === 'Preterite' && verb.mood_english === 'Indicative';
});

var Four = _miniData.default.filter(function (verb) {
  return verb.tense_english === 'Present Perfect' && verb.mood_english === 'Indicative';
});

var LevelFour = LevelThree.concat(Four);

var Five = _miniData.default.filter(function (verb) {
  return verb.tense_english === 'Future' && verb.mood_english === 'Indicative';
});

var LevelFive = LevelFour.concat(Five);

var Six = _miniData.default.filter(function (verb) {
  return verb.tense_english === 'Present Perfect' && verb.mood_english === 'Indicative';
});

var LevelSix = LevelFive.concat(Six);
var VerbTenseFilters = [LevelOne, LevelTwo, LevelThree, LevelFour, LevelFive, LevelSix, _miniData.default];
exports.VerbTenseFilters = VerbTenseFilters;
},{"../../data/miniData":"data/miniData.js","../../data/beginnerData":"data/beginnerData.js"}],"../node_modules/lottie-web/build/player/lottie.js":[function(require,module,exports) {
var define;
var global = arguments[3];
(typeof navigator !== "undefined") && (function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define(function() {
            return factory(root);
        });
    } else if (typeof module === "object" && module.exports) {
        module.exports = factory(root);
    } else {
        root.lottie = factory(root);
        root.bodymovin = root.lottie;
    }
}((window || {}), function(window) {
    "use strict";
    var svgNS = "http://www.w3.org/2000/svg";

var locationHref = '';

var initialDefaultFrame = -999999;

var subframeEnabled = true;
var expressionsPlugin;
var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
var cachedColors = {};
var bm_rounder = Math.round;
var bm_rnd;
var bm_pow = Math.pow;
var bm_sqrt = Math.sqrt;
var bm_abs = Math.abs;
var bm_floor = Math.floor;
var bm_max = Math.max;
var bm_min = Math.min;
var blitter = 10;

var BMMath = {};
(function(){
    var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
    var i, len = propertyNames.length;
    for(i=0;i<len;i+=1){
        BMMath[propertyNames[i]] = Math[propertyNames[i]];
    }
}());

function ProjectInterface(){return {};}

BMMath.random = Math.random;
BMMath.abs = function(val){
    var tOfVal = typeof val;
    if(tOfVal === 'object' && val.length){
        var absArr = createSizedArray(val.length);
        var i, len = val.length;
        for(i=0;i<len;i+=1){
            absArr[i] = Math.abs(val[i]);
        }
        return absArr;
    }
    return Math.abs(val);

};
var defaultCurveSegments = 150;
var degToRads = Math.PI/180;
var roundCorner = 0.5519;

function roundValues(flag){
    if(flag){
        bm_rnd = Math.round;
    }else{
        bm_rnd = function(val){
            return val;
        };
    }
}
roundValues(false);

function styleDiv(element){
    element.style.position = 'absolute';
    element.style.top = 0;
    element.style.left = 0;
    element.style.display = 'block';
    element.style.transformOrigin = element.style.webkitTransformOrigin = '0 0';
    element.style.backfaceVisibility  = element.style.webkitBackfaceVisibility = 'visible';
    element.style.transformStyle = element.style.webkitTransformStyle = element.style.mozTransformStyle = "preserve-3d";
}

function BMEnterFrameEvent(n,c,t,d){
    this.type = n;
    this.currentTime = c;
    this.totalTime = t;
    this.direction = d < 0 ? -1:1;
}

function BMCompleteEvent(n,d){
    this.type = n;
    this.direction = d < 0 ? -1:1;
}

function BMCompleteLoopEvent(n,c,t,d){
    this.type = n;
    this.currentLoop = t;
    this.totalLoops = c;
    this.direction = d < 0 ? -1:1;
}

function BMSegmentStartEvent(n,f,t){
    this.type = n;
    this.firstFrame = f;
    this.totalFrames = t;
}

function BMDestroyEvent(n,t){
    this.type = n;
    this.target = t;
}

var createElementID = (function(){
    var _count = 0;
    return function createID() {
        return '__lottie_element_' + ++_count
    }
}())

function HSVtoRGB(h, s, v) {
    var r, g, b, i, f, p, q, t;
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0: r = v; g = t; b = p; break;
        case 1: r = q; g = v; b = p; break;
        case 2: r = p; g = v; b = t; break;
        case 3: r = p; g = q; b = v; break;
        case 4: r = t; g = p; b = v; break;
        case 5: r = v; g = p; b = q; break;
    }
    return [ r,
        g,
         b ];
}

function RGBtoHSV(r, g, b) {
    var max = Math.max(r, g, b), min = Math.min(r, g, b),
        d = max - min,
        h,
        s = (max === 0 ? 0 : d / max),
        v = max / 255;

    switch (max) {
        case min: h = 0; break;
        case r: h = (g - b) + d * (g < b ? 6: 0); h /= 6 * d; break;
        case g: h = (b - r) + d * 2; h /= 6 * d; break;
        case b: h = (r - g) + d * 4; h /= 6 * d; break;
    }

    return [
         h,
         s,
         v
    ];
}

function addSaturationToRGB(color,offset){
    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
    hsv[1] += offset;
    if (hsv[1] > 1) {
        hsv[1] = 1;
    }
    else if (hsv[1] <= 0) {
        hsv[1] = 0;
    }
    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
}

function addBrightnessToRGB(color,offset){
    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
    hsv[2] += offset;
    if (hsv[2] > 1) {
        hsv[2] = 1;
    }
    else if (hsv[2] < 0) {
        hsv[2] = 0;
    }
    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
}

function addHueToRGB(color,offset) {
    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
    hsv[0] += offset/360;
    if (hsv[0] > 1) {
        hsv[0] -= 1;
    }
    else if (hsv[0] < 0) {
        hsv[0] += 1;
    }
    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
}

var rgbToHex = (function(){
    var colorMap = [];
    var i;
    var hex;
    for(i=0;i<256;i+=1){
        hex = i.toString(16);
        colorMap[i] = hex.length == 1 ? '0' + hex : hex;
    }

    return function(r, g, b) {
        if(r<0){
            r = 0;
        }
        if(g<0){
            g = 0;
        }
        if(b<0){
            b = 0;
        }
        return '#' + colorMap[r] + colorMap[g] + colorMap[b];
    };
}());
function BaseEvent(){}
BaseEvent.prototype = {
	triggerEvent: function (eventName, args) {
	    if (this._cbs[eventName]) {
	        var len = this._cbs[eventName].length;
	        for (var i = 0; i < len; i++){
	            this._cbs[eventName][i](args);
	        }
	    }
	},
	addEventListener: function (eventName, callback) {
	    if (!this._cbs[eventName]){
	        this._cbs[eventName] = [];
	    }
	    this._cbs[eventName].push(callback);

		return function() {
			this.removeEventListener(eventName, callback);
		}.bind(this);
	},
	removeEventListener: function (eventName,callback){
	    if (!callback){
	        this._cbs[eventName] = null;
	    }else if(this._cbs[eventName]){
	        var i = 0, len = this._cbs[eventName].length;
	        while(i<len){
	            if(this._cbs[eventName][i] === callback){
	                this._cbs[eventName].splice(i,1);
	                i -=1;
	                len -= 1;
	            }
	            i += 1;
	        }
	        if(!this._cbs[eventName].length){
	            this._cbs[eventName] = null;
	        }
	    }
	}
};
var createTypedArray = (function(){
	function createRegularArray(type, len){
		var i = 0, arr = [], value;
		switch(type) {
			case 'int16':
			case 'uint8c':
				value = 1;
				break;
			default:
				value = 1.1;
				break;
		}
		for(i = 0; i < len; i += 1) {
			arr.push(value);
		}
		return arr;
	}
	function createTypedArray(type, len){
		if(type === 'float32') {
			return new Float32Array(len);
		} else if(type === 'int16') {
			return new Int16Array(len);
		} else if(type === 'uint8c') {
			return new Uint8ClampedArray(len);
		}
	}
	if(typeof Uint8ClampedArray === 'function' && typeof Float32Array === 'function') {
		return createTypedArray;
	} else {
		return createRegularArray;
	}
}());

function createSizedArray(len) {
	return Array.apply(null,{length:len});
}
function createNS(type) {
	//return {appendChild:function(){},setAttribute:function(){},style:{}}
	return document.createElementNS(svgNS, type);
}
function createTag(type) {
	//return {appendChild:function(){},setAttribute:function(){},style:{}}
	return document.createElement(type);
}
function DynamicPropertyContainer(){};
DynamicPropertyContainer.prototype = {
	addDynamicProperty: function(prop) {
		if(this.dynamicProperties.indexOf(prop) === -1) {
	        this.dynamicProperties.push(prop);
	        this.container.addDynamicProperty(this);
	    	this._isAnimated = true;
	    }
	},
	iterateDynamicProperties: function(){
	    this._mdf = false;
	    var i, len = this.dynamicProperties.length;
	    for(i=0;i<len;i+=1){
	        this.dynamicProperties[i].getValue();
	        if(this.dynamicProperties[i]._mdf) {
	            this._mdf = true;
	        }
	    }
	},
	initDynamicPropertyContainer: function(container){
	    this.container = container;
	    this.dynamicProperties = [];
	    this._mdf = false;
	    this._isAnimated = false;
	}
}
var getBlendMode = (function() {

	var blendModeEnums = {
        0:'source-over',
        1:'multiply',
        2:'screen',
        3:'overlay',
        4:'darken',
        5:'lighten',
        6:'color-dodge',
        7:'color-burn',
        8:'hard-light',
        9:'soft-light',
        10:'difference',
        11:'exclusion',
        12:'hue',
        13:'saturation',
        14:'color',
        15:'luminosity'
    }

	return function(mode) {
		return blendModeEnums[mode] || '';
	}
}())
/*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */

/**
 * 2D transformation matrix object initialized with identity matrix.
 *
 * The matrix can synchronize a canvas context by supplying the context
 * as an argument, or later apply current absolute transform to an
 * existing context.
 *
 * All values are handled as floating point values.
 *
 * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
 * @prop {number} a - scale x
 * @prop {number} b - shear y
 * @prop {number} c - shear x
 * @prop {number} d - scale y
 * @prop {number} e - translate x
 * @prop {number} f - translate y
 * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
 * @constructor
 */

var Matrix = (function(){

    var _cos = Math.cos;
    var _sin = Math.sin;
    var _tan = Math.tan;
    var _rnd = Math.round;

    function reset(){
        this.props[0] = 1;
        this.props[1] = 0;
        this.props[2] = 0;
        this.props[3] = 0;
        this.props[4] = 0;
        this.props[5] = 1;
        this.props[6] = 0;
        this.props[7] = 0;
        this.props[8] = 0;
        this.props[9] = 0;
        this.props[10] = 1;
        this.props[11] = 0;
        this.props[12] = 0;
        this.props[13] = 0;
        this.props[14] = 0;
        this.props[15] = 1;
        return this;
    }

    function rotate(angle) {
        if(angle === 0){
            return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
    }

    function rotateX(angle){
        if(angle === 0){
            return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin,  mCos, 0, 0, 0, 0, 1);
    }

    function rotateY(angle){
        if(angle === 0){
            return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos,  0,  mSin, 0, 0, 1, 0, 0, -mSin,  0,  mCos, 0, 0, 0, 0, 1);
    }

    function rotateZ(angle){
        if(angle === 0){
            return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
    }

    function shear(sx,sy){
        return this._t(1, sy, sx, 1, 0, 0);
    }

    function skew(ax, ay){
        return this.shear(_tan(ax), _tan(ay));
    }

    function skewFromAxis(ax, angle){
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, mSin,  0, 0, -mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1)
            ._t(1, 0,  0, 0, _tan(ax),  1, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1)
            ._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
        //return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
    }

    function scale(sx, sy, sz) {
        if(!sz && sz !== 0) {
            sz = 1;
        }
        if(sx === 1 && sy === 1 && sz === 1){
            return this;
        }
        return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
    }

    function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        this.props[0] = a;
        this.props[1] = b;
        this.props[2] = c;
        this.props[3] = d;
        this.props[4] = e;
        this.props[5] = f;
        this.props[6] = g;
        this.props[7] = h;
        this.props[8] = i;
        this.props[9] = j;
        this.props[10] = k;
        this.props[11] = l;
        this.props[12] = m;
        this.props[13] = n;
        this.props[14] = o;
        this.props[15] = p;
        return this;
    }

    function translate(tx, ty, tz) {
        tz = tz || 0;
        if(tx !== 0 || ty !== 0 || tz !== 0){
            return this._t(1,0,0,0,0,1,0,0,0,0,1,0,tx,ty,tz,1);
        }
        return this;
    }

    function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {

        var _p = this.props;

        if(a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0){
            //NOTE: commenting this condition because TurboFan deoptimizes code when present
            //if(m2 !== 0 || n2 !== 0 || o2 !== 0){
                _p[12] = _p[12] * a2 + _p[15] * m2;
                _p[13] = _p[13] * f2 + _p[15] * n2;
                _p[14] = _p[14] * k2 + _p[15] * o2;
                _p[15] = _p[15] * p2;
            //}
            this._identityCalculated = false;
            return this;
        }

        var a1 = _p[0];
        var b1 = _p[1];
        var c1 = _p[2];
        var d1 = _p[3];
        var e1 = _p[4];
        var f1 = _p[5];
        var g1 = _p[6];
        var h1 = _p[7];
        var i1 = _p[8];
        var j1 = _p[9];
        var k1 = _p[10];
        var l1 = _p[11];
        var m1 = _p[12];
        var n1 = _p[13];
        var o1 = _p[14];
        var p1 = _p[15];

        /* matrix order (canvas compatible):
         * ace
         * bdf
         * 001
         */
        _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
        _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2 ;
        _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2 ;
        _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2 ;

        _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2 ;
        _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2 ;
        _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2 ;
        _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2 ;

        _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2 ;
        _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2 ;
        _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2 ;
        _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2 ;

        _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2 ;
        _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2 ;
        _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2 ;
        _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2 ;

        this._identityCalculated = false;
        return this;
    }

    function isIdentity() {
        if(!this._identityCalculated){
            this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
            this._identityCalculated = true;
        }
        return this._identity;
    }

    function equals(matr){
        var i = 0;
        while (i < 16) {
            if(matr.props[i] !== this.props[i]) {
                return false;
            }
            i+=1;
        }
        return true;
    }

    function clone(matr){
        var i;
        for(i=0;i<16;i+=1){
            matr.props[i] = this.props[i];
        }
    }

    function cloneFromProps(props){
        var i;
        for(i=0;i<16;i+=1){
            this.props[i] = props[i];
        }
    }

    function applyToPoint(x, y, z) {

        return {
            x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
            y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
            z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
        };
        /*return {
         x: x * me.a + y * me.c + me.e,
         y: x * me.b + y * me.d + me.f
         };*/
    }
    function applyToX(x, y, z) {
        return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
    }
    function applyToY(x, y, z) {
        return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
    }
    function applyToZ(x, y, z) {
        return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
    }

    function inversePoint(pt) {
        var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
        var a = this.props[5]/determinant;
        var b = - this.props[1]/determinant;
        var c = - this.props[4]/determinant;
        var d = this.props[0]/determinant;
        var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12])/determinant;
        var f = - (this.props[0] * this.props[13] - this.props[1] * this.props[12])/determinant;
        return [pt[0] * a + pt[1] * c + e, pt[0] * b + pt[1] * d + f, 0];
    }

    function inversePoints(pts){
        var i, len = pts.length, retPts = [];
        for(i=0;i<len;i+=1){
            retPts[i] = inversePoint(pts[i]);
        }
        return retPts;
    }

    function applyToTriplePoints(pt1, pt2, pt3) {
        var arr = createTypedArray('float32', 6);
        if(this.isIdentity()) {
            arr[0] = pt1[0];
            arr[1] = pt1[1];
            arr[2] = pt2[0];
            arr[3] = pt2[1];
            arr[4] = pt3[0];
            arr[5] = pt3[1];
        } else {
            var p0 = this.props[0], p1 = this.props[1], p4 = this.props[4], p5 = this.props[5], p12 = this.props[12], p13 = this.props[13];
            arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
            arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
            arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
            arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
            arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
            arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
        }
        return arr;
    }

    function applyToPointArray(x,y,z){
        var arr;
        if(this.isIdentity()) {
            arr = [x,y,z];
        } else {
            arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
        }
        return arr;
    }

    function applyToPointStringified(x, y) {
        if(this.isIdentity()) {
            return x + ',' + y;
        }
        var _p = this.props;
        return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100+','+ Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
    }

    function toCSS() {
        //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
        /*if(this.isIdentity()) {
            return '';
        }*/
        var i = 0;
        var props = this.props;
        var cssValue = 'matrix3d(';
        var v = 10000;
        while(i<16){
            cssValue += _rnd(props[i]*v)/v;
            cssValue += i === 15 ? ')':',';
            i += 1;
        }
        return cssValue;
    }

    function roundMatrixProperty(val) {
        var v = 10000;
        if((val < 0.000001 && val > 0) || (val > -0.000001 && val < 0)) {
            return _rnd(val * v) / v;
        }
        return val;
    }

    function to2dCSS() {
        //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
        /*if(this.isIdentity()) {
            return '';
        }*/
        var props = this.props;
        var _a = roundMatrixProperty(props[0]);
        var _b = roundMatrixProperty(props[1]);
        var _c = roundMatrixProperty(props[4]);
        var _d = roundMatrixProperty(props[5]);
        var _e = roundMatrixProperty(props[12]);
        var _f = roundMatrixProperty(props[13]);
        return "matrix(" + _a + ',' + _b + ',' + _c + ',' + _d + ',' + _e + ',' + _f + ")";
    }

    return function(){
        this.reset = reset;
        this.rotate = rotate;
        this.rotateX = rotateX;
        this.rotateY = rotateY;
        this.rotateZ = rotateZ;
        this.skew = skew;
        this.skewFromAxis = skewFromAxis;
        this.shear = shear;
        this.scale = scale;
        this.setTransform = setTransform;
        this.translate = translate;
        this.transform = transform;
        this.applyToPoint = applyToPoint;
        this.applyToX = applyToX;
        this.applyToY = applyToY;
        this.applyToZ = applyToZ;
        this.applyToPointArray = applyToPointArray;
        this.applyToTriplePoints = applyToTriplePoints;
        this.applyToPointStringified = applyToPointStringified;
        this.toCSS = toCSS;
        this.to2dCSS = to2dCSS;
        this.clone = clone;
        this.cloneFromProps = cloneFromProps;
        this.equals = equals;
        this.inversePoints = inversePoints;
        this.inversePoint = inversePoint;
        this._t = this.transform;
        this.isIdentity = isIdentity;
        this._identity = true;
        this._identityCalculated = false;

        this.props = createTypedArray('float32', 16);
        this.reset();
    };
}());

/*
 Copyright 2014 David Bau.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 */

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
    var global = this,
        width = 256,        // each RC4 output is 0 <= x < 256
        chunks = 6,         // at least six RC4 outputs for each double
        digits = 52,        // there are 52 significant digits in a double
        rngname = 'random', // rngname: name for Math.random and Math.seedrandom
        startdenom = math.pow(width, chunks),
        significance = math.pow(2, digits),
        overflow = significance * 2,
        mask = width - 1,
        nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
    function seedrandom(seed, options, callback) {
        var key = [];
        options = (options === true) ? { entropy: true } : (options || {});

        // Flatten the seed string or build one from local entropy if needed.
        var shortseed = mixkey(flatten(
            options.entropy ? [seed, tostring(pool)] :
                (seed === null) ? autoseed() : seed, 3), key);

        // Use the seed to initialize an ARC4 generator.
        var arc4 = new ARC4(key);

        // This function returns a random double in [0, 1) that contains
        // randomness in every bit of the mantissa of the IEEE 754 value.
        var prng = function() {
            var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
                d = startdenom,                 //   and denominator d = 2 ^ 48.
                x = 0;                          //   and no 'extra last byte'.
            while (n < significance) {          // Fill up all significant digits by
                n = (n + x) * width;              //   shifting numerator and
                d *= width;                       //   denominator and generating a
                x = arc4.g(1);                    //   new least-significant-byte.
            }
            while (n >= overflow) {             // To avoid rounding up, before adding
                n /= 2;                           //   last byte, shift everything
                d /= 2;                           //   right using integer math until
                x >>>= 1;                         //   we have exactly the desired bits.
            }
            return (n + x) / d;                 // Form the number within [0, 1).
        };

        prng.int32 = function() { return arc4.g(4) | 0; };
        prng.quick = function() { return arc4.g(4) / 0x100000000; };
        prng.double = prng;

        // Mix the randomness into accumulated entropy.
        mixkey(tostring(arc4.S), pool);

        // Calling convention: what to return as a function of prng, seed, is_math.
        return (options.pass || callback ||
        function(prng, seed, is_math_call, state) {
            if (state) {
                // Load the arc4 state from the given state if it has an S array.
                if (state.S) { copy(state, arc4); }
                // Only provide the .state method if requested via options.state.
                prng.state = function() { return copy(arc4, {}); };
            }

            // If called as a method of Math (Math.seedrandom()), mutate
            // Math.random because that is how seedrandom.js has worked since v1.0.
            if (is_math_call) { math[rngname] = prng; return seed; }

            // Otherwise, it is a newer calling convention, so return the
            // prng directly.
            else return prng;
        })(
            prng,
            shortseed,
            'global' in options ? options.global : (this == math),
            options.state);
    }
    math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
    function ARC4(key) {
        var t, keylen = key.length,
            me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

        // The empty key [] is treated as [0].
        if (!keylen) { key = [keylen++]; }

        // Set up S using the standard key scheduling algorithm.
        while (i < width) {
            s[i] = i++;
        }
        for (i = 0; i < width; i++) {
            s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
            s[j] = t;
        }

        // The "g" method returns the next (count) outputs as one number.
        me.g = function(count) {
            // Using instance members instead of closure state nearly doubles speed.
            var t, r = 0,
                i = me.i, j = me.j, s = me.S;
            while (count--) {
                t = s[i = mask & (i + 1)];
                r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
            }
            me.i = i; me.j = j;
            return r;
            // For robust unpredictability, the function call below automatically
            // discards an initial batch of values.  This is called RC4-drop[256].
            // See http://google.com/search?q=rsa+fluhrer+response&btnI
        };
    }

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
    function copy(f, t) {
        t.i = f.i;
        t.j = f.j;
        t.S = f.S.slice();
        return t;
    }

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
    function flatten(obj, depth) {
        var result = [], typ = (typeof obj), prop;
        if (depth && typ == 'object') {
            for (prop in obj) {
                try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
            }
        }
        return (result.length ? result : typ == 'string' ? obj : obj + '\0');
    }

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
    function mixkey(seed, key) {
        var stringseed = seed + '', smear, j = 0;
        while (j < stringseed.length) {
            key[mask & j] =
                mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
        }
        return tostring(key);
    }

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
    function autoseed() {
        try {
            if (nodecrypto) { return tostring(nodecrypto.randomBytes(width)); }
            var out = new Uint8Array(width);
            (global.crypto || global.msCrypto).getRandomValues(out);
            return tostring(out);
        } catch (e) {
            var browser = global.navigator,
                plugins = browser && browser.plugins;
            return [+new Date(), global, plugins, global.screen, tostring(pool)];
        }
    }

//
// tostring()
// Converts an array of charcodes to a string
//
    function tostring(a) {
        return String.fromCharCode.apply(0, a);
    }

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
    mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//

// End anonymous scope, and pass initial values.
})(
    [],     // pool: entropy pool starts empty
    BMMath    // math: package containing random, pow, and seedrandom
);
var BezierFactory = (function(){
    /**
     * BezierEasing - use bezier curve for transition easing function
     * by Gaëtan Renaudeau 2014 - 2015 – MIT License
     *
     * Credits: is based on Firefox's nsSMILKeySpline.cpp
     * Usage:
     * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
     * spline.get(x) => returns the easing value | x must be in [0, 1] range
     *
     */

        var ob = {};
    ob.getBezierEasing = getBezierEasing;
    var beziers = {};

    function getBezierEasing(a,b,c,d,nm){
        var str = nm || ('bez_' + a+'_'+b+'_'+c+'_'+d).replace(/\./g, 'p');
        if(beziers[str]){
            return beziers[str];
        }
        var bezEasing = new BezierEasing([a,b,c,d]);
        beziers[str] = bezEasing;
        return bezEasing;
    }

// These values are established by empiricism with tests (tradeoff: performance VS precision)
    var NEWTON_ITERATIONS = 4;
    var NEWTON_MIN_SLOPE = 0.001;
    var SUBDIVISION_PRECISION = 0.0000001;
    var SUBDIVISION_MAX_ITERATIONS = 10;

    var kSplineTableSize = 11;
    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

    var float32ArraySupported = typeof Float32Array === "function";

    function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
    function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
    function C (aA1)      { return 3.0 * aA1; }

// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
    function calcBezier (aT, aA1, aA2) {
        return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;
    }

// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
    function getSlope (aT, aA1, aA2) {
        return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
    }

    function binarySubdivide (aX, aA, aB, mX1, mX2) {
        var currentX, currentT, i = 0;
        do {
            currentT = aA + (aB - aA) / 2.0;
            currentX = calcBezier(currentT, mX1, mX2) - aX;
            if (currentX > 0.0) {
                aB = currentT;
            } else {
                aA = currentT;
            }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
        return currentT;
    }

    function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
            var currentSlope = getSlope(aGuessT, mX1, mX2);
            if (currentSlope === 0.0) return aGuessT;
            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
            aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
    }

    /**
     * points is an array of [ mX1, mY1, mX2, mY2 ]
     */
    function BezierEasing (points) {
        this._p = points;
        this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
        this._precomputed = false;

        this.get = this.get.bind(this);
    }

    BezierEasing.prototype = {

        get: function (x) {
            var mX1 = this._p[0],
                mY1 = this._p[1],
                mX2 = this._p[2],
                mY2 = this._p[3];
            if (!this._precomputed) this._precompute();
            if (mX1 === mY1 && mX2 === mY2) return x; // linear
            // Because JavaScript number are imprecise, we should guarantee the extremes are right.
            if (x === 0) return 0;
            if (x === 1) return 1;
            return calcBezier(this._getTForX(x), mY1, mY2);
        },

        // Private part

        _precompute: function () {
            var mX1 = this._p[0],
                mY1 = this._p[1],
                mX2 = this._p[2],
                mY2 = this._p[3];
            this._precomputed = true;
            if (mX1 !== mY1 || mX2 !== mY2)
                this._calcSampleValues();
        },

        _calcSampleValues: function () {
            var mX1 = this._p[0],
                mX2 = this._p[2];
            for (var i = 0; i < kSplineTableSize; ++i) {
                this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
            }
        },

        /**
         * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
         */
        _getTForX: function (aX) {
            var mX1 = this._p[0],
                mX2 = this._p[2],
                mSampleValues = this._mSampleValues;

            var intervalStart = 0.0;
            var currentSample = 1;
            var lastSample = kSplineTableSize - 1;

            for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                intervalStart += kSampleStepSize;
            }
            --currentSample;

            // Interpolate to provide an initial guess for t
            var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample+1] - mSampleValues[currentSample]);
            var guessForT = intervalStart + dist * kSampleStepSize;

            var initialSlope = getSlope(guessForT, mX1, mX2);
            if (initialSlope >= NEWTON_MIN_SLOPE) {
                return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
            } else if (initialSlope === 0.0) {
                return guessForT;
            } else {
                return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
            }
        }
    };

    return ob;

}());
(function () {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }
    if(!window.requestAnimationFrame)
        window.requestAnimationFrame = function (callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = setTimeout(function () {
                    callback(currTime + timeToCall);
                },
                timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
    if(!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function (id) {
            clearTimeout(id);
        };
}());

function extendPrototype(sources,destination){
    var i, len = sources.length, sourcePrototype;
    for (i = 0;i < len;i += 1) {
        sourcePrototype = sources[i].prototype;
        for (var attr in sourcePrototype) {
            if (sourcePrototype.hasOwnProperty(attr)) destination.prototype[attr] = sourcePrototype[attr];
        }
    }
}

function getDescriptor(object, prop) {
    return Object.getOwnPropertyDescriptor(object, prop);
}

function createProxyFunction(prototype) {
	function ProxyFunction(){}
	ProxyFunction.prototype = prototype;
	return ProxyFunction;
}
function bezFunction(){

    var easingFunctions = [];
    var math = Math;

    function pointOnLine2D(x1,y1, x2,y2, x3,y3){
        var det1 = (x1*y2) + (y1*x3) + (x2*y3) - (x3*y2) - (y3*x1) - (x2*y1);
        return det1 > -0.001 && det1 < 0.001;
    }

    function pointOnLine3D(x1,y1,z1, x2,y2,z2, x3,y3,z3){
        if(z1 === 0 && z2 === 0 && z3 === 0) {
            return pointOnLine2D(x1,y1, x2,y2, x3,y3);
        }
        var dist1 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2));
        var dist2 = Math.sqrt(Math.pow(x3 - x1, 2) + Math.pow(y3 - y1, 2) + Math.pow(z3 - z1, 2));
        var dist3 = Math.sqrt(Math.pow(x3 - x2, 2) + Math.pow(y3 - y2, 2) + Math.pow(z3 - z2, 2));
        var diffDist;
        if(dist1 > dist2){
            if(dist1 > dist3){
                diffDist = dist1 - dist2 - dist3;
            } else {
                diffDist = dist3 - dist2 - dist1;
            }
        } else if(dist3 > dist2){
            diffDist = dist3 - dist2 - dist1;
        } else {
            diffDist = dist2 - dist1 - dist3;
        }
        return diffDist > -0.0001 && diffDist < 0.0001;
    }

    var getBezierLength = (function(){

        return function(pt1,pt2,pt3,pt4){
            var curveSegments = defaultCurveSegments;
            var k;
            var i, len;
            var ptCoord,perc,addedLength = 0;
            var ptDistance;
            var point = [],lastPoint = [];
            var lengthData = bezier_length_pool.newElement();
            len = pt3.length;
            for(k=0;k<curveSegments;k+=1){
                perc = k/(curveSegments-1);
                ptDistance = 0;
                for(i=0;i<len;i+=1){
                    ptCoord = bm_pow(1-perc,3)*pt1[i]+3*bm_pow(1-perc,2)*perc*pt3[i]+3*(1-perc)*bm_pow(perc,2)*pt4[i]+bm_pow(perc,3)*pt2[i];
                    point[i] = ptCoord;
                    if(lastPoint[i] !== null){
                        ptDistance += bm_pow(point[i] - lastPoint[i],2);
                    }
                    lastPoint[i] = point[i];
                }
                if(ptDistance){
                    ptDistance = bm_sqrt(ptDistance);
                    addedLength += ptDistance;
                }
                lengthData.percents[k] = perc;
                lengthData.lengths[k] = addedLength;
            }
            lengthData.addedLength = addedLength;
            return lengthData;
        };
    }());

    function getSegmentsLength(shapeData) {
        var segmentsLength = segments_length_pool.newElement();
        var closed = shapeData.c;
        var pathV = shapeData.v;
        var pathO = shapeData.o;
        var pathI = shapeData.i;
        var i, len = shapeData._length;
        var lengths = segmentsLength.lengths;
        var totalLength = 0;
        for(i=0;i<len-1;i+=1){
            lengths[i] = getBezierLength(pathV[i],pathV[i+1],pathO[i],pathI[i+1]);
            totalLength += lengths[i].addedLength;
        }
        if(closed && len){
            lengths[i] = getBezierLength(pathV[i],pathV[0],pathO[i],pathI[0]);
            totalLength += lengths[i].addedLength;
        }
        segmentsLength.totalLength = totalLength;
        return segmentsLength;
    }

    function BezierData(length){
        this.segmentLength = 0;
        this.points = new Array(length);
    }

    function PointData(partial,point){
        this.partialLength = partial;
        this.point = point;
    }

    var buildBezierData = (function(){

        var storedData = {};

        return function (pt1, pt2, pt3, pt4){
            var bezierName = (pt1[0]+'_'+pt1[1]+'_'+pt2[0]+'_'+pt2[1]+'_'+pt3[0]+'_'+pt3[1]+'_'+pt4[0]+'_'+pt4[1]).replace(/\./g, 'p');
            if(!storedData[bezierName]){
                var curveSegments = defaultCurveSegments;
                var k, i, len;
                var ptCoord,perc,addedLength = 0;
                var ptDistance;
                var point,lastPoint = null;
                if (pt1.length === 2 && (pt1[0] != pt2[0] || pt1[1] != pt2[1]) && pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt1[0]+pt3[0],pt1[1]+pt3[1]) && pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt2[0]+pt4[0],pt2[1]+pt4[1])){
                    curveSegments = 2;
                }
                var bezierData = new BezierData(curveSegments);
                len = pt3.length;
                for (k = 0; k < curveSegments; k += 1) {
                    point = createSizedArray(len);
                    perc = k / (curveSegments - 1);
                    ptDistance = 0;
                    for (i = 0; i < len; i += 1){
                        ptCoord = bm_pow(1-perc,3)*pt1[i]+3*bm_pow(1-perc,2)*perc*(pt1[i] + pt3[i])+3*(1-perc)*bm_pow(perc,2)*(pt2[i] + pt4[i])+bm_pow(perc,3)*pt2[i];
                        point[i] = ptCoord;
                        if(lastPoint !== null){
                            ptDistance += bm_pow(point[i] - lastPoint[i],2);
                        }
                    }
                    ptDistance = bm_sqrt(ptDistance);
                    addedLength += ptDistance;
                    bezierData.points[k] = new PointData(ptDistance, point);
                    lastPoint = point;
                }
                bezierData.segmentLength = addedLength;
                storedData[bezierName] = bezierData;
            }
            return storedData[bezierName];
        };
    }());

    function getDistancePerc(perc,bezierData){
        var percents = bezierData.percents;
        var lengths = bezierData.lengths;
        var len = percents.length;
        var initPos = bm_floor((len-1)*perc);
        var lengthPos = perc*bezierData.addedLength;
        var lPerc = 0;
        if(initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]){
            return percents[initPos];
        }else{
            var dir = lengths[initPos] > lengthPos ? -1 : 1;
            var flag = true;
            while(flag){
                if(lengths[initPos] <= lengthPos && lengths[initPos+1] > lengthPos){
                    lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos+1] - lengths[initPos]);
                    flag = false;
                }else{
                    initPos += dir;
                }
                if(initPos < 0 || initPos >= len - 1){
                    //FIX for TypedArrays that don't store floating point values with enough accuracy
                    if(initPos === len - 1) {
                        return percents[initPos];
                    }
                    flag = false;
                }
            }
            return percents[initPos] + (percents[initPos+1] - percents[initPos])*lPerc;
        }
    }

    function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
        var t1 = getDistancePerc(percent,bezierData);
        var u0 = 1;
        var u1 = 1 - t1;
        var ptX = Math.round((u1*u1*u1* pt1[0] + (t1*u1*u1 + u1*t1*u1 + u1*u1*t1)* pt3[0] + (t1*t1*u1 + u1*t1*t1 + t1*u1*t1)*pt4[0] + t1*t1*t1* pt2[0])* 1000) / 1000;
        var ptY = Math.round((u1*u1*u1* pt1[1] + (t1*u1*u1 + u1*t1*u1 + u1*u1*t1)* pt3[1] + (t1*t1*u1 + u1*t1*t1 + t1*u1*t1)*pt4[1] + t1*t1*t1* pt2[1])* 1000) / 1000;
        return [ptX, ptY];
    }

    function getSegmentArray() {

    }

    var bezier_segment_points = createTypedArray('float32', 8);

    function getNewSegment(pt1,pt2,pt3,pt4,startPerc,endPerc, bezierData){

        startPerc = startPerc < 0 ? 0 : startPerc > 1 ? 1 : startPerc;
        var t0 = getDistancePerc(startPerc,bezierData);
        endPerc = endPerc > 1 ? 1 : endPerc;
        var t1 = getDistancePerc(endPerc,bezierData);
        var i, len = pt1.length;
        var u0 = 1 - t0;
        var u1 = 1 - t1;
        var u0u0u0 = u0*u0*u0;
        var t0u0u0_3 = t0*u0*u0*3;
        var t0t0u0_3 = t0*t0*u0*3;
        var t0t0t0 = t0*t0*t0;
        //
        var u0u0u1 = u0*u0*u1;
        var t0u0u1_3 = t0*u0*u1 + u0*t0*u1 + u0*u0*t1;
        var t0t0u1_3 = t0*t0*u1 + u0*t0*t1 + t0*u0*t1;
        var t0t0t1 = t0*t0*t1;
        //
        var u0u1u1 = u0*u1*u1;
        var t0u1u1_3 = t0*u1*u1 + u0*t1*u1 + u0*u1*t1;
        var t0t1u1_3 = t0*t1*u1 + u0*t1*t1 + t0*u1*t1;
        var t0t1t1 = t0*t1*t1;
        //
        var u1u1u1 = u1*u1*u1;
        var t1u1u1_3 = t1*u1*u1 + u1*t1*u1 + u1*u1*t1;
        var t1t1u1_3 = t1*t1*u1 + u1*t1*t1 + t1*u1*t1;
        var t1t1t1 = t1*t1*t1;
        for(i=0;i<len;i+=1){
            bezier_segment_points[i * 4] = Math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000;
            bezier_segment_points[i * 4 + 1] = Math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000;
            bezier_segment_points[i * 4 + 2] = Math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000;
            bezier_segment_points[i * 4 + 3] = Math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000;
        }

        return bezier_segment_points;
    }

    return {
        getSegmentsLength : getSegmentsLength,
        getNewSegment : getNewSegment,
        getPointInSegment : getPointInSegment,
        buildBezierData : buildBezierData,
        pointOnLine2D : pointOnLine2D,
        pointOnLine3D : pointOnLine3D
    };
}

var bez = bezFunction();
function dataFunctionManager(){

    //var tCanvasHelper = createTag('canvas').getContext('2d');

    function completeLayers(layers, comps, fontManager){
        var layerData;
        var animArray, lastFrame;
        var i, len = layers.length;
        var j, jLen, k, kLen;
        for(i=0;i<len;i+=1){
            layerData = layers[i];
            if(!('ks' in layerData) || layerData.completed){
                continue;
            }
            layerData.completed = true;
            if(layerData.tt){
                layers[i-1].td = layerData.tt;
            }
            animArray = [];
            lastFrame = -1;
            if(layerData.hasMask){
                var maskProps = layerData.masksProperties;
                jLen = maskProps.length;
                for(j=0;j<jLen;j+=1){
                    if(maskProps[j].pt.k.i){
                        convertPathsToAbsoluteValues(maskProps[j].pt.k);
                    }else{
                        kLen = maskProps[j].pt.k.length;
                        for(k=0;k<kLen;k+=1){
                            if(maskProps[j].pt.k[k].s){
                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
                            }
                            if(maskProps[j].pt.k[k].e){
                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
                            }
                        }
                    }
                }
            }
            if(layerData.ty===0){
                layerData.layers = findCompLayers(layerData.refId, comps);
                completeLayers(layerData.layers,comps, fontManager);
            }else if(layerData.ty === 4){
                completeShapes(layerData.shapes);
            }else if(layerData.ty == 5){
                completeText(layerData, fontManager);
            }
        }
    }

    function findCompLayers(id,comps){
        var i = 0, len = comps.length;
        while(i<len){
            if(comps[i].id === id){
                if(!comps[i].layers.__used) {
                    comps[i].layers.__used = true;
                    return comps[i].layers;
                }
                return JSON.parse(JSON.stringify(comps[i].layers));
            }
            i += 1;
        }
    }

    function completeShapes(arr){
        var i, len = arr.length;
        var j, jLen;
        var hasPaths = false;
        for(i=len-1;i>=0;i-=1){
            if(arr[i].ty == 'sh'){
                if(arr[i].ks.k.i){
                    convertPathsToAbsoluteValues(arr[i].ks.k);
                }else{
                    jLen = arr[i].ks.k.length;
                    for(j=0;j<jLen;j+=1){
                        if(arr[i].ks.k[j].s){
                            convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
                        }
                        if(arr[i].ks.k[j].e){
                            convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
                        }
                    }
                }
                hasPaths = true;
            }else if(arr[i].ty == 'gr'){
                completeShapes(arr[i].it);
            }
        }
        /*if(hasPaths){
            //mx: distance
            //ss: sensitivity
            //dc: decay
            arr.splice(arr.length-1,0,{
                "ty": "ms",
                "mx":20,
                "ss":10,
                 "dc":0.001,
                "maxDist":200
            });
        }*/
    }

    function convertPathsToAbsoluteValues(path){
        var i, len = path.i.length;
        for(i=0;i<len;i+=1){
            path.i[i][0] += path.v[i][0];
            path.i[i][1] += path.v[i][1];
            path.o[i][0] += path.v[i][0];
            path.o[i][1] += path.v[i][1];
        }
    }

    function checkVersion(minimum,animVersionString){
        var animVersion = animVersionString ? animVersionString.split('.') : [100,100,100];
        if(minimum[0]>animVersion[0]){
            return true;
        } else if(animVersion[0] > minimum[0]){
            return false;
        }
        if(minimum[1]>animVersion[1]){
            return true;
        } else if(animVersion[1] > minimum[1]){
            return false;
        }
        if(minimum[2]>animVersion[2]){
            return true;
        } else if(animVersion[2] > minimum[2]){
            return false;
        }
    }

    var checkText = (function(){
        var minimumVersion = [4,4,14];

        function updateTextLayer(textLayer){
            var documentData = textLayer.t.d;
            textLayer.t.d = {
                k: [
                    {
                        s:documentData,
                        t:0
                    }
                ]
            };
        }

        function iterateLayers(layers){
            var i, len = layers.length;
            for(i=0;i<len;i+=1){
                if(layers[i].ty === 5){
                    updateTextLayer(layers[i]);
                }
            }
        }

        return function (animationData){
            if(checkVersion(minimumVersion,animationData.v)){
                iterateLayers(animationData.layers);
                if(animationData.assets){
                    var i, len = animationData.assets.length;
                    for(i=0;i<len;i+=1){
                        if(animationData.assets[i].layers){
                            iterateLayers(animationData.assets[i].layers);

                        }
                    }
                }
            }
        };
    }());

    var checkChars = (function() {
        var minimumVersion = [4,7,99];
        return function (animationData){
            if(animationData.chars && !checkVersion(minimumVersion,animationData.v)){
                var i, len = animationData.chars.length, j, jLen, k, kLen;
                var pathData, paths;
                for(i = 0; i < len; i += 1) {
                    if(animationData.chars[i].data && animationData.chars[i].data.shapes) {
                        paths = animationData.chars[i].data.shapes[0].it;
                        jLen = paths.length;

                        for(j = 0; j < jLen; j += 1) {
                            pathData = paths[j].ks.k;
                            if(!pathData.__converted) {
                                convertPathsToAbsoluteValues(paths[j].ks.k);
                                pathData.__converted = true;
                            }
                        }
                    }
                }
            }
        };
    }());

    var checkColors = (function(){
        var minimumVersion = [4,1,9];

        function iterateShapes(shapes){
            var i, len = shapes.length;
            var j, jLen;
            for(i=0;i<len;i+=1){
                if(shapes[i].ty === 'gr'){
                    iterateShapes(shapes[i].it);
                }else if(shapes[i].ty === 'fl' || shapes[i].ty === 'st'){
                    if(shapes[i].c.k && shapes[i].c.k[0].i){
                        jLen = shapes[i].c.k.length;
                        for(j=0;j<jLen;j+=1){
                            if(shapes[i].c.k[j].s){
                                shapes[i].c.k[j].s[0] /= 255;
                                shapes[i].c.k[j].s[1] /= 255;
                                shapes[i].c.k[j].s[2] /= 255;
                                shapes[i].c.k[j].s[3] /= 255;
                            }
                            if(shapes[i].c.k[j].e){
                                shapes[i].c.k[j].e[0] /= 255;
                                shapes[i].c.k[j].e[1] /= 255;
                                shapes[i].c.k[j].e[2] /= 255;
                                shapes[i].c.k[j].e[3] /= 255;
                            }
                        }
                    } else {
                        shapes[i].c.k[0] /= 255;
                        shapes[i].c.k[1] /= 255;
                        shapes[i].c.k[2] /= 255;
                        shapes[i].c.k[3] /= 255;
                    }
                }
            }
        }

        function iterateLayers(layers){
            var i, len = layers.length;
            for(i=0;i<len;i+=1){
                if(layers[i].ty === 4){
                    iterateShapes(layers[i].shapes);
                }
            }
        }

        return function (animationData){
            if(checkVersion(minimumVersion,animationData.v)){
                iterateLayers(animationData.layers);
                if(animationData.assets){
                    var i, len = animationData.assets.length;
                    for(i=0;i<len;i+=1){
                        if(animationData.assets[i].layers){
                            iterateLayers(animationData.assets[i].layers);

                        }
                    }
                }
            }
        };
    }());

    var checkShapes = (function(){
        var minimumVersion = [4,4,18];



        function completeShapes(arr){
            var i, len = arr.length;
            var j, jLen;
            var hasPaths = false;
            for(i=len-1;i>=0;i-=1){
                if(arr[i].ty == 'sh'){
                    if(arr[i].ks.k.i){
                        arr[i].ks.k.c = arr[i].closed;
                    }else{
                        jLen = arr[i].ks.k.length;
                        for(j=0;j<jLen;j+=1){
                            if(arr[i].ks.k[j].s){
                                arr[i].ks.k[j].s[0].c = arr[i].closed;
                            }
                            if(arr[i].ks.k[j].e){
                                arr[i].ks.k[j].e[0].c = arr[i].closed;
                            }
                        }
                    }
                    hasPaths = true;
                }else if(arr[i].ty == 'gr'){
                    completeShapes(arr[i].it);
                }
            }
        }

        function iterateLayers(layers){
            var layerData;
            var i, len = layers.length;
            var j, jLen, k, kLen;
            for(i=0;i<len;i+=1){
                layerData = layers[i];
                if(layerData.hasMask){
                    var maskProps = layerData.masksProperties;
                    jLen = maskProps.length;
                    for(j=0;j<jLen;j+=1){
                        if(maskProps[j].pt.k.i){
                            maskProps[j].pt.k.c = maskProps[j].cl;
                        }else{
                            kLen = maskProps[j].pt.k.length;
                            for(k=0;k<kLen;k+=1){
                                if(maskProps[j].pt.k[k].s){
                                    maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
                                }
                                if(maskProps[j].pt.k[k].e){
                                    maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
                                }
                            }
                        }
                    }
                }
                if(layerData.ty === 4){
                    completeShapes(layerData.shapes);
                }
            }
        }

        return function (animationData){
            if(checkVersion(minimumVersion,animationData.v)){
                iterateLayers(animationData.layers);
                if(animationData.assets){
                    var i, len = animationData.assets.length;
                    for(i=0;i<len;i+=1){
                        if(animationData.assets[i].layers){
                            iterateLayers(animationData.assets[i].layers);

                        }
                    }
                }
            }
        };
    }());

    function completeData(animationData, fontManager){
        if(animationData.__complete){
            return;
        }
        checkColors(animationData);
        checkText(animationData);
        checkChars(animationData);
        checkShapes(animationData);
        completeLayers(animationData.layers, animationData.assets, fontManager);
        animationData.__complete = true;
        //blitAnimation(animationData, animationData.assets, fontManager);
    }

    function completeText(data, fontManager){
        if(data.t.a.length === 0 && !('m' in data.t.p)){
            data.singleShape = true;
        }
    }

    var moduleOb = {};
    moduleOb.completeData = completeData;

    return moduleOb;
}

var dataManager = dataFunctionManager();
var FontManager = (function(){

    var maxWaitingTime = 5000;
    var emptyChar = {
        w: 0,
        size:0,
        shapes:[]
    };
    var combinedCharacters = [];
    //Hindi characters
    combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366
    , 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379
    , 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);

    function setUpNode(font, family){
        var parentNode = createTag('span');
        parentNode.style.fontFamily    = family;
        var node = createTag('span');
        // Characters that vary significantly among different fonts
        node.innerHTML = 'giItT1WQy@!-/#';
        // Visible - so we can measure it - but not on the screen
        parentNode.style.position      = 'absolute';
        parentNode.style.left          = '-10000px';
        parentNode.style.top           = '-10000px';
        // Large font size makes even subtle changes obvious
        parentNode.style.fontSize      = '300px';
        // Reset any font properties
        parentNode.style.fontVariant   = 'normal';
        parentNode.style.fontStyle     = 'normal';
        parentNode.style.fontWeight    = 'normal';
        parentNode.style.letterSpacing = '0';
        parentNode.appendChild(node);
        document.body.appendChild(parentNode);

        // Remember width with no applied web font
        var width = node.offsetWidth;
        node.style.fontFamily = font + ', '+family;
        return {node:node, w:width, parent:parentNode};
    }

    function checkLoadedFonts() {
        var i, len = this.fonts.length;
        var node, w;
        var loadedCount = len;
        for(i=0;i<len; i+= 1){
            if(this.fonts[i].loaded){
                loadedCount -= 1;
                continue;
            }
            if(this.fonts[i].fOrigin === 'n' || this.fonts[i].origin === 0){
                this.fonts[i].loaded = true;
            } else{
                node = this.fonts[i].monoCase.node;
                w = this.fonts[i].monoCase.w;
                if(node.offsetWidth !== w){
                    loadedCount -= 1;
                    this.fonts[i].loaded = true;
                }else{
                    node = this.fonts[i].sansCase.node;
                    w = this.fonts[i].sansCase.w;
                    if(node.offsetWidth !== w){
                        loadedCount -= 1;
                        this.fonts[i].loaded = true;
                    }
                }
                if(this.fonts[i].loaded){
                    this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
                    this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
                }
            }
        }

        if(loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime){
            setTimeout(this.checkLoadedFonts.bind(this),20);
        }else{
            setTimeout(function(){this.isLoaded = true;}.bind(this),0);

        }
    }

    function createHelper(def, fontData){
        var tHelper = createNS('text');
        tHelper.style.fontSize = '100px';
        //tHelper.style.fontFamily = fontData.fFamily;
        tHelper.setAttribute('font-family', fontData.fFamily);
        tHelper.setAttribute('font-style', fontData.fStyle);
        tHelper.setAttribute('font-weight', fontData.fWeight);
        tHelper.textContent = '1';
        if(fontData.fClass){
            tHelper.style.fontFamily = 'inherit';
            tHelper.setAttribute('class', fontData.fClass);
        } else {
            tHelper.style.fontFamily = fontData.fFamily;
        }
        def.appendChild(tHelper);
        var tCanvasHelper = createTag('canvas').getContext('2d');
        tCanvasHelper.font = fontData.fWeight + ' ' + fontData.fStyle + ' 100px '+ fontData.fFamily;
        //tCanvasHelper.font = ' 100px '+ fontData.fFamily;
        return tHelper;
    }

    function addFonts(fontData, defs){
        if(!fontData){
            this.isLoaded = true;
            return;
        }
        if(this.chars){
            this.isLoaded = true;
            this.fonts = fontData.list;
            return;
        }


        var fontArr = fontData.list;
        var i, len = fontArr.length;
        var _pendingFonts = len;
        for(i=0; i<len; i+= 1){
            var shouldLoadFont = true;
            var loadedSelector;
            var j;
            fontArr[i].loaded = false;
            fontArr[i].monoCase = setUpNode(fontArr[i].fFamily,'monospace');
            fontArr[i].sansCase = setUpNode(fontArr[i].fFamily,'sans-serif');
            if(!fontArr[i].fPath) {
                fontArr[i].loaded = true;
                _pendingFonts -= 1;
            }else if(fontArr[i].fOrigin === 'p' || fontArr[i].origin === 3){
                loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="'+ fontArr[i].fFamily +'"], style[f-origin="3"][f-family="'+ fontArr[i].fFamily +'"]');

                if (loadedSelector.length > 0) {
                    shouldLoadFont = false;
                }

                if (shouldLoadFont) {
                    var s = createTag('style');
                    s.setAttribute('f-forigin', fontArr[i].fOrigin);
                    s.setAttribute('f-origin', fontArr[i].origin);
                    s.setAttribute('f-family', fontArr[i].fFamily);
                    s.type = "text/css";
                    s.innerHTML = "@font-face {" + "font-family: "+fontArr[i].fFamily+"; font-style: normal; src: url('"+fontArr[i].fPath+"');}";
                    defs.appendChild(s);
                }
            } else if(fontArr[i].fOrigin === 'g' || fontArr[i].origin === 1){
                loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');

                for (j = 0; j < loadedSelector.length; j++) {
                    if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {
                        // Font is already loaded
                        shouldLoadFont = false;
                    }
                }

                if (shouldLoadFont) {
                    var l = createTag('link');
                    l.setAttribute('f-forigin', fontArr[i].fOrigin);
                    l.setAttribute('f-origin', fontArr[i].origin);
                    l.type = "text/css";
                    l.rel = "stylesheet";
                    l.href = fontArr[i].fPath;
                    document.body.appendChild(l);
                }
            } else if(fontArr[i].fOrigin === 't' || fontArr[i].origin === 2){
                loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');

                for (j = 0; j < loadedSelector.length; j++) {
                    if (fontArr[i].fPath === loadedSelector[j].src) {
                        // Font is already loaded
                        shouldLoadFont = false;
                    }
                }

                if (shouldLoadFont) {
                    var sc = createTag('link');
                    sc.setAttribute('f-forigin', fontArr[i].fOrigin);
                    sc.setAttribute('f-origin', fontArr[i].origin);
                    sc.setAttribute('rel','stylesheet');
                    sc.setAttribute('href',fontArr[i].fPath);
                    defs.appendChild(sc);
                }
            }
            fontArr[i].helper = createHelper(defs,fontArr[i]);
            fontArr[i].cache = {};
            this.fonts.push(fontArr[i]);
        }
        if (_pendingFonts === 0) {
            this.isLoaded = true;
        } else {
            //On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
            //Adding this timeout seems to fix it
           setTimeout(this.checkLoadedFonts.bind(this), 100);
        }
    }

    function addChars(chars){
        if(!chars){
            return;
        }
        if(!this.chars){
            this.chars = [];
        }
        var i, len = chars.length;
        var j, jLen = this.chars.length, found;
        for(i=0;i<len;i+=1){
            j = 0;
            found = false;
            while(j<jLen){
                if(this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch){
                    found = true;
                }
                j += 1;
            }
            if(!found){
                this.chars.push(chars[i]);
                jLen += 1;
            }
        }
    }

    function getCharData(char, style, font){
        var i = 0, len = this.chars.length;
        while( i < len) {
            if(this.chars[i].ch === char && this.chars[i].style === style && this.chars[i].fFamily === font){
                return this.chars[i];
            }
            i+= 1;
        }
        if(console && console.warn) {
            console.warn('Missing character from exported characters list: ', char, style, font);
        }
        return emptyChar;
    }

    function measureText(char, fontName, size) {
        var fontData = this.getFontByName(fontName);
        var index = char.charCodeAt(0);
        if(!fontData.cache[index + 1]) {
            var tHelper = fontData.helper;
            //Canvas version
            //fontData.cache[index] = tHelper.measureText(char).width / 100;
            //SVG version
            //console.log(tHelper.getBBox().width)
            if (char === ' ') {
                tHelper.textContent = '|' + char + '|';
                var doubleSize = tHelper.getComputedTextLength();
                tHelper.textContent = '||';
                var singleSize = tHelper.getComputedTextLength();
                fontData.cache[index + 1] = (doubleSize - singleSize)/100;
            } else {
                tHelper.textContent = char;
                fontData.cache[index + 1] = (tHelper.getComputedTextLength())/100;
            }
        }
        return fontData.cache[index + 1] * size;
    }

    function getFontByName(name){
        var i = 0, len = this.fonts.length;
        while(i<len){
            if(this.fonts[i].fName === name) {
                return this.fonts[i];
            }
            i += 1;
        }
        return this.fonts[0];
    }

    function getCombinedCharacterCodes() {
        return combinedCharacters;
    }

    function loaded() {
        return this.isLoaded;
    }

    var Font = function(){
        this.fonts = [];
        this.chars = null;
        this.typekitLoaded = 0;
        this.isLoaded = false;
        this.initTime = Date.now();
    };
    //TODO: for now I'm adding these methods to the Class and not the prototype. Think of a better way to implement it. 
    Font.getCombinedCharacterCodes = getCombinedCharacterCodes;

    Font.prototype.addChars = addChars;
    Font.prototype.addFonts = addFonts;
    Font.prototype.getCharData = getCharData;
    Font.prototype.getFontByName = getFontByName;
    Font.prototype.measureText = measureText;
    Font.prototype.checkLoadedFonts = checkLoadedFonts;
    Font.prototype.loaded = loaded;

    return Font;

}());
var PropertyFactory = (function(){

    var initFrame = initialDefaultFrame;
    var math_abs = Math.abs;

    function interpolateValue(frameNum, caching) {
        var offsetTime = this.offsetTime;
        var newValue;
        if (this.propType === 'multidimensional') {
            newValue = createTypedArray('float32', this.pv.length);
        }
        var iterationIndex = caching.lastIndex;
        var i = iterationIndex;
        var len = this.keyframes.length - 1, flag = true;
        var keyData, nextKeyData;

        while (flag) {
            keyData = this.keyframes[i];
            nextKeyData = this.keyframes[i + 1];
            if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime){
                if(keyData.h){
                    keyData = nextKeyData;
                }
                iterationIndex = 0;
                break;
            }
            if ((nextKeyData.t - offsetTime) > frameNum){
                iterationIndex = i;
                break;
            }
            if (i < len - 1){
                i += 1;
            } else {
                iterationIndex = 0;
                flag = false;
            }
        }

        var k, kLen, perc, jLen, j, fnc;
        var nextKeyTime = nextKeyData.t - offsetTime;
        var keyTime = keyData.t - offsetTime;
        var endValue;
        if (keyData.to) {
            if (!keyData.bezierData) {
                keyData.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
            }
            var bezierData = keyData.bezierData;
            if (frameNum >= nextKeyTime || frameNum < keyTime) {
                var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
                kLen = bezierData.points[ind].point.length;
                for (k = 0; k < kLen; k += 1) {
                    newValue[k] = bezierData.points[ind].point[k];
                }
                // caching._lastKeyframeIndex = -1;
            } else {
                if (keyData.__fnct) {
                    fnc = keyData.__fnct;
                } else {
                    fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
                    keyData.__fnct = fnc;
                }
                perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                var distanceInLine = bezierData.segmentLength*perc;

                var segmentPerc;
                var addedLength =  (caching.lastFrame < frameNum && caching._lastKeyframeIndex === i) ? caching._lastAddedLength : 0;
                j =  (caching.lastFrame < frameNum && caching._lastKeyframeIndex === i) ? caching._lastPoint : 0;
                flag = true;
                jLen = bezierData.points.length;
                while (flag) {
                    addedLength += bezierData.points[j].partialLength;
                    if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
                        kLen = bezierData.points[j].point.length;
                        for (k = 0; k < kLen; k += 1) {
                            newValue[k] = bezierData.points[j].point[k];
                        }
                        break;
                    } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
                        segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
                        kLen = bezierData.points[j].point.length;
                        for (k = 0; k < kLen; k += 1) {
                            newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;
                        }
                        break;
                    }
                    if (j < jLen - 1){
                        j += 1;
                    } else {
                        flag = false;
                    }
                }
                caching._lastPoint = j;
                caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
                caching._lastKeyframeIndex = i;
            }
        } else {
            var outX, outY, inX, inY, keyValue;
            len = keyData.s.length;
            endValue = nextKeyData.s || keyData.e;
            if (this.sh && keyData.h !== 1) {
                if (frameNum >= nextKeyTime) {
                    newValue[0] = endValue[0];
                    newValue[1] = endValue[1];
                    newValue[2] = endValue[2];
                } else if (frameNum <= keyTime) {
                    newValue[0] = keyData.s[0];
                    newValue[1] = keyData.s[1];
                    newValue[2] = keyData.s[2];
                } else {
                    var quatStart = createQuaternion(keyData.s);
                    var quatEnd = createQuaternion(endValue);
                    var time = (frameNum - keyTime) / (nextKeyTime - keyTime);
                    quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
                }
                
            } else {
                for(i = 0; i < len; i += 1) {
                    if (keyData.h !== 1) {
                        if (frameNum >= nextKeyTime) {
                            perc = 1;
                        } else if(frameNum < keyTime) {
                            perc = 0;
                        } else {
                            if(keyData.o.x.constructor === Array) {
                                if (!keyData.__fnct) {
                                    keyData.__fnct = [];
                                }
                                if (!keyData.__fnct[i]) {
                                    outX = (typeof keyData.o.x[i] === 'undefined') ? keyData.o.x[0] : keyData.o.x[i];
                                    outY = (typeof keyData.o.y[i] === 'undefined') ? keyData.o.y[0] : keyData.o.y[i];
                                    inX = (typeof keyData.i.x[i] === 'undefined') ? keyData.i.x[0] : keyData.i.x[i];
                                    inY = (typeof keyData.i.y[i] === 'undefined') ? keyData.i.y[0] : keyData.i.y[i];
                                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                                    keyData.__fnct[i] = fnc;
                                } else {
                                    fnc = keyData.__fnct[i];
                                }
                            } else {
                                if (!keyData.__fnct) {
                                    outX = keyData.o.x;
                                    outY = keyData.o.y;
                                    inX = keyData.i.x;
                                    inY = keyData.i.y;
                                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                                    keyData.__fnct = fnc;
                                } else {
                                    fnc = keyData.__fnct;
                                }
                            }
                            perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime ));
                        }
                    }

                    endValue = nextKeyData.s || keyData.e;
                    keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;

                    if (len === 1) {
                        newValue = keyValue;
                    } else {
                        newValue[i] = keyValue;
                    }
                }
            }
        }
        caching.lastIndex = iterationIndex;
        return newValue;
    }

    //based on @Toji's https://github.com/toji/gl-matrix/
    function slerp(a, b, t) {
        var out = [];
        var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3]

        var omega, cosom, sinom, scale0, scale1;

        cosom = ax * bx + ay * by + az * bz + aw * bw;
        if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        }
        if ((1.0 - cosom) > 0.000001) {
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        } else {
            scale0 = 1.0 - t;
            scale1 = t;
        }
        out[0] = scale0 * ax + scale1 * bx;
        out[1] = scale0 * ay + scale1 * by;
        out[2] = scale0 * az + scale1 * bz;
        out[3] = scale0 * aw + scale1 * bw;

        return out;
    }

    function quaternionToEuler(out, quat) {
        var qx = quat[0];
        var qy = quat[1];
        var qz = quat[2];
        var qw = quat[3];
        var heading = Math.atan2(2*qy*qw-2*qx*qz , 1 - 2*qy*qy - 2*qz*qz)
        var attitude = Math.asin(2*qx*qy + 2*qz*qw) 
        var bank = Math.atan2(2*qx*qw-2*qy*qz , 1 - 2*qx*qx - 2*qz*qz);
        out[0] = heading/degToRads;
        out[1] = attitude/degToRads;
        out[2] = bank/degToRads;
    }

    function createQuaternion(values) {
        var heading = values[0] * degToRads;
        var attitude = values[1] * degToRads;
        var bank = values[2] * degToRads;
        var c1 = Math.cos(heading / 2);
        var c2 = Math.cos(attitude / 2);
        var c3 = Math.cos(bank / 2);
        var s1 = Math.sin(heading / 2);
        var s2 = Math.sin(attitude / 2);
        var s3 = Math.sin(bank / 2);
        var w = c1 * c2 * c3 - s1 * s2 * s3;
        var x = s1 * s2 * c3 + c1 * c2 * s3;
        var y = s1 * c2 * c3 + c1 * s2 * s3;
        var z = c1 * s2 * c3 - s1 * c2 * s3;

        return [x,y,z,w];
    }

    function getValueAtCurrentTime(){
        var frameNum = this.comp.renderedFrame - this.offsetTime;
        var initTime = this.keyframes[0].t - this.offsetTime;
        var endTime = this.keyframes[this.keyframes.length- 1].t-this.offsetTime;
        if(!(frameNum === this._caching.lastFrame || (this._caching.lastFrame !== initFrame && ((this._caching.lastFrame >= endTime && frameNum >= endTime) || (this._caching.lastFrame < initTime && frameNum < initTime))))){
            if(this._caching.lastFrame >= frameNum) {
                this._caching._lastKeyframeIndex = -1;
                this._caching.lastIndex = 0;
            }

            var renderResult = this.interpolateValue(frameNum, this._caching);
            this.pv = renderResult;
        }
        this._caching.lastFrame = frameNum;
        return this.pv;
    }

    function setVValue(val) {
        var multipliedValue;
        if(this.propType === 'unidimensional') {
            multipliedValue = val * this.mult;
            if(math_abs(this.v - multipliedValue) > 0.00001) {
                this.v = multipliedValue;
                this._mdf = true;
            }
        } else {
            var i = 0, len = this.v.length;
            while (i < len) {
                multipliedValue = val[i] * this.mult;
                if (math_abs(this.v[i] - multipliedValue) > 0.00001) {
                    this.v[i] = multipliedValue;
                    this._mdf = true;
                }
                i += 1;
            }
        }
    }

    function processEffectsSequence() {
        if(this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
            return;
        }        
        if(this.lock) {
            this.setVValue(this.pv);
            return;
        }
        this.lock = true;
        this._mdf = this._isFirstFrame;
        var multipliedValue;
        var i, len = this.effectsSequence.length;
        var finalValue = this.kf ? this.pv : this.data.k;
        for(i = 0; i < len; i += 1) {
            finalValue = this.effectsSequence[i](finalValue);
        }
        this.setVValue(finalValue);
        this._isFirstFrame = false;
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
    }

    function addEffect(effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.container.addDynamicProperty(this);
    }

    function ValueProperty(elem, data, mult, container){
        this.propType = 'unidimensional';
        this.mult = mult || 1;
        this.data = data;
        this.v = mult ? data.k * mult : data.k;
        this.pv = data.k;
        this._mdf = false;
        this.elem = elem;
        this.container = container;
        this.comp = elem.comp;
        this.k = false;
        this.kf = false;
        this.vel = 0;
        this.effectsSequence = [];
        this._isFirstFrame = true;
        this.getValue = processEffectsSequence;
        this.setVValue = setVValue;
        this.addEffect = addEffect;
    }

    function MultiDimensionalProperty(elem, data, mult, container) {
        this.propType = 'multidimensional';
        this.mult = mult || 1;
        this.data = data;
        this._mdf = false;
        this.elem = elem;
        this.container = container;
        this.comp = elem.comp;
        this.k = false;
        this.kf = false;
        this.frameId = -1;
        var i, len = data.k.length;
        this.v = createTypedArray('float32', len);
        this.pv = createTypedArray('float32', len);
        var arr = createTypedArray('float32', len);
        this.vel = createTypedArray('float32', len);
        for (i = 0; i < len; i += 1) {
            this.v[i] = data.k[i] * this.mult;
            this.pv[i] = data.k[i];
        }
        this._isFirstFrame = true;
        this.effectsSequence = [];
        this.getValue = processEffectsSequence;
        this.setVValue = setVValue;
        this.addEffect = addEffect;
    }

    function KeyframedValueProperty(elem, data, mult, container) {
        this.propType = 'unidimensional';
        this.keyframes = data.k;
        this.offsetTime = elem.data.st;
        this.frameId = -1;
        this._caching = {lastFrame: initFrame, lastIndex: 0, value: 0, _lastKeyframeIndex: -1};
        this.k = true;
        this.kf = true;
        this.data = data;
        this.mult = mult || 1;
        this.elem = elem;
        this.container = container;
        this.comp = elem.comp;
        this.v = initFrame;
        this.pv = initFrame;
        this._isFirstFrame = true;
        this.getValue = processEffectsSequence;
        this.setVValue = setVValue;
        this.interpolateValue = interpolateValue;
        this.effectsSequence = [getValueAtCurrentTime.bind(this)];
        this.addEffect = addEffect;
    }

    function KeyframedMultidimensionalProperty(elem, data, mult, container){
        this.propType = 'multidimensional';
        var i, len = data.k.length;
        var s, e,to,ti;
        for (i = 0; i < len - 1; i += 1) {
            if (data.k[i].to && data.k[i].s && data.k[i].e) {
                s = data.k[i].s;
                e = data.k[i].e;
                to = data.k[i].to;
                ti = data.k[i].ti;
                if((s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0],s[1],e[0],e[1],s[0] + to[0],s[1] + to[1]) && bez.pointOnLine2D(s[0],s[1],e[0],e[1],e[0] + ti[0],e[1] + ti[1])) || (s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],s[0] + to[0],s[1] + to[1],s[2] + to[2]) && bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],e[0] + ti[0],e[1] + ti[1],e[2] + ti[2]))){
                    data.k[i].to = null;
                    data.k[i].ti = null;
                }
                if(s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
                    if(s.length === 2 || (s[2] === e[2] && to[2] === 0 && ti[2] === 0)) {
                        data.k[i].to = null;
                        data.k[i].ti = null;
                    }
                }
            }
        }
        this.effectsSequence = [getValueAtCurrentTime.bind(this)];
        this.keyframes = data.k;
        this.offsetTime = elem.data.st;
        this.k = true;
        this.kf = true;
        this._isFirstFrame = true;
        this.mult = mult || 1;
        this.elem = elem;
        this.container = container;
        this.comp = elem.comp;
        this.getValue = processEffectsSequence;
        this.setVValue = setVValue;
        this.interpolateValue = interpolateValue;
        this.frameId = -1;
        var arrLen = data.k[0].s.length;
        this.v = createTypedArray('float32', arrLen);
        this.pv = createTypedArray('float32', arrLen);
        for (i = 0; i < arrLen; i += 1) {
            this.v[i] = initFrame;
            this.pv[i] = initFrame;
        }
        this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray('float32', arrLen)};
        this.addEffect = addEffect;
    }

    function getProp(elem,data,type, mult, container) {
        var p;
        if(!data.k.length){
            p = new ValueProperty(elem,data, mult, container);
        }else if(typeof(data.k[0]) === 'number'){
            p = new MultiDimensionalProperty(elem,data, mult, container);
        }else{
            switch(type){
                case 0:
                    p = new KeyframedValueProperty(elem,data,mult, container);
                    break;
                case 1:
                    p = new KeyframedMultidimensionalProperty(elem,data,mult, container);
                    break;
            }
        }
        if(p.effectsSequence.length){
            container.addDynamicProperty(p);
        }
        return p;
    }

    var ob = {
        getProp: getProp
    };
    return ob;
}());
var TransformPropertyFactory = (function() {

    function applyToMatrix(mat) {
        var _mdf = this._mdf;
        this.iterateDynamicProperties();
        this._mdf = this._mdf || _mdf;
        if (this.a) {
            mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
        }
        if (this.s) {
            mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
        }
        if (this.sk) {
            mat.skewFromAxis(-this.sk.v, this.sa.v);
        }
        if (this.r) {
            mat.rotate(-this.r.v);
        } else {
            mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
        }
        if (this.data.p.s) {
            if (this.data.p.z) {
                mat.translate(this.px.v, this.py.v, -this.pz.v);
            } else {
                mat.translate(this.px.v, this.py.v, 0);
            }
        } else {
            mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
        }
    }
    function processKeys(forceRender){
        if (this.elem.globalData.frameId === this.frameId) {
            return;
        }
        if(this._isDirty) {
            this.precalculateMatrix();
            this._isDirty = false;
        }

        this.iterateDynamicProperties();

        if (this._mdf || forceRender) {
            this.v.cloneFromProps(this.pre.props);
            if (this.appliedTransformations < 1) {
                this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            }
            if(this.appliedTransformations < 2) {
                this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            }
            if (this.sk && this.appliedTransformations < 3) {
                this.v.skewFromAxis(-this.sk.v, this.sa.v);
            }
            if (this.r && this.appliedTransformations < 4) {
                this.v.rotate(-this.r.v);
            } else if (!this.r && this.appliedTransformations < 4){
                this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            }
            if (this.autoOriented) {
                var v1,v2, frameRate = this.elem.globalData.frameRate;
                if(this.p && this.p.keyframes && this.p.getValueAtTime) {
                    if (this.p._caching.lastFrame+this.p.offsetTime <= this.p.keyframes[0].t) {
                        v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate,0);
                        v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
                    } else if(this.p._caching.lastFrame+this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                        v1 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t / frameRate), 0);
                        v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.01) / frameRate, 0);
                    } else {
                        v1 = this.p.pv;
                        v2 = this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
                    }
                } else if(this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                    v1 = [];
                    v2 = [];
                    var px = this.px, py = this.py, frameRate;
                    if (px._caching.lastFrame+px.offsetTime <= px.keyframes[0].t) {
                        v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate,0);
                        v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate,0);
                        v2[0] = px.getValueAtTime((px.keyframes[0].t) / frameRate,0);
                        v2[1] = py.getValueAtTime((py.keyframes[0].t) / frameRate,0);
                    } else if(px._caching.lastFrame+px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                        v1[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t / frameRate),0);
                        v1[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t / frameRate),0);
                        v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate,0);
                        v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate,0);
                    } else {
                        v1 = [px.pv, py.pv];
                        v2[0] = px.getValueAtTime((px._caching.lastFrame+px.offsetTime - 0.01) / frameRate,px.offsetTime);
                        v2[1] = py.getValueAtTime((py._caching.lastFrame+py.offsetTime - 0.01) / frameRate,py.offsetTime);
                    }
                }
                this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
            }
            if(this.data.p && this.data.p.s){
                if(this.data.p.z) {
                    this.v.translate(this.px.v, this.py.v, -this.pz.v);
                } else {
                    this.v.translate(this.px.v, this.py.v, 0);
                }
            }else{
                this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);
            }
        }
        this.frameId = this.elem.globalData.frameId;
    }

    function precalculateMatrix() {
        if(!this.a.k) {
            this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            this.appliedTransformations = 1;
        } else {
            return;
        }
        if(!this.s.effectsSequence.length) {
            this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            this.appliedTransformations = 2;
        } else {
            return;
        }
        if(this.sk) {
            if(!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
                this.pre.skewFromAxis(-this.sk.v, this.sa.v);
            this.appliedTransformations = 3;
            } else {
                return;
            }
        }
        if (this.r) {
            if(!this.r.effectsSequence.length) {
                this.pre.rotate(-this.r.v);
                this.appliedTransformations = 4;
            } else {
                return;
            }
        } else if(!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
            this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            this.appliedTransformations = 4;
        }
    }

    function autoOrient(){
        //
        //var prevP = this.getValueAtTime();
    }

    function addDynamicProperty(prop) {
        this._addDynamicProperty(prop);
        this.elem.addDynamicProperty(prop);
        this._isDirty = true;
    }

    function TransformProperty(elem,data,container){
        this.elem = elem;
        this.frameId = -1;
        this.propType = 'transform';
        this.data = data;
        this.v = new Matrix();
        //Precalculated matrix with non animated properties
        this.pre = new Matrix();
        this.appliedTransformations = 0;
        this.initDynamicPropertyContainer(container || elem);
        if(data.p && data.p.s){
            this.px = PropertyFactory.getProp(elem,data.p.x,0,0,this);
            this.py = PropertyFactory.getProp(elem,data.p.y,0,0,this);
            if(data.p.z){
                this.pz = PropertyFactory.getProp(elem,data.p.z,0,0,this);
            }
        }else{
            this.p = PropertyFactory.getProp(elem,data.p || {k:[0,0,0]},1,0,this);
        }
        if(data.rx) {
            this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
            this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
            this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);
            if(data.or.k[0].ti) {
                var i, len = data.or.k.length;
                for(i=0;i<len;i+=1) {
                    data.or.k[i].to = data.or.k[i].ti = null;
                }
            }
            this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this);
            //sh Indicates it needs to be capped between -180 and 180
            this.or.sh = true;
        } else {
            this.r = PropertyFactory.getProp(elem, data.r || {k: 0}, 0, degToRads, this);
        }
        if(data.sk){
            this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
            this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
        }
        this.a = PropertyFactory.getProp(elem,data.a || {k:[0,0,0]},1,0,this);
        this.s = PropertyFactory.getProp(elem,data.s || {k:[100,100,100]},1,0.01,this);
        // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.
        if(data.o){
            this.o = PropertyFactory.getProp(elem,data.o,0,0.01,elem);
        } else {
            this.o = {_mdf:false,v:1};
        }
        this._isDirty = true;
        if(!this.dynamicProperties.length){
            this.getValue(true);
        }
    }

    TransformProperty.prototype = {
        applyToMatrix: applyToMatrix,
        getValue: processKeys,
        precalculateMatrix: precalculateMatrix,
        autoOrient: autoOrient
    }

    extendPrototype([DynamicPropertyContainer], TransformProperty);
    TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
    TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;

    function getTransformProperty(elem,data,container){
        return new TransformProperty(elem,data,container);
    }

    return {
        getTransformProperty: getTransformProperty
    };

}());
function ShapePath(){
	this.c = false;
	this._length = 0;
	this._maxLength = 8;
	this.v = createSizedArray(this._maxLength);
	this.o = createSizedArray(this._maxLength);
	this.i = createSizedArray(this._maxLength);
}

ShapePath.prototype.setPathData = function(closed, len) {
	this.c = closed;
	this.setLength(len);
	var i = 0;
	while(i < len){
		this.v[i] = point_pool.newElement();
		this.o[i] = point_pool.newElement();
		this.i[i] = point_pool.newElement();
		i += 1;
	}
};

ShapePath.prototype.setLength = function(len) {
	while(this._maxLength < len) {
		this.doubleArrayLength();
	}
	this._length = len;
};

ShapePath.prototype.doubleArrayLength = function() {
	this.v = this.v.concat(createSizedArray(this._maxLength));
	this.i = this.i.concat(createSizedArray(this._maxLength));
	this.o = this.o.concat(createSizedArray(this._maxLength));
	this._maxLength *= 2;
};

ShapePath.prototype.setXYAt = function(x, y, type, pos, replace) {
	var arr;
	this._length = Math.max(this._length, pos + 1);
	if(this._length >= this._maxLength) {
		this.doubleArrayLength();
	}
	switch(type){
		case 'v':
			arr = this.v;
			break;
		case 'i':
			arr = this.i;
			break;
		case 'o':
			arr = this.o;
			break;
	}
	if(!arr[pos] || (arr[pos] && !replace)){
		arr[pos] = point_pool.newElement();
	}
	arr[pos][0] = x;
	arr[pos][1] = y;
};

ShapePath.prototype.setTripleAt = function(vX,vY,oX,oY,iX,iY,pos, replace) {
	this.setXYAt(vX,vY,'v',pos, replace);
	this.setXYAt(oX,oY,'o',pos, replace);
	this.setXYAt(iX,iY,'i',pos, replace);
};

ShapePath.prototype.reverse = function() {
	var newPath = new ShapePath();
	newPath.setPathData(this.c, this._length);
	var vertices = this.v, outPoints = this.o, inPoints = this.i;
	var init = 0;
	if (this.c) {
		newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
        init = 1;
    }
    var cnt = this._length - 1;
    var len = this._length;

    var i;
    for (i = init; i < len; i += 1) {
    	newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
        cnt -= 1;
    }
    return newPath;
};
var ShapePropertyFactory = (function(){

    var initFrame = -999999;

    function interpolateShape(frameNum, previousValue, caching) {
        var iterationIndex = caching.lastIndex;
        var keyPropS,keyPropE,isHold, j, k, jLen, kLen, perc, vertexValue;
        var kf = this.keyframes;
        if(frameNum < kf[0].t-this.offsetTime){
            keyPropS = kf[0].s[0];
            isHold = true;
            iterationIndex = 0;
        }else if(frameNum >= kf[kf.length - 1].t-this.offsetTime){
            keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
            /*if(kf[kf.length - 1].s){
                keyPropS = kf[kf.length - 1].s[0];
            }else{
                keyPropS = kf[kf.length - 2].e[0];
            }*/
            isHold = true;
        }else{
            var i = iterationIndex;
            var len = kf.length- 1,flag = true,keyData,nextKeyData;
            while(flag){
                keyData = kf[i];
                nextKeyData = kf[i+1];
                if((nextKeyData.t - this.offsetTime) > frameNum){
                    break;
                }
                if(i < len - 1){
                    i += 1;
                }else{
                    flag = false;
                }
            }
            isHold = keyData.h === 1;
            iterationIndex = i;
            if(!isHold){
                if(frameNum >= nextKeyData.t-this.offsetTime){
                    perc = 1;
                }else if(frameNum < keyData.t-this.offsetTime){
                    perc = 0;
                }else{
                    var fnc;
                    if(keyData.__fnct){
                        fnc = keyData.__fnct;
                    }else{
                        fnc = BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y).get;
                        keyData.__fnct = fnc;
                    }
                    perc = fnc((frameNum-(keyData.t-this.offsetTime))/((nextKeyData.t-this.offsetTime)-(keyData.t-this.offsetTime)));
                }
                keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
            }
            keyPropS = keyData.s[0];
        }
        jLen = previousValue._length;
        kLen = keyPropS.i[0].length;
        caching.lastIndex = iterationIndex;

        for(j=0;j<jLen;j+=1){
            for(k=0;k<kLen;k+=1){
                vertexValue = isHold ? keyPropS.i[j][k] :  keyPropS.i[j][k]+(keyPropE.i[j][k]-keyPropS.i[j][k])*perc;
                previousValue.i[j][k] = vertexValue;
                vertexValue = isHold ? keyPropS.o[j][k] :  keyPropS.o[j][k]+(keyPropE.o[j][k]-keyPropS.o[j][k])*perc;
                previousValue.o[j][k] = vertexValue;
                vertexValue = isHold ? keyPropS.v[j][k] :  keyPropS.v[j][k]+(keyPropE.v[j][k]-keyPropS.v[j][k])*perc;
                previousValue.v[j][k] = vertexValue;
            }
        }
    }

    function interpolateShapeCurrentTime(){
        var frameNum = this.comp.renderedFrame - this.offsetTime;
        var initTime = this.keyframes[0].t - this.offsetTime;
        var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
        var lastFrame = this._caching.lastFrame;
        if(!(lastFrame !== initFrame && ((lastFrame < initTime && frameNum < initTime) || (lastFrame > endTime && frameNum > endTime)))){
            ////
            this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
            this.interpolateShape(frameNum, this.pv, this._caching);
            ////
        }
        this._caching.lastFrame = frameNum;
        return this.pv;
    }

    function resetShape(){
        this.paths = this.localShapeCollection;
    }

    function shapesEqual(shape1, shape2) {
        if(shape1._length !== shape2._length || shape1.c !== shape2.c){
            return false;
        }
        var i, len = shape1._length;
        for(i = 0; i < len; i += 1) {
            if(shape1.v[i][0] !== shape2.v[i][0] 
            || shape1.v[i][1] !== shape2.v[i][1] 
            || shape1.o[i][0] !== shape2.o[i][0] 
            || shape1.o[i][1] !== shape2.o[i][1] 
            || shape1.i[i][0] !== shape2.i[i][0] 
            || shape1.i[i][1] !== shape2.i[i][1]) {
                return false;
            }
        }
        return true;
    }

    function setVValue(newPath) {
        if(!shapesEqual(this.v, newPath)) {
            this.v = shape_pool.clone(newPath);
            this.localShapeCollection.releaseShapes();
            this.localShapeCollection.addShape(this.v);
            this._mdf = true;
            this.paths = this.localShapeCollection;
        }
    }

    function processEffectsSequence() {
        if(this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
            return;
        }
        if(this.lock) {
            this.setVValue(this.pv);
            return;
        }
        this.lock = true;
        this._mdf = false;
        var finalValue = this.kf ? this.pv : this.data.ks ? this.data.ks.k : this.data.pt.k;
        var i, len = this.effectsSequence.length;
        for(i = 0; i < len; i += 1) {
            finalValue = this.effectsSequence[i](finalValue);
        }
        this.setVValue(finalValue);
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
    };

    function ShapeProperty(elem, data, type){
        this.propType = 'shape';
        this.comp = elem.comp;
        this.container = elem;
        this.elem = elem;
        this.data = data;
        this.k = false;
        this.kf = false;
        this._mdf = false;
        var pathData = type === 3 ? data.pt.k : data.ks.k;
        this.v = shape_pool.clone(pathData);
        this.pv = shape_pool.clone(this.v);
        this.localShapeCollection = shapeCollection_pool.newShapeCollection();
        this.paths = this.localShapeCollection;
        this.paths.addShape(this.v);
        this.reset = resetShape;
        this.effectsSequence = [];
    }

    function addEffect(effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.container.addDynamicProperty(this);
    }

    ShapeProperty.prototype.interpolateShape = interpolateShape;
    ShapeProperty.prototype.getValue = processEffectsSequence;
    ShapeProperty.prototype.setVValue = setVValue;
    ShapeProperty.prototype.addEffect = addEffect;

    function KeyframedShapeProperty(elem,data,type){
        this.propType = 'shape';
        this.comp = elem.comp;
        this.elem = elem;
        this.container = elem;
        this.offsetTime = elem.data.st;
        this.keyframes = type === 3 ? data.pt.k : data.ks.k;
        this.k = true;
        this.kf = true;
        var i, len = this.keyframes[0].s[0].i.length;
        var jLen = this.keyframes[0].s[0].i[0].length;
        this.v = shape_pool.newElement();
        this.v.setPathData(this.keyframes[0].s[0].c, len);
        this.pv = shape_pool.clone(this.v);
        this.localShapeCollection = shapeCollection_pool.newShapeCollection();
        this.paths = this.localShapeCollection;
        this.paths.addShape(this.v);
        this.lastFrame = initFrame;
        this.reset = resetShape;
        this._caching = {lastFrame: initFrame, lastIndex: 0};
        this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
    }
    KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
    KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
    KeyframedShapeProperty.prototype.setVValue = setVValue;
    KeyframedShapeProperty.prototype.addEffect = addEffect;

    var EllShapeProperty = (function(){

        var cPoint = roundCorner;

        function EllShapeProperty(elem,data) {
            /*this.v = {
                v: createSizedArray(4),
                i: createSizedArray(4),
                o: createSizedArray(4),
                c: true
            };*/
            this.v = shape_pool.newElement();
            this.v.setPathData(true, 4);
            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.localShapeCollection.addShape(this.v);
            this.d = data.d;
            this.elem = elem;
            this.comp = elem.comp;
            this.frameId = -1;
            this.initDynamicPropertyContainer(elem);
            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
            this.s = PropertyFactory.getProp(elem,data.s,1,0,this);
            if(this.dynamicProperties.length){
                this.k = true;
            }else{
                this.k = false;
                this.convertEllToPath();
            }
        };

        EllShapeProperty.prototype = {
            reset: resetShape,
            getValue: function (){
                if(this.elem.globalData.frameId === this.frameId){
                    return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();

                if(this._mdf){
                    this.convertEllToPath();
                }
            },
            convertEllToPath: function() {
                var p0 = this.p.v[0], p1 = this.p.v[1], s0 = this.s.v[0]/2, s1 = this.s.v[1]/2;
                var _cw = this.d !== 3;
                var _v = this.v;
                _v.v[0][0] = p0;
                _v.v[0][1] = p1 - s1;
                _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.v[1][1] = p1;
                _v.v[2][0] = p0;
                _v.v[2][1] = p1 + s1;
                _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.v[3][1] = p1;
                _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                _v.i[0][1] = p1 - s1;
                _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.i[1][1] = p1 - s1 * cPoint;
                _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                _v.i[2][1] = p1 + s1;
                _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.i[3][1] = p1 + s1 * cPoint;
                _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                _v.o[0][1] = p1 - s1;
                _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.o[1][1] = p1 + s1 * cPoint;
                _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                _v.o[2][1] = p1 + s1;
                _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.o[3][1] = p1 - s1 * cPoint;
            }
        }

        extendPrototype([DynamicPropertyContainer], EllShapeProperty);

        return EllShapeProperty;
    }());

    var StarShapeProperty = (function() {

        function StarShapeProperty(elem,data) {
            this.v = shape_pool.newElement();
            this.v.setPathData(true, 0);
            this.elem = elem;
            this.comp = elem.comp;
            this.data = data;
            this.frameId = -1;
            this.d = data.d;
            this.initDynamicPropertyContainer(elem);
            if(data.sy === 1){
                this.ir = PropertyFactory.getProp(elem,data.ir,0,0,this);
                this.is = PropertyFactory.getProp(elem,data.is,0,0.01,this);
                this.convertToPath = this.convertStarToPath;
            } else {
                this.convertToPath = this.convertPolygonToPath;
            }
            this.pt = PropertyFactory.getProp(elem,data.pt,0,0,this);
            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
            this.r = PropertyFactory.getProp(elem,data.r,0,degToRads,this);
            this.or = PropertyFactory.getProp(elem,data.or,0,0,this);
            this.os = PropertyFactory.getProp(elem,data.os,0,0.01,this);
            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
            this.localShapeCollection.addShape(this.v);
            this.paths = this.localShapeCollection;
            if(this.dynamicProperties.length){
                this.k = true;
            }else{
                this.k = false;
                this.convertToPath();
            }
        };

        StarShapeProperty.prototype = {
            reset: resetShape,
            getValue: function() {
                if(this.elem.globalData.frameId === this.frameId){
                    return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();
                if(this._mdf){
                    this.convertToPath();
                }
            },
            convertStarToPath: function() {
                var numPts = Math.floor(this.pt.v)*2;
                var angle = Math.PI*2/numPts;
                /*this.v.v.length = numPts;
                this.v.i.length = numPts;
                this.v.o.length = numPts;*/
                var longFlag = true;
                var longRad = this.or.v;
                var shortRad = this.ir.v;
                var longRound = this.os.v;
                var shortRound = this.is.v;
                var longPerimSegment = 2*Math.PI*longRad/(numPts*2);
                var shortPerimSegment = 2*Math.PI*shortRad/(numPts*2);
                var i, rad,roundness,perimSegment, currentAng = -Math.PI/ 2;
                currentAng += this.r.v;
                var dir = this.data.d === 3 ? -1 : 1;
                this.v._length = 0;
                for(i=0;i<numPts;i+=1){
                    rad = longFlag ? longRad : shortRad;
                    roundness = longFlag ? longRound : shortRound;
                    perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
                    var x = rad * Math.cos(currentAng);
                    var y = rad * Math.sin(currentAng);
                    var ox = x === 0 && y === 0 ? 0 : y/Math.sqrt(x*x + y*y);
                    var oy = x === 0 && y === 0 ? 0 : -x/Math.sqrt(x*x + y*y);
                    x +=  + this.p.v[0];
                    y +=  + this.p.v[1];
                    this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir, i, true);

                    /*this.v.v[i] = [x,y];
                    this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
                    this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
                    this.v._length = numPts;*/
                    longFlag = !longFlag;
                    currentAng += angle*dir;
                }
            },
            convertPolygonToPath: function() {
                var numPts = Math.floor(this.pt.v);
                var angle = Math.PI*2/numPts;
                var rad = this.or.v;
                var roundness = this.os.v;
                var perimSegment = 2*Math.PI*rad/(numPts*4);
                var i, currentAng = -Math.PI/ 2;
                var dir = this.data.d === 3 ? -1 : 1;
                currentAng += this.r.v;
                this.v._length = 0;
                for(i=0;i<numPts;i+=1){
                    var x = rad * Math.cos(currentAng);
                    var y = rad * Math.sin(currentAng);
                    var ox = x === 0 && y === 0 ? 0 : y/Math.sqrt(x*x + y*y);
                    var oy = x === 0 && y === 0 ? 0 : -x/Math.sqrt(x*x + y*y);
                    x +=  + this.p.v[0];
                    y +=  + this.p.v[1];
                    this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir, i, true);
                    currentAng += angle*dir;
                }
                this.paths.length = 0;
                this.paths[0] = this.v;
            }

        }
        extendPrototype([DynamicPropertyContainer], StarShapeProperty);

        return StarShapeProperty;
    }());

    var RectShapeProperty = (function() {

         function RectShapeProperty(elem,data) {
            this.v = shape_pool.newElement();
            this.v.c = true;
            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
            this.localShapeCollection.addShape(this.v);
            this.paths = this.localShapeCollection;
            this.elem = elem;
            this.comp = elem.comp;
            this.frameId = -1;
            this.d = data.d;
            this.initDynamicPropertyContainer(elem);
            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
            this.s = PropertyFactory.getProp(elem,data.s,1,0,this);
            this.r = PropertyFactory.getProp(elem,data.r,0,0,this);
            if(this.dynamicProperties.length){
                this.k = true;
            }else{
                this.k = false;
                this.convertRectToPath();
            }
        };

        RectShapeProperty.prototype = {
            convertRectToPath: function (){
                var p0 = this.p.v[0], p1 = this.p.v[1], v0 = this.s.v[0]/2, v1 = this.s.v[1]/2;
                var round = bm_min(v0,v1,this.r.v);
                var cPoint = round*(1-roundCorner);
                this.v._length = 0;

                if(this.d === 2 || this.d === 1) {
                    this.v.setTripleAt(p0+v0, p1-v1+round,p0+v0, p1-v1+round,p0+v0,p1-v1+cPoint,0, true);
                    this.v.setTripleAt(p0+v0, p1+v1-round,p0+v0, p1+v1-cPoint,p0+v0, p1+v1-round,1, true);
                    if(round!== 0){
                        this.v.setTripleAt(p0+v0-round, p1+v1,p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,2, true);
                        this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,p0-v0+round,p1+v1,3, true);
                        this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,4, true);
                        this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,p0-v0,p1-v1+round,5, true);
                        this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,6, true);
                        this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,p0+v0-round,p1-v1,7, true);
                    } else {
                        this.v.setTripleAt(p0-v0,p1+v1,p0-v0+cPoint,p1+v1,p0-v0,p1+v1,2);
                        this.v.setTripleAt(p0-v0,p1-v1,p0-v0,p1-v1+cPoint,p0-v0,p1-v1,3);
                    }
                }else{
                    this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,p0+v0,p1-v1+round,0, true);
                    if(round!== 0){
                        this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,1, true);
                        this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,p0-v0+round,p1-v1,2, true);
                        this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,3, true);
                        this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,p0-v0,p1+v1-round,4, true);
                        this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,5, true);
                        this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,p0+v0-round,p1+v1,6, true);
                        this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,7, true);
                    } else {
                        this.v.setTripleAt(p0-v0,p1-v1,p0-v0+cPoint,p1-v1,p0-v0,p1-v1,1, true);
                        this.v.setTripleAt(p0-v0,p1+v1,p0-v0,p1+v1-cPoint,p0-v0,p1+v1,2, true);
                        this.v.setTripleAt(p0+v0,p1+v1,p0+v0-cPoint,p1+v1,p0+v0,p1+v1,3, true);

                    }
                }
            },
            getValue: function(frameNum){
                if(this.elem.globalData.frameId === this.frameId){
                    return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();
                if(this._mdf){
                    this.convertRectToPath();
                }

            },
            reset: resetShape
        }
        extendPrototype([DynamicPropertyContainer], RectShapeProperty);

        return RectShapeProperty;
    }());

    function getShapeProp(elem,data,type){
        var prop;
        if(type === 3 || type === 4){
            var dataProp = type === 3 ? data.pt : data.ks;
            var keys = dataProp.k;
            if(keys.length){
                prop = new KeyframedShapeProperty(elem, data, type);
            }else{
                prop = new ShapeProperty(elem, data, type);
            }
        }else if(type === 5){
            prop = new RectShapeProperty(elem, data);
        }else if(type === 6){
            prop = new EllShapeProperty(elem, data);
        }else if(type === 7){
            prop = new StarShapeProperty(elem, data);
        }
        if(prop.k){
            elem.addDynamicProperty(prop);
        }
        return prop;
    }

    function getConstructorFunction() {
        return ShapeProperty;
    }

    function getKeyframedConstructorFunction() {
        return KeyframedShapeProperty;
    }

    var ob = {};
    ob.getShapeProp = getShapeProp;
    ob.getConstructorFunction = getConstructorFunction;
    ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
    return ob;
}());
var ShapeModifiers = (function(){
    var ob = {};
    var modifiers = {};
    ob.registerModifier = registerModifier;
    ob.getModifier = getModifier;

    function registerModifier(nm,factory){
        if(!modifiers[nm]){
            modifiers[nm] = factory;
        }
    }

    function getModifier(nm,elem, data){
        return new modifiers[nm](elem, data);
    }

    return ob;
}());

function ShapeModifier(){}
ShapeModifier.prototype.initModifierProperties = function(){};
ShapeModifier.prototype.addShapeToModifier = function(){};
ShapeModifier.prototype.addShape = function(data){
    if(!this.closed){
        var shapeData = {shape:data.sh, data: data, localShapeCollection:shapeCollection_pool.newShapeCollection()};
        this.shapes.push(shapeData);
        this.addShapeToModifier(shapeData);
        if(this._isAnimated) {
            data.setAsAnimated();
        }
    }
};
ShapeModifier.prototype.init = function(elem,data){
    this.shapes = [];
    this.elem = elem;
    this.initDynamicPropertyContainer(elem);
    this.initModifierProperties(elem,data);
    this.frameId = initialDefaultFrame;
    this.closed = false;
    this.k = false;
    if(this.dynamicProperties.length){
        this.k = true;
    }else{
        this.getValue(true);
    }
};
ShapeModifier.prototype.processKeys = function(){
    if(this.elem.globalData.frameId === this.frameId){
        return;
    }
    this.frameId = this.elem.globalData.frameId;
    this.iterateDynamicProperties();
};

extendPrototype([DynamicPropertyContainer], ShapeModifier);
function TrimModifier(){
}
extendPrototype([ShapeModifier], TrimModifier);
TrimModifier.prototype.initModifierProperties = function(elem, data) {
    this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
    this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
    this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
    this.sValue = 0;
    this.eValue = 0;
    this.getValue = this.processKeys;
    this.m = data.m;
    this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
};

TrimModifier.prototype.addShapeToModifier = function(shapeData){
    shapeData.pathsData = [];
};

TrimModifier.prototype.calculateShapeEdges = function(s, e, shapeLength, addedLength, totalModifierLength) {
    var segments = [];
    if (e <= 1) {
        segments.push({
            s: s,
            e: e
        });
    } else if (s >= 1) {
        segments.push({
            s: s - 1,
            e: e - 1
        });
    } else {
        segments.push({
            s: s,
            e: 1
        });
        segments.push({
            s: 0,
            e: e - 1
        });
    }
    var shapeSegments = [];
    var i, len = segments.length, segmentOb;
    for (i = 0; i < len; i += 1) {
        segmentOb = segments[i];
        if (segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength) {
            
        } else {
            var shapeS, shapeE;
            if (segmentOb.s * totalModifierLength <= addedLength) {
                shapeS = 0;
            } else {
                shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
            }
            if(segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
                shapeE = 1;
            } else {
                shapeE = ((segmentOb.e * totalModifierLength - addedLength) / shapeLength);
            }
            shapeSegments.push([shapeS, shapeE]);
        }
    }
    if (!shapeSegments.length) {
        shapeSegments.push([0, 0]);
    }
    return shapeSegments;
};

TrimModifier.prototype.releasePathsData = function(pathsData) {
    var i, len = pathsData.length;
    for (i = 0; i < len; i += 1) {
        segments_length_pool.release(pathsData[i]);
    }
    pathsData.length = 0;
    return pathsData;
};

TrimModifier.prototype.processShapes = function(_isFirstFrame) {
    var s, e;
    if (this._mdf || _isFirstFrame) {
        var o = (this.o.v % 360) / 360;
        if (o < 0) {
            o += 1;
        }
        s = (this.s.v > 1 ? 1 : this.s.v < 0 ? 0 : this.s.v) + o;
        e = (this.e.v > 1 ? 1 : this.e.v < 0 ? 0 : this.e.v) + o;
        if (s === e) {

        }
        if (s > e) {
            var _s = s;
            s = e;
            e = _s;
        }
        s = Math.round(s * 10000) * 0.0001;
        e = Math.round(e * 10000) * 0.0001;
        this.sValue = s;
        this.eValue = e;
    } else {
        s = this.sValue;
        e = this.eValue;
    }
    var shapePaths;
    var i, len = this.shapes.length, j, jLen;
    var pathsData, pathData, totalShapeLength, totalModifierLength = 0;

    if (e === s) {
        for (i = 0; i < len; i += 1) {
            this.shapes[i].localShapeCollection.releaseShapes();
            this.shapes[i].shape._mdf = true;
            this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;
        }
    } else if (!((e === 1 && s === 0) || (e===0 && s === 1))){
        var segments = [], shapeData, localShapeCollection;
        for (i = 0; i < len; i += 1) {
            shapeData = this.shapes[i];
            // if shape hasn't changed and trim properties haven't changed, cached previous path can be used
            if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
                shapeData.shape.paths = shapeData.localShapeCollection;
            } else {
                shapePaths = shapeData.shape.paths;
                jLen = shapePaths._length;
                totalShapeLength = 0;
                if (!shapeData.shape._mdf && shapeData.pathsData.length) {
                    totalShapeLength = shapeData.totalShapeLength;
                } else {
                    pathsData = this.releasePathsData(shapeData.pathsData);
                    for (j = 0; j < jLen; j += 1) {
                        pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
                        pathsData.push(pathData);
                        totalShapeLength += pathData.totalLength;
                    }
                    shapeData.totalShapeLength = totalShapeLength;
                    shapeData.pathsData = pathsData;
                }

                totalModifierLength += totalShapeLength;
                shapeData.shape._mdf = true;
            }
        }
        var shapeS = s, shapeE = e, addedLength = 0, edges;
        for (i = len - 1; i >= 0; i -= 1) {
            shapeData = this.shapes[i];
            if (shapeData.shape._mdf) {
                localShapeCollection = shapeData.localShapeCollection;
                localShapeCollection.releaseShapes();
                //if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group
                if (this.m === 2 && len > 1) {
                    edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
                    addedLength += shapeData.totalShapeLength;
                } else {
                    edges = [[shapeS, shapeE]];
                }
                jLen = edges.length;
                for (j = 0; j < jLen; j += 1) {
                    shapeS = edges[j][0];
                    shapeE = edges[j][1];
                    segments.length = 0;
                    if (shapeE <= 1) {
                        segments.push({
                            s:shapeData.totalShapeLength * shapeS,
                            e:shapeData.totalShapeLength * shapeE
                        });
                    } else if (shapeS >= 1) {
                        segments.push({
                            s:shapeData.totalShapeLength * (shapeS - 1),
                            e:shapeData.totalShapeLength * (shapeE - 1)
                        });
                    } else {
                        segments.push({
                            s:shapeData.totalShapeLength * shapeS,
                            e:shapeData.totalShapeLength
                        });
                        segments.push({
                            s:0,
                            e:shapeData.totalShapeLength * (shapeE - 1)
                        });
                    }
                    var newShapesData = this.addShapes(shapeData,segments[0]);
                    if (segments[0].s !== segments[0].e) {
                        if (segments.length > 1) {
                            var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                            if (lastShapeInCollection.c) {
                                var lastShape = newShapesData.pop();
                                this.addPaths(newShapesData, localShapeCollection);
                                newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                            } else {
                                this.addPaths(newShapesData, localShapeCollection);
                                newShapesData = this.addShapes(shapeData, segments[1]);
                            }
                        } 
                        this.addPaths(newShapesData, localShapeCollection);
                    }
                    
                }
                shapeData.shape.paths = localShapeCollection;
            }
        }
    } else if (this._mdf) {
        for (i = 0; i < len; i += 1) {
            //Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
            //Don't remove this even if it's losing cached info.
            this.shapes[i].pathsData.length = 0;
            this.shapes[i].shape._mdf = true;
        }
    }
};

TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
    var i, len = newPaths.length;
    for (i = 0; i < len; i += 1) {
        localShapeCollection.addShape(newPaths[i]);
    }
};

TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
    shapePath.setXYAt(pt2[0], pt2[1], 'o', pos);
    shapePath.setXYAt(pt3[0], pt3[1], 'i', pos + 1);
    if(newShape){
        shapePath.setXYAt(pt1[0], pt1[1], 'v', pos);
    }
    shapePath.setXYAt(pt4[0], pt4[1], 'v', pos + 1);
};

TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
    shapePath.setXYAt(points[1], points[5], 'o', pos);
    shapePath.setXYAt(points[2], points[6], 'i', pos + 1);
    if(newShape){
        shapePath.setXYAt(points[0], points[4], 'v', pos);
    }
    shapePath.setXYAt(points[3], points[7], 'v', pos + 1);
};

TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
    var pathsData = shapeData.pathsData;
    var shapePaths = shapeData.shape.paths.shapes;
    var i, len = shapeData.shape.paths._length, j, jLen;
    var addedLength = 0;
    var currentLengthData,segmentCount;
    var lengths;
    var segment;
    var shapes = [];
    var initPos;
    var newShape = true;
    if (!shapePath) {
        shapePath = shape_pool.newElement();
        segmentCount = 0;
        initPos = 0;
    } else {
        segmentCount = shapePath._length;
        initPos = shapePath._length;
    }
    shapes.push(shapePath);
    for (i = 0; i < len; i += 1) {
        lengths = pathsData[i].lengths;
        shapePath.c = shapePaths[i].c;
        jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;
        for (j = 1; j < jLen; j +=1) {
            currentLengthData = lengths[j-1];
            if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
                addedLength += currentLengthData.addedLength;
                shapePath.c = false;
            } else if(addedLength > shapeSegment.e) {
                shapePath.c = false;
                break;
            } else {
                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
                    this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
                    newShape = false;
                } else {
                    segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength)/currentLengthData.addedLength,(shapeSegment.e - addedLength)/currentLengthData.addedLength, lengths[j-1]);
                    this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                    // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
                    newShape = false;
                    shapePath.c = false;
                }
                addedLength += currentLengthData.addedLength;
                segmentCount += 1;
            }
        }
        if (shapePaths[i].c && lengths.length) {
            currentLengthData = lengths[j - 1];
            if (addedLength <= shapeSegment.e) {
                var segmentLength = lengths[j - 1].addedLength;
                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
                    this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
                    newShape = false;
                } else {
                    segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
                    this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                    // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
                    newShape = false;
                    shapePath.c = false;
                }
            } else {
                shapePath.c = false;
            }
            addedLength += currentLengthData.addedLength;
            segmentCount += 1;
        }
        if (shapePath._length) {
            shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], 'i', initPos);
            shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1],'o', shapePath._length - 1);
        }
        if (addedLength > shapeSegment.e) {
            break;
        }
        if (i < len - 1) {
            shapePath = shape_pool.newElement();
            newShape = true;
            shapes.push(shapePath);
            segmentCount = 0;
        }
    }
    return shapes;
};


ShapeModifiers.registerModifier('tm', TrimModifier);
function RoundCornersModifier(){}
extendPrototype([ShapeModifier],RoundCornersModifier);
RoundCornersModifier.prototype.initModifierProperties = function(elem,data){
    this.getValue = this.processKeys;
    this.rd = PropertyFactory.getProp(elem,data.r,0,null,this);
    this._isAnimated = !!this.rd.effectsSequence.length;
};

RoundCornersModifier.prototype.processPath = function(path, round){
    var cloned_path = shape_pool.newElement();
    cloned_path.c = path.c;
    var i, len = path._length;
    var currentV,currentI,currentO,closerV, newV,newO,newI,distance,newPosPerc,index = 0;
    var vX,vY,oX,oY,iX,iY;
    for(i=0;i<len;i+=1){
        currentV = path.v[i];
        currentO = path.o[i];
        currentI = path.i[i];
        if(currentV[0]===currentO[0] && currentV[1]===currentO[1] && currentV[0]===currentI[0] && currentV[1]===currentI[1]){
            if((i===0 || i === len - 1) && !path.c){
                cloned_path.setTripleAt(currentV[0],currentV[1],currentO[0],currentO[1],currentI[0],currentI[1],index);
                /*cloned_path.v[index] = currentV;
                cloned_path.o[index] = currentO;
                cloned_path.i[index] = currentI;*/
                index += 1;
            } else {
                if(i===0){
                    closerV = path.v[len-1];
                } else {
                    closerV = path.v[i-1];
                }
                distance = Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));
                newPosPerc = distance ? Math.min(distance/2,round)/distance : 0;
                vX = iX = currentV[0]+(closerV[0]-currentV[0])*newPosPerc;
                vY = iY = currentV[1]-(currentV[1]-closerV[1])*newPosPerc;
                oX = vX-(vX-currentV[0])*roundCorner;
                oY = vY-(vY-currentV[1])*roundCorner;
                cloned_path.setTripleAt(vX,vY,oX,oY,iX,iY,index);
                index += 1;

                if(i === len - 1){
                    closerV = path.v[0];
                } else {
                    closerV = path.v[i+1];
                }
                distance = Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));
                newPosPerc = distance ? Math.min(distance/2,round)/distance : 0;
                vX = oX = currentV[0]+(closerV[0]-currentV[0])*newPosPerc;
                vY = oY = currentV[1]+(closerV[1]-currentV[1])*newPosPerc;
                iX = vX-(vX-currentV[0])*roundCorner;
                iY = vY-(vY-currentV[1])*roundCorner;
                cloned_path.setTripleAt(vX,vY,oX,oY,iX,iY,index);
                index += 1;
            }
        } else {
            cloned_path.setTripleAt(path.v[i][0],path.v[i][1],path.o[i][0],path.o[i][1],path.i[i][0],path.i[i][1],index);
            index += 1;
        }
    }
    return cloned_path;
};

RoundCornersModifier.prototype.processShapes = function(_isFirstFrame){
    var shapePaths;
    var i, len = this.shapes.length;
    var j, jLen;
    var rd = this.rd.v;

    if(rd !== 0){
        var shapeData, newPaths, localShapeCollection;
        for(i=0;i<len;i+=1){
            shapeData = this.shapes[i];
            newPaths = shapeData.shape.paths;
            localShapeCollection = shapeData.localShapeCollection;
            if(!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)){
                localShapeCollection.releaseShapes();
                shapeData.shape._mdf = true;
                shapePaths = shapeData.shape.paths.shapes;
                jLen = shapeData.shape.paths._length;
                for(j=0;j<jLen;j+=1){
                    localShapeCollection.addShape(this.processPath(shapePaths[j],rd));
                }
            }
            shapeData.shape.paths = shapeData.localShapeCollection;
        }

    }
    if(!this.dynamicProperties.length){
        this._mdf = false;
    }
};

ShapeModifiers.registerModifier('rd',RoundCornersModifier);
function RepeaterModifier(){}
extendPrototype([ShapeModifier], RepeaterModifier);

RepeaterModifier.prototype.initModifierProperties = function(elem,data){
    this.getValue = this.processKeys;
    this.c = PropertyFactory.getProp(elem,data.c,0,null,this);
    this.o = PropertyFactory.getProp(elem,data.o,0,null,this);
    this.tr = TransformPropertyFactory.getTransformProperty(elem,data.tr,this);
    this.so = PropertyFactory.getProp(elem,data.tr.so,0,0.01,this);
    this.eo = PropertyFactory.getProp(elem,data.tr.eo,0,0.01,this);
    this.data = data;
    if(!this.dynamicProperties.length){
        this.getValue(true);
    }
    this._isAnimated = !!this.dynamicProperties.length;
    this.pMatrix = new Matrix();
    this.rMatrix = new Matrix();
    this.sMatrix = new Matrix();
    this.tMatrix = new Matrix();
    this.matrix = new Matrix();
};

RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform, perc, inv){
    var dir = inv ? -1 : 1;
    var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
    var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
    pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
    rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
    rMatrix.rotate(-transform.r.v * dir * perc);
    rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
    sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
    sMatrix.scale(inv ? 1/scaleX : scaleX, inv ? 1/scaleY : scaleY);
    sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
};

RepeaterModifier.prototype.init = function(elem, arr, pos, elemsData) {
    this.elem = elem;
    this.arr = arr;
    this.pos = pos;
    this.elemsData = elemsData;
    this._currentCopies = 0;
    this._elements = [];
    this._groups = [];
    this.frameId = -1;
    this.initDynamicPropertyContainer(elem);
    this.initModifierProperties(elem,arr[pos]);
    var cont = 0;
    while(pos>0){
        pos -= 1;
        //this._elements.unshift(arr.splice(pos,1)[0]);
        this._elements.unshift(arr[pos]);
        cont += 1;
    }
    if(this.dynamicProperties.length){
        this.k = true;
    }else{
        this.getValue(true);
    }
};

RepeaterModifier.prototype.resetElements = function(elements){
    var i, len = elements.length;
    for(i = 0; i < len; i += 1) {
        elements[i]._processed = false;
        if(elements[i].ty === 'gr'){
            this.resetElements(elements[i].it);
        }
    }
};

RepeaterModifier.prototype.cloneElements = function(elements){
    var i, len = elements.length;
    var newElements = JSON.parse(JSON.stringify(elements));
    this.resetElements(newElements);
    return newElements;
};

RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
    var i, len = elements.length;
    for(i = 0; i < len; i += 1) {
        elements[i]._render = renderFlag;
        if(elements[i].ty === 'gr') {
            this.changeGroupRender(elements[i].it, renderFlag);
        }
    }
};

RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
    var items, itemsTransform, i, dir, cont;
    if(this._mdf || _isFirstFrame){
        var copies = Math.ceil(this.c.v);
        if(this._groups.length < copies){
            while(this._groups.length < copies){
                var group = {
                    it:this.cloneElements(this._elements),
                    ty:'gr'
                };
                group.it.push({"a":{"a":0,"ix":1,"k":[0,0]},"nm":"Transform","o":{"a":0,"ix":7,"k":100},"p":{"a":0,"ix":2,"k":[0,0]},"r":{"a":1,"ix":6,"k":[{s:0,e:0,t:0},{s:0,e:0,t:1}]},"s":{"a":0,"ix":3,"k":[100,100]},"sa":{"a":0,"ix":5,"k":0},"sk":{"a":0,"ix":4,"k":0},"ty":"tr"});
                
                this.arr.splice(0,0,group);
                this._groups.splice(0,0,group);
                this._currentCopies += 1;
            }
            this.elem.reloadShapes();
        }
        cont = 0;
        var renderFlag;
        for(i = 0; i  <= this._groups.length - 1; i += 1){
            renderFlag = cont < copies;
            this._groups[i]._render = renderFlag;
            this.changeGroupRender(this._groups[i].it, renderFlag);
            cont += 1;
        }
        
        this._currentCopies = copies;
        ////

        var offset = this.o.v;
        var offsetModulo = offset%1;
        var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
        var k;
        var tMat = this.tr.v.props;
        var pProps = this.pMatrix.props;
        var rProps = this.rMatrix.props;
        var sProps = this.sMatrix.props;
        this.pMatrix.reset();
        this.rMatrix.reset();
        this.sMatrix.reset();
        this.tMatrix.reset();
        this.matrix.reset();
        var iteration = 0;

        if(offset > 0) {
            while(iteration<roundOffset){
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                iteration += 1;
            }
            if(offsetModulo){
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
                iteration += offsetModulo;
            }
        } else if(offset < 0) {
            while(iteration>roundOffset){
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
                iteration -= 1;
            }
            if(offsetModulo){
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, - offsetModulo, true);
                iteration -= offsetModulo;
            }
        }
        i = this.data.m === 1 ? 0 : this._currentCopies - 1;
        dir = this.data.m === 1 ? 1 : -1;
        cont = this._currentCopies;
        var j, jLen;
        while(cont){
            items = this.elemsData[i].it;
            itemsTransform = items[items.length - 1].transform.mProps.v.props;
            jLen = itemsTransform.length;
            items[items.length - 1].transform.mProps._mdf = true;
            items[items.length - 1].transform.op._mdf = true;
            items[items.length - 1].transform.op.v = this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1));
            if(iteration !== 0){
                if((i !== 0 && dir === 1) || (i !== this._currentCopies - 1 && dir === -1)){
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                }
                this.matrix.transform(rProps[0],rProps[1],rProps[2],rProps[3],rProps[4],rProps[5],rProps[6],rProps[7],rProps[8],rProps[9],rProps[10],rProps[11],rProps[12],rProps[13],rProps[14],rProps[15]);
                this.matrix.transform(sProps[0],sProps[1],sProps[2],sProps[3],sProps[4],sProps[5],sProps[6],sProps[7],sProps[8],sProps[9],sProps[10],sProps[11],sProps[12],sProps[13],sProps[14],sProps[15]);
                this.matrix.transform(pProps[0],pProps[1],pProps[2],pProps[3],pProps[4],pProps[5],pProps[6],pProps[7],pProps[8],pProps[9],pProps[10],pProps[11],pProps[12],pProps[13],pProps[14],pProps[15]);
                
                for(j=0;j<jLen;j+=1) {
                    itemsTransform[j] = this.matrix.props[j];
                }
                this.matrix.reset();
            } else {
                this.matrix.reset();
                for(j=0;j<jLen;j+=1) {
                    itemsTransform[j] = this.matrix.props[j];
                }
            }
            iteration += 1;
            cont -= 1;
            i += dir;
        }
    } else {
        cont = this._currentCopies;
        i = 0;
        dir = 1;
        while(cont){
            items = this.elemsData[i].it;
            itemsTransform = items[items.length - 1].transform.mProps.v.props;
            items[items.length - 1].transform.mProps._mdf = false;
            items[items.length - 1].transform.op._mdf = false;
            cont -= 1;
            i += dir;
        }
    }
};

RepeaterModifier.prototype.addShape = function(){};

ShapeModifiers.registerModifier('rp',RepeaterModifier);
function ShapeCollection(){
	this._length = 0;
	this._maxLength = 4;
	this.shapes = createSizedArray(this._maxLength);
}

ShapeCollection.prototype.addShape = function(shapeData){
	if(this._length === this._maxLength){
		this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
		this._maxLength *= 2;
	}
	this.shapes[this._length] = shapeData;
	this._length += 1;
};

ShapeCollection.prototype.releaseShapes = function(){
	var i;
	for(i = 0; i < this._length; i += 1) {
		shape_pool.release(this.shapes[i]);
	}
	this._length = 0;
};
function DashProperty(elem, data, renderer, container) {
    this.elem = elem;
    this.frameId = -1;
    this.dataProps = createSizedArray(data.length);
    this.renderer = renderer;
    this.k = false;
    this.dashStr = '';
    this.dashArray = createTypedArray('float32',  data.length ? data.length - 1 : 0);
    this.dashoffset = createTypedArray('float32',  1);
    this.initDynamicPropertyContainer(container);
    var i, len = data.length || 0, prop;
    for(i = 0; i < len; i += 1) {
        prop = PropertyFactory.getProp(elem,data[i].v,0, 0, this);
        this.k = prop.k || this.k;
        this.dataProps[i] = {n:data[i].n,p:prop};
    }
    if(!this.k){
        this.getValue(true);
    }
    this._isAnimated = this.k;
}

DashProperty.prototype.getValue = function(forceRender) {
    if(this.elem.globalData.frameId === this.frameId && !forceRender){
        return;
    }
    this.frameId = this.elem.globalData.frameId;
    this.iterateDynamicProperties();
    this._mdf = this._mdf || forceRender;
    if (this._mdf) {
        var i = 0, len = this.dataProps.length;
        if(this.renderer === 'svg') {
            this.dashStr = '';
        }
        for(i=0;i<len;i+=1){
            if(this.dataProps[i].n != 'o'){
                if(this.renderer === 'svg') {
                    this.dashStr += ' ' + this.dataProps[i].p.v;
                }else{
                    this.dashArray[i] = this.dataProps[i].p.v;
                }
            }else{
                this.dashoffset[0] = this.dataProps[i].p.v;
            }
        }
    }
};
extendPrototype([DynamicPropertyContainer], DashProperty);
function GradientProperty(elem,data,container){
    this.data = data;
    this.c = createTypedArray('uint8c', data.p*4);
    var cLength = data.k.k[0].s ? (data.k.k[0].s.length - data.p*4) : data.k.k.length - data.p*4;
    this.o = createTypedArray('float32', cLength);
    this._cmdf = false;
    this._omdf = false;
    this._collapsable = this.checkCollapsable();
    this._hasOpacity = cLength;
    this.initDynamicPropertyContainer(container);
    this.prop = PropertyFactory.getProp(elem,data.k,1,null,this);
    this.k = this.prop.k;
    this.getValue(true);
}

GradientProperty.prototype.comparePoints = function(values, points) {
    var i = 0, len = this.o.length/2, diff;
    while(i < len) {
        diff = Math.abs(values[i*4] - values[points*4 + i*2]);
        if(diff > 0.01){
            return false;
        }
        i += 1;
    }
    return true;
};

GradientProperty.prototype.checkCollapsable = function() {
    if (this.o.length/2 !== this.c.length/4) {
        return false;
    }
    if (this.data.k.k[0].s) {
        var i = 0, len = this.data.k.k.length;
        while (i < len) {
            if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
                return false;
            }
            i += 1;
        }
    } else if(!this.comparePoints(this.data.k.k, this.data.p)) {
        return false;
    }
    return true;
};

GradientProperty.prototype.getValue = function(forceRender){
    this.prop.getValue();
    this._mdf = false;
    this._cmdf = false;
    this._omdf = false;
    if(this.prop._mdf || forceRender){
        var i, len = this.data.p*4;
        var mult, val;
        for(i=0;i<len;i+=1){
            mult = i%4 === 0 ? 100 : 255;
            val = Math.round(this.prop.v[i]*mult);
            if(this.c[i] !== val){
                this.c[i] = val;
                this._cmdf = !forceRender;
            }
        }
        if(this.o.length){
            len = this.prop.v.length;
            for(i=this.data.p*4;i<len;i+=1){
                mult = i%2 === 0 ? 100 : 1;
                val = i%2 === 0 ?  Math.round(this.prop.v[i]*100):this.prop.v[i];
                if(this.o[i-this.data.p*4] !== val){
                    this.o[i-this.data.p*4] = val;
                    this._omdf = !forceRender;
                }
            }
        }
        this._mdf = !forceRender;
    }
};

extendPrototype([DynamicPropertyContainer], GradientProperty);
var buildShapeString = function(pathNodes, length, closed, mat) {
	if(length === 0) {
            return '';
        }
        var _o = pathNodes.o;
        var _i = pathNodes.i;
        var _v = pathNodes.v;
        var i, shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
        for(i = 1; i < length; i += 1) {
            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[i][0], _i[i][1]) + " " + mat.applyToPointStringified(_v[i][0], _v[i][1]);
        }
        if (closed && length) {
            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
            shapeString += 'z';
        }
        return shapeString;
}
var ImagePreloader = (function(){

    var proxyImage = (function(){
        var canvas = createTag('canvas');
        canvas.width = 1;
        canvas.height = 1;
        var ctx = canvas.getContext('2d');
        ctx.fillStyle = '#FF0000';
        ctx.fillRect(0, 0, 1, 1);
        return canvas;
    }())

    function imageLoaded(){
        this.loadedAssets += 1;
        if(this.loadedAssets === this.totalImages){
            if(this.imagesLoadedCb) {
                this.imagesLoadedCb(null);
            }
        }
    }

    function getAssetsPath(assetData, assetsPath, original_path) {
        var path = '';
        if (assetData.e) {
            path = assetData.p;
        } else if(assetsPath) {
            var imagePath = assetData.p;
            if (imagePath.indexOf('images/') !== -1) {
                imagePath = imagePath.split('/')[1];
            }
            path = assetsPath + imagePath;
        } else {
            path = original_path;
            path += assetData.u ? assetData.u : '';
            path += assetData.p;
        }
        return path;
    }

    function createImageData(assetData) {
        var path = getAssetsPath(assetData, this.assetsPath, this.path);
        var img = createTag('img');
        img.crossOrigin = 'anonymous';
        img.addEventListener('load', this._imageLoaded.bind(this), false);
        img.addEventListener('error', function() {
            ob.img = proxyImage;
            this._imageLoaded();
        }.bind(this), false);
        img.src = path;
        var ob = {
            img: img,
            assetData: assetData
        }
        return ob;
    }

    function loadAssets(assets, cb){
        this.imagesLoadedCb = cb;
        var i, len = assets.length;
        for (i = 0; i < len; i += 1) {
            if(!assets[i].layers){
                this.totalImages += 1;
                this.images.push(this._createImageData(assets[i]));
            }
        }
    }

    function setPath(path){
        this.path = path || '';
    }

    function setAssetsPath(path){
        this.assetsPath = path || '';
    }

    function getImage(assetData) {
        var i = 0, len = this.images.length;
        while (i < len) {
            if (this.images[i].assetData === assetData) {
                return this.images[i].img;
            }
            i += 1;
        }
    }

    function destroy() {
        this.imagesLoadedCb = null;
        this.images.length = 0;
    }

    function loaded() {
        return this.totalImages === this.loadedAssets;
    }

    return function ImagePreloader(){
        this.loadAssets = loadAssets;
        this.setAssetsPath = setAssetsPath;
        this.setPath = setPath;
        this.loaded = loaded;
        this.destroy = destroy;
        this.getImage = getImage;
        this._createImageData = createImageData;
        this._imageLoaded = imageLoaded;
        this.assetsPath = '';
        this.path = '';
        this.totalImages = 0;
        this.loadedAssets = 0;
        this.imagesLoadedCb = null;
        this.images = [];
    };
}());
var featureSupport = (function(){
	var ob = {
		maskType: true
	};
	if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
	   ob.maskType = false;
	}
	return ob;
}());
var filtersFactory = (function(){
	var ob = {};
	ob.createFilter = createFilter;
	ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;

	function createFilter(filId){
        	var fil = createNS('filter');
        	fil.setAttribute('id',filId);
                fil.setAttribute('filterUnits','objectBoundingBox');
                fil.setAttribute('x','0%');
                fil.setAttribute('y','0%');
                fil.setAttribute('width','100%');
                fil.setAttribute('height','100%');
                return fil;
	}

	function createAlphaToLuminanceFilter(){
                var feColorMatrix = createNS('feColorMatrix');
                feColorMatrix.setAttribute('type','matrix');
                feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
                feColorMatrix.setAttribute('values','0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');
                return feColorMatrix;
	}

	return ob;
}());
var assetLoader = (function(){

	function formatResponse(xhr) {
		if(xhr.response && typeof xhr.response === 'object') {
			return xhr.response;
		} else if(xhr.response && typeof xhr.response === 'string') {
			return JSON.parse(xhr.response);
		} else if(xhr.responseText) {
			return JSON.parse(xhr.responseText);
		}
	}

	function loadAsset(path, callback, errorCallback) {
		var response;
		var xhr = new XMLHttpRequest();
		xhr.open('GET', path, true);
		// set responseType after calling open or IE will break.
		try {
		    // This crashes on Android WebView prior to KitKat
		    xhr.responseType = "json";
		} catch (err) {}
	    xhr.send();
	    xhr.onreadystatechange = function () {
	        if (xhr.readyState == 4) {
	            if(xhr.status == 200){
	            	response = formatResponse(xhr);
	            	callback(response);
	            }else{
	                try{
	            		response = formatResponse(xhr);
	            		callback(response);
	                }catch(err){
	                	if(errorCallback) {
	                		errorCallback(err);
	                	}
	                }
	            }
	        }
	    };
	}
	return {
		load: loadAsset
	}
}())

function TextAnimatorProperty(textData, renderType, elem){
    this._isFirstFrame = true;
	this._hasMaskedPath = false;
	this._frameId = -1;
	this._textData = textData;
	this._renderType = renderType;
    this._elem = elem;
	this._animatorsData = createSizedArray(this._textData.a.length);
	this._pathData = {};
	this._moreOptions = {
		alignment: {}
	};
	this.renderedLetters = [];
    this.lettersChangedFlag = false;
    this.initDynamicPropertyContainer(elem);

}

TextAnimatorProperty.prototype.searchProperties = function(){
    var i, len = this._textData.a.length, animatorProps;
    var getProp = PropertyFactory.getProp;
    for(i=0;i<len;i+=1){
        animatorProps = this._textData.a[i];
        this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
    }
    if(this._textData.p && 'm' in this._textData.p){
        this._pathData = {
            f: getProp(this._elem,this._textData.p.f,0,0,this),
            l: getProp(this._elem,this._textData.p.l,0,0,this),
            r: this._textData.p.r,
            m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
        };
        this._hasMaskedPath = true;
    } else {
        this._hasMaskedPath = false;
    }
    this._moreOptions.alignment = getProp(this._elem,this._textData.m.a,1,0,this);
};

TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag){
    this.lettersChangedFlag = lettersChangedFlag;
    if(!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
        return;
    }
    this._isFirstFrame = false;
    var alignment = this._moreOptions.alignment.v;
    var animators = this._animatorsData;
    var textData = this._textData;
    var matrixHelper = this.mHelper;
    var renderType = this._renderType;
    var renderedLettersCount = this.renderedLetters.length;
    var data = this.data;
    var xPos,yPos;
    var i, len;
    var letters = documentData.l, pathInfo, currentLength, currentPoint, segmentLength, flag, pointInd, segmentInd, prevPoint, points, segments, partialLength, totalLength, perc, tanAngle, mask;
    if(this._hasMaskedPath) {
        mask = this._pathData.m;
        if(!this._pathData.n || this._pathData._mdf){
            var paths = mask.v;
            if(this._pathData.r){
                paths = paths.reverse();
            }
            // TODO: release bezier data cached from previous pathInfo: this._pathData.pi
            pathInfo = {
                tLength: 0,
                segments: []
            };
            len = paths._length - 1;
            var bezierData;
            totalLength = 0;
            for (i = 0; i < len; i += 1) {
                bezierData = bez.buildBezierData(paths.v[i]
                    , paths.v[i + 1]
                    , [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]]
                    , [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]);
                pathInfo.tLength += bezierData.segmentLength;
                pathInfo.segments.push(bezierData);
                totalLength += bezierData.segmentLength;
            }
            i = len;
            if (mask.v.c) {
                bezierData = bez.buildBezierData(paths.v[i]
                    , paths.v[0]
                    , [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]]
                    , [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
                pathInfo.tLength += bezierData.segmentLength;
                pathInfo.segments.push(bezierData);
                totalLength += bezierData.segmentLength;
            }
            this._pathData.pi = pathInfo;
        }
        pathInfo = this._pathData.pi;

        currentLength = this._pathData.f.v;
        segmentInd = 0;
        pointInd = 1;
        segmentLength = 0;
        flag = true;
        segments = pathInfo.segments;
        if (currentLength < 0 && mask.v.c) {
            if (pathInfo.tLength < Math.abs(currentLength)) {
                currentLength = -Math.abs(currentLength) % pathInfo.tLength;
            }
            segmentInd = segments.length - 1;
            points = segments[segmentInd].points;
            pointInd = points.length - 1;
            while (currentLength < 0) {
                currentLength += points[pointInd].partialLength;
                pointInd -= 1;
                if (pointInd < 0) {
                    segmentInd -= 1;
                    points = segments[segmentInd].points;
                    pointInd = points.length - 1;
                }
            }

        }
        points = segments[segmentInd].points;
        prevPoint = points[pointInd - 1];
        currentPoint = points[pointInd];
        partialLength = currentPoint.partialLength;
    }


    len = letters.length;
    xPos = 0;
    yPos = 0;
    var yOff = documentData.finalSize * 1.2 * 0.714;
    var firstLine = true;
    var animatorProps, animatorSelector;
    var j, jLen;
    var letterValue;

    jLen = animators.length;
    var lastLetter;

    var mult, ind = -1, offf, xPathPos, yPathPos;
    var initPathPos = currentLength,initSegmentInd = segmentInd, initPointInd = pointInd, currentLine = -1;
    var elemOpacity;
    var sc,sw,fc,k;
    var lineLength = 0;
    var letterSw, letterSc, letterFc, letterM = '', letterP = this.defaultPropsArray, letterO;

    //
    if(documentData.j === 2 || documentData.j === 1) {
        var animatorJustifyOffset = 0;
        var animatorFirstCharOffset = 0;
        var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
        var lastIndex = 0;
        var isNewLine = true;

        for (i = 0; i < len; i += 1) {
            if (letters[i].n) {
                if(animatorJustifyOffset) {
                    animatorJustifyOffset += animatorFirstCharOffset;
                }
                while (lastIndex < i) {
                    letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                    lastIndex += 1;
                }
                animatorJustifyOffset = 0;
                isNewLine = true;
            } else {
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.t.propType) {
                        if (isNewLine && documentData.j === 2) {
                            animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                        }
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        if (mult.length) {
                            animatorJustifyOffset += animatorProps.t.v*mult[0] * justifyOffsetMult;
                        } else {
                            animatorJustifyOffset += animatorProps.t.v*mult * justifyOffsetMult;
                        }
                    }
                }
                isNewLine = false;
            }
        }
        if(animatorJustifyOffset) {
            animatorJustifyOffset += animatorFirstCharOffset;
        }
        while(lastIndex < i) {
            letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
            lastIndex += 1;
        }
    }
    //

    for( i = 0; i < len; i += 1) {

        matrixHelper.reset();
        elemOpacity = 1;
        if(letters[i].n) {
            xPos = 0;
            yPos += documentData.yOffset;
            yPos += firstLine ? 1 : 0;
            currentLength = initPathPos ;
            firstLine = false;
            lineLength = 0;
            if(this._hasMaskedPath) {
                segmentInd = initSegmentInd;
                pointInd = initPointInd;
                points = segments[segmentInd].points;
                prevPoint = points[pointInd - 1];
                currentPoint = points[pointInd];
                partialLength = currentPoint.partialLength;
                segmentLength = 0;
            }
            letterO = letterSw = letterFc = letterM = '';
            letterP = this.defaultPropsArray;
        }else{
            if(this._hasMaskedPath) {
                if(currentLine !== letters[i].line){
                    switch(documentData.j){
                        case 1:
                            currentLength += totalLength - documentData.lineWidths[letters[i].line];
                            break;
                        case 2:
                            currentLength += (totalLength - documentData.lineWidths[letters[i].line])/2;
                            break;
                    }
                    currentLine = letters[i].line;
                }
                if (ind !== letters[i].ind) {
                    if (letters[ind]) {
                        currentLength += letters[ind].extra;
                    }
                    currentLength += letters[i].an / 2;
                    ind = letters[i].ind;
                }
                currentLength += alignment[0] * letters[i].an / 200;
                var animatorOffset = 0;
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.p.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
                        if(mult.length){
                            animatorOffset += animatorProps.p.v[0] * mult[0];
                        } else{
                            animatorOffset += animatorProps.p.v[0] * mult;
                        }

                    }
                    if (animatorProps.a.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
                        if(mult.length){
                            animatorOffset += animatorProps.a.v[0] * mult[0];
                        } else{
                            animatorOffset += animatorProps.a.v[0] * mult;
                        }

                    }
                }
                flag = true;
                while (flag) {
                    if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                        perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                        xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                        yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                        matrixHelper.translate(-alignment[0]*letters[i].an/200, -(alignment[1] * yOff / 100));
                        flag = false;
                    } else if (points) {
                        segmentLength += currentPoint.partialLength;
                        pointInd += 1;
                        if (pointInd >= points.length) {
                            pointInd = 0;
                            segmentInd += 1;
                            if (!segments[segmentInd]) {
                                if (mask.v.c) {
                                    pointInd = 0;
                                    segmentInd = 0;
                                    points = segments[segmentInd].points;
                                } else {
                                    segmentLength -= currentPoint.partialLength;
                                    points = null;
                                }
                            } else {
                                points = segments[segmentInd].points;
                            }
                        }
                        if (points) {
                            prevPoint = currentPoint;
                            currentPoint = points[pointInd];
                            partialLength = currentPoint.partialLength;
                        }
                    }
                }
                offf = letters[i].an / 2 - letters[i].add;
                matrixHelper.translate(-offf, 0, 0);
            } else {
                offf = letters[i].an/2 - letters[i].add;
                matrixHelper.translate(-offf,0,0);

                // Grouping alignment
                matrixHelper.translate(-alignment[0]*letters[i].an/200, -alignment[1]*yOff/100, 0);
            }

            lineLength += letters[i].l/2;
            for(j=0;j<jLen;j+=1){
                animatorProps = animators[j].a;
                if (animatorProps.t.propType) {
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
                    //This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"
                    if(xPos !== 0 || documentData.j !== 0) {
                        if(this._hasMaskedPath) {
                            if(mult.length) {
                                currentLength += animatorProps.t.v*mult[0];
                            } else {
                                currentLength += animatorProps.t.v*mult;
                            }
                        }else{
                            if(mult.length) {
                                xPos += animatorProps.t.v*mult[0];
                            } else {
                                xPos += animatorProps.t.v*mult;
                            }
                        }
                    }
                }
            }
            lineLength += letters[i].l/2;
            if(documentData.strokeWidthAnim) {
                sw = documentData.sw || 0;
            }
            if(documentData.strokeColorAnim) {
                if(documentData.sc){
                    sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
                }else{
                    sc = [0,0,0];
                }
            }
            if(documentData.fillColorAnim && documentData.fc) {
                fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
            }
            for(j=0;j<jLen;j+=1){
                animatorProps = animators[j].a;
                if (animatorProps.a.propType) {
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);

                    if(mult.length){
                        matrixHelper.translate(-animatorProps.a.v[0]*mult[0], -animatorProps.a.v[1]*mult[1], animatorProps.a.v[2]*mult[2]);
                    } else {
                        matrixHelper.translate(-animatorProps.a.v[0]*mult, -animatorProps.a.v[1]*mult, animatorProps.a.v[2]*mult);
                    }
                }
            }
            for(j=0;j<jLen;j+=1){
                animatorProps = animators[j].a;
                if (animatorProps.s.propType) {
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
                    if(mult.length){
                        matrixHelper.scale(1+((animatorProps.s.v[0]-1)*mult[0]),1+((animatorProps.s.v[1]-1)*mult[1]),1);
                    } else {
                        matrixHelper.scale(1+((animatorProps.s.v[0]-1)*mult),1+((animatorProps.s.v[1]-1)*mult),1);
                    }
                }
            }
            for(j=0;j<jLen;j+=1) {
                animatorProps = animators[j].a;
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
                if (animatorProps.sk.propType) {
                    if(mult.length) {
                        matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
                    } else {
                        matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
                    }
                }
                if (animatorProps.r.propType) {
                    if(mult.length) {
                        matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
                    } else {
                        matrixHelper.rotateZ(-animatorProps.r.v * mult);
                    }
                }
                if (animatorProps.ry.propType) {

                    if(mult.length) {
                        matrixHelper.rotateY(animatorProps.ry.v*mult[1]);
                    }else{
                        matrixHelper.rotateY(animatorProps.ry.v*mult);
                    }
                }
                if (animatorProps.rx.propType) {
                    if(mult.length) {
                        matrixHelper.rotateX(animatorProps.rx.v*mult[0]);
                    } else {
                        matrixHelper.rotateX(animatorProps.rx.v*mult);
                    }
                }
                if (animatorProps.o.propType) {
                    if(mult.length) {
                        elemOpacity += ((animatorProps.o.v)*mult[0] - elemOpacity)*mult[0];
                    } else {
                        elemOpacity += ((animatorProps.o.v)*mult - elemOpacity)*mult;
                    }
                }
                if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
                    if(mult.length) {
                        sw += animatorProps.sw.v*mult[0];
                    } else {
                        sw += animatorProps.sw.v*mult;
                    }
                }
                if (documentData.strokeColorAnim && animatorProps.sc.propType) {
                    for(k=0;k<3;k+=1){
                        if(mult.length) {
                            sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k])*mult[0];
                        } else {
                            sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k])*mult;
                        }
                    }
                }
                if (documentData.fillColorAnim && documentData.fc) {
                    if(animatorProps.fc.propType){
                        for(k=0;k<3;k+=1){
                            if(mult.length) {
                                fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k])*mult[0];
                            } else {
                                fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k])*mult;
                            }
                        }
                    }
                    if(animatorProps.fh.propType){
                        if(mult.length) {
                            fc = addHueToRGB(fc,animatorProps.fh.v*mult[0]);
                        } else {
                            fc = addHueToRGB(fc,animatorProps.fh.v*mult);
                        }
                    }
                    if(animatorProps.fs.propType){
                        if(mult.length) {
                            fc = addSaturationToRGB(fc,animatorProps.fs.v*mult[0]);
                        } else {
                            fc = addSaturationToRGB(fc,animatorProps.fs.v*mult);
                        }
                    }
                    if(animatorProps.fb.propType){
                        if(mult.length) {
                            fc = addBrightnessToRGB(fc,animatorProps.fb.v*mult[0]);
                        } else {
                            fc = addBrightnessToRGB(fc,animatorProps.fb.v*mult);
                        }
                    }
                }
            }

            for(j=0;j<jLen;j+=1){
                animatorProps = animators[j].a;

                if (animatorProps.p.propType) {
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
                    if(this._hasMaskedPath) {
                        if(mult.length) {
                            matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                        } else {
                            matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                        }
                    }else{
                        if(mult.length) {
                            matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
                        } else {
                            matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                        
                        }
                    }
                }
            }
            if(documentData.strokeWidthAnim){
                letterSw = sw < 0 ? 0 : sw;
            }
            if(documentData.strokeColorAnim){
                letterSc = 'rgb('+Math.round(sc[0]*255)+','+Math.round(sc[1]*255)+','+Math.round(sc[2]*255)+')';
            }
            if(documentData.fillColorAnim && documentData.fc){
                letterFc = 'rgb('+Math.round(fc[0]*255)+','+Math.round(fc[1]*255)+','+Math.round(fc[2]*255)+')';
            }

            if(this._hasMaskedPath) {
                matrixHelper.translate(0,-documentData.ls);

                matrixHelper.translate(0, alignment[1]*yOff/100 + yPos,0);
                if (textData.p.p) {
                    tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
                    var rot = Math.atan(tanAngle) * 180 / Math.PI;
                    if (currentPoint.point[0] < prevPoint.point[0]) {
                        rot += 180;
                    }
                    matrixHelper.rotate(-rot * Math.PI / 180);
                }
                matrixHelper.translate(xPathPos, yPathPos, 0);
                currentLength -= alignment[0]*letters[i].an/200;
                if(letters[i+1] && ind !== letters[i+1].ind){
                    currentLength += letters[i].an / 2;
                    currentLength += documentData.tr/1000*documentData.finalSize;
                }
            }else{

                matrixHelper.translate(xPos,yPos,0);

                if(documentData.ps){
                    //matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
                    matrixHelper.translate(documentData.ps[0],documentData.ps[1] + documentData.ascent,0);
                }
                switch(documentData.j){
                    case 1:
                        matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]),0,0);
                        break;
                    case 2:
                        matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line])/2,0,0);
                        break;
                }
                matrixHelper.translate(0,-documentData.ls);
                matrixHelper.translate(offf,0,0);
                matrixHelper.translate(alignment[0]*letters[i].an/200,alignment[1]*yOff/100,0);
                xPos += letters[i].l + documentData.tr/1000*documentData.finalSize;
            }
            if(renderType === 'html'){
                letterM = matrixHelper.toCSS();
            }else if(renderType === 'svg'){
                letterM = matrixHelper.to2dCSS();
            }else{
                letterP = [matrixHelper.props[0],matrixHelper.props[1],matrixHelper.props[2],matrixHelper.props[3],matrixHelper.props[4],matrixHelper.props[5],matrixHelper.props[6],matrixHelper.props[7],matrixHelper.props[8],matrixHelper.props[9],matrixHelper.props[10],matrixHelper.props[11],matrixHelper.props[12],matrixHelper.props[13],matrixHelper.props[14],matrixHelper.props[15]];
            }
            letterO = elemOpacity;
        }

        if(renderedLettersCount <= i) {
            letterValue = new LetterProps(letterO,letterSw,letterSc,letterFc,letterM,letterP);
            this.renderedLetters.push(letterValue);
            renderedLettersCount += 1;
            this.lettersChangedFlag = true;
        } else {
            letterValue = this.renderedLetters[i];
            this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
        }
    }
};

TextAnimatorProperty.prototype.getValue = function(){
	if(this._elem.globalData.frameId === this._frameId){
        return;
    }
    this._frameId = this._elem.globalData.frameId;
    this.iterateDynamicProperties();
};

TextAnimatorProperty.prototype.mHelper = new Matrix();
TextAnimatorProperty.prototype.defaultPropsArray = [];
extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
function TextAnimatorDataProperty(elem, animatorProps, container) {
	var defaultData = {propType:false};
	var getProp = PropertyFactory.getProp;
	var textAnimator_animatables = animatorProps.a;
	this.a = {
		r: textAnimator_animatables.r ? getProp(elem, textAnimator_animatables.r, 0, degToRads, container) : defaultData,
		rx: textAnimator_animatables.rx ? getProp(elem, textAnimator_animatables.rx, 0, degToRads, container) : defaultData,
		ry: textAnimator_animatables.ry ? getProp(elem, textAnimator_animatables.ry, 0, degToRads, container) : defaultData,
		sk: textAnimator_animatables.sk ? getProp(elem, textAnimator_animatables.sk, 0, degToRads, container) : defaultData,
		sa: textAnimator_animatables.sa ? getProp(elem, textAnimator_animatables.sa, 0, degToRads, container) : defaultData,
		s: textAnimator_animatables.s ? getProp(elem, textAnimator_animatables.s, 1, 0.01, container) : defaultData,
		a: textAnimator_animatables.a ? getProp(elem, textAnimator_animatables.a, 1, 0, container) : defaultData,
		o: textAnimator_animatables.o ? getProp(elem, textAnimator_animatables.o, 0, 0.01, container) : defaultData,
		p: textAnimator_animatables.p ? getProp(elem,textAnimator_animatables.p, 1, 0, container) : defaultData,
		sw: textAnimator_animatables.sw ? getProp(elem, textAnimator_animatables.sw, 0, 0, container) : defaultData,
		sc: textAnimator_animatables.sc ? getProp(elem, textAnimator_animatables.sc, 1, 0, container) : defaultData,
		fc: textAnimator_animatables.fc ? getProp(elem, textAnimator_animatables.fc, 1, 0, container) : defaultData,
		fh: textAnimator_animatables.fh ? getProp(elem, textAnimator_animatables.fh, 0, 0, container) : defaultData,
		fs: textAnimator_animatables.fs ? getProp(elem, textAnimator_animatables.fs, 0, 0.01, container) : defaultData,
		fb: textAnimator_animatables.fb ? getProp(elem, textAnimator_animatables.fb, 0, 0.01, container) : defaultData,
		t: textAnimator_animatables.t ? getProp(elem, textAnimator_animatables.t, 0, 0, container) : defaultData
	};

	this.s = TextSelectorProp.getTextSelectorProp(elem,animatorProps.s, container);
    this.s.t = animatorProps.s.t;
}
function LetterProps(o, sw, sc, fc, m, p){
    this.o = o;
    this.sw = sw;
    this.sc = sc;
    this.fc = fc;
    this.m = m;
    this.p = p;
    this._mdf = {
    	o: true,
    	sw: !!sw,
    	sc: !!sc,
    	fc: !!fc,
    	m: true,
    	p: true
    };
}

LetterProps.prototype.update = function(o, sw, sc, fc, m, p) {
	this._mdf.o = false;
	this._mdf.sw = false;
	this._mdf.sc = false;
	this._mdf.fc = false;
	this._mdf.m = false;
	this._mdf.p = false;
	var updated = false;

	if(this.o !== o) {
		this.o = o;
		this._mdf.o = true;
		updated = true;
	}
	if(this.sw !== sw) {
		this.sw = sw;
		this._mdf.sw = true;
		updated = true;
	}
	if(this.sc !== sc) {
		this.sc = sc;
		this._mdf.sc = true;
		updated = true;
	}
	if(this.fc !== fc) {
		this.fc = fc;
		this._mdf.fc = true;
		updated = true;
	}
	if(this.m !== m) {
		this.m = m;
		this._mdf.m = true;
		updated = true;
	}
	if(p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
		this.p = p;
		this._mdf.p = true;
		updated = true;
	}
	return updated;
};
function TextProperty(elem, data){
	this._frameId = initialDefaultFrame;
	this.pv = '';
	this.v = '';
	this.kf = false;
	this._isFirstFrame = true;
	this._mdf = false;
    this.data = data;
	this.elem = elem;
    this.comp = this.elem.comp;
	this.keysIndex = 0;
    this.canResize = false;
    this.minimumFontSize = 1;
    this.effectsSequence = [];
	this.currentData = {
		ascent: 0,
        boxWidth: this.defaultBoxWidth,
        f: '',
        fStyle: '',
        fWeight: '',
        fc: '',
        j: '',
        justifyOffset: '',
        l: [],
        lh: 0,
        lineWidths: [],
        ls: '',
        of: '',
        s: '',
        sc: '',
        sw: 0,
        t: 0,
        tr: 0,
        sz:0,
        ps:null,
        fillColorAnim: false,
        strokeColorAnim: false,
        strokeWidthAnim: false,
        yOffset: 0,
        finalSize:0,
        finalText:[],
        finalLineHeight: 0,
        __complete: false

	};
    this.copyData(this.currentData, this.data.d.k[0].s);

    if(!this.searchProperty()) {
        this.completeTextData(this.currentData);
    }
}

TextProperty.prototype.defaultBoxWidth = [0,0];

TextProperty.prototype.copyData = function(obj, data) {
    for(var s in data) {
        if(data.hasOwnProperty(s)) {
            obj[s] = data[s];
        }
    }
    return obj;
}

TextProperty.prototype.setCurrentData = function(data){
    if(!data.__complete) {
        this.completeTextData(data);
    }
    this.currentData = data;
    this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
    this._mdf = true;
};

TextProperty.prototype.searchProperty = function() {
    return this.searchKeyframes();
};

TextProperty.prototype.searchKeyframes = function() {
    this.kf = this.data.d.k.length > 1;
    if(this.kf) {
        this.addEffect(this.getKeyframeValue.bind(this));
    }
    return this.kf;
}

TextProperty.prototype.addEffect = function(effectFunction) {
	this.effectsSequence.push(effectFunction);
    this.elem.addDynamicProperty(this);
};

TextProperty.prototype.getValue = function(_finalValue) {
    if((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
        return;
    }
    this.currentData.t = this.data.d.k[this.keysIndex].s.t;
    var currentValue = this.currentData;
    var currentIndex = this.keysIndex;
    if(this.lock) {
        this.setCurrentData(this.currentData);
        return;
    }
    this.lock = true;
    this._mdf = false;
    var multipliedValue;
    var i, len = this.effectsSequence.length;
    var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
    for(i = 0; i < len; i += 1) {
        //Checking if index changed to prevent creating a new object every time the expression updates.
        if(currentIndex !== this.keysIndex) {
            finalValue = this.effectsSequence[i](finalValue, finalValue.t);
        } else {
            finalValue = this.effectsSequence[i](this.currentData, finalValue.t);
        }
    }
    if(currentValue !== finalValue) {
        this.setCurrentData(finalValue);
    }
    this.pv = this.v = this.currentData;
    this.lock = false;
    this.frameId = this.elem.globalData.frameId;
}

TextProperty.prototype.getKeyframeValue = function() {
    var textKeys = this.data.d.k, textDocumentData;
    var frameNum = this.elem.comp.renderedFrame;
    var i = 0, len = textKeys.length;
    while(i <= len - 1) {
        textDocumentData = textKeys[i].s;
        if(i === len - 1 || textKeys[i+1].t > frameNum){
            break;
        }
        i += 1;
    }
    if(this.keysIndex !== i) {
        this.keysIndex = i;
    }
    return this.data.d.k[this.keysIndex].s;
};

TextProperty.prototype.buildFinalText = function(text) {
    var combinedCharacters = FontManager.getCombinedCharacterCodes();
    var charactersArray = [];
    var i = 0, len = text.length;
    while (i < len) {
        if (combinedCharacters.indexOf(text.charCodeAt(i)) !== -1) {
            charactersArray[charactersArray.length - 1] += text.charAt(i);
        } else {
            charactersArray.push(text.charAt(i));
        }
        i += 1;
    }
    return charactersArray;
}

TextProperty.prototype.completeTextData = function(documentData) {
    documentData.__complete = true;
    var fontManager = this.elem.globalData.fontManager;
    var data = this.data;
    var letters = [];
    var i, len;
    var newLineFlag, index = 0, val;
    var anchorGrouping = data.m.g;
    var currentSize = 0, currentPos = 0, currentLine = 0, lineWidths = [];
    var lineWidth = 0;
    var maxLineWidth = 0;
    var j, jLen;
    var fontData = fontManager.getFontByName(documentData.f);
    var charData, cLength = 0;
    var styles = fontData.fStyle ? fontData.fStyle.split(' ') : [];

    var fWeight = 'normal', fStyle = 'normal';
    len = styles.length;
    var styleName;
    for(i=0;i<len;i+=1){
        styleName = styles[i].toLowerCase();
        switch(styleName) {
            case 'italic':
            fStyle = 'italic';
            break;
            case 'bold':
            fWeight = '700';
            break;
            case 'black':
            fWeight = '900';
            break;
            case 'medium':
            fWeight = '500';
            break;
            case 'regular':
            case 'normal':
            fWeight = '400';
            break;
            case 'light':
            case 'thin':
            fWeight = '200';
            break;
        }
    }
    documentData.fWeight = fontData.fWeight || fWeight;
    documentData.fStyle = fStyle;
    len = documentData.t.length;
    documentData.finalSize = documentData.s;
    documentData.finalText = this.buildFinalText(documentData.t);
    documentData.finalLineHeight = documentData.lh;
    var trackingOffset = documentData.tr/1000*documentData.finalSize;
    var charCode;
    if(documentData.sz){
        var flag = true;
        var boxWidth = documentData.sz[0];
        var boxHeight = documentData.sz[1];
        var currentHeight, finalText;
        while(flag) {
            finalText = this.buildFinalText(documentData.t);
            currentHeight = 0;
            lineWidth = 0;
            len = finalText.length;
            trackingOffset = documentData.tr/1000*documentData.finalSize;
            var lastSpaceIndex = -1;
            for(i=0;i<len;i+=1){
                charCode = finalText[i].charCodeAt(0);
                newLineFlag = false;
                if(finalText[i] === ' '){
                    lastSpaceIndex = i;
                }else if(charCode === 13 || charCode === 3){
                    lineWidth = 0;
                    newLineFlag = true;
                    currentHeight += documentData.finalLineHeight || documentData.finalSize*1.2;
                }
                if(fontManager.chars){
                    charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
                    cLength = newLineFlag ? 0 : charData.w*documentData.finalSize/100;
                }else{
                    //tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
                    cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
                }
                if(lineWidth + cLength > boxWidth && finalText[i] !== ' '){
                    if(lastSpaceIndex === -1){
                        len += 1;
                    } else {
                        i = lastSpaceIndex;
                    }
                    currentHeight += documentData.finalLineHeight || documentData.finalSize*1.2;
                    finalText.splice(i, lastSpaceIndex === i ? 1 : 0,"\r");
                    //finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);
                    lastSpaceIndex = -1;
                    lineWidth = 0;
                }else {
                    lineWidth += cLength;
                    lineWidth += trackingOffset;
                }
            }
            currentHeight += fontData.ascent*documentData.finalSize/100;
            if(this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
                documentData.finalSize -= 1;
                documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
            } else {
                documentData.finalText = finalText;
                len = documentData.finalText.length;
                flag = false;
            }
        }

    }
    lineWidth = - trackingOffset;
    cLength = 0;
    var uncollapsedSpaces = 0;
    var currentChar;
    for (i = 0;i < len ;i += 1) {
        newLineFlag = false;
        currentChar = documentData.finalText[i];
        charCode = currentChar.charCodeAt(0);
        if (currentChar === ' '){
            val = '\u00A0';
        } else if (charCode === 13 || charCode === 3) {
            uncollapsedSpaces = 0;
            lineWidths.push(lineWidth);
            maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
            lineWidth = - 2 * trackingOffset;
            val = '';
            newLineFlag = true;
            currentLine += 1;
        }else{
            val = documentData.finalText[i];
        }
        if(fontManager.chars){
            charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
            cLength = newLineFlag ? 0 : charData.w*documentData.finalSize/100;
        }else{
            //var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
            //tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
            cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
        }

        //
        if(currentChar === ' '){
            uncollapsedSpaces += cLength + trackingOffset;
        } else {
            lineWidth += cLength + trackingOffset + uncollapsedSpaces;
            uncollapsedSpaces = 0;
        }
        letters.push({l:cLength,an:cLength,add:currentSize,n:newLineFlag, anIndexes:[], val: val, line: currentLine, animatorJustifyOffset: 0});
        if(anchorGrouping == 2){
            currentSize += cLength;
            if(val === '' || val === '\u00A0' || i === len - 1){
                if(val === '' || val === '\u00A0'){
                    currentSize -= cLength;
                }
                while(currentPos<=i){
                    letters[currentPos].an = currentSize;
                    letters[currentPos].ind = index;
                    letters[currentPos].extra = cLength;
                    currentPos += 1;
                }
                index += 1;
                currentSize = 0;
            }
        }else if(anchorGrouping == 3){
            currentSize += cLength;
            if(val === '' || i === len - 1){
                if(val === ''){
                    currentSize -= cLength;
                }
                while(currentPos<=i){
                    letters[currentPos].an = currentSize;
                    letters[currentPos].ind = index;
                    letters[currentPos].extra = cLength;
                    currentPos += 1;
                }
                currentSize = 0;
                index += 1;
            }
        }else{
            letters[index].ind = index;
            letters[index].extra = 0;
            index += 1;
        }
    }
    documentData.l = letters;
    maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
    lineWidths.push(lineWidth);
    if(documentData.sz){
        documentData.boxWidth = documentData.sz[0];
        documentData.justifyOffset = 0;
    }else{
        documentData.boxWidth = maxLineWidth;
        switch(documentData.j){
            case 1:
                documentData.justifyOffset = - documentData.boxWidth;
                break;
            case 2:
                documentData.justifyOffset = - documentData.boxWidth/2;
                break;
            default:
                documentData.justifyOffset = 0;
        }
    }
    documentData.lineWidths = lineWidths;

    var animators = data.a, animatorData, letterData;
    jLen = animators.length;
    var based, ind, indexes = [];
    for(j=0;j<jLen;j+=1){
        animatorData = animators[j];
        if(animatorData.a.sc){
            documentData.strokeColorAnim = true;
        }
        if(animatorData.a.sw){
            documentData.strokeWidthAnim = true;
        }
        if(animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb){
            documentData.fillColorAnim = true;
        }
        ind = 0;
        based = animatorData.s.b;
        for(i=0;i<len;i+=1){
            letterData = letters[i];
            letterData.anIndexes[j] = ind;
            if((based == 1 && letterData.val !== '') || (based == 2 && letterData.val !== '' && letterData.val !== '\u00A0') || (based == 3 && (letterData.n || letterData.val == '\u00A0' || i == len - 1)) || (based == 4 && (letterData.n || i == len - 1))){
                if(animatorData.s.rn === 1){
                    indexes.push(ind);
                }
                ind += 1;
            }
        }
        data.a[j].s.totalChars = ind;
        var currentInd = -1, newInd;
        if(animatorData.s.rn === 1){
            for(i = 0; i < len; i += 1){
                letterData = letters[i];
                if(currentInd != letterData.anIndexes[j]){
                    currentInd = letterData.anIndexes[j];
                    newInd = indexes.splice(Math.floor(Math.random()*indexes.length),1)[0];
                }
                letterData.anIndexes[j] = newInd;
            }
        }
    }
    documentData.yOffset = documentData.finalLineHeight || documentData.finalSize*1.2;
    documentData.ls = documentData.ls || 0;
    documentData.ascent = fontData.ascent*documentData.finalSize/100;
};

TextProperty.prototype.updateDocumentData = function(newData, index) {
	index = index === undefined ? this.keysIndex : index;
    var dData = this.copyData({}, this.data.d.k[index].s);
    dData = this.copyData(dData, newData);
    this.data.d.k[index].s = dData;
    this.recalculate(index);
    this.elem.addDynamicProperty(this);
};

TextProperty.prototype.recalculate = function(index) {
    var dData = this.data.d.k[index].s;
    dData.__complete = false;
    this.keysIndex = 0;
    this._isFirstFrame = true;
    this.getValue(dData);
}

TextProperty.prototype.canResizeFont = function(_canResize) {
    this.canResize = _canResize;
    this.recalculate(this.keysIndex);
    this.elem.addDynamicProperty(this);
};

TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
    this.minimumFontSize = Math.floor(_fontValue) || 1;
    this.recalculate(this.keysIndex);
    this.elem.addDynamicProperty(this);
};

var TextSelectorProp = (function(){
    var max = Math.max;
    var min = Math.min;
    var floor = Math.floor;

    function TextSelectorProp(elem,data){
        this._currentTextLength = -1;
        this.k = false;
        this.data = data;
        this.elem = elem;
        this.comp = elem.comp;
        this.finalS = 0;
        this.finalE = 0;
        this.initDynamicPropertyContainer(elem);
        this.s = PropertyFactory.getProp(elem,data.s || {k:0},0,0,this);
        if('e' in data){
            this.e = PropertyFactory.getProp(elem,data.e,0,0,this);
        }else{
            this.e = {v:100};
        }
        this.o = PropertyFactory.getProp(elem,data.o || {k:0},0,0,this);
        this.xe = PropertyFactory.getProp(elem,data.xe || {k:0},0,0,this);
        this.ne = PropertyFactory.getProp(elem,data.ne || {k:0},0,0,this);
        this.a = PropertyFactory.getProp(elem,data.a,0,0.01,this);
        if(!this.dynamicProperties.length){
            this.getValue();
        }
    }

    TextSelectorProp.prototype = {
        getMult: function(ind) {
            if(this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
                this.getValue();
            }
            //var easer = bez.getEasingCurve(this.ne.v/100,0,1-this.xe.v/100,1);
            var easer = BezierFactory.getBezierEasing(this.ne.v/100,0,1-this.xe.v/100,1).get;
            var mult = 0;
            var s = this.finalS;
            var e = this.finalE;
            var type = this.data.sh;
            if(type == 2){
                if(e === s){
                    mult = ind >= e ? 1 : 0;
                }else{
                    mult = max(0,min(0.5/(e-s) + (ind-s)/(e-s),1));
                }
                mult = easer(mult);
            }else if(type == 3){
                if(e === s){
                    mult = ind >= e ? 0 : 1;
                }else{
                    mult = 1 - max(0,min(0.5/(e-s) + (ind-s)/(e-s),1));
                }

                mult = easer(mult);
            }else if(type == 4){
                if(e === s){
                    mult = 0;
                }else{
                    mult = max(0,min(0.5/(e-s) + (ind-s)/(e-s),1));
                    if(mult<0.5){
                        mult *= 2;
                    }else{
                        mult = 1 - 2*(mult-0.5);
                    }
                }
                mult = easer(mult);
            }else if(type == 5){
                if(e === s){
                    mult = 0;
                }else{
                    var tot = e - s;
                    /*ind += 0.5;
                    mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind;*/
                    ind = min(max(0,ind+0.5-s),e-s);
                    var x = -tot/2+ind;
                    var a = tot/2;
                    mult = Math.sqrt(1 - (x*x)/(a*a));
                }
                mult = easer(mult);
            }else if(type == 6){
                if(e === s){
                    mult = 0;
                }else{
                    ind = min(max(0,ind+0.5-s),e-s);
                    mult = (1+(Math.cos((Math.PI+Math.PI*2*(ind)/(e-s)))))/2;
                    /*
                     ind = Math.min(Math.max(s,ind),e-1);
                     mult = (1+(Math.cos((Math.PI+Math.PI*2*(ind-s)/(e-1-s)))))/2;
                     mult = Math.max(mult,(1/(e-1-s))/(e-1-s));*/
                }
                mult = easer(mult);
            }else {
                if(ind >= floor(s)){
                    if(ind-s < 0){
                        mult = 1 - (s - ind);
                    }else{
                        mult = max(0,min(e-ind,1));
                    }
                }
                mult = easer(mult);
            }
            return mult*this.a.v;
        },
        getValue: function(newCharsFlag) {
            this.iterateDynamicProperties();
            this._mdf = newCharsFlag || this._mdf;
            this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
            if(newCharsFlag && this.data.r === 2) {
                this.e.v = this._currentTextLength;
            }
            var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
            var o = this.o.v/divisor;
            var s = this.s.v/divisor + o;
            var e = (this.e.v/divisor) + o;
            if(s>e){
                var _s = s;
                s = e;
                e = _s;
            }
            this.finalS = s;
            this.finalE = e;
        }
    }
    extendPrototype([DynamicPropertyContainer], TextSelectorProp);

    function getTextSelectorProp(elem, data,arr) {
        return new TextSelectorProp(elem, data, arr);
    }

    return {
        getTextSelectorProp: getTextSelectorProp
    };
}());

    
var pool_factory = (function() {
	return function(initialLength, _create, _release, _clone) {

		var _length = 0;
		var _maxLength = initialLength;
		var pool = createSizedArray(_maxLength);

		var ob = {
			newElement: newElement,
			release: release
		};

		function newElement(){
			var element;
			if(_length){
				_length -= 1;
				element = pool[_length];
			} else {
				element = _create();
			}
			return element;
		}

		function release(element) {
			if(_length === _maxLength) {
				pool = pooling.double(pool);
				_maxLength = _maxLength*2;
			}
			if (_release) {
				_release(element);
			}
			pool[_length] = element;
			_length += 1;
		}

		function clone() {
			var clonedElement = newElement();
			return _clone(clonedElement);
		}

		return ob;
	};
}());

var pooling = (function(){

	function double(arr){
		return arr.concat(createSizedArray(arr.length));
	}

	return {
		double: double
	};
}());
var point_pool = (function(){

	function create() {
		return createTypedArray('float32', 2);
	}
	return pool_factory(8, create);
}());
var shape_pool = (function(){

	function create() {
		return new ShapePath();
	}

	function release(shapePath) {
		var len = shapePath._length, i;
		for(i = 0; i < len; i += 1) {
			point_pool.release(shapePath.v[i]);
			point_pool.release(shapePath.i[i]);
			point_pool.release(shapePath.o[i]);
			shapePath.v[i] = null;
			shapePath.i[i] = null;
			shapePath.o[i] = null;
		}
		shapePath._length = 0;
		shapePath.c = false;
	}

	function clone(shape) {
		var cloned = factory.newElement();
		var i, len = shape._length === undefined ? shape.v.length : shape._length;
		cloned.setLength(len);
		cloned.c = shape.c;
		var pt;
		
		for(i = 0; i < len; i += 1) {
			cloned.setTripleAt(shape.v[i][0],shape.v[i][1],shape.o[i][0],shape.o[i][1],shape.i[i][0],shape.i[i][1], i);
		}
		return cloned;
	}

	var factory = pool_factory(4, create, release);
	factory.clone = clone;

	return factory;
}());
var shapeCollection_pool = (function(){
	var ob = {
		newShapeCollection: newShapeCollection,
		release: release
	};

	var _length = 0;
	var _maxLength = 4;
	var pool = createSizedArray(_maxLength);

	function newShapeCollection(){
		var shapeCollection;
		if(_length){
			_length -= 1;
			shapeCollection = pool[_length];
		} else {
			shapeCollection = new ShapeCollection();
		}
		return shapeCollection;
	}

	function release(shapeCollection) {
		var i, len = shapeCollection._length;
		for(i = 0; i < len; i += 1) {
			shape_pool.release(shapeCollection.shapes[i]);
		}
		shapeCollection._length = 0;

		if(_length === _maxLength) {
			pool = pooling.double(pool);
			_maxLength = _maxLength*2;
		}
		pool[_length] = shapeCollection;
		_length += 1;
	}

	return ob;
}());
var segments_length_pool = (function(){

	function create() {
		return {
			lengths: [],
			totalLength: 0
		};
	}

	function release(element) {
		var i, len = element.lengths.length;
		for(i=0;i<len;i+=1) {
			bezier_length_pool.release(element.lengths[i]);
		}
		element.lengths.length = 0;
	}

	return pool_factory(8, create, release);
}());
var bezier_length_pool = (function(){

	function create() {
		return {
            addedLength: 0,
            percents: createTypedArray('float32', defaultCurveSegments),
            lengths: createTypedArray('float32', defaultCurveSegments),
        };
	}
	return pool_factory(8, create);
}());
function BaseRenderer(){}
BaseRenderer.prototype.checkLayers = function(num){
    var i, len = this.layers.length, data;
    this.completeLayers = true;
    for (i = len - 1; i >= 0; i--) {
        if (!this.elements[i]) {
            data = this.layers[i];
            if(data.ip - data.st <= (num - this.layers[i].st) && data.op - data.st > (num - this.layers[i].st))
            {
                this.buildItem(i);
            }
        }
        this.completeLayers = this.elements[i] ? this.completeLayers:false;
    }
    this.checkPendingElements();
};

BaseRenderer.prototype.createItem = function(layer){
    switch(layer.ty){
        case 2:
            return this.createImage(layer);
        case 0:
            return this.createComp(layer);
        case 1:
            return this.createSolid(layer);
        case 3:
            return this.createNull(layer);
        case 4:
            return this.createShape(layer);
        case 5:
            return this.createText(layer);
        case 13:
            return this.createCamera(layer);
    }
    return this.createNull(layer);
};

BaseRenderer.prototype.createCamera = function(){
    throw new Error('You\'re using a 3d camera. Try the html renderer.');
};

BaseRenderer.prototype.buildAllItems = function(){
    var i, len = this.layers.length;
    for(i=0;i<len;i+=1){
        this.buildItem(i);
    }
    this.checkPendingElements();
};

BaseRenderer.prototype.includeLayers = function(newLayers){
    this.completeLayers = false;
    var i, len = newLayers.length;
    var j, jLen = this.layers.length;
    for(i=0;i<len;i+=1){
        j = 0;
        while(j<jLen){
            if(this.layers[j].id == newLayers[i].id){
                this.layers[j] = newLayers[i];
                break;
            }
            j += 1;
        }
    }
};

BaseRenderer.prototype.setProjectInterface = function(pInterface){
    this.globalData.projectInterface = pInterface;
};

BaseRenderer.prototype.initItems = function(){
    if(!this.globalData.progressiveLoad){
        this.buildAllItems();
    }
};
BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
    var elements = this.elements;
    var layers = this.layers;
    var i=0, len = layers.length;
    while (i < len) {
        if (layers[i].ind == parentName) {
            if (!elements[i] || elements[i] === true) {
                this.buildItem(i);
                this.addPendingElement(element);
            } else {
                hierarchy.push(elements[i]);
                elements[i].setAsParent();
                if(layers[i].parent !== undefined) {
                    this.buildElementParenting(element, layers[i].parent, hierarchy);
                } else {
                    element.setHierarchy(hierarchy);
                }
            }
        }
        i += 1;
    }
};

BaseRenderer.prototype.addPendingElement = function(element){
    this.pendingElements.push(element);
};

BaseRenderer.prototype.searchExtraCompositions = function(assets){
    var i, len = assets.length;
    for(i=0;i<len;i+=1){
        if(assets[i].xt){
            var comp = this.createComp(assets[i]);
            comp.initExpressions();
            this.globalData.projectInterface.registerComposition(comp);
        }
    }
};

BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
    this.globalData.fontManager = new FontManager();
    this.globalData.fontManager.addChars(animData.chars);
    this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
    this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
    this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
    this.globalData.imageLoader = this.animationItem.imagePreloader;
    this.globalData.frameId = 0;
    this.globalData.frameRate = animData.fr;
    this.globalData.nm = animData.nm;
    this.globalData.compSize = {
        w: animData.w,
        h: animData.h
    }
}
function SVGRenderer(animationItem, config){
    this.animationItem = animationItem;
    this.layers = null;
    this.renderedFrame = -1;
    this.svgElement = createNS('svg');
    var ariaLabel = '';
    if (config && config.title) {
        var titleElement = createNS('title');
        var titleId = createElementID();
        titleElement.setAttribute('id', titleId);
        titleElement.textContent = config.title;
        this.svgElement.appendChild(titleElement);
        ariaLabel += titleId;
    }
    if (config && config.description) {
        var descElement = createNS('desc');
        var descId = createElementID();
        descElement.setAttribute('id', descId);
        descElement.textContent = config.description;
        this.svgElement.appendChild(descElement);
        ariaLabel += ' ' + descId;
    }
    if (ariaLabel) {
        this.svgElement.setAttribute('aria-labelledby', ariaLabel)
    }
    var defs = createNS( 'defs');
    this.svgElement.appendChild(defs);
    var maskElement = createNS('g');
    this.svgElement.appendChild(maskElement);
    this.layerElement = maskElement;
    this.renderConfig = {
        preserveAspectRatio: (config && config.preserveAspectRatio) || 'xMidYMid meet',
        imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
        progressiveLoad: (config && config.progressiveLoad) || false,
        hideOnTransparent: (config && config.hideOnTransparent === false) ? false : true,
        viewBoxOnly: (config && config.viewBoxOnly) || false,
        viewBoxSize: (config && config.viewBoxSize) || false,
        className: (config && config.className) || ''
    };

    this.globalData = {
        _mdf: false,
        frameNum: -1,
        defs: defs,
        renderConfig: this.renderConfig
    };
    this.elements = [];
    this.pendingElements = [];
    this.destroyed = false;
    this.rendererType = 'svg';

}

extendPrototype([BaseRenderer],SVGRenderer);

SVGRenderer.prototype.createNull = function (data) {
    return new NullElement(data,this.globalData,this);
};

SVGRenderer.prototype.createShape = function (data) {
    return new SVGShapeElement(data,this.globalData,this);
};

SVGRenderer.prototype.createText = function (data) {
    return new SVGTextElement(data,this.globalData,this);

};

SVGRenderer.prototype.createImage = function (data) {
    return new IImageElement(data,this.globalData,this);
};

SVGRenderer.prototype.createComp = function (data) {
    return new SVGCompElement(data,this.globalData,this);

};

SVGRenderer.prototype.createSolid = function (data) {
    return new ISolidElement(data,this.globalData,this);
};

SVGRenderer.prototype.configAnimation = function(animData){
    this.svgElement.setAttribute('xmlns','http://www.w3.org/2000/svg');
    if(this.renderConfig.viewBoxSize) {
        this.svgElement.setAttribute('viewBox',this.renderConfig.viewBoxSize);
    } else {
        this.svgElement.setAttribute('viewBox','0 0 '+animData.w+' '+animData.h);
    }

    if(!this.renderConfig.viewBoxOnly) {
        this.svgElement.setAttribute('width',animData.w);
        this.svgElement.setAttribute('height',animData.h);
        this.svgElement.style.width = '100%';
        this.svgElement.style.height = '100%';
        this.svgElement.style.transform = 'translate3d(0,0,0)';
    }
    if(this.renderConfig.className) {
        this.svgElement.setAttribute('class', this.renderConfig.className);
    }
    this.svgElement.setAttribute('preserveAspectRatio',this.renderConfig.preserveAspectRatio);
    //this.layerElement.style.transform = 'translate3d(0,0,0)';
    //this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";
    this.animationItem.wrapper.appendChild(this.svgElement);
    //Mask animation
    var defs = this.globalData.defs;

    this.setupGlobalData(animData, defs);
    this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
    this.data = animData;

    var maskElement = createNS( 'clipPath');
    var rect = createNS('rect');
    rect.setAttribute('width',animData.w);
    rect.setAttribute('height',animData.h);
    rect.setAttribute('x',0);
    rect.setAttribute('y',0);
    var maskId = createElementID();
    maskElement.setAttribute('id', maskId);
    maskElement.appendChild(rect);
    this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#"+maskId+")");

    defs.appendChild(maskElement);
    this.layers = animData.layers;
    this.elements = createSizedArray(animData.layers.length);
};


SVGRenderer.prototype.destroy = function () {
    this.animationItem.wrapper.innerHTML = '';
    this.layerElement = null;
    this.globalData.defs = null;
    var i, len = this.layers ? this.layers.length : 0;
    for (i = 0; i < len; i++) {
        if(this.elements[i]){
            this.elements[i].destroy();
        }
    }
    this.elements.length = 0;
    this.destroyed = true;
    this.animationItem = null;
};

SVGRenderer.prototype.updateContainerSize = function () {
};

SVGRenderer.prototype.buildItem  = function(pos){
    var elements = this.elements;
    if(elements[pos] || this.layers[pos].ty == 99){
        return;
    }
    elements[pos] = true;
    var element = this.createItem(this.layers[pos]);

    elements[pos] = element;
    if(expressionsPlugin){
        if(this.layers[pos].ty === 0){
            this.globalData.projectInterface.registerComposition(element);
        }
        element.initExpressions();
    }
    this.appendElementInPos(element,pos);
    if(this.layers[pos].tt){
        if(!this.elements[pos - 1] || this.elements[pos - 1] === true){
            this.buildItem(pos - 1);
            this.addPendingElement(element);
        } else {
            element.setMatte(elements[pos - 1].layerId);
        }
    }
};

SVGRenderer.prototype.checkPendingElements  = function(){
    while(this.pendingElements.length){
        var element = this.pendingElements.pop();
        element.checkParenting();
        if(element.data.tt){
            var i = 0, len = this.elements.length;
            while(i<len){
                if(this.elements[i] === element){
                    element.setMatte(this.elements[i - 1].layerId);
                    break;
                }
                i += 1;
            }
        }
    }
};

SVGRenderer.prototype.renderFrame = function(num){
    if(this.renderedFrame === num || this.destroyed){
        return;
    }
    if(num === null){
        num = this.renderedFrame;
    }else{
        this.renderedFrame = num;
    }
    // console.log('-------');
    // console.log('FRAME ',num);
    this.globalData.frameNum = num;
    this.globalData.frameId += 1;
    this.globalData.projectInterface.currentFrame = num;
    this.globalData._mdf = false;
    var i, len = this.layers.length;
    if(!this.completeLayers){
        this.checkLayers(num);
    }
    for (i = len - 1; i >= 0; i--) {
        if(this.completeLayers || this.elements[i]){
            this.elements[i].prepareFrame(num - this.layers[i].st);
        }
    }
    if(this.globalData._mdf) {
        for (i = 0; i < len; i += 1) {
            if(this.completeLayers || this.elements[i]){
                this.elements[i].renderFrame();
            }
        }
    }
};

SVGRenderer.prototype.appendElementInPos = function(element, pos){
    var newElement = element.getBaseElement();
    if(!newElement){
        return;
    }
    var i = 0;
    var nextElement;
    while(i<pos){
        if(this.elements[i] && this.elements[i]!== true && this.elements[i].getBaseElement()){
            nextElement = this.elements[i].getBaseElement();
        }
        i += 1;
    }
    if(nextElement){
        this.layerElement.insertBefore(newElement, nextElement);
    } else {
        this.layerElement.appendChild(newElement);
    }
};

SVGRenderer.prototype.hide = function(){
    this.layerElement.style.display = 'none';
};

SVGRenderer.prototype.show = function(){
    this.layerElement.style.display = 'block';
};

function CanvasRenderer(animationItem, config){
    this.animationItem = animationItem;
    this.renderConfig = {
        clearCanvas: (config && config.clearCanvas !== undefined) ? config.clearCanvas : true,
        context: (config && config.context) || null,
        progressiveLoad: (config && config.progressiveLoad) || false,
        preserveAspectRatio: (config && config.preserveAspectRatio) || 'xMidYMid meet',
        imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
        className: (config && config.className) || ''
    };
    this.renderConfig.dpr = (config && config.dpr) || 1;
    if (this.animationItem.wrapper) {
        this.renderConfig.dpr = (config && config.dpr) || window.devicePixelRatio || 1;
    }
    this.renderedFrame = -1;
    this.globalData = {
        frameNum: -1,
        _mdf: false,
        renderConfig: this.renderConfig,
        currentGlobalAlpha: -1
    };
    this.contextData = new CVContextData();
    this.elements = [];
    this.pendingElements = [];
    this.transformMat = new Matrix();
    this.completeLayers = false;
    this.rendererType = 'canvas';
}
extendPrototype([BaseRenderer],CanvasRenderer);

CanvasRenderer.prototype.createShape = function (data) {
    return new CVShapeElement(data, this.globalData, this);
};

CanvasRenderer.prototype.createText = function (data) {
    return new CVTextElement(data, this.globalData, this);
};

CanvasRenderer.prototype.createImage = function (data) {
    return new CVImageElement(data, this.globalData, this);
};

CanvasRenderer.prototype.createComp = function (data) {
    return new CVCompElement(data, this.globalData, this);
};

CanvasRenderer.prototype.createSolid = function (data) {
    return new CVSolidElement(data, this.globalData, this);
};

CanvasRenderer.prototype.createNull = SVGRenderer.prototype.createNull;

CanvasRenderer.prototype.ctxTransform = function(props){
    if(props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0){
        return;
    }
    if(!this.renderConfig.clearCanvas){
        this.canvasContext.transform(props[0],props[1],props[4],props[5],props[12],props[13]);
        return;
    }
    this.transformMat.cloneFromProps(props);
    var cProps = this.contextData.cTr.props;
    this.transformMat.transform(cProps[0],cProps[1],cProps[2],cProps[3],cProps[4],cProps[5],cProps[6],cProps[7],cProps[8],cProps[9],cProps[10],cProps[11],cProps[12],cProps[13],cProps[14],cProps[15]);
    //this.contextData.cTr.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
    this.contextData.cTr.cloneFromProps(this.transformMat.props);
    var trProps = this.contextData.cTr.props;
    this.canvasContext.setTransform(trProps[0],trProps[1],trProps[4],trProps[5],trProps[12],trProps[13]);
};

CanvasRenderer.prototype.ctxOpacity = function(op){
    /*if(op === 1){
        return;
    }*/
    if(!this.renderConfig.clearCanvas){
        this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
        this.globalData.currentGlobalAlpha = this.contextData.cO;
        return;
    }
    this.contextData.cO *= op < 0 ? 0 : op;
    if(this.globalData.currentGlobalAlpha !== this.contextData.cO) {
        this.canvasContext.globalAlpha = this.contextData.cO;
        this.globalData.currentGlobalAlpha = this.contextData.cO;
    }
};

CanvasRenderer.prototype.reset = function(){
    if(!this.renderConfig.clearCanvas){
        this.canvasContext.restore();
        return;
    }
    this.contextData.reset();
};

CanvasRenderer.prototype.save = function(actionFlag){
    if(!this.renderConfig.clearCanvas){
        this.canvasContext.save();
        return;
    }
    if(actionFlag){
        this.canvasContext.save();
    }
    var props = this.contextData.cTr.props;
    if(this.contextData._length <= this.contextData.cArrPos) {
        this.contextData.duplicate();
    }
    var i, arr = this.contextData.saved[this.contextData.cArrPos];
    for (i = 0; i < 16; i += 1) {
        arr[i] = props[i];
    }
    this.contextData.savedOp[this.contextData.cArrPos] = this.contextData.cO;
    this.contextData.cArrPos += 1;
};

CanvasRenderer.prototype.restore = function(actionFlag){
    if(!this.renderConfig.clearCanvas){
        this.canvasContext.restore();
        return;
    }
    if(actionFlag){
        this.canvasContext.restore();
        this.globalData.blendMode = 'source-over';
    }
    this.contextData.cArrPos -= 1;
    var popped = this.contextData.saved[this.contextData.cArrPos];
    var i,arr = this.contextData.cTr.props;
    for(i=0;i<16;i+=1){
        arr[i] = popped[i];
    }
    this.canvasContext.setTransform(popped[0],popped[1],popped[4],popped[5],popped[12],popped[13]);
    popped = this.contextData.savedOp[this.contextData.cArrPos];
    this.contextData.cO = popped;
    if(this.globalData.currentGlobalAlpha !== popped) {
        this.canvasContext.globalAlpha = popped;
        this.globalData.currentGlobalAlpha = popped;
    }
};

CanvasRenderer.prototype.configAnimation = function(animData){
    if(this.animationItem.wrapper){
        this.animationItem.container = createTag('canvas');
        this.animationItem.container.style.width = '100%';
        this.animationItem.container.style.height = '100%';
        //this.animationItem.container.style.transform = 'translate3d(0,0,0)';
        //this.animationItem.container.style.webkitTransform = 'translate3d(0,0,0)';
        this.animationItem.container.style.transformOrigin = this.animationItem.container.style.mozTransformOrigin = this.animationItem.container.style.webkitTransformOrigin = this.animationItem.container.style['-webkit-transform'] = "0px 0px 0px";
        this.animationItem.wrapper.appendChild(this.animationItem.container);
        this.canvasContext = this.animationItem.container.getContext('2d');
        if(this.renderConfig.className) {
            this.animationItem.container.setAttribute('class', this.renderConfig.className);
        }
    }else{
        this.canvasContext = this.renderConfig.context;
    }
    this.data = animData;
    this.layers = animData.layers;
    this.transformCanvas = {
        w: animData.w,
        h:animData.h,
        sx:0,
        sy:0,
        tx:0,
        ty:0
    };
    this.setupGlobalData(animData, document.body);
    this.globalData.canvasContext = this.canvasContext;
    this.globalData.renderer = this;
    this.globalData.isDashed = false;
    this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
    this.globalData.transformCanvas = this.transformCanvas;
    this.elements = createSizedArray(animData.layers.length);

    this.updateContainerSize();
};

CanvasRenderer.prototype.updateContainerSize = function () {
    this.reset();
    var elementWidth,elementHeight;
    if(this.animationItem.wrapper && this.animationItem.container){
        elementWidth = this.animationItem.wrapper.offsetWidth;
        elementHeight = this.animationItem.wrapper.offsetHeight;
        this.animationItem.container.setAttribute('width',elementWidth * this.renderConfig.dpr );
        this.animationItem.container.setAttribute('height',elementHeight * this.renderConfig.dpr);
    }else{
        elementWidth = this.canvasContext.canvas.width * this.renderConfig.dpr;
        elementHeight = this.canvasContext.canvas.height * this.renderConfig.dpr;
    }
    var elementRel,animationRel;
    if(this.renderConfig.preserveAspectRatio.indexOf('meet') !== -1 || this.renderConfig.preserveAspectRatio.indexOf('slice') !== -1){
        var par = this.renderConfig.preserveAspectRatio.split(' ');
        var fillType = par[1] || 'meet';
        var pos = par[0] || 'xMidYMid';
        var xPos = pos.substr(0,4);
        var yPos = pos.substr(4);
        elementRel = elementWidth/elementHeight;
        animationRel = this.transformCanvas.w/this.transformCanvas.h;
        if(animationRel>elementRel && fillType === 'meet' || animationRel<elementRel && fillType === 'slice'){
            this.transformCanvas.sx = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
            this.transformCanvas.sy = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
        }else{
            this.transformCanvas.sx = elementHeight/(this.transformCanvas.h / this.renderConfig.dpr);
            this.transformCanvas.sy = elementHeight/(this.transformCanvas.h / this.renderConfig.dpr);
        }

        if(xPos === 'xMid' && ((animationRel<elementRel && fillType==='meet') || (animationRel>elementRel && fillType === 'slice'))){
            this.transformCanvas.tx = (elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))/2*this.renderConfig.dpr;
        } else if(xPos === 'xMax' && ((animationRel<elementRel && fillType==='meet') || (animationRel>elementRel && fillType === 'slice'))){
            this.transformCanvas.tx = (elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))*this.renderConfig.dpr;
        } else {
            this.transformCanvas.tx = 0;
        }
        if(yPos === 'YMid' && ((animationRel>elementRel && fillType==='meet') || (animationRel<elementRel && fillType === 'slice'))){
            this.transformCanvas.ty = ((elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))/2)*this.renderConfig.dpr;
        } else if(yPos === 'YMax' && ((animationRel>elementRel && fillType==='meet') || (animationRel<elementRel && fillType === 'slice'))){
            this.transformCanvas.ty = ((elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w)))*this.renderConfig.dpr;
        } else {
            this.transformCanvas.ty = 0;
        }

    }else if(this.renderConfig.preserveAspectRatio == 'none'){
        this.transformCanvas.sx = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
        this.transformCanvas.sy = elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);
        this.transformCanvas.tx = 0;
        this.transformCanvas.ty = 0;
    }else{
        this.transformCanvas.sx = this.renderConfig.dpr;
        this.transformCanvas.sy = this.renderConfig.dpr;
        this.transformCanvas.tx = 0;
        this.transformCanvas.ty = 0;
    }
    this.transformCanvas.props = [this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1];
    /*var i, len = this.elements.length;
    for(i=0;i<len;i+=1){
        if(this.elements[i] && this.elements[i].data.ty === 0){
            this.elements[i].resize(this.globalData.transformCanvas);
        }
    }*/
    this.ctxTransform(this.transformCanvas.props);
    this.canvasContext.beginPath();
    this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h);
    this.canvasContext.closePath();
    this.canvasContext.clip();

    this.renderFrame(this.renderedFrame, true);
};

CanvasRenderer.prototype.destroy = function () {
    if(this.renderConfig.clearCanvas) {
        this.animationItem.wrapper.innerHTML = '';
    }
    var i, len = this.layers ? this.layers.length : 0;
    for (i = len - 1; i >= 0; i-=1) {
        if(this.elements[i]) {
            this.elements[i].destroy();
        }
    }
    this.elements.length = 0;
    this.globalData.canvasContext = null;
    this.animationItem.container = null;
    this.destroyed = true;
};

CanvasRenderer.prototype.renderFrame = function(num, forceRender){
    if((this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender) || this.destroyed || num === -1){
        return;
    }
    this.renderedFrame = num;
    this.globalData.frameNum = num - this.animationItem._isFirstFrame;
    this.globalData.frameId += 1;
    this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
    this.globalData.projectInterface.currentFrame = num;

     // console.log('--------');
     // console.log('NEW: ',num);
    var i, len = this.layers.length;
    if(!this.completeLayers){
        this.checkLayers(num);
    }

    for (i = 0; i < len; i++) {
        if(this.completeLayers || this.elements[i]){
            this.elements[i].prepareFrame(num - this.layers[i].st);
        }
    }
    if(this.globalData._mdf) {
        if(this.renderConfig.clearCanvas === true){
            this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
        }else{
            this.save();
        }
        for (i = len - 1; i >= 0; i-=1) {
            if(this.completeLayers || this.elements[i]){
                this.elements[i].renderFrame();
            }
        }
        if(this.renderConfig.clearCanvas !== true){
            this.restore();
        }
    }
};

CanvasRenderer.prototype.buildItem = function(pos){
    var elements = this.elements;
    if(elements[pos] || this.layers[pos].ty == 99){
        return;
    }
    var element = this.createItem(this.layers[pos], this,this.globalData);
    elements[pos] = element;
    element.initExpressions();
    /*if(this.layers[pos].ty === 0){
        element.resize(this.globalData.transformCanvas);
    }*/
};

CanvasRenderer.prototype.checkPendingElements  = function(){
    while(this.pendingElements.length){
        var element = this.pendingElements.pop();
        element.checkParenting();
    }
};

CanvasRenderer.prototype.hide = function(){
    this.animationItem.container.style.display = 'none';
};

CanvasRenderer.prototype.show = function(){
    this.animationItem.container.style.display = 'block';
};

function HybridRenderer(animationItem, config){
    this.animationItem = animationItem;
    this.layers = null;
    this.renderedFrame = -1;
    this.renderConfig = {
        className: (config && config.className) || '',
        imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
        hideOnTransparent: (config && config.hideOnTransparent === false) ? false : true
    };
    this.globalData = {
        _mdf: false,
        frameNum: -1,
        renderConfig: this.renderConfig
    };
    this.pendingElements = [];
    this.elements = [];
    this.threeDElements = [];
    this.destroyed = false;
    this.camera = null;
    this.supports3d = true;
    this.rendererType = 'html';

}

extendPrototype([BaseRenderer],HybridRenderer);

HybridRenderer.prototype.buildItem = SVGRenderer.prototype.buildItem;

HybridRenderer.prototype.checkPendingElements  = function(){
    while(this.pendingElements.length){
        var element = this.pendingElements.pop();
        element.checkParenting();
    }
};

HybridRenderer.prototype.appendElementInPos = function(element, pos){
    var newDOMElement = element.getBaseElement();
    if(!newDOMElement){
        return;
    }
    var layer = this.layers[pos];
    if(!layer.ddd || !this.supports3d){
        if(this.threeDElements) {
            this.addTo3dContainer(newDOMElement,pos);
        } else {
            var i = 0;
            var nextDOMElement, nextLayer, tmpDOMElement;
            while(i<pos){
                if(this.elements[i] && this.elements[i]!== true && this.elements[i].getBaseElement){
                    nextLayer = this.elements[i];
                    tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();
                    nextDOMElement = tmpDOMElement || nextDOMElement;
                }
                i += 1;
            }
            if(nextDOMElement){
                if(!layer.ddd || !this.supports3d){
                    this.layerElement.insertBefore(newDOMElement, nextDOMElement);
                }
            } else {
                if(!layer.ddd || !this.supports3d){
                    this.layerElement.appendChild(newDOMElement);
                }
            }
        }
        
    } else {
        this.addTo3dContainer(newDOMElement,pos);
    }
};

HybridRenderer.prototype.createShape = function (data) {
    if(!this.supports3d){
        return new SVGShapeElement(data, this.globalData, this);
    }
    return new HShapeElement(data, this.globalData, this);
};

HybridRenderer.prototype.createText = function (data) {
    if(!this.supports3d){
        return new SVGTextElement(data, this.globalData, this);
    }
    return new HTextElement(data, this.globalData, this);
};

HybridRenderer.prototype.createCamera = function (data) {
    this.camera = new HCameraElement(data, this.globalData, this);
    return this.camera;
};

HybridRenderer.prototype.createImage = function (data) {
    if(!this.supports3d){
        return new IImageElement(data, this.globalData, this);
    }
    return new HImageElement(data, this.globalData, this);
};

HybridRenderer.prototype.createComp = function (data) {
    if(!this.supports3d){
        return new SVGCompElement(data, this.globalData, this);
    }
    return new HCompElement(data, this.globalData, this);

};

HybridRenderer.prototype.createSolid = function (data) {
    if(!this.supports3d){
        return new ISolidElement(data, this.globalData, this);
    }
    return new HSolidElement(data, this.globalData, this);
};

HybridRenderer.prototype.createNull = SVGRenderer.prototype.createNull;

HybridRenderer.prototype.getThreeDContainerByPos = function(pos){
    var i = 0, len = this.threeDElements.length;
    while(i<len) {
        if(this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {
            return this.threeDElements[i].perspectiveElem;
        }
        i += 1;
    }
};

HybridRenderer.prototype.createThreeDContainer = function(pos, type){
    var perspectiveElem = createTag('div');
    styleDiv(perspectiveElem);
    var container = createTag('div');
    styleDiv(container);
    if(type === '3d') {
        perspectiveElem.style.width = this.globalData.compSize.w+'px';
        perspectiveElem.style.height = this.globalData.compSize.h+'px';
        perspectiveElem.style.transformOrigin = perspectiveElem.style.mozTransformOrigin = perspectiveElem.style.webkitTransformOrigin = "50% 50%";
        container.style.transform = container.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
    }
    
    perspectiveElem.appendChild(container);
    //this.resizerElem.appendChild(perspectiveElem);
    var threeDContainerData = {
        container:container,
        perspectiveElem:perspectiveElem,
        startPos: pos,
        endPos: pos,
        type: type
    };
    this.threeDElements.push(threeDContainerData);
    return threeDContainerData;
};

HybridRenderer.prototype.build3dContainers = function(){
    var i, len = this.layers.length;
    var lastThreeDContainerData;
    var currentContainer = '';
    for(i=0;i<len;i+=1){
        if(this.layers[i].ddd && this.layers[i].ty !== 3){
            if(currentContainer !== '3d'){
                currentContainer = '3d';
                lastThreeDContainerData = this.createThreeDContainer(i,'3d');
            }
            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos,i);
        } else {
            if(currentContainer !== '2d'){
                currentContainer = '2d';
                lastThreeDContainerData = this.createThreeDContainer(i,'2d');
            }
            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos,i);
        }
    }
    len = this.threeDElements.length;
    for(i = len - 1; i >= 0; i --) {
        this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);
    }
};

HybridRenderer.prototype.addTo3dContainer = function(elem,pos){
    var i = 0, len = this.threeDElements.length;
    while(i<len){
        if(pos <= this.threeDElements[i].endPos){
            var j = this.threeDElements[i].startPos;
            var nextElement;
            while(j<pos){
                if(this.elements[j] && this.elements[j].getBaseElement){
                    nextElement = this.elements[j].getBaseElement();
                }
                j += 1;
            }
            if(nextElement){
                this.threeDElements[i].container.insertBefore(elem, nextElement);
            } else {
                this.threeDElements[i].container.appendChild(elem);
            }
            break;
        }
        i += 1;
    }
};

HybridRenderer.prototype.configAnimation = function(animData){
    var resizerElem = createTag('div');
    var wrapper = this.animationItem.wrapper;
    resizerElem.style.width = animData.w+'px';
    resizerElem.style.height = animData.h+'px';
    this.resizerElem = resizerElem;
    styleDiv(resizerElem);
    resizerElem.style.transformStyle = resizerElem.style.webkitTransformStyle = resizerElem.style.mozTransformStyle = "flat";
    if(this.renderConfig.className) {
      resizerElem.setAttribute('class', this.renderConfig.className);
    }
    wrapper.appendChild(resizerElem);

    resizerElem.style.overflow = 'hidden';
    var svg = createNS('svg');
    svg.setAttribute('width','1');
    svg.setAttribute('height','1');
    styleDiv(svg);
    this.resizerElem.appendChild(svg);
    var defs = createNS('defs');
    svg.appendChild(defs);
    this.data = animData;
    //Mask animation
    this.setupGlobalData(animData, svg);
    this.globalData.defs = defs;
    this.layers = animData.layers;
    this.layerElement = this.resizerElem;
    this.build3dContainers();
    this.updateContainerSize();
};

HybridRenderer.prototype.destroy = function () {
    this.animationItem.wrapper.innerHTML = '';
    this.animationItem.container = null;
    this.globalData.defs = null;
    var i, len = this.layers ? this.layers.length : 0;
    for (i = 0; i < len; i++) {
        this.elements[i].destroy();
    }
    this.elements.length = 0;
    this.destroyed = true;
    this.animationItem = null;
};

HybridRenderer.prototype.updateContainerSize = function () {
    var elementWidth = this.animationItem.wrapper.offsetWidth;
    var elementHeight = this.animationItem.wrapper.offsetHeight;
    var elementRel = elementWidth/elementHeight;
    var animationRel = this.globalData.compSize.w/this.globalData.compSize.h;
    var sx,sy,tx,ty;
    if(animationRel>elementRel){
        sx = elementWidth/(this.globalData.compSize.w);
        sy = elementWidth/(this.globalData.compSize.w);
        tx = 0;
        ty = ((elementHeight-this.globalData.compSize.h*(elementWidth/this.globalData.compSize.w))/2);
    }else{
        sx = elementHeight/(this.globalData.compSize.h);
        sy = elementHeight/(this.globalData.compSize.h);
        tx = (elementWidth-this.globalData.compSize.w*(elementHeight/this.globalData.compSize.h))/2;
        ty = 0;
    }
    this.resizerElem.style.transform = this.resizerElem.style.webkitTransform = 'matrix3d(' + sx + ',0,0,0,0,'+sy+',0,0,0,0,1,0,'+tx+','+ty+',0,1)';
};

HybridRenderer.prototype.renderFrame = SVGRenderer.prototype.renderFrame;

HybridRenderer.prototype.hide = function(){
    this.resizerElem.style.display = 'none';
};

HybridRenderer.prototype.show = function(){
    this.resizerElem.style.display = 'block';
};

HybridRenderer.prototype.initItems = function(){
    this.buildAllItems();
    if(this.camera){
        this.camera.setup();
    } else {
        var cWidth = this.globalData.compSize.w;
        var cHeight = this.globalData.compSize.h;
        var i, len = this.threeDElements.length;
        for(i=0;i<len;i+=1){
            this.threeDElements[i].perspectiveElem.style.perspective = this.threeDElements[i].perspectiveElem.style.webkitPerspective = Math.sqrt(Math.pow(cWidth,2) + Math.pow(cHeight,2)) + 'px';
        }
    }
};

HybridRenderer.prototype.searchExtraCompositions = function(assets){
    var i, len = assets.length;
    var floatingContainer = createTag('div');
    for(i=0;i<len;i+=1){
        if(assets[i].xt){
            var comp = this.createComp(assets[i],floatingContainer,this.globalData.comp,null);
            comp.initExpressions();
            this.globalData.projectInterface.registerComposition(comp);
        }
    }
};

function MaskElement(data,element,globalData) {
    this.data = data;
    this.element = element;
    this.globalData = globalData;
    this.storedData = [];
    this.masksProperties = this.data.masksProperties || [];
    this.maskElement = null;
    var defs = this.globalData.defs;
    var i, len = this.masksProperties ? this.masksProperties.length : 0;
    this.viewData = createSizedArray(len);
    this.solidPath = '';


    var path, properties = this.masksProperties;
    var count = 0;
    var currentMasks = [];
    var j, jLen;
    var layerId = createElementID();
    var rect, expansor, feMorph,x;
    var maskType = 'clipPath', maskRef = 'clip-path';
    for (i = 0; i < len; i++) {

        if((properties[i].mode !== 'a' && properties[i].mode !== 'n')|| properties[i].inv || properties[i].o.k !== 100){
            maskType = 'mask';
            maskRef = 'mask';
        }

        if((properties[i].mode == 's' || properties[i].mode == 'i') && count === 0){
            rect = createNS( 'rect');
            rect.setAttribute('fill', '#ffffff');
            rect.setAttribute('width', this.element.comp.data.w || 0);
            rect.setAttribute('height', this.element.comp.data.h || 0);
            currentMasks.push(rect);
        } else {
            rect = null;
        }

        path = createNS( 'path');
        if(properties[i].mode == 'n') {
            // TODO move this to a factory or to a constructor
            this.viewData[i] = {
                op: PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),
                prop: ShapePropertyFactory.getShapeProp(this.element,properties[i],3),
                elem: path,
                lastPath: ''
            };
            defs.appendChild(path);
            continue;
        }
        count += 1;

        path.setAttribute('fill', properties[i].mode === 's' ? '#000000':'#ffffff');
        path.setAttribute('clip-rule','nonzero');
        var filterID;

        if (properties[i].x.k !== 0) {
            maskType = 'mask';
            maskRef = 'mask';
            x = PropertyFactory.getProp(this.element,properties[i].x,0,null,this.element);
            filterID = createElementID();
            expansor = createNS('filter');
            expansor.setAttribute('id',filterID);
            feMorph = createNS('feMorphology');
            feMorph.setAttribute('operator','erode');
            feMorph.setAttribute('in','SourceGraphic');
            feMorph.setAttribute('radius','0');
            expansor.appendChild(feMorph);
            defs.appendChild(expansor);
            path.setAttribute('stroke', properties[i].mode === 's' ? '#000000':'#ffffff');
        } else {
            feMorph = null;
            x = null;
        }

        // TODO move this to a factory or to a constructor
        this.storedData[i] = {
             elem: path,
             x: x,
             expan: feMorph,
            lastPath: '',
            lastOperator:'',
            filterId:filterID,
            lastRadius:0
        };
        if(properties[i].mode == 'i'){
            jLen = currentMasks.length;
            var g = createNS('g');
            for(j=0;j<jLen;j+=1){
                g.appendChild(currentMasks[j]);
            }
            var mask = createNS('mask');
            mask.setAttribute('mask-type','alpha');
            mask.setAttribute('id',layerId+'_'+count);
            mask.appendChild(path);
            defs.appendChild(mask);
            g.setAttribute('mask','url(' + locationHref + '#'+layerId+'_'+count+')');

            currentMasks.length = 0;
            currentMasks.push(g);
        }else{
            currentMasks.push(path);
        }
        if(properties[i].inv && !this.solidPath){
            this.solidPath = this.createLayerSolidPath();
        }
        // TODO move this to a factory or to a constructor
        this.viewData[i] = {
            elem: path,
            lastPath: '',
            op: PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),
            prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),
            invRect: rect
        };
        if(!this.viewData[i].prop.k){
            this.drawPath(properties[i],this.viewData[i].prop.v,this.viewData[i]);
        }
    }

    this.maskElement = createNS( maskType);

    len = currentMasks.length;
    for(i=0;i<len;i+=1){
        this.maskElement.appendChild(currentMasks[i]);
    }

    if(count > 0){
        this.maskElement.setAttribute('id', layerId);
        this.element.maskedElement.setAttribute(maskRef, "url(" + locationHref + "#" + layerId + ")");
        defs.appendChild(this.maskElement);
    }
    if (this.viewData.length) {
        this.element.addRenderableComponent(this);
    }

}

MaskElement.prototype.getMaskProperty = function(pos){
    return this.viewData[pos].prop;
};

MaskElement.prototype.renderFrame = function (isFirstFrame) {
    var finalMat = this.element.finalTransform.mat;
    var i, len = this.masksProperties.length;
    for (i = 0; i < len; i++) {
        if(this.viewData[i].prop._mdf || isFirstFrame){
            this.drawPath(this.masksProperties[i],this.viewData[i].prop.v,this.viewData[i]);
        }
        if(this.viewData[i].op._mdf || isFirstFrame){
            this.viewData[i].elem.setAttribute('fill-opacity',this.viewData[i].op.v);
        }
        if(this.masksProperties[i].mode !== 'n'){
            if(this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)){
                this.viewData[i].invRect.setAttribute('x', -finalMat.props[12]);
                this.viewData[i].invRect.setAttribute('y', -finalMat.props[13]);
            }
            if(this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)){
                var feMorph = this.storedData[i].expan;
                if(this.storedData[i].x.v < 0){
                    if(this.storedData[i].lastOperator !== 'erode'){
                        this.storedData[i].lastOperator = 'erode';
                        this.storedData[i].elem.setAttribute('filter','url(' + locationHref + '#'+this.storedData[i].filterId+')');
                    }
                    feMorph.setAttribute('radius',-this.storedData[i].x.v);
                }else{
                    if(this.storedData[i].lastOperator !== 'dilate'){
                        this.storedData[i].lastOperator = 'dilate';
                        this.storedData[i].elem.setAttribute('filter',null);
                    }
                    this.storedData[i].elem.setAttribute('stroke-width', this.storedData[i].x.v*2);

                }
            }
        }
    }
};

MaskElement.prototype.getMaskelement = function () {
    return this.maskElement;
};

MaskElement.prototype.createLayerSolidPath = function(){
    var path = 'M0,0 ';
    path += ' h' + this.globalData.compSize.w ;
    path += ' v' + this.globalData.compSize.h ;
    path += ' h-' + this.globalData.compSize.w ;
    path += ' v-' + this.globalData.compSize.h + ' ';
    return path;
};

MaskElement.prototype.drawPath = function(pathData,pathNodes,viewData){
    var pathString = " M"+pathNodes.v[0][0]+','+pathNodes.v[0][1];
    var i, len;
    len = pathNodes._length;
    for(i=1;i<len;i+=1){
        //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
        pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
    }
        //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
    if(pathNodes.c && len > 1){
        pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
    }
    //pathNodes.__renderedString = pathString;

    if(viewData.lastPath !== pathString){
        var pathShapeValue = '';
        if(viewData.elem){
            if(pathNodes.c){
                pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
            }
            viewData.elem.setAttribute('d',pathShapeValue);
        }
        viewData.lastPath = pathString;
    }
};

MaskElement.prototype.destroy = function(){
    this.element = null;
    this.globalData = null;
    this.maskElement = null;
    this.data = null;
    this.masksProperties = null;
};

/**
 * @file 
 * Handles AE's layer parenting property.
 *
 */

function HierarchyElement(){}

HierarchyElement.prototype = {
	/**
     * @function 
     * Initializes hierarchy properties
     *
     */
	initHierarchy: function() {
		//element's parent list
	    this.hierarchy = [];
	    //if element is parent of another layer _isParent will be true
	    this._isParent = false;
	    this.checkParenting();
	},
	/**
     * @function 
     * Sets layer's hierarchy.
     * @param {array} hierarch
     * layer's parent list
     *
     */ 
	setHierarchy: function(hierarchy){
	    this.hierarchy = hierarchy;
	},
	/**
     * @function 
     * Sets layer as parent.
     *
     */ 
	setAsParent: function() {
	    this._isParent = true;
	},
	/**
     * @function 
     * Searches layer's parenting chain
     *
     */ 
	checkParenting: function(){
	    if (this.data.parent !== undefined){
	        this.comp.buildElementParenting(this, this.data.parent, []);
	    }
	}
};
/**
 * @file 
 * Handles element's layer frame update.
 * Checks layer in point and out point
 *
 */

function FrameElement(){}

FrameElement.prototype = {
    /**
     * @function 
     * Initializes frame related properties.
     *
     */
    initFrame: function(){
        //set to true when inpoint is rendered
        this._isFirstFrame = false;
        //list of animated properties
        this.dynamicProperties = [];
        // If layer has been modified in current tick this will be true
        this._mdf = false;
    },
    /**
     * @function 
     * Calculates all dynamic values
     *
     * @param {number} num
     * current frame number in Layer's time
     * @param {boolean} isVisible
     * if layers is currently in range
     * 
     */
    prepareProperties: function(num, isVisible) {
        var i, len = this.dynamicProperties.length;
        for (i = 0;i < len; i += 1) {
            if (isVisible || (this._isParent && this.dynamicProperties[i].propType === 'transform')) {
                this.dynamicProperties[i].getValue();
                if (this.dynamicProperties[i]._mdf) {
                    this.globalData._mdf = true;
                    this._mdf = true;
                }
            }
        }
    },
    addDynamicProperty: function(prop) {
        if(this.dynamicProperties.indexOf(prop) === -1) {
            this.dynamicProperties.push(prop);
        }
    }
};
function TransformElement(){}

TransformElement.prototype = {
    initTransform: function() {
        this.finalTransform = {
            mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {o:0},
            _matMdf: false,
            _opMdf: false,
            mat: new Matrix()
        };
        if (this.data.ao) {
            this.finalTransform.mProp.autoOriented = true;
        }

        //TODO: check TYPE 11: Guided elements
        if (this.data.ty !== 11) {
            //this.createElements();
        }
    },
    renderTransform: function() {

        this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
        this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;

        if (this.hierarchy) {
            var mat;
            var finalMat = this.finalTransform.mat;
            var i = 0, len = this.hierarchy.length;
            //Checking if any of the transformation matrices in the hierarchy chain has changed.
            if (!this.finalTransform._matMdf) {
                while (i < len) {
                    if (this.hierarchy[i].finalTransform.mProp._mdf) {
                        this.finalTransform._matMdf = true;
                        break;
                    }
                    i += 1;
                }
            }
            
            if (this.finalTransform._matMdf) {
                mat = this.finalTransform.mProp.v.props;
                finalMat.cloneFromProps(mat);
                for (i = 0; i < len; i += 1) {
                    mat = this.hierarchy[i].finalTransform.mProp.v.props;
                    finalMat.transform(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15]);
                }
            }
        }
    },
    globalToLocal: function(pt) {
        var transforms = [];
        transforms.push(this.finalTransform);
        var flag = true;
        var comp = this.comp;
        while (flag) {
            if (comp.finalTransform) {
                if (comp.data.hasMask) {
                    transforms.splice(0, 0, comp.finalTransform);
                }
                comp = comp.comp;
            } else {
                flag = false;
            }
        }
        var i, len = transforms.length,ptNew;
        for (i = 0; i < len; i += 1) {
            ptNew = transforms[i].mat.applyToPointArray(0, 0, 0);
            //ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);
            pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
        }
        return pt;
    },
    mHelper: new Matrix()
};
function RenderableElement(){

}

RenderableElement.prototype = {
    initRenderable: function() {
        //layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
        this.isInRange = false;
        //layer's display state
        this.hidden = false;
        // If layer's transparency equals 0, it can be hidden
        this.isTransparent = false;
        //list of animated components
        this.renderableComponents = [];
    },
    addRenderableComponent: function(component) {
        if(this.renderableComponents.indexOf(component) === -1) {
            this.renderableComponents.push(component);
        }
    },
    removeRenderableComponent: function(component) {
        if(this.renderableComponents.indexOf(component) !== -1) {
            this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
        }
    },
    prepareRenderableFrame: function(num) {
        this.checkLayerLimits(num);
    },
    checkTransparency: function(){
        if(this.finalTransform.mProp.o.v <= 0) {
            if(!this.isTransparent && this.globalData.renderConfig.hideOnTransparent){
                this.isTransparent = true;
                this.hide();
            }
        } else if(this.isTransparent) {
            this.isTransparent = false;
            this.show();
        }
    },
    /**
     * @function 
     * Initializes frame related properties.
     *
     * @param {number} num
     * current frame number in Layer's time
     * 
     */
    checkLayerLimits: function(num) {
        if(this.data.ip - this.data.st <= num && this.data.op - this.data.st > num)
        {
            if(this.isInRange !== true){
                this.globalData._mdf = true;
                this._mdf = true;
                this.isInRange = true;
                this.show();
            }
        } else {
            if(this.isInRange !== false){
                this.globalData._mdf = true;
                this.isInRange = false;
                this.hide();
            }
        }
    },
    renderRenderable: function() {
        var i, len = this.renderableComponents.length;
        for(i = 0; i < len; i += 1) {
            this.renderableComponents[i].renderFrame(this._isFirstFrame);
        }
        /*this.maskManager.renderFrame(this.finalTransform.mat);
        this.renderableEffectsManager.renderFrame(this._isFirstFrame);*/
    },
    sourceRectAtTime: function(){
        return {
            top:0,
            left:0,
            width:100,
            height:100
        };
    },
    getLayerSize: function(){
        if(this.data.ty === 5){
            return {w:this.data.textData.width,h:this.data.textData.height};
        }else{
            return {w:this.data.width,h:this.data.height};
        }
    }
};
function RenderableDOMElement() {}

(function(){
    var _prototype = {
        initElement: function(data,globalData,comp) {
            this.initFrame();
            this.initBaseData(data, globalData, comp);
            this.initTransform(data, globalData, comp);
            this.initHierarchy();
            this.initRenderable();
            this.initRendererElement();
            this.createContainerElements();
            this.createRenderableComponents();
            this.createContent();
            this.hide();
        },
        hide: function(){
            if (!this.hidden && (!this.isInRange || this.isTransparent)) {
                var elem = this.baseElement || this.layerElement;
                elem.style.display = 'none';
                this.hidden = true;
            }
        },
        show: function(){
            if (this.isInRange && !this.isTransparent){
                if (!this.data.hd) {
                    var elem = this.baseElement || this.layerElement;
                    elem.style.display = 'block';
                }
                this.hidden = false;
                this._isFirstFrame = true;
            }
        },
        renderFrame: function() {
            //If it is exported as hidden (data.hd === true) no need to render
            //If it is not visible no need to render
            if (this.data.hd || this.hidden) {
                return;
            }
            this.renderTransform();
            this.renderRenderable();
            this.renderElement();
            this.renderInnerContent();
            if (this._isFirstFrame) {
                this._isFirstFrame = false;
            }
        },
        renderInnerContent: function() {},
        prepareFrame: function(num) {
            this._mdf = false;
            this.prepareRenderableFrame(num);
            this.prepareProperties(num, this.isInRange);
            this.checkTransparency();
        },
        destroy: function(){
            this.innerElem =  null;
            this.destroyBaseElement();
        }
    };
    extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
}());
function ProcessedElement(element, position) {
	this.elem = element;
	this.pos = position;
}
function SVGStyleData(data, level) {
	this.data = data;
	this.type = data.ty;
	this.d = '';
	this.lvl = level;
	this._mdf = false;
	this.closed = data.hd === true;
	this.pElem = createNS('path');
	this.msElem = null;
}

SVGStyleData.prototype.reset = function() {
	this.d = '';
	this._mdf = false;
};
function SVGShapeData(transformers, level, shape) {
    this.caches = [];
    this.styles = [];
    this.transformers = transformers;
    this.lStr = '';
    this.sh = shape;
    this.lvl = level;
    //TODO find if there are some cases where _isAnimated can be false. 
    // For now, since shapes add up with other shapes. They have to be calculated every time.
    // One way of finding out is checking if all styles associated to this shape depend only of this shape
    this._isAnimated = !!shape.k;
    // TODO: commenting this for now since all shapes are animated
    var i = 0, len = transformers.length;
    while(i < len) {
    	if(transformers[i].mProps.dynamicProperties.length) {
    		this._isAnimated = true;
    		break;
    	}
    	i += 1;
    }
}

SVGShapeData.prototype.setAsAnimated = function() {
    this._isAnimated = true;
}
function SVGTransformData(mProps, op, container) {
	this.transform = {
		mProps: mProps,
		op: op,
		container: container
	};
	this.elements = [];
    this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
}
function SVGStrokeStyleData(elem, data, styleOb){
	this.initDynamicPropertyContainer(elem);
	this.getValue = this.iterateDynamicProperties;
	this.o = PropertyFactory.getProp(elem,data.o,0,0.01,this);
	this.w = PropertyFactory.getProp(elem,data.w,0,null,this);
	this.d = new DashProperty(elem,data.d||{},'svg',this);
	this.c = PropertyFactory.getProp(elem,data.c,1,255,this);
	this.style = styleOb;
    this._isAnimated = !!this._isAnimated;
}

extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
function SVGFillStyleData(elem, data, styleOb){
	this.initDynamicPropertyContainer(elem);
	this.getValue = this.iterateDynamicProperties;
	this.o = PropertyFactory.getProp(elem,data.o,0,0.01,this);
	this.c = PropertyFactory.getProp(elem,data.c,1,255,this);
	this.style = styleOb;
}

extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
function SVGGradientFillStyleData(elem, data, styleOb){
    this.initDynamicPropertyContainer(elem);
    this.getValue = this.iterateDynamicProperties;
    this.initGradientData(elem, data, styleOb);
}

SVGGradientFillStyleData.prototype.initGradientData = function(elem, data, styleOb){
    this.o = PropertyFactory.getProp(elem,data.o,0,0.01,this);
    this.s = PropertyFactory.getProp(elem,data.s,1,null,this);
    this.e = PropertyFactory.getProp(elem,data.e,1,null,this);
    this.h = PropertyFactory.getProp(elem,data.h||{k:0},0,0.01,this);
    this.a = PropertyFactory.getProp(elem,data.a||{k:0},0,degToRads,this);
    this.g = new GradientProperty(elem,data.g,this);
    this.style = styleOb;
    this.stops = [];
    this.setGradientData(styleOb.pElem, data);
    this.setGradientOpacity(data, styleOb);
    this._isAnimated = !!this._isAnimated;

};

SVGGradientFillStyleData.prototype.setGradientData = function(pathElement,data){

    var gradientId = createElementID();
    var gfill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
    gfill.setAttribute('id',gradientId);
    gfill.setAttribute('spreadMethod','pad');
    gfill.setAttribute('gradientUnits','userSpaceOnUse');
    var stops = [];
    var stop, j, jLen;
    jLen = data.g.p*4;
    for(j=0;j<jLen;j+=4){
        stop = createNS('stop');
        gfill.appendChild(stop);
        stops.push(stop);
    }
    pathElement.setAttribute( data.ty === 'gf' ? 'fill':'stroke','url(' + locationHref + '#'+gradientId+')');
    
    this.gf = gfill;
    this.cst = stops;
};

SVGGradientFillStyleData.prototype.setGradientOpacity = function(data, styleOb){
    if(this.g._hasOpacity && !this.g._collapsable){
        var stop, j, jLen;
        var mask = createNS("mask");
        var maskElement = createNS( 'path');
        mask.appendChild(maskElement);
        var opacityId = createElementID();
        var maskId = createElementID();
        mask.setAttribute('id',maskId);
        var opFill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
        opFill.setAttribute('id',opacityId);
        opFill.setAttribute('spreadMethod','pad');
        opFill.setAttribute('gradientUnits','userSpaceOnUse');
        jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
        var stops = this.stops;
        for(j=data.g.p*4;j<jLen;j+=2){
            stop = createNS('stop');
            stop.setAttribute('stop-color','rgb(255,255,255)');
            opFill.appendChild(stop);
            stops.push(stop);
        }
        maskElement.setAttribute( data.ty === 'gf' ? 'fill':'stroke','url(' + locationHref + '#'+opacityId+')');
        this.of = opFill;
        this.ms = mask;
        this.ost = stops;
        this.maskId = maskId;
        styleOb.msElem = maskElement;
    }
};

extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
function SVGGradientStrokeStyleData(elem, data, styleOb){
	this.initDynamicPropertyContainer(elem);
	this.getValue = this.iterateDynamicProperties;
	this.w = PropertyFactory.getProp(elem,data.w,0,null,this);
	this.d = new DashProperty(elem,data.d||{},'svg',this);
    this.initGradientData(elem, data, styleOb);
    this._isAnimated = !!this._isAnimated;
}

extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
function ShapeGroupData() {
	this.it = [];
    this.prevViewData = [];
    this.gr = createNS('g');
}
var SVGElementsRenderer = (function() {
	var _identityMatrix = new Matrix();
	var _matrixHelper = new Matrix();

	var ob = {
		createRenderFunction: createRenderFunction
	}

	function createRenderFunction(data) {
	    var ty = data.ty;
	    switch(data.ty) {
	        case 'fl':
	        return renderFill;
	        case 'gf':
	        return renderGradient;
	        case 'gs':
	        return renderGradientStroke;
	        case 'st':
	        return renderStroke;
	        case 'sh':
	        case 'el':
	        case 'rc':
	        case 'sr':
	        return renderPath;
	        case 'tr':
	        return renderContentTransform;
	    }
	}

	function renderContentTransform(styleData, itemData, isFirstFrame) {
	    if(isFirstFrame || itemData.transform.op._mdf){
	        itemData.transform.container.setAttribute('opacity',itemData.transform.op.v);
	    }
	    if(isFirstFrame || itemData.transform.mProps._mdf){
	        itemData.transform.container.setAttribute('transform',itemData.transform.mProps.v.to2dCSS());
	    }
	}

	function renderPath(styleData, itemData, isFirstFrame) {
	    var j, jLen,pathStringTransformed,redraw,pathNodes,l, lLen = itemData.styles.length;
	    var lvl = itemData.lvl;
	    var paths, mat, props, iterations, k;
	    for(l=0;l<lLen;l+=1){
	        redraw = itemData.sh._mdf || isFirstFrame;
	        if(itemData.styles[l].lvl < lvl){
	            mat = _matrixHelper.reset();
	            iterations = lvl - itemData.styles[l].lvl;
	            k = itemData.transformers.length-1;
	            while(!redraw && iterations > 0) {
	                redraw = itemData.transformers[k].mProps._mdf || redraw;
	                iterations --;
	                k --;
	            }
	            if(redraw) {
	                iterations = lvl - itemData.styles[l].lvl;
	                k = itemData.transformers.length-1;
	                while(iterations > 0) {
	                    props = itemData.transformers[k].mProps.v.props;
	                    mat.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
	                    iterations --;
	                    k --;
	                }
	            }
	        } else {
	            mat = _identityMatrix;
	        }
	        paths = itemData.sh.paths;
	        jLen = paths._length;
	        if(redraw){
	            pathStringTransformed = '';
	            for(j=0;j<jLen;j+=1){
	                pathNodes = paths.shapes[j];
	                if(pathNodes && pathNodes._length){
	                    pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
	                }
	            }
	            itemData.caches[l] = pathStringTransformed;
	        } else {
	            pathStringTransformed = itemData.caches[l];
	        }
	        itemData.styles[l].d += styleData.hd === true ? '' : pathStringTransformed;
	        itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
	    }
	}

	function renderFill (styleData,itemData, isFirstFrame){
	    var styleElem = itemData.style;

	    if(itemData.c._mdf || isFirstFrame){
	        styleElem.pElem.setAttribute('fill','rgb('+bm_floor(itemData.c.v[0])+','+bm_floor(itemData.c.v[1])+','+bm_floor(itemData.c.v[2])+')');
	    }
	    if(itemData.o._mdf || isFirstFrame){
	        styleElem.pElem.setAttribute('fill-opacity',itemData.o.v);
	    }
	};

	function renderGradientStroke (styleData, itemData, isFirstFrame) {
	    renderGradient(styleData, itemData, isFirstFrame);
	    renderStroke(styleData, itemData, isFirstFrame);
	}

	function renderGradient(styleData, itemData, isFirstFrame) {
	    var gfill = itemData.gf;
	    var hasOpacity = itemData.g._hasOpacity;
	    var pt1 = itemData.s.v, pt2 = itemData.e.v;

	    if (itemData.o._mdf || isFirstFrame) {
	        var attr = styleData.ty === 'gf' ? 'fill-opacity' : 'stroke-opacity';
	        itemData.style.pElem.setAttribute(attr, itemData.o.v);
	    }
	    if (itemData.s._mdf || isFirstFrame) {
	        var attr1 = styleData.t === 1 ? 'x1' : 'cx';
	        var attr2 = attr1 === 'x1' ? 'y1' : 'cy';
	        gfill.setAttribute(attr1, pt1[0]);
	        gfill.setAttribute(attr2, pt1[1]);
	        if (hasOpacity && !itemData.g._collapsable) {
	            itemData.of.setAttribute(attr1, pt1[0]);
	            itemData.of.setAttribute(attr2, pt1[1]);
	        }
	    }
	    var stops, i, len, stop;
	    if (itemData.g._cmdf || isFirstFrame) {
	        stops = itemData.cst;
	        var cValues = itemData.g.c;
	        len = stops.length;
	        for (i = 0; i < len; i += 1){
	            stop = stops[i];
	            stop.setAttribute('offset', cValues[i * 4] + '%');
	            stop.setAttribute('stop-color','rgb('+ cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ','+cValues[i * 4 + 3] + ')');
	        }
	    }
	    if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
	        var oValues = itemData.g.o;
	        if(itemData.g._collapsable) {
	            stops = itemData.cst;
	        } else {
	            stops = itemData.ost;
	        }
	        len = stops.length;
	        for (i = 0; i < len; i += 1) {
	            stop = stops[i];
	            if(!itemData.g._collapsable) {
	                stop.setAttribute('offset', oValues[i * 2] + '%');
	            }
	            stop.setAttribute('stop-opacity', oValues[i * 2 + 1]);
	        }
	    }
	    if (styleData.t === 1) {
	        if (itemData.e._mdf  || isFirstFrame) {
	            gfill.setAttribute('x2', pt2[0]);
	            gfill.setAttribute('y2', pt2[1]);
	            if (hasOpacity && !itemData.g._collapsable) {
	                itemData.of.setAttribute('x2', pt2[0]);
	                itemData.of.setAttribute('y2', pt2[1]);
	            }
	        }
	    } else {
	        var rad;
	        if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
	            rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
	            gfill.setAttribute('r', rad);
	            if(hasOpacity && !itemData.g._collapsable){
	                itemData.of.setAttribute('r', rad);
	            }
	        }
	        if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
	            if (!rad) {
	                rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
	            }
	            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);

	            var percent = itemData.h.v >= 1 ? 0.99 : itemData.h.v <= -1 ? -0.99: itemData.h.v;
	            var dist = rad * percent;
	            var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
	            var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
	            gfill.setAttribute('fx', x);
	            gfill.setAttribute('fy', y);
	            if (hasOpacity && !itemData.g._collapsable) {
	                itemData.of.setAttribute('fx', x);
	                itemData.of.setAttribute('fy', y);
	            }
	        }
	        //gfill.setAttribute('fy','200');
	    }
	};

	function renderStroke(styleData, itemData, isFirstFrame) {
	    var styleElem = itemData.style;
	    var d = itemData.d;
	    if (d && (d._mdf || isFirstFrame) && d.dashStr) {
	        styleElem.pElem.setAttribute('stroke-dasharray', d.dashStr);
	        styleElem.pElem.setAttribute('stroke-dashoffset', d.dashoffset[0]);
	    }
	    if(itemData.c && (itemData.c._mdf || isFirstFrame)){
	        styleElem.pElem.setAttribute('stroke','rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')');
	    }
	    if(itemData.o._mdf || isFirstFrame){
	        styleElem.pElem.setAttribute('stroke-opacity', itemData.o.v);
	    }
	    if(itemData.w._mdf || isFirstFrame){
	        styleElem.pElem.setAttribute('stroke-width', itemData.w.v);
	        if(styleElem.msElem){
	            styleElem.msElem.setAttribute('stroke-width', itemData.w.v);
	        }
	    }
	};

	return ob;
}())
function ShapeTransformManager() {
	this.sequences = {};
	this.sequenceList = [];
    this.transform_key_count = 0;
}

ShapeTransformManager.prototype = {
	addTransformSequence: function(transforms) {
		var i, len = transforms.length;
		var key = '_';
		for(i = 0; i < len; i += 1) {
			key += transforms[i].transform.key + '_';
		}
		var sequence = this.sequences[key];
		if(!sequence) {
			sequence = {
				transforms: [].concat(transforms),
				finalTransform: new Matrix(),
				_mdf: false
			};
			this.sequences[key] = sequence;
			this.sequenceList.push(sequence);
		}
		return sequence;
	},
	processSequence: function(sequence, isFirstFrame) {
		var i = 0, len = sequence.transforms.length, _mdf = isFirstFrame;
		while (i < len && !isFirstFrame) {
			if (sequence.transforms[i].transform.mProps._mdf) {
				_mdf = true;
				break;
			}
			i += 1
		}
		if (_mdf) {
			var props;
			sequence.finalTransform.reset();
			for (i = len - 1; i >= 0; i -= 1) {
		        props = sequence.transforms[i].transform.mProps.v.props;
		        sequence.finalTransform.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
			}
		}
		sequence._mdf = _mdf;
		
	},
	processSequences: function(isFirstFrame) {
		var i, len = this.sequenceList.length;
		for (i = 0; i < len; i += 1) {
			this.processSequence(this.sequenceList[i], isFirstFrame);
		}

	},
	getNewKey: function() {
		return '_' + this.transform_key_count++;
	}
}
function CVShapeData(element, data, styles, transformsManager) {
    this.styledShapes = [];
    this.tr = [0,0,0,0,0,0];
    var ty = 4;
    if(data.ty == 'rc'){
        ty = 5;
    }else if(data.ty == 'el'){
        ty = 6;
    }else if(data.ty == 'sr'){
        ty = 7;
    }
    this.sh = ShapePropertyFactory.getShapeProp(element,data,ty,element);
    var i , len = styles.length,styledShape;
    for (i = 0; i < len; i += 1) {
        if (!styles[i].closed) {
            styledShape = {
                transforms: transformsManager.addTransformSequence(styles[i].transforms),
                trNodes: []
            }
            this.styledShapes.push(styledShape);
            styles[i].elements.push(styledShape);
        }
    }
}

CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
function BaseElement(){
}

BaseElement.prototype = {
    checkMasks: function(){
        if(!this.data.hasMask){
            return false;
        }
        var i = 0, len = this.data.masksProperties.length;
        while(i<len) {
            if((this.data.masksProperties[i].mode !== 'n' && this.data.masksProperties[i].cl !== false)) {
                return true;
            }
            i += 1;
        }
        return false;
    },
    initExpressions: function(){
        this.layerInterface = LayerExpressionInterface(this);
        if(this.data.hasMask && this.maskManager) {
            this.layerInterface.registerMaskInterface(this.maskManager);
        }
        var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);
        this.layerInterface.registerEffectsInterface(effectsInterface);

        if(this.data.ty === 0 || this.data.xt){
            this.compInterface = CompExpressionInterface(this);
        } else if(this.data.ty === 4){
            this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface);
            this.layerInterface.content = this.layerInterface.shapeInterface;
        } else if(this.data.ty === 5){
            this.layerInterface.textInterface = TextExpressionInterface(this);
            this.layerInterface.text = this.layerInterface.textInterface;
        }
    },
    setBlendMode: function(){
        var blendModeValue = getBlendMode(this.data.bm);
        var elem = this.baseElement || this.layerElement;

        elem.style['mix-blend-mode'] = blendModeValue;
    },
    initBaseData: function(data, globalData, comp){
        this.globalData = globalData;
        this.comp = comp;
        this.data = data;
        this.layerId = createElementID();
        
        //Stretch factor for old animations missing this property.
        if(!this.data.sr){
            this.data.sr = 1;
        }
        // effects manager
        this.effectsManager = new EffectsManager(this.data,this,this.dynamicProperties);
        
    },
    getType: function(){
        return this.type;
    }
    ,sourceRectAtTime: function(){}
}
function NullElement(data,globalData,comp){
    this.initFrame();
	this.initBaseData(data, globalData, comp);
    this.initFrame();
    this.initTransform(data, globalData, comp);
    this.initHierarchy();
}

NullElement.prototype.prepareFrame = function(num) {
    this.prepareProperties(num, true);
};

NullElement.prototype.renderFrame = function() {
};

NullElement.prototype.getBaseElement = function() {
	return null;
};

NullElement.prototype.destroy = function() {
};

NullElement.prototype.sourceRectAtTime = function() {
};

NullElement.prototype.hide = function() {
};

extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement], NullElement);

function SVGBaseElement(){
}

SVGBaseElement.prototype = {
    initRendererElement: function() {
        this.layerElement = createNS('g');
    },
    createContainerElements: function(){
        this.matteElement = createNS('g');
        this.transformedElement = this.layerElement;
        this.maskedElement = this.layerElement;
        this._sizeChanged = false;
        var layerElementParent = null;
        //If this layer acts as a mask for the following layer
        var filId, fil, gg;
        if (this.data.td) {
            if (this.data.td == 3 || this.data.td == 1) {
                var masker = createNS('mask');
                masker.setAttribute('id', this.layerId);
                masker.setAttribute('mask-type', this.data.td == 3 ? 'luminance' : 'alpha');
                masker.appendChild(this.layerElement);
                layerElementParent = masker;
                this.globalData.defs.appendChild(masker);
                // This is only for IE and Edge when mask if of type alpha
                if (!featureSupport.maskType && this.data.td == 1) {
                    masker.setAttribute('mask-type', 'luminance');
                    filId = createElementID();
                    fil = filtersFactory.createFilter(filId);
                    this.globalData.defs.appendChild(fil);
                    fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                    gg = createNS('g');
                    gg.appendChild(this.layerElement);
                    layerElementParent = gg;
                    masker.appendChild(gg);
                    gg.setAttribute('filter','url(' + locationHref + '#' + filId + ')');
                }
            } else if(this.data.td == 2) {
                var maskGroup = createNS('mask');
                maskGroup.setAttribute('id', this.layerId);
                maskGroup.setAttribute('mask-type','alpha');
                var maskGrouper = createNS('g');
                maskGroup.appendChild(maskGrouper);
                filId = createElementID();
                fil = filtersFactory.createFilter(filId);
                ////

                // This solution doesn't work on Android when meta tag with viewport attribute is set
                /*var feColorMatrix = createNS('feColorMatrix');
                feColorMatrix.setAttribute('type', 'matrix');
                feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
                feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 -1 1');
                fil.appendChild(feColorMatrix);*/
                ////
                var feCTr = createNS('feComponentTransfer');
                feCTr.setAttribute('in','SourceGraphic');
                fil.appendChild(feCTr);
                var feFunc = createNS('feFuncA');
                feFunc.setAttribute('type','table');
                feFunc.setAttribute('tableValues','1.0 0.0');
                feCTr.appendChild(feFunc);
                ////
                this.globalData.defs.appendChild(fil);
                var alphaRect = createNS('rect');
                alphaRect.setAttribute('width',  this.comp.data.w);
                alphaRect.setAttribute('height', this.comp.data.h);
                alphaRect.setAttribute('x','0');
                alphaRect.setAttribute('y','0');
                alphaRect.setAttribute('fill','#ffffff');
                alphaRect.setAttribute('opacity','0');
                maskGrouper.setAttribute('filter', 'url(' + locationHref + '#'+filId+')');
                maskGrouper.appendChild(alphaRect);
                maskGrouper.appendChild(this.layerElement);
                layerElementParent = maskGrouper;
                if (!featureSupport.maskType) {
                    maskGroup.setAttribute('mask-type', 'luminance');
                    fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                    gg = createNS('g');
                    maskGrouper.appendChild(alphaRect);
                    gg.appendChild(this.layerElement);
                    layerElementParent = gg;
                    maskGrouper.appendChild(gg);
                }
                this.globalData.defs.appendChild(maskGroup);
            }
        } else if (this.data.tt) {
            this.matteElement.appendChild(this.layerElement);
            layerElementParent = this.matteElement;
            this.baseElement = this.matteElement;
        } else {
            this.baseElement = this.layerElement;
        }
        if (this.data.ln) {
            this.layerElement.setAttribute('id', this.data.ln);
        }
        if (this.data.cl) {
            this.layerElement.setAttribute('class', this.data.cl);
        }
        //Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped
        if (this.data.ty === 0 && !this.data.hd) {
            var cp = createNS( 'clipPath');
            var pt = createNS('path');
            pt.setAttribute('d','M0,0 L' + this.data.w + ',0' + ' L' + this.data.w + ',' + this.data.h + ' L0,' + this.data.h + 'z');
            var clipId = createElementID();
            cp.setAttribute('id',clipId);
            cp.appendChild(pt);
            this.globalData.defs.appendChild(cp);

            if (this.checkMasks()) {
                var cpGroup = createNS('g');
                cpGroup.setAttribute('clip-path','url(' + locationHref + '#'+clipId + ')');
                cpGroup.appendChild(this.layerElement);
                this.transformedElement = cpGroup;
                if (layerElementParent) {
                    layerElementParent.appendChild(this.transformedElement);
                } else {
                    this.baseElement = this.transformedElement;
                }
            } else {
                this.layerElement.setAttribute('clip-path','url(' + locationHref + '#'+clipId+')');
            }
            
        }
        if (this.data.bm !== 0) {
            this.setBlendMode();
        }

    },
    renderElement: function() {
        if (this.finalTransform._matMdf) {
            this.transformedElement.setAttribute('transform', this.finalTransform.mat.to2dCSS());
        }
        if (this.finalTransform._opMdf) {
            this.transformedElement.setAttribute('opacity', this.finalTransform.mProp.o.v);
        }
    },
    destroyBaseElement: function() {
        this.layerElement = null;
        this.matteElement = null;
        this.maskManager.destroy();
    },
    getBaseElement: function() {
        if (this.data.hd) {
            return null;
        }
        return this.baseElement;
    },
    createRenderableComponents: function() {
        this.maskManager = new MaskElement(this.data, this, this.globalData);
        this.renderableEffectsManager = new SVGEffects(this);
    },
    setMatte: function(id) {
        if (!this.matteElement) {
            return;
        }
        this.matteElement.setAttribute("mask", "url(" + locationHref + "#" + id + ")");
    }
};
function IShapeElement(){
}

IShapeElement.prototype = {
    addShapeToModifiers: function(data) {
        var i, len = this.shapeModifiers.length;
        for(i=0;i<len;i+=1){
            this.shapeModifiers[i].addShape(data);
        }
    },
    isShapeInAnimatedModifiers: function(data) {
        var i = 0, len = this.shapeModifiers.length;
        while(i < len) {
            if(this.shapeModifiers[i].isAnimatedWithShape(data)) {
                return true;
            }
        }
        return false;
    },
    renderModifiers: function() {
        if(!this.shapeModifiers.length){
            return;
        }
        var i, len = this.shapes.length;
        for(i=0;i<len;i+=1){
            this.shapes[i].sh.reset();
        }

        len = this.shapeModifiers.length;
        for(i=len-1;i>=0;i-=1){
            this.shapeModifiers[i].processShapes(this._isFirstFrame);
        }
    },
    lcEnum: {
        '1': 'butt',
        '2': 'round',
        '3': 'square'
    },
    ljEnum: {
        '1': 'miter',
        '2': 'round',
        '3': 'bevel'
    },
    searchProcessedElement: function(elem){
        var elements = this.processedElements;
        var i = 0, len = elements.length;
        while (i < len) {
            if (elements[i].elem === elem) {
                return elements[i].pos;
            }
            i += 1;
        }
        return 0;
    },
    addProcessedElement: function(elem, pos){
        var elements = this.processedElements;
        var i = elements.length;
        while(i) {
            i -= 1;
            if (elements[i].elem === elem) {
                elements[i].pos = pos;
                return;
            }
        }
        elements.push(new ProcessedElement(elem, pos));
    },
    prepareFrame: function(num) {
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
    }
};
function ITextElement(){
}

ITextElement.prototype.initElement = function(data,globalData,comp){
    this.lettersChangedFlag = true;
    this.initFrame();
    this.initBaseData(data, globalData, comp);
    this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
    this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
    this.initTransform(data, globalData, comp);
    this.initHierarchy();
    this.initRenderable();
    this.initRendererElement();
    this.createContainerElements();
    this.createRenderableComponents();
    this.createContent();
    this.hide();
    this.textAnimator.searchProperties(this.dynamicProperties);
};

ITextElement.prototype.prepareFrame = function(num) {
    this._mdf = false;
    this.prepareRenderableFrame(num);
    this.prepareProperties(num, this.isInRange);
    if(this.textProperty._mdf || this.textProperty._isFirstFrame) {
        this.buildNewText();
        this.textProperty._isFirstFrame = false;
        this.textProperty._mdf = false;
    }
};

ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
    var j,jLen = shapes.length;
    var k, kLen, pathNodes;
    var shapeStr = '';
    for(j=0;j<jLen;j+=1){
        pathNodes = shapes[j].ks.k;
        shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
    }
    return shapeStr;
};

ITextElement.prototype.updateDocumentData = function(newData, index) {
    this.textProperty.updateDocumentData(newData, index);
};

ITextElement.prototype.canResizeFont = function(_canResize) {
    this.textProperty.canResizeFont(_canResize);
};

ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
    this.textProperty.setMinimumFontSize(_fontSize);
};

ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
    if(documentData.ps){
        matrixHelper.translate(documentData.ps[0],documentData.ps[1] + documentData.ascent,0);
    }
    matrixHelper.translate(0,-documentData.ls,0);
    switch(documentData.j){
        case 1:
            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]),0,0);
            break;
        case 2:
            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber] )/2,0,0);
            break;
    }
    matrixHelper.translate(xPos, yPos, 0);
};


ITextElement.prototype.buildColor = function(colorData) {
    return 'rgb(' + Math.round(colorData[0]*255) + ',' + Math.round(colorData[1]*255) + ',' + Math.round(colorData[2]*255) + ')';
};

ITextElement.prototype.emptyProp = new LetterProps();

ITextElement.prototype.destroy = function(){
    
};
function ICompElement(){}

extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);

ICompElement.prototype.initElement = function(data,globalData,comp) {
    this.initFrame();
    this.initBaseData(data, globalData, comp);
    this.initTransform(data, globalData, comp);
    this.initRenderable();
    this.initHierarchy();
    this.initRendererElement();
    this.createContainerElements();
    this.createRenderableComponents();
    if(this.data.xt || !globalData.progressiveLoad){
        this.buildAllItems();
    }
    this.hide();
};

/*ICompElement.prototype.hide = function(){
    if(!this.hidden){
        this.hideElement();
        var i,len = this.elements.length;
        for( i = 0; i < len; i+=1 ){
            if(this.elements[i]){
                this.elements[i].hide();
            }
        }
    }
};*/

ICompElement.prototype.prepareFrame = function(num){
    this._mdf = false;
    this.prepareRenderableFrame(num);
    this.prepareProperties(num, this.isInRange);
    if(!this.isInRange && !this.data.xt){
        return;
    }

    if (!this.tm._placeholder) {
        var timeRemapped = this.tm.v;
        if(timeRemapped === this.data.op){
            timeRemapped = this.data.op - 1;
        }
        this.renderedFrame = timeRemapped;
    } else {
        this.renderedFrame = num/this.data.sr;
    }
    var i,len = this.elements.length;
    if(!this.completeLayers){
        this.checkLayers(this.renderedFrame);
    }
    //This iteration needs to be backwards because of how expressions connect between each other
    for( i = len - 1; i >= 0; i -= 1 ){
        if(this.completeLayers || this.elements[i]){
            this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);
            if(this.elements[i]._mdf) {
                this._mdf = true;
            }
        }
    }
};

ICompElement.prototype.renderInnerContent = function() {
    var i,len = this.layers.length;
    for( i = 0; i < len; i += 1 ){
        if(this.completeLayers || this.elements[i]){
            this.elements[i].renderFrame();
        }
    }
};

ICompElement.prototype.setElements = function(elems){
    this.elements = elems;
};

ICompElement.prototype.getElements = function(){
    return this.elements;
};

ICompElement.prototype.destroyElements = function(){
    var i,len = this.layers.length;
    for( i = 0; i < len; i+=1 ){
        if(this.elements[i]){
            this.elements[i].destroy();
        }
    }
};

ICompElement.prototype.destroy = function(){
    this.destroyElements();
    this.destroyBaseElement();
};

function IImageElement(data,globalData,comp){
    this.assetData = globalData.getAssetData(data.refId);
    this.initElement(data,globalData,comp);
    this.sourceRect = {top:0,left:0,width:this.assetData.w,height:this.assetData.h};
}

extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement], IImageElement);

IImageElement.prototype.createContent = function(){

    var assetPath = this.globalData.getAssetsPath(this.assetData);

    this.innerElem = createNS('image');
    this.innerElem.setAttribute('width',this.assetData.w+"px");
    this.innerElem.setAttribute('height',this.assetData.h+"px");
    this.innerElem.setAttribute('preserveAspectRatio',this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
    this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);
    
    this.layerElement.appendChild(this.innerElem);
};

IImageElement.prototype.sourceRectAtTime = function() {
	return this.sourceRect;
}
function ISolidElement(data,globalData,comp){
    this.initElement(data,globalData,comp);
}
extendPrototype([IImageElement], ISolidElement);

ISolidElement.prototype.createContent = function(){

    var rect = createNS('rect');
    ////rect.style.width = this.data.sw;
    ////rect.style.height = this.data.sh;
    ////rect.style.fill = this.data.sc;
    rect.setAttribute('width',this.data.sw);
    rect.setAttribute('height',this.data.sh);
    rect.setAttribute('fill',this.data.sc);
    this.layerElement.appendChild(rect);
};
function SVGCompElement(data,globalData,comp){
    this.layers = data.layers;
    this.supports3d = true;
    this.completeLayers = false;
    this.pendingElements = [];
    this.elements = this.layers ? createSizedArray(this.layers.length) : [];
    //this.layerElement = createNS('g');
    this.initElement(data,globalData,comp);
    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this) : {_placeholder:true};
}

extendPrototype([SVGRenderer, ICompElement, SVGBaseElement], SVGCompElement);
function SVGTextElement(data,globalData,comp){
    this.textSpans = [];
    this.renderType = 'svg';
    this.initElement(data,globalData,comp);
}

extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement], SVGTextElement);

SVGTextElement.prototype.createContent = function(){

    if (this.data.singleShape && !this.globalData.fontManager.chars) {
        this.textContainer = createNS('text');
    }
};

SVGTextElement.prototype.buildTextContents = function(textArray) {
    var i = 0, len = textArray.length;
    var textContents = [], currentTextContent = '';
    while (i < len) {
        if(textArray[i] === String.fromCharCode(13) || textArray[i] === String.fromCharCode(3)) {
            textContents.push(currentTextContent);
            currentTextContent = '';
        } else {
            currentTextContent += textArray[i];
        }
        i += 1;
    }
    textContents.push(currentTextContent);
    return textContents;
}

SVGTextElement.prototype.buildNewText = function(){
    var i, len;

    var documentData = this.textProperty.currentData;
    this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
    if(documentData.fc) {
        this.layerElement.setAttribute('fill', this.buildColor(documentData.fc));
    }else{
        this.layerElement.setAttribute('fill', 'rgba(0,0,0,0)');
    }
    if(documentData.sc){
        this.layerElement.setAttribute('stroke', this.buildColor(documentData.sc));
        this.layerElement.setAttribute('stroke-width', documentData.sw);
    }
    this.layerElement.setAttribute('font-size', documentData.finalSize);
    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
    if(fontData.fClass){
        this.layerElement.setAttribute('class',fontData.fClass);
    } else {
        this.layerElement.setAttribute('font-family', fontData.fFamily);
        var fWeight = documentData.fWeight, fStyle = documentData.fStyle;
        this.layerElement.setAttribute('font-style', fStyle);
        this.layerElement.setAttribute('font-weight', fWeight);
    }
    this.layerElement.setAttribute('arial-label', documentData.t);

    var letters = documentData.l || [];
    var usesGlyphs = !!this.globalData.fontManager.chars;
    len = letters.length;

    var tSpan;
    var matrixHelper = this.mHelper;
    var shapes, shapeStr = '', singleShape = this.data.singleShape;
    var xPos = 0, yPos = 0, firstLine = true;
    var trackingOffset = documentData.tr/1000*documentData.finalSize;
    if(singleShape && !usesGlyphs && !documentData.sz) {
        var tElement = this.textContainer;
        var justify = 'start';
        switch(documentData.j) {
            case 1:
                justify = 'end';
                break;
            case 2:
                justify = 'middle';
                break;
        }
        tElement.setAttribute('text-anchor',justify);
        tElement.setAttribute('letter-spacing',trackingOffset);
        var textContent = this.buildTextContents(documentData.finalText);
        len = textContent.length;
        yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
        for ( i = 0; i < len; i += 1) {
            tSpan = this.textSpans[i] || createNS('tspan');
            tSpan.textContent = textContent[i];
            tSpan.setAttribute('x', 0);
            tSpan.setAttribute('y', yPos);
            tSpan.style.display = 'inherit';
            tElement.appendChild(tSpan);
            this.textSpans[i] = tSpan;
            yPos += documentData.finalLineHeight;
        }
        
        this.layerElement.appendChild(tElement);
    } else {
        var cachedSpansLength = this.textSpans.length;
        var shapeData, charData;
        for (i = 0; i < len; i += 1) {
            if(!usesGlyphs || !singleShape || i === 0){
                tSpan = cachedSpansLength > i ? this.textSpans[i] : createNS(usesGlyphs?'path':'text');
                if (cachedSpansLength <= i) {
                    tSpan.setAttribute('stroke-linecap', 'butt');
                    tSpan.setAttribute('stroke-linejoin','round');
                    tSpan.setAttribute('stroke-miterlimit','4');
                    this.textSpans[i] = tSpan;
                    this.layerElement.appendChild(tSpan);
                }
                tSpan.style.display = 'inherit';
            }
            
            matrixHelper.reset();
            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
            if (singleShape) {
                if(letters[i].n) {
                    xPos = -trackingOffset;
                    yPos += documentData.yOffset;
                    yPos += firstLine ? 1 : 0;
                    firstLine = false;
                }
                this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
                xPos += letters[i].l || 0;
                //xPos += letters[i].val === ' ' ? 0 : trackingOffset;
                xPos += trackingOffset;
            }
            if(usesGlyphs) {
                charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                shapeData = charData && charData.data || {};
                shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
                if(!singleShape){
                    tSpan.setAttribute('d',this.createPathShape(matrixHelper,shapes));
                } else {
                    shapeStr += this.createPathShape(matrixHelper,shapes);
                }
            } else {
                if(singleShape) {
                    tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
                }
                tSpan.textContent = letters[i].val;
                tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space","preserve");
            }
            //
        }
        if (singleShape && tSpan) {
            tSpan.setAttribute('d',shapeStr);
        }
    }
    while (i < this.textSpans.length){
        this.textSpans[i].style.display = 'none';
        i += 1;
    }
    
    this._sizeChanged = true;
};

SVGTextElement.prototype.sourceRectAtTime = function(time){
    this.prepareFrame(this.comp.renderedFrame - this.data.st);
    this.renderInnerContent();
    if(this._sizeChanged){
        this._sizeChanged = false;
        var textBox = this.layerElement.getBBox();
        this.bbox = {
            top: textBox.y,
            left: textBox.x,
            width: textBox.width,
            height: textBox.height
        };
    }
    return this.bbox;
};

SVGTextElement.prototype.renderInnerContent = function(){

    if(!this.data.singleShape){
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        if(this.lettersChangedFlag || this.textAnimator.lettersChangedFlag){
            this._sizeChanged = true;
            var  i,len;
            var renderedLetters = this.textAnimator.renderedLetters;

            var letters = this.textProperty.currentData.l;

            len = letters.length;
            var renderedLetter, textSpan;
            for(i=0;i<len;i+=1){
                if(letters[i].n){
                    continue;
                }
                renderedLetter = renderedLetters[i];
                textSpan = this.textSpans[i];
                if(renderedLetter._mdf.m) {
                    textSpan.setAttribute('transform',renderedLetter.m);
                }
                if(renderedLetter._mdf.o) {
                    textSpan.setAttribute('opacity',renderedLetter.o);
                }
                if(renderedLetter._mdf.sw){
                    textSpan.setAttribute('stroke-width',renderedLetter.sw);
                }
                if(renderedLetter._mdf.sc){
                    textSpan.setAttribute('stroke',renderedLetter.sc);
                }
                if(renderedLetter._mdf.fc){
                    textSpan.setAttribute('fill',renderedLetter.fc);
                }
            }
        }
    }
};
function SVGShapeElement(data,globalData,comp){
    //List of drawable elements
    this.shapes = [];
    // Full shape data
    this.shapesData = data.shapes;
    //List of styles that will be applied to shapes
    this.stylesList = [];
    //List of modifiers that will be applied to shapes
    this.shapeModifiers = [];
    //List of items in shape tree
    this.itemsData = [];
    //List of items in previous shape tree
    this.processedElements = [];
    // List of animated components
    this.animatedContents = [];
    this.initElement(data,globalData,comp);
    //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
    // List of elements that have been created
    this.prevViewData = [];
    //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
}

extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement], SVGShapeElement);

SVGShapeElement.prototype.initSecondaryElement = function() {
};

SVGShapeElement.prototype.identityMatrix = new Matrix();

SVGShapeElement.prototype.buildExpressionInterface = function(){};

SVGShapeElement.prototype.createContent = function(){
    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement, 0, [], true);
    this.filterUniqueShapes();
};

/*
This method searches for multiple shapes that affect a single element and one of them is animated
*/
SVGShapeElement.prototype.filterUniqueShapes = function(){
    var i, len = this.shapes.length, shape;
    var j, jLen = this.stylesList.length;
    var style, count = 0;
    var tempShapes = [];
    var areAnimated = false;
    for(j = 0; j < jLen; j += 1) {
        style = this.stylesList[j];
        areAnimated = false;
        tempShapes.length = 0;
        for(i = 0; i < len; i += 1) {
            shape = this.shapes[i];
            if(shape.styles.indexOf(style) !== -1) {
                tempShapes.push(shape);
                areAnimated = shape._isAnimated || areAnimated;
            }
        }
        if(tempShapes.length > 1 && areAnimated) {
            this.setShapesAsAnimated(tempShapes);
        }
    }
}

SVGShapeElement.prototype.setShapesAsAnimated = function(shapes){
    var i, len = shapes.length;
    for(i = 0; i < len; i += 1) {
        shapes[i].setAsAnimated();
    }
}

SVGShapeElement.prototype.createStyleElement = function(data, level){
    //TODO: prevent drawing of hidden styles
    var elementData;
    var styleOb = new SVGStyleData(data, level);

    var pathElement = styleOb.pElem;
    if(data.ty === 'st') {
        elementData = new SVGStrokeStyleData(this, data, styleOb);
    } else if(data.ty === 'fl') {
        elementData = new SVGFillStyleData(this, data, styleOb);
    } else if(data.ty === 'gf' || data.ty === 'gs') {
        var gradientConstructor = data.ty === 'gf' ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
        elementData = new gradientConstructor(this, data, styleOb);
        this.globalData.defs.appendChild(elementData.gf);
        if (elementData.maskId) {
            this.globalData.defs.appendChild(elementData.ms);
            this.globalData.defs.appendChild(elementData.of);
            pathElement.setAttribute('mask','url(' + locationHref + '#' + elementData.maskId + ')');
        }
    }
    
    if(data.ty === 'st' || data.ty === 'gs') {
        pathElement.setAttribute('stroke-linecap', this.lcEnum[data.lc] || 'round');
        pathElement.setAttribute('stroke-linejoin',this.ljEnum[data.lj] || 'round');
        pathElement.setAttribute('fill-opacity','0');
        if(data.lj === 1) {
            pathElement.setAttribute('stroke-miterlimit',data.ml);
        }
    }

    if(data.r === 2) {
        pathElement.setAttribute('fill-rule', 'evenodd');
    }

    if(data.ln){
        pathElement.setAttribute('id',data.ln);
    }
    if(data.cl){
        pathElement.setAttribute('class',data.cl);
    }
    if(data.bm){
        pathElement.style['mix-blend-mode'] = getBlendMode(data.bm);
    }
    this.stylesList.push(styleOb);
    this.addToAnimatedContents(data, elementData);
    return elementData;
};

SVGShapeElement.prototype.createGroupElement = function(data) {
    var elementData = new ShapeGroupData();
    if(data.ln){
        elementData.gr.setAttribute('id',data.ln);
    }
    if(data.cl){
        elementData.gr.setAttribute('class',data.cl);
    }
    if(data.bm){
        elementData.gr.style['mix-blend-mode'] = getBlendMode(data.bm);
    }
    return elementData;
};

SVGShapeElement.prototype.createTransformElement = function(data, container) {
    var transformProperty = TransformPropertyFactory.getTransformProperty(this,data,this);
    var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
    this.addToAnimatedContents(data, elementData);
    return elementData;
};

SVGShapeElement.prototype.createShapeElement = function(data, ownTransformers, level) {
    var ty = 4;
    if(data.ty === 'rc'){
        ty = 5;
    }else if(data.ty === 'el'){
        ty = 6;
    }else if(data.ty === 'sr'){
        ty = 7;
    }
    var shapeProperty = ShapePropertyFactory.getShapeProp(this,data,ty,this);
    var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
    this.shapes.push(elementData);
    this.addShapeToModifiers(elementData);
    this.addToAnimatedContents(data, elementData);
    return elementData;
};

SVGShapeElement.prototype.addToAnimatedContents = function(data, element) {
    var i = 0, len = this.animatedContents.length;
    while(i < len) {
        if(this.animatedContents[i].element === element) {
            return;
        }
        i += 1;
    }
    this.animatedContents.push({
        fn: SVGElementsRenderer.createRenderFunction(data),
        element: element,
        data: data
    });
};

SVGShapeElement.prototype.setElementStyles = function(elementData){
    var arr = elementData.styles;
    var j, jLen = this.stylesList.length;
    for (j = 0; j < jLen; j += 1) {
        if (!this.stylesList[j].closed) {
            arr.push(this.stylesList[j]);
        }
    }
};

SVGShapeElement.prototype.reloadShapes = function(){
    this._isFirstFrame = true;
    var i, len = this.itemsData.length;
    for( i = 0; i < len; i += 1) {
        this.prevViewData[i] = this.itemsData[i];
    }
    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement, 0, [], true);
    this.filterUniqueShapes();
    len = this.dynamicProperties.length;
    for(i = 0; i < len; i += 1) {
        this.dynamicProperties[i].getValue();
    }
    this.renderModifiers();
};

SVGShapeElement.prototype.searchShapes = function(arr,itemsData,prevViewData,container, level, transformers, render){
    var ownTransformers = [].concat(transformers);
    var i, len = arr.length - 1;
    var j, jLen;
    var ownStyles = [], ownModifiers = [], styleOb, currentTransform, modifier, processedPos;
    for(i=len;i>=0;i-=1){
        processedPos = this.searchProcessedElement(arr[i]);
        if(!processedPos){
            arr[i]._render = render;
        } else {
            itemsData[i] = prevViewData[processedPos - 1];
        }
        if(arr[i].ty == 'fl' || arr[i].ty == 'st' || arr[i].ty == 'gf' || arr[i].ty == 'gs'){
            if(!processedPos){
                itemsData[i] = this.createStyleElement(arr[i], level);
            } else {
                itemsData[i].style.closed = false;
            }
            if(arr[i]._render){
                container.appendChild(itemsData[i].style.pElem);
            }
            ownStyles.push(itemsData[i].style);
        }else if(arr[i].ty == 'gr'){
            if(!processedPos){
                itemsData[i] = this.createGroupElement(arr[i]);
            } else {
                jLen = itemsData[i].it.length;
                for(j=0;j<jLen;j+=1){
                    itemsData[i].prevViewData[j] = itemsData[i].it[j];
                }
            }
            this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,itemsData[i].gr, level + 1, ownTransformers, render);
            if(arr[i]._render){
                container.appendChild(itemsData[i].gr);
            }
        }else if(arr[i].ty == 'tr'){
            if(!processedPos){
                itemsData[i] = this.createTransformElement(arr[i], container);
            }
            currentTransform = itemsData[i].transform;
            ownTransformers.push(currentTransform);
        }else if(arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr'){
            if(!processedPos){
                itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
            }
            this.setElementStyles(itemsData[i]);

        }else if(arr[i].ty == 'tm' || arr[i].ty == 'rd' || arr[i].ty == 'ms'){
            if(!processedPos){
                modifier = ShapeModifiers.getModifier(arr[i].ty);
                modifier.init(this,arr[i]);
                itemsData[i] = modifier;
                this.shapeModifiers.push(modifier);
            } else {
                modifier = itemsData[i];
                modifier.closed = false;
            }
            ownModifiers.push(modifier);
        }else if(arr[i].ty == 'rp'){
            if(!processedPos){
                modifier = ShapeModifiers.getModifier(arr[i].ty);
                itemsData[i] = modifier;
                modifier.init(this,arr,i,itemsData);
                this.shapeModifiers.push(modifier);
                render = false;
            }else{
                modifier = itemsData[i];
                modifier.closed = true;
            }
            ownModifiers.push(modifier);
        }
        this.addProcessedElement(arr[i], i + 1);
    }
    len = ownStyles.length;
    for(i=0;i<len;i+=1){
        ownStyles[i].closed = true;
    }
    len = ownModifiers.length;
    for(i=0;i<len;i+=1){
        ownModifiers[i].closed = true;
    }
};

SVGShapeElement.prototype.renderInnerContent = function() {
    this.renderModifiers();
    var i, len = this.stylesList.length;
    for(i=0;i<len;i+=1){
        this.stylesList[i].reset();
    }
    this.renderShape();

    for (i = 0; i < len; i += 1) {
        if (this.stylesList[i]._mdf || this._isFirstFrame) {
            if(this.stylesList[i].msElem){
                this.stylesList[i].msElem.setAttribute('d', this.stylesList[i].d);
                //Adding M0 0 fixes same mask bug on all browsers
                this.stylesList[i].d = 'M0 0' + this.stylesList[i].d;
            }
            this.stylesList[i].pElem.setAttribute('d', this.stylesList[i].d || 'M0 0');
        }
    }
};

SVGShapeElement.prototype.renderShape = function() {
    var i, len = this.animatedContents.length;
    var animatedContent;
    for(i = 0; i < len; i += 1) {
        animatedContent = this.animatedContents[i];
        if((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
            animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
        }
    }
}

SVGShapeElement.prototype.destroy = function(){
    this.destroyBaseElement();
    this.shapesData = null;
    this.itemsData = null;
};

function SVGTintFilter(filter, filterManager){
    this.filterManager = filterManager;
    var feColorMatrix = createNS('feColorMatrix');
    feColorMatrix.setAttribute('type','matrix');
    feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');
    feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
    feColorMatrix.setAttribute('result','f1');
    filter.appendChild(feColorMatrix);
    feColorMatrix = createNS('feColorMatrix');
    feColorMatrix.setAttribute('type','matrix');
    feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
    feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
    feColorMatrix.setAttribute('result','f2');
    filter.appendChild(feColorMatrix);
    this.matrixFilter = feColorMatrix;
    if(filterManager.effectElements[2].p.v !== 100 || filterManager.effectElements[2].p.k){
        var feMerge = createNS('feMerge');
        filter.appendChild(feMerge);
        var feMergeNode;
        feMergeNode = createNS('feMergeNode');
        feMergeNode.setAttribute('in','SourceGraphic');
        feMerge.appendChild(feMergeNode);
        feMergeNode = createNS('feMergeNode');
        feMergeNode.setAttribute('in','f2');
        feMerge.appendChild(feMergeNode);
    }
}

SVGTintFilter.prototype.renderFrame = function(forceRender){
    if(forceRender || this.filterManager._mdf){
        var colorBlack = this.filterManager.effectElements[0].p.v;
        var colorWhite = this.filterManager.effectElements[1].p.v;
        var opacity = this.filterManager.effectElements[2].p.v/100;
        this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
    }
};
function SVGFillFilter(filter, filterManager){
    this.filterManager = filterManager;
    var feColorMatrix = createNS('feColorMatrix');
    feColorMatrix.setAttribute('type','matrix');
    feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
    feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
    filter.appendChild(feColorMatrix);
    this.matrixFilter = feColorMatrix;
}
SVGFillFilter.prototype.renderFrame = function(forceRender){
    if(forceRender || this.filterManager._mdf){
        var color = this.filterManager.effectElements[2].p.v;
        var opacity = this.filterManager.effectElements[6].p.v;
        this.matrixFilter.setAttribute('values','0 0 0 0 '+color[0]+' 0 0 0 0 '+color[1]+' 0 0 0 0 '+color[2]+' 0 0 0 '+opacity+' 0');
    }
};
function SVGStrokeEffect(elem, filterManager){
    this.initialized = false;
    this.filterManager = filterManager;
    this.elem = elem;
    this.paths = [];
}

SVGStrokeEffect.prototype.initialize = function(){

    var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
    var path,groupPath, i, len;
    if(this.filterManager.effectElements[1].p.v === 1){
        len = this.elem.maskManager.masksProperties.length;
        i = 0;
    } else {
        i = this.filterManager.effectElements[0].p.v - 1;
        len = i + 1;
    }
    groupPath = createNS('g'); 
    groupPath.setAttribute('fill','none');
    groupPath.setAttribute('stroke-linecap','round');
    groupPath.setAttribute('stroke-dashoffset',1);
    for(i;i<len;i+=1){
        path = createNS('path');
        groupPath.appendChild(path);
        this.paths.push({p:path,m:i});
    }
    if(this.filterManager.effectElements[10].p.v === 3){
        var mask = createNS('mask');
        var id = createElementID();
        mask.setAttribute('id',id);
        mask.setAttribute('mask-type','alpha');
        mask.appendChild(groupPath);
        this.elem.globalData.defs.appendChild(mask);
        var g = createNS('g');
        g.setAttribute('mask','url(' + locationHref + '#'+id+')');
        while (elemChildren[0]) {
            g.appendChild(elemChildren[0]);
        }
        this.elem.layerElement.appendChild(g);
        this.masker = mask;
        groupPath.setAttribute('stroke','#fff');
    } else if(this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2){
        if(this.filterManager.effectElements[10].p.v === 2){
            elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
            while(elemChildren.length){
                this.elem.layerElement.removeChild(elemChildren[0]);
            }
        }
        this.elem.layerElement.appendChild(groupPath);
        this.elem.layerElement.removeAttribute('mask');
        groupPath.setAttribute('stroke','#fff');
    }
    this.initialized = true;
    this.pathMasker = groupPath;
};

SVGStrokeEffect.prototype.renderFrame = function(forceRender){
    if(!this.initialized){
        this.initialize();
    }
    var i, len = this.paths.length;
    var mask, path;
    for(i=0;i<len;i+=1){
        if(this.paths[i].m === -1) {
            continue;
        }
        mask = this.elem.maskManager.viewData[this.paths[i].m];
        path = this.paths[i].p;
        if(forceRender || this.filterManager._mdf || mask.prop._mdf){
            path.setAttribute('d',mask.lastPath);
        }
        if(forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf){
            var dasharrayValue;
            if(this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100){
                var s = Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)/100;
                var e = Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)/100;
                var l = path.getTotalLength();
                dasharrayValue = '0 0 0 ' + l*s + ' ';
                var lineLength = l*(e-s);
                var segment = 1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100;
                var units = Math.floor(lineLength/segment);
                var j;
                for(j=0;j<units;j+=1){
                    dasharrayValue += '1 ' + this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100 + ' ';
                }
                dasharrayValue += '0 ' + l*10 + ' 0 0';
            } else {
                dasharrayValue = '1 ' + this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100;
            }
            path.setAttribute('stroke-dasharray',dasharrayValue);
        }
    }
    if(forceRender || this.filterManager.effectElements[4].p._mdf){
        this.pathMasker.setAttribute('stroke-width',this.filterManager.effectElements[4].p.v*2);
    }
    
    if(forceRender || this.filterManager.effectElements[6].p._mdf){
        this.pathMasker.setAttribute('opacity',this.filterManager.effectElements[6].p.v);
    }
    if(this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2){
        if(forceRender || this.filterManager.effectElements[3].p._mdf){
            var color = this.filterManager.effectElements[3].p.v;
            this.pathMasker.setAttribute('stroke','rgb('+bm_floor(color[0]*255)+','+bm_floor(color[1]*255)+','+bm_floor(color[2]*255)+')');
        }
    }
};
function SVGTritoneFilter(filter, filterManager){
    this.filterManager = filterManager;
    var feColorMatrix = createNS('feColorMatrix');
    feColorMatrix.setAttribute('type','matrix');
    feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');
    feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
    feColorMatrix.setAttribute('result','f1');
    filter.appendChild(feColorMatrix);
    var feComponentTransfer = createNS('feComponentTransfer');
    feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
    filter.appendChild(feComponentTransfer);
    this.matrixFilter = feComponentTransfer;
    var feFuncR = createNS('feFuncR');
    feFuncR.setAttribute('type','table');
    feComponentTransfer.appendChild(feFuncR);
    this.feFuncR = feFuncR;
    var feFuncG = createNS('feFuncG');
    feFuncG.setAttribute('type','table');
    feComponentTransfer.appendChild(feFuncG);
    this.feFuncG = feFuncG;
    var feFuncB = createNS('feFuncB');
    feFuncB.setAttribute('type','table');
    feComponentTransfer.appendChild(feFuncB);
    this.feFuncB = feFuncB;
}

SVGTritoneFilter.prototype.renderFrame = function(forceRender){
    if(forceRender || this.filterManager._mdf){
        var color1 = this.filterManager.effectElements[0].p.v;
        var color2 = this.filterManager.effectElements[1].p.v;
        var color3 = this.filterManager.effectElements[2].p.v;
        var tableR = color3[0] + ' ' + color2[0] + ' ' + color1[0];
        var tableG = color3[1] + ' ' + color2[1] + ' ' + color1[1];
        var tableB = color3[2] + ' ' + color2[2] + ' ' + color1[2];
        this.feFuncR.setAttribute('tableValues', tableR);
        this.feFuncG.setAttribute('tableValues', tableG);
        this.feFuncB.setAttribute('tableValues', tableB);
        //var opacity = this.filterManager.effectElements[2].p.v/100;
        //this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
    }
};
function SVGProLevelsFilter(filter, filterManager){
    this.filterManager = filterManager;
    var effectElements = this.filterManager.effectElements;
    var feComponentTransfer = createNS('feComponentTransfer');
    var feFuncR, feFuncG, feFuncB;
    
    if(effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1){
        this.feFuncR = this.createFeFunc('feFuncR', feComponentTransfer);
    }
    if(effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1){
        this.feFuncG = this.createFeFunc('feFuncG', feComponentTransfer);
    }
    if(effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1){
        this.feFuncB = this.createFeFunc('feFuncB', feComponentTransfer);
    }
    if(effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1){
        this.feFuncA = this.createFeFunc('feFuncA', feComponentTransfer);
    }
    
    if(this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA){
        feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
        filter.appendChild(feComponentTransfer);
        feComponentTransfer = createNS('feComponentTransfer');
    }

    if(effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1){

        feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
        filter.appendChild(feComponentTransfer);
        this.feFuncRComposed = this.createFeFunc('feFuncR', feComponentTransfer);
        this.feFuncGComposed = this.createFeFunc('feFuncG', feComponentTransfer);
        this.feFuncBComposed = this.createFeFunc('feFuncB', feComponentTransfer);
    }
}

SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
    var feFunc = createNS(type);
    feFunc.setAttribute('type','table');
    feComponentTransfer.appendChild(feFunc);
    return feFunc;
};

SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
    var cnt = 0;
    var segments = 256;
    var perc;
    var min = Math.min(inputBlack, inputWhite);
    var max = Math.max(inputBlack, inputWhite);
    var table = Array.call(null,{length:segments});
    var colorValue;
    var pos = 0;
    var outputDelta = outputWhite - outputBlack; 
    var inputDelta = inputWhite - inputBlack; 
    while(cnt <= 256) {
        perc = cnt/256;
        if(perc <= min){
            colorValue = inputDelta < 0 ? outputWhite : outputBlack;
        } else if(perc >= max){
            colorValue = inputDelta < 0 ? outputBlack : outputWhite;
        } else {
            colorValue = (outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma));
        }
        table[pos++] = colorValue;
        cnt += 256/(segments-1);
    }
    return table.join(' ');
};

SVGProLevelsFilter.prototype.renderFrame = function(forceRender){
    if(forceRender || this.filterManager._mdf){
        var val, cnt, perc, bezier;
        var effectElements = this.filterManager.effectElements;
        if(this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)){
            val = this.getTableValue(effectElements[3].p.v,effectElements[4].p.v,effectElements[5].p.v,effectElements[6].p.v,effectElements[7].p.v);
            this.feFuncRComposed.setAttribute('tableValues',val);
            this.feFuncGComposed.setAttribute('tableValues',val);
            this.feFuncBComposed.setAttribute('tableValues',val);
        }


        if(this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)){
            val = this.getTableValue(effectElements[10].p.v,effectElements[11].p.v,effectElements[12].p.v,effectElements[13].p.v,effectElements[14].p.v);
            this.feFuncR.setAttribute('tableValues',val);
        }

        if(this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)){
            val = this.getTableValue(effectElements[17].p.v,effectElements[18].p.v,effectElements[19].p.v,effectElements[20].p.v,effectElements[21].p.v);
            this.feFuncG.setAttribute('tableValues',val);
        }

        if(this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)){
            val = this.getTableValue(effectElements[24].p.v,effectElements[25].p.v,effectElements[26].p.v,effectElements[27].p.v,effectElements[28].p.v);
            this.feFuncB.setAttribute('tableValues',val);
        }

        if(this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)){
            val = this.getTableValue(effectElements[31].p.v,effectElements[32].p.v,effectElements[33].p.v,effectElements[34].p.v,effectElements[35].p.v);
            this.feFuncA.setAttribute('tableValues',val);
        }
        
    }
};
function SVGDropShadowEffect(filter, filterManager){
    filter.setAttribute('x','-100%');
    filter.setAttribute('y','-100%');
    filter.setAttribute('width','400%');
    filter.setAttribute('height','400%');
    this.filterManager = filterManager;

    var feGaussianBlur = createNS('feGaussianBlur');
    feGaussianBlur.setAttribute('in','SourceAlpha');
    feGaussianBlur.setAttribute('result','drop_shadow_1');
    feGaussianBlur.setAttribute('stdDeviation','0');
    this.feGaussianBlur = feGaussianBlur;
    filter.appendChild(feGaussianBlur);

    var feOffset = createNS('feOffset');
    feOffset.setAttribute('dx','25');
    feOffset.setAttribute('dy','0');
    feOffset.setAttribute('in','drop_shadow_1');
    feOffset.setAttribute('result','drop_shadow_2');
    this.feOffset = feOffset;
    filter.appendChild(feOffset);
    var feFlood = createNS('feFlood');
    feFlood.setAttribute('flood-color','#00ff00');
    feFlood.setAttribute('flood-opacity','1');
    feFlood.setAttribute('result','drop_shadow_3');
    this.feFlood = feFlood;
    filter.appendChild(feFlood);

    var feComposite = createNS('feComposite');
    feComposite.setAttribute('in','drop_shadow_3');
    feComposite.setAttribute('in2','drop_shadow_2');
    feComposite.setAttribute('operator','in');
    feComposite.setAttribute('result','drop_shadow_4');
    filter.appendChild(feComposite);


    var feMerge = createNS('feMerge');
    filter.appendChild(feMerge);
    var feMergeNode;
    feMergeNode = createNS('feMergeNode');
    feMerge.appendChild(feMergeNode);
    feMergeNode = createNS('feMergeNode');
    feMergeNode.setAttribute('in','SourceGraphic');
    this.feMergeNode = feMergeNode;
    this.feMerge = feMerge;
    this.originalNodeAdded = false;
    feMerge.appendChild(feMergeNode);
}

SVGDropShadowEffect.prototype.renderFrame = function(forceRender){
    if(forceRender || this.filterManager._mdf){
        if(forceRender || this.filterManager.effectElements[4].p._mdf){
            this.feGaussianBlur.setAttribute('stdDeviation', this.filterManager.effectElements[4].p.v / 4);
        }
        if(forceRender || this.filterManager.effectElements[0].p._mdf){
            var col = this.filterManager.effectElements[0].p.v;
            this.feFlood.setAttribute('flood-color',rgbToHex(Math.round(col[0]*255),Math.round(col[1]*255),Math.round(col[2]*255)));
        }
        if(forceRender || this.filterManager.effectElements[1].p._mdf){
            this.feFlood.setAttribute('flood-opacity',this.filterManager.effectElements[1].p.v/255);
        }
        if(forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf){
            var distance = this.filterManager.effectElements[3].p.v;
            var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
            var x = distance * Math.cos(angle);
            var y = distance * Math.sin(angle);
            this.feOffset.setAttribute('dx', x);
            this.feOffset.setAttribute('dy', y);
        }
        /*if(forceRender || this.filterManager.effectElements[5].p._mdf){
            if(this.filterManager.effectElements[5].p.v === 1 && this.originalNodeAdded) {
                this.feMerge.removeChild(this.feMergeNode);
                this.originalNodeAdded = false;
            } else if(this.filterManager.effectElements[5].p.v === 0 && !this.originalNodeAdded) {
                this.feMerge.appendChild(this.feMergeNode);
                this.originalNodeAdded = true;
            }
        }*/
    }
};
var _svgMatteSymbols = [];

function SVGMatte3Effect(filterElem, filterManager, elem){
    this.initialized = false;
    this.filterManager = filterManager;
    this.filterElem = filterElem;
    this.elem = elem;
    elem.matteElement = createNS('g');
    elem.matteElement.appendChild(elem.layerElement);
    elem.matteElement.appendChild(elem.transformedElement);
    elem.baseElement = elem.matteElement;
}

SVGMatte3Effect.prototype.findSymbol = function(mask) {
    var i = 0, len = _svgMatteSymbols.length;
    while(i < len) {
        if(_svgMatteSymbols[i] === mask) {
            return _svgMatteSymbols[i];
        }
        i += 1;
    }
    return null;
};

SVGMatte3Effect.prototype.replaceInParent = function(mask, symbolId) {
    var parentNode = mask.layerElement.parentNode;
    if(!parentNode) {
        return;
    }
    var children = parentNode.children;
    var i = 0, len = children.length;
    while (i < len) {
        if (children[i] === mask.layerElement) {
            break;
        }
        i += 1;
    }
    var nextChild;
    if (i <= len - 2) {
        nextChild = children[i + 1];
    }
    var useElem = createNS('use');
    useElem.setAttribute('href', '#' + symbolId);
    if(nextChild) {
        parentNode.insertBefore(useElem, nextChild);
    } else {
        parentNode.appendChild(useElem);
    }
};

SVGMatte3Effect.prototype.setElementAsMask = function(elem, mask) {
    if(!this.findSymbol(mask)) {
        var symbolId = createElementID();
        var masker = createNS('mask');
        masker.setAttribute('id', mask.layerId);
        masker.setAttribute('mask-type', 'alpha');
        _svgMatteSymbols.push(mask);
        var defs = elem.globalData.defs;
        defs.appendChild(masker);
        var symbol = createNS('symbol');
        symbol.setAttribute('id', symbolId);
        this.replaceInParent(mask, symbolId);
        symbol.appendChild(mask.layerElement);
        defs.appendChild(symbol);
        var useElem = createNS('use');
        useElem.setAttribute('href', '#' + symbolId);
        masker.appendChild(useElem);
        mask.data.hd = false;
        mask.show();
    }
    elem.setMatte(mask.layerId);
};

SVGMatte3Effect.prototype.initialize = function() {
    var ind = this.filterManager.effectElements[0].p.v;
    var elements = this.elem.comp.elements;
    var i = 0, len = elements.length;
    while (i < len) {
    	if (elements[i] && elements[i].data.ind === ind) {
    		this.setElementAsMask(this.elem, elements[i]);
    	}
    	i += 1;
    }
    this.initialized = true;
};

SVGMatte3Effect.prototype.renderFrame = function() {
	if(!this.initialized) {
		this.initialize();
	}
};
function SVGEffects(elem){
    var i, len = elem.data.ef ? elem.data.ef.length : 0;
    var filId = createElementID();
    var fil = filtersFactory.createFilter(filId);
    var count = 0;
    this.filters = [];
    var filterManager;
    for(i=0;i<len;i+=1){
        filterManager = null;
        if(elem.data.ef[i].ty === 20){
            count += 1;
            filterManager = new SVGTintFilter(fil, elem.effectsManager.effectElements[i]);
        }else if(elem.data.ef[i].ty === 21){
            count += 1;
            filterManager = new SVGFillFilter(fil, elem.effectsManager.effectElements[i]);
        }else if(elem.data.ef[i].ty === 22){
            filterManager = new SVGStrokeEffect(elem, elem.effectsManager.effectElements[i]);
        }else if(elem.data.ef[i].ty === 23){
            count += 1;
            filterManager = new SVGTritoneFilter(fil, elem.effectsManager.effectElements[i]);
        }else if(elem.data.ef[i].ty === 24){
            count += 1;
            filterManager = new SVGProLevelsFilter(fil, elem.effectsManager.effectElements[i]);
        }else if(elem.data.ef[i].ty === 25){
            count += 1;
            filterManager = new SVGDropShadowEffect(fil, elem.effectsManager.effectElements[i]);
        }else if(elem.data.ef[i].ty === 28){
            //count += 1;
            filterManager = new SVGMatte3Effect(fil, elem.effectsManager.effectElements[i], elem);
        }
        if(filterManager) {
            this.filters.push(filterManager);
        }
    }
    if(count){
        elem.globalData.defs.appendChild(fil);
        elem.layerElement.setAttribute('filter','url(' + locationHref + '#'+filId+')');
    }
    if (this.filters.length) {
        elem.addRenderableComponent(this);
    }
}

SVGEffects.prototype.renderFrame = function(_isFirstFrame){
    var i, len = this.filters.length;
    for(i=0;i<len;i+=1){
        this.filters[i].renderFrame(_isFirstFrame);
    }
};
function CVContextData() {
	this.saved = [];
    this.cArrPos = 0;
    this.cTr = new Matrix();
    this.cO = 1;
    var i, len = 15;
    this.savedOp = createTypedArray('float32', len);
    for(i=0;i<len;i+=1){
        this.saved[i] = createTypedArray('float32', 16);
    }
    this._length = len;
}

CVContextData.prototype.duplicate = function() {
	var newLength = this._length * 2;
	var currentSavedOp = this.savedOp;
    this.savedOp = createTypedArray('float32', newLength);
    this.savedOp.set(currentSavedOp);
    var i = 0;
    for(i = this._length; i < newLength; i += 1) {
        this.saved[i] = createTypedArray('float32', 16);
    }
    this._length = newLength;
};

CVContextData.prototype.reset = function() {
	this.cArrPos = 0;
	this.cTr.reset();
    this.cO = 1;
};
function CVBaseElement(){
}

CVBaseElement.prototype = {
    createElements: function(){},
    initRendererElement: function(){},
    createContainerElements: function(){
        this.canvasContext = this.globalData.canvasContext;
        this.renderableEffectsManager = new CVEffects(this);
    },
    createContent: function(){},
    setBlendMode: function(){
        var globalData = this.globalData;
        if(globalData.blendMode !== this.data.bm) {
            globalData.blendMode = this.data.bm;
            var blendModeValue = getBlendMode(this.data.bm);
            globalData.canvasContext.globalCompositeOperation = blendModeValue;
        }
    },
    createRenderableComponents: function(){
        this.maskManager = new CVMaskElement(this.data, this);
    },
    hideElement: function(){
        if (!this.hidden && (!this.isInRange || this.isTransparent)) {
            this.hidden = true;
        }
    },
    showElement: function(){
        if (this.isInRange && !this.isTransparent){
            this.hidden = false;
            this._isFirstFrame = true;
            this.maskManager._isFirstFrame = true;
        }
    },
    renderFrame: function() {
        if (this.hidden || this.data.hd) {
            return;
        }
        this.renderTransform();
        this.renderRenderable();
        this.setBlendMode();
        this.globalData.renderer.save();
        this.globalData.renderer.ctxTransform(this.finalTransform.mat.props);
        this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v);
        this.renderInnerContent();
        this.globalData.renderer.restore();
        if(this.maskManager.hasMasks) {
            this.globalData.renderer.restore(true);
        }
        if (this._isFirstFrame) {
            this._isFirstFrame = false;
        }
    },
    destroy: function(){
        this.canvasContext = null;
        this.data = null;
        this.globalData = null;
        this.maskManager.destroy();
    },
    mHelper: new Matrix()
};
CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;

function CVImageElement(data, globalData, comp){
    this.failed = false;
    this.assetData = globalData.getAssetData(data.refId);
    this.img = globalData.imageLoader.getImage(this.assetData);
    this.initElement(data,globalData,comp);
}
extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);

CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

CVImageElement.prototype.createContent = function(){

    if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
        var canvas = createTag('canvas');
        canvas.width = this.assetData.w;
        canvas.height = this.assetData.h;
        var ctx = canvas.getContext('2d');

        var imgW = this.img.width;
        var imgH = this.img.height;
        var imgRel = imgW / imgH;
        var canvasRel = this.assetData.w/this.assetData.h;
        var widthCrop, heightCrop;
        var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
        if((imgRel > canvasRel && par === 'xMidYMid slice') || (imgRel < canvasRel && par !== 'xMidYMid slice')) {
            heightCrop = imgH;
            widthCrop = heightCrop*canvasRel;
        } else {
            widthCrop = imgW;
            heightCrop = widthCrop/canvasRel;
        }
        ctx.drawImage(this.img,(imgW-widthCrop)/2,(imgH-heightCrop)/2,widthCrop,heightCrop,0,0,this.assetData.w,this.assetData.h);
        this.img = canvas;
    }

};

CVImageElement.prototype.renderInnerContent = function(parentMatrix){
    if (this.failed) {
        return;
    }
    this.canvasContext.drawImage(this.img, 0, 0);
};

CVImageElement.prototype.destroy = function(){
    this.img = null;
};
function CVCompElement(data, globalData, comp) {
    this.completeLayers = false;
    this.layers = data.layers;
    this.pendingElements = [];
    this.elements = createSizedArray(this.layers.length);
    this.initElement(data, globalData, comp);
    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate, this) : {_placeholder:true};
}

extendPrototype([CanvasRenderer, ICompElement, CVBaseElement], CVCompElement);

CVCompElement.prototype.renderInnerContent = function() {
    var i,len = this.layers.length;
    for( i = len - 1; i >= 0; i -= 1 ){
        if(this.completeLayers || this.elements[i]){
            this.elements[i].renderFrame();
        }
    }
};

CVCompElement.prototype.destroy = function(){
    var i,len = this.layers.length;
    for( i = len - 1; i >= 0; i -= 1 ){
        if(this.elements[i]) {
            this.elements[i].destroy();
        }
    }
    this.layers = null;
    this.elements = null;
};

function CVMaskElement(data,element){
    this.data = data;
    this.element = element;
    this.masksProperties = this.data.masksProperties || [];
    this.viewData = createSizedArray(this.masksProperties.length);
    var i, len = this.masksProperties.length, hasMasks = false;
    for (i = 0; i < len; i++) {
        if(this.masksProperties[i].mode !== 'n'){
            hasMasks = true;
        }
        this.viewData[i] = ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[i],3);
    }
    this.hasMasks = hasMasks;
    if(hasMasks) {
        this.element.addRenderableComponent(this);
    }
}

CVMaskElement.prototype.renderFrame = function () {
    if(!this.hasMasks){
        return;
    }
    var transform = this.element.finalTransform.mat;
    var ctx = this.element.canvasContext;
    var i, len = this.masksProperties.length;
    var pt,pts,data;
    ctx.beginPath();
    for (i = 0; i < len; i++) {
        if(this.masksProperties[i].mode !== 'n'){
            if (this.masksProperties[i].inv) {
                ctx.moveTo(0, 0);
                ctx.lineTo(this.element.globalData.compSize.w, 0);
                ctx.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
                ctx.lineTo(0, this.element.globalData.compSize.h);
                ctx.lineTo(0, 0);
            }
            data = this.viewData[i].v;
            pt = transform.applyToPointArray(data.v[0][0],data.v[0][1],0);
            ctx.moveTo(pt[0], pt[1]);
            var j, jLen = data._length;
            for (j = 1; j < jLen; j++) {
                pts = transform.applyToTriplePoints(data.o[j - 1], data.i[j], data.v[j]);
                ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
            }
            pts = transform.applyToTriplePoints(data.o[j - 1], data.i[0], data.v[0]);
            ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
        }
    }
    this.element.globalData.renderer.save(true);
    ctx.clip();
};

CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;

CVMaskElement.prototype.destroy = function(){
    this.element = null;
};
function CVShapeElement(data, globalData, comp) {
    this.shapes = [];
    this.shapesData = data.shapes;
    this.stylesList = [];
    this.itemsData = [];
    this.prevViewData = [];
    this.shapeModifiers = [];
    this.processedElements = [];
    this.transformsManager = new ShapeTransformManager();
    this.initElement(data, globalData, comp);
}

extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement], CVShapeElement);

CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;

CVShapeElement.prototype.transformHelper = {opacity:1,_opMdf:false};

CVShapeElement.prototype.dashResetter = [];

CVShapeElement.prototype.createContent = function(){
    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData, true, []);
};

CVShapeElement.prototype.createStyleElement = function(data, transforms) {
    var styleElem = {
        data: data,
        type: data.ty,
        preTransforms: this.transformsManager.addTransformSequence(transforms),
        transforms: [],
        elements: [],
        closed: data.hd === true
    };
    var elementData = {};
    if(data.ty == 'fl' || data.ty == 'st'){
        elementData.c = PropertyFactory.getProp(this,data.c,1,255,this);
        if(!elementData.c.k){
            styleElem.co = 'rgb('+bm_floor(elementData.c.v[0])+','+bm_floor(elementData.c.v[1])+','+bm_floor(elementData.c.v[2])+')';
        }
    } else if (data.ty === 'gf' || data.ty === 'gs') {
        elementData.s = PropertyFactory.getProp(this,data.s,1,null,this);
        elementData.e = PropertyFactory.getProp(this,data.e,1,null,this);
        elementData.h = PropertyFactory.getProp(this,data.h||{k:0},0,0.01,this);
        elementData.a = PropertyFactory.getProp(this,data.a||{k:0},0,degToRads,this);
        elementData.g = new GradientProperty(this,data.g,this);
    }
    elementData.o = PropertyFactory.getProp(this,data.o,0,0.01,this);
    if(data.ty == 'st' || data.ty == 'gs') {
        styleElem.lc = this.lcEnum[data.lc] || 'round';
        styleElem.lj = this.ljEnum[data.lj] || 'round';
        if(data.lj == 1) {
            styleElem.ml = data.ml;
        }
        elementData.w = PropertyFactory.getProp(this,data.w,0,null,this);
        if(!elementData.w.k){
            styleElem.wi = elementData.w.v;
        }
        if(data.d){
            var d = new DashProperty(this,data.d,'canvas', this);
            elementData.d = d;
            if(!elementData.d.k){
                styleElem.da = elementData.d.dashArray;
                styleElem.do = elementData.d.dashoffset[0];
            }
        }
    } else {
        styleElem.r = data.r === 2 ? 'evenodd' : 'nonzero';
    }
    this.stylesList.push(styleElem);
    elementData.style = styleElem;
    return elementData;
};

CVShapeElement.prototype.createGroupElement = function(data) {
    var elementData = {
        it: [],
        prevViewData: []
    };
    return elementData;
};

CVShapeElement.prototype.createTransformElement = function(data) {
    var elementData = {
        transform : {
            opacity: 1,
            _opMdf:false,
            key: this.transformsManager.getNewKey(),
            op: PropertyFactory.getProp(this,data.o,0,0.01,this),
            mProps: TransformPropertyFactory.getTransformProperty(this,data,this)
        }
    };
    return elementData;
};

CVShapeElement.prototype.createShapeElement = function(data) {
    var elementData = new CVShapeData(this, data, this.stylesList, this.transformsManager);
    
    this.shapes.push(elementData);
    this.addShapeToModifiers(elementData);
    return elementData;
};

CVShapeElement.prototype.reloadShapes = function() {
    this._isFirstFrame = true;
    var i, len = this.itemsData.length;
    for (i = 0; i < len; i += 1) {
        this.prevViewData[i] = this.itemsData[i];
    }
    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData, true, []);
    len = this.dynamicProperties.length;
    for (i = 0; i < len; i += 1) {
        this.dynamicProperties[i].getValue();
    }
    this.renderModifiers();
    this.transformsManager.processSequences(this._isFirstFrame);
};

CVShapeElement.prototype.addTransformToStyleList = function(transform) {
    var i, len = this.stylesList.length;
    for (i = 0; i < len; i += 1) {
        if(!this.stylesList[i].closed) {
            this.stylesList[i].transforms.push(transform);
        }
    }
}

CVShapeElement.prototype.removeTransformFromStyleList = function() {
    var i, len = this.stylesList.length;
    for (i = 0; i < len; i += 1) {
        if(!this.stylesList[i].closed) {
            this.stylesList[i].transforms.pop();
        }
    }
}

CVShapeElement.prototype.closeStyles = function(styles) {
    var i, len = styles.length, j, jLen;
    for (i = 0; i < len; i += 1) {
        styles[i].closed = true;
    }
}

CVShapeElement.prototype.searchShapes = function(arr,itemsData, prevViewData, shouldRender, transforms){
    var i, len = arr.length - 1;
    var j, jLen;
    var ownStyles = [], ownModifiers = [], processedPos, modifier, currentTransform;
    var ownTransforms = [].concat(transforms);
    for(i=len;i>=0;i-=1){
        processedPos = this.searchProcessedElement(arr[i]);
        if(!processedPos){
            arr[i]._shouldRender = shouldRender;
        } else {
            itemsData[i] = prevViewData[processedPos - 1];
        }
        if(arr[i].ty == 'fl' || arr[i].ty == 'st'|| arr[i].ty == 'gf'|| arr[i].ty == 'gs'){
            if(!processedPos){
                itemsData[i] = this.createStyleElement(arr[i], ownTransforms);
            } else {
                itemsData[i].style.closed = false;
            }
            
            ownStyles.push(itemsData[i].style);
        }else if(arr[i].ty == 'gr'){
            if(!processedPos){
                itemsData[i] = this.createGroupElement(arr[i]);
            } else {
                jLen = itemsData[i].it.length;
                for(j=0;j<jLen;j+=1){
                    itemsData[i].prevViewData[j] = itemsData[i].it[j];
                }
            }
            this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData, shouldRender, ownTransforms);
        }else if(arr[i].ty == 'tr'){
            if(!processedPos){
                currentTransform = this.createTransformElement(arr[i]);
                itemsData[i] = currentTransform;
            }
            ownTransforms.push(itemsData[i]);
            this.addTransformToStyleList(itemsData[i]);
        }else if(arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr'){
            if(!processedPos){
                itemsData[i] = this.createShapeElement(arr[i]);
            }
            
        }else if(arr[i].ty == 'tm' || arr[i].ty == 'rd'){
            if(!processedPos){
                modifier = ShapeModifiers.getModifier(arr[i].ty);
                modifier.init(this,arr[i]);
                itemsData[i] = modifier;
                this.shapeModifiers.push(modifier);
            } else {
                modifier = itemsData[i];
                modifier.closed = false;
            }
            ownModifiers.push(modifier);
        } else if(arr[i].ty == 'rp'){
            if(!processedPos){
                modifier = ShapeModifiers.getModifier(arr[i].ty);
                itemsData[i] = modifier;
                modifier.init(this,arr,i,itemsData);
                this.shapeModifiers.push(modifier);
                shouldRender = false;
            }else{
                modifier = itemsData[i];
                modifier.closed = true;
            }
            ownModifiers.push(modifier);
        }
        this.addProcessedElement(arr[i], i + 1);
    }
    this.removeTransformFromStyleList();
    this.closeStyles(ownStyles);
    len = ownModifiers.length;
    for(i=0;i<len;i+=1){
        ownModifiers[i].closed = true;
    }
};

CVShapeElement.prototype.renderInnerContent = function() {
    this.transformHelper.opacity = 1;
    this.transformHelper._opMdf = false;
    this.renderModifiers();
    this.transformsManager.processSequences(this._isFirstFrame);
    this.renderShape(this.transformHelper,this.shapesData,this.itemsData,true);
};

CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
    var props, groupMatrix;
    if(parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
        groupTransform.opacity = parentTransform.opacity;
        groupTransform.opacity *= groupTransform.op.v;
        groupTransform._opMdf = true;
    }
};

CVShapeElement.prototype.drawLayer = function() {
    var i, len = this.stylesList.length;
    var j, jLen, k, kLen,elems,nodes, renderer = this.globalData.renderer, ctx = this.globalData.canvasContext, type, currentStyle;
    for(i=0;i<len;i+=1){
        currentStyle = this.stylesList[i];
        type = currentStyle.type;

        //Skipping style when
        //Stroke width equals 0
        //style should not be rendered (extra unused repeaters)
        //current opacity equals 0
        //global opacity equals 0
        if(((type === 'st' || type === 'gs') && currentStyle.wi === 0) || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0){
            continue;
        }
        renderer.save();
        elems = currentStyle.elements;
        if(type === 'st' || type === 'gs'){
            ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;
            ctx.lineWidth = currentStyle.wi;
            ctx.lineCap = currentStyle.lc;
            ctx.lineJoin = currentStyle.lj;
            ctx.miterLimit = currentStyle.ml || 0;
        } else {
            ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;
        }
        renderer.ctxOpacity(currentStyle.coOp);
        if(type !== 'st' && type !== 'gs'){
            ctx.beginPath();
        }
        renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);
        jLen = elems.length;
        for(j=0;j<jLen;j+=1){
            if(type === 'st' || type === 'gs'){
                ctx.beginPath();
                if(currentStyle.da){
                    ctx.setLineDash(currentStyle.da);
                    ctx.lineDashOffset = currentStyle.do;
                }
            }
            nodes = elems[j].trNodes;
            kLen = nodes.length;

            for(k=0;k<kLen;k+=1){
                if(nodes[k].t == 'm'){
                    ctx.moveTo(nodes[k].p[0],nodes[k].p[1]);
                }else if(nodes[k].t == 'c'){
                    ctx.bezierCurveTo(nodes[k].pts[0],nodes[k].pts[1],nodes[k].pts[2],nodes[k].pts[3],nodes[k].pts[4],nodes[k].pts[5]);
                }else{
                    ctx.closePath();
                }
            }
            if(type === 'st' || type === 'gs'){
                ctx.stroke();
                if(currentStyle.da){
                    ctx.setLineDash(this.dashResetter);
                }
            }
        }
        if(type !== 'st' && type !== 'gs'){
            ctx.fill(currentStyle.r);
        }
        renderer.restore();
    }
};

CVShapeElement.prototype.renderShape = function(parentTransform,items,data,isMain){
    var i, len = items.length - 1;
    var groupTransform;
    groupTransform = parentTransform;
    for(i=len;i>=0;i-=1){
        if(items[i].ty == 'tr'){
            groupTransform = data[i].transform;
            this.renderShapeTransform(parentTransform, groupTransform);
        }else if(items[i].ty == 'sh' || items[i].ty == 'el' || items[i].ty == 'rc' || items[i].ty == 'sr'){
            this.renderPath(items[i],data[i]);
        }else if(items[i].ty == 'fl'){
            this.renderFill(items[i],data[i],groupTransform);
        }else if(items[i].ty == 'st'){
            this.renderStroke(items[i],data[i],groupTransform);
        }else if(items[i].ty == 'gf' || items[i].ty == 'gs'){
            this.renderGradientFill(items[i],data[i],groupTransform);
        }else if(items[i].ty == 'gr'){
            this.renderShape(groupTransform,items[i].it,data[i].it);
        }else if(items[i].ty == 'tm'){
            //
        }
    }
    if(isMain){
        this.drawLayer();
    }
    
};

CVShapeElement.prototype.renderStyledShape = function(styledShape, shape){
    if(this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
        var shapeNodes = styledShape.trNodes;
        var paths = shape.paths;
        var i, len, j, jLen = paths._length;
        shapeNodes.length = 0;
        var groupTransformMat = styledShape.transforms.finalTransform;
        for (j = 0; j < jLen; j += 1) {
            var pathNodes = paths.shapes[j];
            if(pathNodes && pathNodes.v){
                len = pathNodes._length;
                for (i = 1; i < len; i += 1) {
                    if (i === 1) {
                        shapeNodes.push({
                            t: 'm',
                            p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                        });
                    }
                    shapeNodes.push({
                        t: 'c',
                        pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[i], pathNodes.v[i])
                    });
                }
                if (len === 1) {
                    shapeNodes.push({
                        t: 'm',
                        p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                    });
                }
                if (pathNodes.c && len) {
                    shapeNodes.push({
                        t: 'c',
                        pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[0], pathNodes.v[0])
                    });
                    shapeNodes.push({
                        t: 'z'
                    });
                }
            }
        }
        styledShape.trNodes = shapeNodes;
    }
}

CVShapeElement.prototype.renderPath = function(pathData,itemData){
    if(pathData.hd !== true && pathData._shouldRender) {
        var i, len = itemData.styledShapes.length;
        for (i = 0; i < len; i += 1) {
            this.renderStyledShape(itemData.styledShapes[i], itemData.sh);
        }
    }
};

CVShapeElement.prototype.renderFill = function(styleData,itemData, groupTransform){
    var styleElem = itemData.style;

    if (itemData.c._mdf || this._isFirstFrame) {
        styleElem.co = 'rgb(' 
        + bm_floor(itemData.c.v[0]) + ',' 
        + bm_floor(itemData.c.v[1]) + ',' 
        + bm_floor(itemData.c.v[2]) + ')';
    }
    if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
        styleElem.coOp = itemData.o.v * groupTransform.opacity;
    }
};

CVShapeElement.prototype.renderGradientFill = function(styleData,itemData, groupTransform){
    var styleElem = itemData.style;
    if(!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || (styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf))) {
        var ctx = this.globalData.canvasContext;
        var grd;
        var pt1 = itemData.s.v, pt2 = itemData.e.v;
        if (styleData.t === 1) {
            grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
        } else {
            var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);

            var percent = itemData.h.v >= 1 ? 0.99 : itemData.h.v <= -1 ? -0.99: itemData.h.v;
            var dist = rad * percent;
            var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
            var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
            var grd = ctx.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);
        }

        var i, len = styleData.g.p;
        var cValues = itemData.g.c;
        var opacity = 1;

        for (i = 0; i < len; i += 1){
            if(itemData.g._hasOpacity && itemData.g._collapsable) {
                opacity = itemData.g.o[i*2 + 1];
            }
            grd.addColorStop(cValues[i * 4] / 100,'rgba('+ cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ','+cValues[i * 4 + 3] + ',' + opacity + ')');
        }
        styleElem.grd = grd;
    }
    styleElem.coOp = itemData.o.v*groupTransform.opacity;
    
};

CVShapeElement.prototype.renderStroke = function(styleData,itemData, groupTransform){
    var styleElem = itemData.style;
    var d = itemData.d;
    if(d && (d._mdf  || this._isFirstFrame)){
        styleElem.da = d.dashArray;
        styleElem.do = d.dashoffset[0];
    }
    if(itemData.c._mdf || this._isFirstFrame){
        styleElem.co = 'rgb('+bm_floor(itemData.c.v[0])+','+bm_floor(itemData.c.v[1])+','+bm_floor(itemData.c.v[2])+')';
    }
    if(itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame){
        styleElem.coOp = itemData.o.v*groupTransform.opacity;
    }
    if(itemData.w._mdf || this._isFirstFrame){
        styleElem.wi = itemData.w.v;
    }
};


CVShapeElement.prototype.destroy = function(){
    this.shapesData = null;
    this.globalData = null;
    this.canvasContext = null;
    this.stylesList.length = 0;
    this.itemsData.length = 0;
};


function CVSolidElement(data, globalData, comp) {
    this.initElement(data,globalData,comp);
}
extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);

CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

CVSolidElement.prototype.renderInnerContent = function() {
    var ctx = this.canvasContext;
    ctx.fillStyle = this.data.sc;
    ctx.fillRect(0, 0, this.data.sw, this.data.sh);
    //
};
function CVTextElement(data, globalData, comp){
    this.textSpans = [];
    this.yOffset = 0;
    this.fillColorAnim = false;
    this.strokeColorAnim = false;
    this.strokeWidthAnim = false;
    this.stroke = false;
    this.fill = false;
    this.justifyOffset = 0;
    this.currentRender = null;
    this.renderType = 'canvas';
    this.values = {
        fill: 'rgba(0,0,0,0)',
        stroke: 'rgba(0,0,0,0)',
        sWidth: 0,
        fValue: ''
    };
    this.initElement(data,globalData,comp);
}
extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement], CVTextElement);

CVTextElement.prototype.tHelper = createTag('canvas').getContext('2d');

CVTextElement.prototype.buildNewText = function(){
    var documentData = this.textProperty.currentData;
    this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);

    var hasFill = false;
    if(documentData.fc) {
        hasFill = true;
        this.values.fill = this.buildColor(documentData.fc);
    }else{
        this.values.fill = 'rgba(0,0,0,0)';
    }
    this.fill = hasFill;
    var hasStroke = false;
    if(documentData.sc){
        hasStroke = true;
        this.values.stroke = this.buildColor(documentData.sc);
        this.values.sWidth = documentData.sw;
    }
    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
    var i, len;
    var letters = documentData.l;
    var matrixHelper = this.mHelper;
    this.stroke = hasStroke;
    this.values.fValue = documentData.finalSize + 'px '+ this.globalData.fontManager.getFontByName(documentData.f).fFamily;
    len = documentData.finalText.length;
    //this.tHelper.font = this.values.fValue;
    var charData, shapeData, k, kLen, shapes, j, jLen, pathNodes, commands, pathArr, singleShape = this.data.singleShape;
    var trackingOffset = documentData.tr/1000*documentData.finalSize;
    var xPos = 0, yPos = 0, firstLine = true;
    var cnt = 0;
    for (i = 0; i < len; i += 1) {
        charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
        shapeData = charData && charData.data || {};
        matrixHelper.reset();
        if(singleShape && letters[i].n) {
            xPos = -trackingOffset;
            yPos += documentData.yOffset;
            yPos += firstLine ? 1 : 0;
            firstLine = false;
        }

        shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
        jLen = shapes.length;
        matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);
        if(singleShape){
            this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
        }
        commands = createSizedArray(jLen);
        for(j=0;j<jLen;j+=1){
            kLen = shapes[j].ks.k.i.length;
            pathNodes = shapes[j].ks.k;
            pathArr = [];
            for(k=1;k<kLen;k+=1){
                if(k==1){
                    pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));
                }
                pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToY(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToX(pathNodes.v[k][0],pathNodes.v[k][1],0),matrixHelper.applyToY(pathNodes.v[k][0],pathNodes.v[k][1],0));
            }
            pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToY(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));
            commands[j] = pathArr;
        }
        if(singleShape){
            xPos += letters[i].l;
            xPos += trackingOffset;
        }
        if(this.textSpans[cnt]){
            this.textSpans[cnt].elem = commands;
        } else {
            this.textSpans[cnt] = {elem: commands};
        }
        cnt +=1;
    }
};

CVTextElement.prototype.renderInnerContent = function(){
    var ctx = this.canvasContext;
    var finalMat = this.finalTransform.mat.props;
    ctx.font = this.values.fValue;
    ctx.lineCap = 'butt';
    ctx.lineJoin = 'miter';
    ctx.miterLimit = 4;

    if(!this.data.singleShape){
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
    }

    var  i,len, j, jLen, k, kLen;
    var renderedLetters = this.textAnimator.renderedLetters;

    var letters = this.textProperty.currentData.l;

    len = letters.length;
    var renderedLetter;
    var lastFill = null, lastStroke = null, lastStrokeW = null, commands, pathArr;
    for(i=0;i<len;i+=1){
        if(letters[i].n){
            continue;
        }
        renderedLetter = renderedLetters[i];
        if(renderedLetter){
            this.globalData.renderer.save();
            this.globalData.renderer.ctxTransform(renderedLetter.p);
            this.globalData.renderer.ctxOpacity(renderedLetter.o);
        }
        if(this.fill){
            if(renderedLetter && renderedLetter.fc){
                if(lastFill !== renderedLetter.fc){
                    lastFill = renderedLetter.fc;
                    ctx.fillStyle = renderedLetter.fc;
                }
            }else if(lastFill !== this.values.fill){
                lastFill = this.values.fill;
                ctx.fillStyle = this.values.fill;
            }
            commands = this.textSpans[i].elem;
            jLen = commands.length;
            this.globalData.canvasContext.beginPath();
            for(j=0;j<jLen;j+=1) {
                pathArr = commands[j];
                kLen = pathArr.length;
                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                for (k = 2; k < kLen; k += 6) {
                    this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
                }
            }
            this.globalData.canvasContext.closePath();
            this.globalData.canvasContext.fill();
            ///ctx.fillText(this.textSpans[i].val,0,0);
        }
        if(this.stroke){
            if(renderedLetter && renderedLetter.sw){
                if(lastStrokeW !== renderedLetter.sw){
                    lastStrokeW = renderedLetter.sw;
                    ctx.lineWidth = renderedLetter.sw;
                }
            }else if(lastStrokeW !== this.values.sWidth){
                lastStrokeW = this.values.sWidth;
                ctx.lineWidth = this.values.sWidth;
            }
            if(renderedLetter && renderedLetter.sc){
                if(lastStroke !== renderedLetter.sc){
                    lastStroke = renderedLetter.sc;
                    ctx.strokeStyle = renderedLetter.sc;
                }
            }else if(lastStroke !== this.values.stroke){
                lastStroke = this.values.stroke;
                ctx.strokeStyle = this.values.stroke;
            }
            commands = this.textSpans[i].elem;
            jLen = commands.length;
            this.globalData.canvasContext.beginPath();
            for(j=0;j<jLen;j+=1) {
                pathArr = commands[j];
                kLen = pathArr.length;
                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                for (k = 2; k < kLen; k += 6) {
                    this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
                }
            }
            this.globalData.canvasContext.closePath();
            this.globalData.canvasContext.stroke();
            ///ctx.strokeText(letters[i].val,0,0);
        }
        if(renderedLetter) {
            this.globalData.renderer.restore();
        }
    }
};
function CVEffects() {

}
CVEffects.prototype.renderFrame = function(){};
function HBaseElement(data,globalData,comp){}
HBaseElement.prototype = {
    checkBlendMode: function(){},
    initRendererElement: function(){
        this.baseElement = createTag(this.data.tg || 'div');
        if(this.data.hasMask) {
            this.svgElement = createNS('svg');
            this.layerElement = createNS('g');
            this.maskedElement = this.layerElement;
            this.svgElement.appendChild(this.layerElement);
            this.baseElement.appendChild(this.svgElement);
        } else {
            this.layerElement = this.baseElement;
        }
        styleDiv(this.baseElement);
    },
    createContainerElements: function(){
        this.renderableEffectsManager = new CVEffects(this);
        this.transformedElement = this.baseElement;
        this.maskedElement = this.layerElement;
        if (this.data.ln) {
            this.layerElement.setAttribute('id',this.data.ln);
        }
        if (this.data.cl) {
            this.layerElement.setAttribute('class', this.data.cl);
        }
        if (this.data.bm !== 0) {
            this.setBlendMode();
        }
    },
    renderElement: function() {
        if(this.finalTransform._matMdf){
            this.transformedElement.style.transform = this.transformedElement.style.webkitTransform = this.finalTransform.mat.toCSS();
        }
        if(this.finalTransform._opMdf){
            this.transformedElement.style.opacity = this.finalTransform.mProp.o.v;
        }
    },
    renderFrame: function() {
        //If it is exported as hidden (data.hd === true) no need to render
        //If it is not visible no need to render
        if (this.data.hd || this.hidden) {
            return;
        }
        this.renderTransform();
        this.renderRenderable();
        this.renderElement();
        this.renderInnerContent();
        if (this._isFirstFrame) {
            this._isFirstFrame = false;
        }
    },
    destroy: function(){
        this.layerElement = null;
        this.transformedElement = null;
        if(this.matteElement) {
            this.matteElement = null;
        }
        if(this.maskManager) {
            this.maskManager.destroy();
            this.maskManager = null;
        }
    },
    createRenderableComponents: function(){
        this.maskManager = new MaskElement(this.data, this, this.globalData);
    },
    addEffects: function(){
    },
    setMatte: function(){}
};
HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
HBaseElement.prototype.buildElementParenting = HybridRenderer.prototype.buildElementParenting;
function HSolidElement(data,globalData,comp){
    this.initElement(data,globalData,comp);
}
extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement], HSolidElement);

HSolidElement.prototype.createContent = function(){
    var rect;
    if(this.data.hasMask){
        rect = createNS('rect');
        rect.setAttribute('width',this.data.sw);
        rect.setAttribute('height',this.data.sh);
        rect.setAttribute('fill',this.data.sc);
        this.svgElement.setAttribute('width',this.data.sw);
        this.svgElement.setAttribute('height',this.data.sh);
    } else {
        rect = createTag('div');
        rect.style.width = this.data.sw + 'px';
        rect.style.height = this.data.sh + 'px';
        rect.style.backgroundColor = this.data.sc;
    }
    this.layerElement.appendChild(rect);
};

function HCompElement(data,globalData,comp){
    this.layers = data.layers;
    this.supports3d = !data.hasMask;
    this.completeLayers = false;
    this.pendingElements = [];
    this.elements = this.layers ? createSizedArray(this.layers.length) : [];
    this.initElement(data,globalData,comp);
    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this) : {_placeholder:true};
}

extendPrototype([HybridRenderer, ICompElement, HBaseElement], HCompElement);
HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;

HCompElement.prototype.createContainerElements = function(){
    this._createBaseContainerElements();
    //divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';
    if(this.data.hasMask){
        this.svgElement.setAttribute('width',this.data.w);
        this.svgElement.setAttribute('height',this.data.h);
        this.transformedElement = this.baseElement;
    } else {
        this.transformedElement = this.layerElement;
    }
};

HCompElement.prototype.addTo3dContainer = function(elem,pos) {
    var j = 0;
    var nextElement;
    while(j<pos){
        if(this.elements[j] && this.elements[j].getBaseElement){
            nextElement = this.elements[j].getBaseElement();
        }
        j += 1;
    }
    if(nextElement){
        this.layerElement.insertBefore(elem, nextElement);
    } else {
        this.layerElement.appendChild(elem);
    }
}

function HShapeElement(data,globalData,comp){
    //List of drawable elements
    this.shapes = [];
    // Full shape data
    this.shapesData = data.shapes;
    //List of styles that will be applied to shapes
    this.stylesList = [];
    //List of modifiers that will be applied to shapes
    this.shapeModifiers = [];
    //List of items in shape tree
    this.itemsData = [];
    //List of items in previous shape tree
    this.processedElements = [];
    // List of animated components
    this.animatedContents = [];
    this.shapesContainer = createNS('g');
    this.initElement(data,globalData,comp);
    //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
    // List of elements that have been created
    this.prevViewData = [];
    this.currentBBox = {
        x:999999,
        y: -999999,
        h: 0,
        w: 0
    };
}
extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement], HShapeElement);
HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;

HShapeElement.prototype.createContent = function(){
    var cont;
    this.baseElement.style.fontSize = 0;
    if (this.data.hasMask) {
        this.layerElement.appendChild(this.shapesContainer);
        cont = this.svgElement;
    } else {
        cont = createNS('svg');
        var size = this.comp.data ? this.comp.data : this.globalData.compSize;
        cont.setAttribute('width',size.w);
        cont.setAttribute('height',size.h);
        cont.appendChild(this.shapesContainer);
        this.layerElement.appendChild(cont);
    }

    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0, [], true);
    this.filterUniqueShapes();
    this.shapeCont = cont;
};

HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
    var i, len = transformers.length;
    for(i = 0; i < len; i += 1) {
        point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);
    }
    return point;
}

HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
    var shape = item.sh.v;
    var transformers = item.transformers;
    var i, len = shape._length, vPoint, oPoint, nextIPoint, nextVPoint, bounds;
    if (len <= 1) {
        return;
    }
    for (i = 0; i < len - 1; i += 1) {
        vPoint = this.getTransformedPoint(transformers, shape.v[i]);
        oPoint = this.getTransformedPoint(transformers, shape.o[i]);
        nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
        nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
    }
    if(shape.c) {
        vPoint = this.getTransformedPoint(transformers, shape.v[i]);
        oPoint = this.getTransformedPoint(transformers, shape.o[i]);
        nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
        nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
    }
}

HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
    this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
    var bounds = this.shapeBoundingBox;
    boundingBox.x = bm_min(bounds.left, boundingBox.x);
    boundingBox.xMax = bm_max(bounds.right, boundingBox.xMax);
    boundingBox.y = bm_min(bounds.top, boundingBox.y);
    boundingBox.yMax = bm_max(bounds.bottom, boundingBox.yMax);
}

HShapeElement.prototype.shapeBoundingBox = {
    left:0,
    right:0,
    top:0,
    bottom:0,
}

HShapeElement.prototype.tempBoundingBox = {
    x:0,
    xMax:0,
    y:0,
    yMax:0,
    width:0,
    height:0
}

HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p2, p3) {

    var bounds = [[p0[0],p3[0]], [p0[1],p3[1]]];

    for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {

      b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
      a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
      c = 3 * p1[i] - 3 * p0[i];

      b = b | 0;
      a = a | 0;
      c = c | 0;

      if (a === 0) {

        if (b === 0) {
          continue;
        }

        t = -c / b;

        if (0 < t && t < 1) {
          bounds[i].push(this.calculateF(t,p0,p1,p2,p3,i));
        }
        continue;
      }

      b2ac = b * b - 4 * c * a;

      if (b2ac < 0) {
        continue;
      }

      t1 = (-b + bm_sqrt(b2ac))/(2 * a);
      if (0 < t1 && t1 < 1) bounds[i].push(this.calculateF(t1,p0,p1,p2,p3,i));

      t2 = (-b - bm_sqrt(b2ac))/(2 * a);
      if (0 < t2 && t2 < 1) bounds[i].push(this.calculateF(t2,p0,p1,p2,p3,i));

    }

    this.shapeBoundingBox.left = bm_min.apply(null, bounds[0]);
    this.shapeBoundingBox.top = bm_min.apply(null, bounds[1]);
    this.shapeBoundingBox.right = bm_max.apply(null, bounds[0]);
    this.shapeBoundingBox.bottom = bm_max.apply(null, bounds[1]);
  };

  HShapeElement.prototype.calculateF = function(t, p0, p1, p2, p3, i) {
    return bm_pow(1-t, 3) * p0[i]
        + 3 * bm_pow(1-t, 2) * t * p1[i]
        + 3 * (1-t) * bm_pow(t, 2) * p2[i]
        + bm_pow(t, 3) * p3[i];
  }

HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
    var i, len = itemsData.length, path;
    for(i = 0; i < len; i += 1) {
        if(itemsData[i] && itemsData[i].sh) {
            this.calculateShapeBoundingBox(itemsData[i], boundingBox)
        } else if(itemsData[i] && itemsData[i].it) {
            this.calculateBoundingBox(itemsData[i].it, boundingBox)
        }
    }
}

HShapeElement.prototype.currentBoxContains = function(box) {
    return this.currentBBox.x <= box.x 
    && this.currentBBox.y <= box.y 
    && this.currentBBox.width + this.currentBBox.x >= box.x + box.width
    && this.currentBBox.height + this.currentBBox.y >= box.y + box.height
}

HShapeElement.prototype.renderInnerContent = function() {
    this._renderShapeFrame();

    if(!this.hidden && (this._isFirstFrame || this._mdf)) {
        var tempBoundingBox = this.tempBoundingBox;
        var max = 999999;
        tempBoundingBox.x = max;
        tempBoundingBox.xMax = -max;
        tempBoundingBox.y = max;
        tempBoundingBox.yMax = -max;
        this.calculateBoundingBox(this.itemsData, tempBoundingBox);
        tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
        tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
        //var tempBoundingBox = this.shapeCont.getBBox();
        if(this.currentBoxContains(tempBoundingBox)) {
            return;
        }
        var changed = false;
        if(this.currentBBox.w !== tempBoundingBox.width){
            this.currentBBox.w = tempBoundingBox.width;
            this.shapeCont.setAttribute('width',tempBoundingBox.width);
            changed = true;
        }
        if(this.currentBBox.h !== tempBoundingBox.height){
            this.currentBBox.h = tempBoundingBox.height;
            this.shapeCont.setAttribute('height',tempBoundingBox.height);
            changed = true;
        }
        if(changed  || this.currentBBox.x !== tempBoundingBox.x  || this.currentBBox.y !== tempBoundingBox.y){
            this.currentBBox.w = tempBoundingBox.width;
            this.currentBBox.h = tempBoundingBox.height;
            this.currentBBox.x = tempBoundingBox.x;
            this.currentBBox.y = tempBoundingBox.y;

            this.shapeCont.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);
            this.shapeCont.style.transform = this.shapeCont.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
        }
    }

};
function HTextElement(data,globalData,comp){
    this.textSpans = [];
    this.textPaths = [];
    this.currentBBox = {
        x:999999,
        y: -999999,
        h: 0,
        w: 0
    };
    this.renderType = 'svg';
    this.isMasked = false;
    this.initElement(data,globalData,comp);

}
extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement], HTextElement);

HTextElement.prototype.createContent = function(){
    this.isMasked = this.checkMasks();
    if(this.isMasked){
        this.renderType = 'svg';
        this.compW = this.comp.data.w;
        this.compH = this.comp.data.h;
        this.svgElement.setAttribute('width',this.compW);
        this.svgElement.setAttribute('height',this.compH);
        var g = createNS('g');
        this.maskedElement.appendChild(g);
        this.innerElem = g;
    } else {
        this.renderType = 'html';
        this.innerElem = this.layerElement;
    }

    this.checkParenting();

};

HTextElement.prototype.buildNewText = function(){
    var documentData = this.textProperty.currentData;
    this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
    var innerElemStyle = this.innerElem.style;
    innerElemStyle.color = innerElemStyle.fill = documentData.fc ? this.buildColor(documentData.fc) : 'rgba(0,0,0,0)';
    if(documentData.sc){
        innerElemStyle.stroke = this.buildColor(documentData.sc);
        innerElemStyle.strokeWidth = documentData.sw+'px';
    }
    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
    if(!this.globalData.fontManager.chars){
        innerElemStyle.fontSize = documentData.finalSize+'px';
        innerElemStyle.lineHeight = documentData.finalSize+'px';
        if(fontData.fClass){
            this.innerElem.className = fontData.fClass;
        } else {
            innerElemStyle.fontFamily = fontData.fFamily;
            var fWeight = documentData.fWeight, fStyle = documentData.fStyle;
            innerElemStyle.fontStyle = fStyle;
            innerElemStyle.fontWeight = fWeight;
        }
    }
    var i, len;

    var letters = documentData.l;
    len = letters.length;
    var tSpan,tParent,tCont;
    var matrixHelper = this.mHelper;
    var shapes, shapeStr = '';
    var cnt = 0;
    for (i = 0;i < len ;i += 1) {
        if(this.globalData.fontManager.chars){
            if(!this.textPaths[cnt]){
                tSpan = createNS('path');
                tSpan.setAttribute('stroke-linecap', 'butt');
                tSpan.setAttribute('stroke-linejoin','round');
                tSpan.setAttribute('stroke-miterlimit','4');
            } else {
                tSpan = this.textPaths[cnt];
            }
            if(!this.isMasked){
                if(this.textSpans[cnt]){
                    tParent = this.textSpans[cnt];
                    tCont = tParent.children[0];
                } else {

                    tParent = createTag('div');
                    tCont = createNS('svg');
                    tCont.appendChild(tSpan);
                    styleDiv(tParent);
                }
            }
        }else{
            if(!this.isMasked){
                if(this.textSpans[cnt]){
                    tParent = this.textSpans[cnt];
                    tSpan = this.textPaths[cnt];
                } else {
                    tParent = createTag('span');
                    styleDiv(tParent);
                    tSpan = createTag('span');
                    styleDiv(tSpan);
                    tParent.appendChild(tSpan);
                }
            } else {
                tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS('text');
            }
        }
        //tSpan.setAttribute('visibility', 'hidden');
        if(this.globalData.fontManager.chars){
            var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
            var shapeData;
            if(charData){
                shapeData = charData.data;
            } else {
                shapeData = null;
            }
            matrixHelper.reset();
            if(shapeData && shapeData.shapes){
                shapes = shapeData.shapes[0].it;
                matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);
                shapeStr = this.createPathShape(matrixHelper,shapes);
                tSpan.setAttribute('d',shapeStr);
            }
            if(!this.isMasked){
                this.innerElem.appendChild(tParent);
                if(shapeData && shapeData.shapes){

                    //document.body.appendChild is needed to get exact measure of shape
                    document.body.appendChild(tCont);
                    var boundingBox = tCont.getBBox();
                    tCont.setAttribute('width',boundingBox.width + 2);
                    tCont.setAttribute('height',boundingBox.height + 2);
                    tCont.setAttribute('viewBox',(boundingBox.x-1)+' '+ (boundingBox.y-1)+' '+ (boundingBox.width+2)+' '+ (boundingBox.height+2));
                    tCont.style.transform = tCont.style.webkitTransform = 'translate(' + (boundingBox.x-1) + 'px,' + (boundingBox.y-1) + 'px)';

                    letters[i].yOffset = boundingBox.y-1;

                } else{
                    tCont.setAttribute('width',1);
                    tCont.setAttribute('height',1);
                }
                    tParent.appendChild(tCont);
            }else{
                this.innerElem.appendChild(tSpan);
            }
        }else{
            tSpan.textContent = letters[i].val;
            tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space","preserve");
            if(!this.isMasked){
                this.innerElem.appendChild(tParent);
                //
                tSpan.style.transform = tSpan.style.webkitTransform = 'translate3d(0,'+ -documentData.finalSize/1.2+'px,0)';
            } else {
                this.innerElem.appendChild(tSpan);
            }
        }
        //
        if(!this.isMasked){
            this.textSpans[cnt] = tParent;
        }else{
            this.textSpans[cnt] = tSpan;
        }
        this.textSpans[cnt].style.display = 'block';
        this.textPaths[cnt] = tSpan;
        cnt += 1;
    }
    while(cnt < this.textSpans.length){
        this.textSpans[cnt].style.display = 'none';
        cnt += 1;
    }
};

HTextElement.prototype.renderInnerContent = function() {

    if(this.data.singleShape){
        if(!this._isFirstFrame && !this.lettersChangedFlag){
            return;
        } else {
            // Todo Benchmark if using this is better than getBBox
             if(this.isMasked && this.finalTransform._matMdf){
                 this.svgElement.setAttribute('viewBox',-this.finalTransform.mProp.p.v[0]+' '+ -this.finalTransform.mProp.p.v[1]+' '+this.compW+' '+this.compH);
                this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + -this.finalTransform.mProp.p.v[0] + 'px,' + -this.finalTransform.mProp.p.v[1] + 'px)';
             }
        }
    }

    this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
    if(!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag){
        return;
    }
    var  i,len, count = 0;
    var renderedLetters = this.textAnimator.renderedLetters;

    var letters = this.textProperty.currentData.l;

    len = letters.length;
    var renderedLetter, textSpan, textPath;
    for(i=0;i<len;i+=1){
        if(letters[i].n){
            count += 1;
            continue;
        }
        textSpan = this.textSpans[i];
        textPath = this.textPaths[i];
        renderedLetter = renderedLetters[count];
        count += 1;
        if(renderedLetter._mdf.m) {
            if(!this.isMasked){
                textSpan.style.transform = textSpan.style.webkitTransform = renderedLetter.m;
            }else{
                textSpan.setAttribute('transform',renderedLetter.m);
            }
        }
        ////textSpan.setAttribute('opacity',renderedLetter.o);
        textSpan.style.opacity = renderedLetter.o;
        if(renderedLetter.sw && renderedLetter._mdf.sw){
            textPath.setAttribute('stroke-width',renderedLetter.sw);
        }
        if(renderedLetter.sc && renderedLetter._mdf.sc){
            textPath.setAttribute('stroke',renderedLetter.sc);
        }
        if(renderedLetter.fc && renderedLetter._mdf.fc){
            textPath.setAttribute('fill',renderedLetter.fc);
            textPath.style.color = renderedLetter.fc;
        }
    }

    if(this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)){
        var boundingBox = this.innerElem.getBBox();

        if(this.currentBBox.w !== boundingBox.width){
            this.currentBBox.w = boundingBox.width;
            this.svgElement.setAttribute('width',boundingBox.width);
        }
        if(this.currentBBox.h !== boundingBox.height){
            this.currentBBox.h = boundingBox.height;
            this.svgElement.setAttribute('height',boundingBox.height);
        }

        var margin = 1;
        if(this.currentBBox.w !== (boundingBox.width + margin*2) || this.currentBBox.h !== (boundingBox.height + margin*2)  || this.currentBBox.x !== (boundingBox.x - margin)  || this.currentBBox.y !== (boundingBox.y - margin)){
            this.currentBBox.w = boundingBox.width + margin*2;
            this.currentBBox.h = boundingBox.height + margin*2;
            this.currentBBox.x = boundingBox.x - margin;
            this.currentBBox.y = boundingBox.y - margin;

            this.svgElement.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);
            this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
        }
    }
};
function HImageElement(data,globalData,comp){
    this.assetData = globalData.getAssetData(data.refId);
    this.initElement(data,globalData,comp);
}

extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement], HImageElement);


HImageElement.prototype.createContent = function(){
    var assetPath = this.globalData.getAssetsPath(this.assetData);
    var img = new Image();

    if(this.data.hasMask){
        this.imageElem = createNS('image');
        this.imageElem.setAttribute('width',this.assetData.w+"px");
        this.imageElem.setAttribute('height',this.assetData.h+"px");
        this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);
        this.layerElement.appendChild(this.imageElem);
        this.baseElement.setAttribute('width',this.assetData.w);
        this.baseElement.setAttribute('height',this.assetData.h);
    } else {
        this.layerElement.appendChild(img);
    }
    img.src = assetPath;
    if(this.data.ln){
        this.baseElement.setAttribute('id',this.data.ln);
    }
};
function HCameraElement(data,globalData,comp){
    this.initFrame();
    this.initBaseData(data,globalData,comp);
    this.initHierarchy();
    var getProp = PropertyFactory.getProp;
    this.pe = getProp(this,data.pe,0,0,this);
    if(data.ks.p.s){
        this.px = getProp(this,data.ks.p.x,1,0,this);
        this.py = getProp(this,data.ks.p.y,1,0,this);
        this.pz = getProp(this,data.ks.p.z,1,0,this);
    }else{
        this.p = getProp(this,data.ks.p,1,0,this);
    }
    if(data.ks.a){
        this.a = getProp(this,data.ks.a,1,0,this);
    }
    if(data.ks.or.k.length && data.ks.or.k[0].to){
        var i,len = data.ks.or.k.length;
        for(i=0;i<len;i+=1){
            data.ks.or.k[i].to = null;
            data.ks.or.k[i].ti = null;
        }
    }
    this.or = getProp(this,data.ks.or,1,degToRads,this);
    this.or.sh = true;
    this.rx = getProp(this,data.ks.rx,0,degToRads,this);
    this.ry = getProp(this,data.ks.ry,0,degToRads,this);
    this.rz = getProp(this,data.ks.rz,0,degToRads,this);
    this.mat = new Matrix();
    this._prevMat = new Matrix();
    this._isFirstFrame = true;
    
    // TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.
    this.finalTransform = {
        mProp: this
    };
}
extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);

HCameraElement.prototype.setup = function() {
    var i, len = this.comp.threeDElements.length, comp;
    for(i=0;i<len;i+=1){
        //[perspectiveElem,container]
        comp = this.comp.threeDElements[i];
        if(comp.type === '3d') {
            comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v+'px';
            comp.container.style.transformOrigin = comp.container.style.mozTransformOrigin = comp.container.style.webkitTransformOrigin = "0px 0px 0px";
            comp.perspectiveElem.style.transform = comp.perspectiveElem.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
        }
    }
};

HCameraElement.prototype.createElements = function(){
};

HCameraElement.prototype.hide = function(){
};

HCameraElement.prototype.renderFrame = function(){
    var _mdf = this._isFirstFrame;
    var i, len;
    if(this.hierarchy){
        len = this.hierarchy.length;
        for(i=0;i<len;i+=1){
            _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;
        }
    }
    if(_mdf || this.pe._mdf || (this.p && this.p._mdf) || (this.px && (this.px._mdf || this.py._mdf || this.pz._mdf)) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || (this.a && this.a._mdf)) {
        this.mat.reset();

        if(this.hierarchy){
            var mat;
            len = this.hierarchy.length - 1;
            for (i = len; i >= 0; i -= 1) {
                /*mat = this.hierarchy[i].finalTransform.mProp.v.props;
                console.log(mat)
                this.mat.transform(-mat[0],-mat[1],-mat[2],-mat[3],-mat[4],-mat[5],-mat[6],-mat[7],-mat[8],-mat[9],-mat[10],-mat[11],-mat[12],-mat[13],-mat[14],mat[15]);
                console.log(this.mat.props)*/
                var mTransf = this.hierarchy[i].finalTransform.mProp;
                this.mat.translate(-mTransf.p.v[0],-mTransf.p.v[1],mTransf.p.v[2]);
                this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
                this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
                this.mat.scale(1/mTransf.s.v[0],1/mTransf.s.v[1],1/mTransf.s.v[2]);
                this.mat.translate(mTransf.a.v[0],mTransf.a.v[1],mTransf.a.v[2]);
            }
        }

        if(this.p){
            this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]);
        }else{
            this.mat.translate(-this.px.v,-this.py.v,this.pz.v);
        }
        if(this.a){
            var diffVector = [this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]];
            var mag = Math.sqrt(Math.pow(diffVector[0],2)+Math.pow(diffVector[1],2)+Math.pow(diffVector[2],2));
            //var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));
            var lookDir = [diffVector[0]/mag,diffVector[1]/mag,diffVector[2]/mag];
            var lookLengthOnXZ = Math.sqrt( lookDir[2]*lookDir[2] + lookDir[0]*lookDir[0] );
            var m_rotationX = (Math.atan2( lookDir[1], lookLengthOnXZ ));
            var m_rotationY = (Math.atan2( lookDir[0], -lookDir[2]));
            this.mat.rotateY(m_rotationY).rotateX(-m_rotationX);

        }
        this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
        this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
        this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0);
        this.mat.translate(0,0,this.pe.v);


        

        var hasMatrixChanged = !this._prevMat.equals(this.mat);
        if((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
            len = this.comp.threeDElements.length;
            var comp;
            for(i=0;i<len;i+=1){
                comp = this.comp.threeDElements[i];
                if(comp.type === '3d') {
                    if(hasMatrixChanged) {
                        comp.container.style.transform = comp.container.style.webkitTransform = this.mat.toCSS();
                    }
                    if(this.pe._mdf) {
                        comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v+'px';
                    }
                }
            }
            this.mat.clone(this._prevMat);
        }
    }
    this._isFirstFrame = false;
};

HCameraElement.prototype.prepareFrame = function(num) {
    this.prepareProperties(num, true);
};

HCameraElement.prototype.destroy = function(){
};
HCameraElement.prototype.getBaseElement = function(){return null;};
function HEffects() {
}
HEffects.prototype.renderFrame = function(){};
var animationManager = (function(){
    var moduleOb = {};
    var registeredAnimations = [];
    var initTime = 0;
    var len = 0;
    var playingAnimationsNum = 0;
    var _stopped = true;
    var _isFrozen = false;

    function removeElement(ev){
        var i = 0;
        var animItem = ev.target;
        while(i<len) {
            if (registeredAnimations[i].animation === animItem) {
                registeredAnimations.splice(i, 1);
                i -= 1;
                len -= 1;
                if(!animItem.isPaused){
                    subtractPlayingCount();
                }
            }
            i += 1;
        }
    }

    function registerAnimation(element, animationData){
        if(!element){
            return null;
        }
        var i=0;
        while(i<len){
            if(registeredAnimations[i].elem == element && registeredAnimations[i].elem !== null ){
                return registeredAnimations[i].animation;
            }
            i+=1;
        }
        var animItem = new AnimationItem();
        setupAnimation(animItem, element);
        animItem.setData(element, animationData);
        return animItem;
    }

    function getRegisteredAnimations() {
        var i, len = registeredAnimations.length;
        var animations = [];
        for(i = 0; i < len; i += 1) {
            animations.push(registeredAnimations[i].animation);
        }
        return animations;
    }

    function addPlayingCount(){
        playingAnimationsNum += 1;
        activate();
    }

    function subtractPlayingCount(){
        playingAnimationsNum -= 1;
    }

    function setupAnimation(animItem, element){
        animItem.addEventListener('destroy',removeElement);
        animItem.addEventListener('_active',addPlayingCount);
        animItem.addEventListener('_idle',subtractPlayingCount);
        registeredAnimations.push({elem: element,animation:animItem});
        len += 1;
    }

    function loadAnimation(params){
        var animItem = new AnimationItem();
        setupAnimation(animItem, null);
        animItem.setParams(params);
        return animItem;
    }


    function setSpeed(val,animation){
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.setSpeed(val, animation);
        }
    }

    function setDirection(val, animation){
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.setDirection(val, animation);
        }
    }

    function play(animation){
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.play(animation);
        }
    }
    function resume(nowTime) {
        var elapsedTime = nowTime - initTime;
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.advanceTime(elapsedTime);
        }
        initTime = nowTime;
        if(playingAnimationsNum && !_isFrozen) {
            window.requestAnimationFrame(resume);
        } else {
            _stopped = true;
        }
    }

    function first(nowTime){
        initTime = nowTime;
        window.requestAnimationFrame(resume);
    }

    function pause(animation) {
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.pause(animation);
        }
    }

    function goToAndStop(value,isFrame,animation) {
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.goToAndStop(value,isFrame,animation);
        }
    }

    function stop(animation) {
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.stop(animation);
        }
    }

    function togglePause(animation) {
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.togglePause(animation);
        }
    }

    function destroy(animation) {
        var i;
        for(i=(len-1);i>=0;i-=1){
            registeredAnimations[i].animation.destroy(animation);
        }
    }

    function searchAnimations(animationData, standalone, renderer){
        var animElements = [].concat([].slice.call(document.getElementsByClassName('lottie')),
                  [].slice.call(document.getElementsByClassName('bodymovin')));
        var i, len = animElements.length;
        for(i=0;i<len;i+=1){
            if(renderer){
                animElements[i].setAttribute('data-bm-type',renderer);
            }
            registerAnimation(animElements[i], animationData);
        }
        if(standalone && len === 0){
            if(!renderer){
                renderer = 'svg';
            }
            var body = document.getElementsByTagName('body')[0];
            body.innerHTML = '';
            var div = createTag('div');
            div.style.width = '100%';
            div.style.height = '100%';
            div.setAttribute('data-bm-type',renderer);
            body.appendChild(div);
            registerAnimation(div, animationData);
        }
    }

    function resize(){
        var i;
        for(i=0;i<len;i+=1){
            registeredAnimations[i].animation.resize();
        }
    }

    function activate(){
        if(!_isFrozen && playingAnimationsNum){
            if(_stopped) {
                window.requestAnimationFrame(first);
                _stopped = false;
            }
        }
    }

    function freeze() {
        _isFrozen = true;
    }

    function unfreeze() {
        _isFrozen = false;
        activate();
    }

    moduleOb.registerAnimation = registerAnimation;
    moduleOb.loadAnimation = loadAnimation;
    moduleOb.setSpeed = setSpeed;
    moduleOb.setDirection = setDirection;
    moduleOb.play = play;
    moduleOb.pause = pause;
    moduleOb.stop = stop;
    moduleOb.togglePause = togglePause;
    moduleOb.searchAnimations = searchAnimations;
    moduleOb.resize = resize;
    //moduleOb.start = start;
    moduleOb.goToAndStop = goToAndStop;
    moduleOb.destroy = destroy;
    moduleOb.freeze = freeze;
    moduleOb.unfreeze = unfreeze;
    moduleOb.getRegisteredAnimations = getRegisteredAnimations;
    return moduleOb;
}());

var AnimationItem = function () {
    this._cbs = [];
    this.name = '';
    this.path = '';
    this.isLoaded = false;
    this.currentFrame = 0;
    this.currentRawFrame = 0;
    this.totalFrames = 0;
    this.frameRate = 0;
    this.frameMult = 0;
    this.playSpeed = 1;
    this.playDirection = 1;
    this.playCount = 0;
    this.animationData = {};
    this.assets = [];
    this.isPaused = true;
    this.autoplay = false;
    this.loop = true;
    this.renderer = null;
    this.animationID = createElementID();
    this.assetsPath = '';
    this.timeCompleted = 0;
    this.segmentPos = 0;
    this.subframeEnabled = subframeEnabled;
    this.segments = [];
    this._idle = true;
    this._completedLoop = false;
    this.projectInterface = ProjectInterface();
    this.imagePreloader = new ImagePreloader();
};

extendPrototype([BaseEvent], AnimationItem);

AnimationItem.prototype.setParams = function(params) {
    if(params.context){
        this.context = params.context;
    }
    if(params.wrapper || params.container){
        this.wrapper = params.wrapper || params.container;
    }
    var animType = params.animType ? params.animType : params.renderer ? params.renderer : 'svg';
    switch(animType){
        case 'canvas':
            this.renderer = new CanvasRenderer(this, params.rendererSettings);
            break;
        case 'svg':
            this.renderer = new SVGRenderer(this, params.rendererSettings);
            break;
        default:
            this.renderer = new HybridRenderer(this, params.rendererSettings);
            break;
    }
    this.renderer.setProjectInterface(this.projectInterface);
    this.animType = animType;

    if(params.loop === '' || params.loop === null){
    }else if(params.loop === false){
        this.loop = false;
    }else if(params.loop === true){
        this.loop = true;
    }else{
        this.loop = parseInt(params.loop);
    }
    this.autoplay = 'autoplay' in params ? params.autoplay : true;
    this.name = params.name ? params.name :  '';
    this.autoloadSegments = params.hasOwnProperty('autoloadSegments') ? params.autoloadSegments :  true;
    this.assetsPath = params.assetsPath;
    if(params.animationData){
        this.configAnimation(params.animationData);
    }else if(params.path){
        if(params.path.substr(-4) != 'json'){
            if (params.path.substr(-1, 1) != '/') {
                params.path += '/';
            }
            params.path += 'data.json';
        }

        if(params.path.lastIndexOf('\\') != -1){
            this.path = params.path.substr(0,params.path.lastIndexOf('\\')+1);
        }else{
            this.path = params.path.substr(0,params.path.lastIndexOf('/')+1);
        }
        this.fileName = params.path.substr(params.path.lastIndexOf('/')+1);
        this.fileName = this.fileName.substr(0,this.fileName.lastIndexOf('.json'));

        assetLoader.load(params.path, this.configAnimation.bind(this), function() {
            this.trigger('data_failed');
        }.bind(this));
    }
};

AnimationItem.prototype.setData = function (wrapper, animationData) {
    var params = {
        wrapper: wrapper,
        animationData: animationData ? (typeof animationData  === "object") ? animationData : JSON.parse(animationData) : null
    };
    var wrapperAttributes = wrapper.attributes;

    params.path = wrapperAttributes.getNamedItem('data-animation-path') ? wrapperAttributes.getNamedItem('data-animation-path').value : wrapperAttributes.getNamedItem('data-bm-path') ? wrapperAttributes.getNamedItem('data-bm-path').value :  wrapperAttributes.getNamedItem('bm-path') ? wrapperAttributes.getNamedItem('bm-path').value : '';
    params.animType = wrapperAttributes.getNamedItem('data-anim-type') ? wrapperAttributes.getNamedItem('data-anim-type').value : wrapperAttributes.getNamedItem('data-bm-type') ? wrapperAttributes.getNamedItem('data-bm-type').value : wrapperAttributes.getNamedItem('bm-type') ? wrapperAttributes.getNamedItem('bm-type').value :  wrapperAttributes.getNamedItem('data-bm-renderer') ? wrapperAttributes.getNamedItem('data-bm-renderer').value : wrapperAttributes.getNamedItem('bm-renderer') ? wrapperAttributes.getNamedItem('bm-renderer').value : 'canvas';

    var loop = wrapperAttributes.getNamedItem('data-anim-loop') ? wrapperAttributes.getNamedItem('data-anim-loop').value :  wrapperAttributes.getNamedItem('data-bm-loop') ? wrapperAttributes.getNamedItem('data-bm-loop').value :  wrapperAttributes.getNamedItem('bm-loop') ? wrapperAttributes.getNamedItem('bm-loop').value : '';
    if(loop === ''){
    }else if(loop === 'false'){
        params.loop = false;
    }else if(loop === 'true'){
        params.loop = true;
    }else{
        params.loop = parseInt(loop);
    }
    var autoplay = wrapperAttributes.getNamedItem('data-anim-autoplay') ? wrapperAttributes.getNamedItem('data-anim-autoplay').value :  wrapperAttributes.getNamedItem('data-bm-autoplay') ? wrapperAttributes.getNamedItem('data-bm-autoplay').value :  wrapperAttributes.getNamedItem('bm-autoplay') ? wrapperAttributes.getNamedItem('bm-autoplay').value : true;
    params.autoplay = autoplay !== "false";

    params.name = wrapperAttributes.getNamedItem('data-name') ? wrapperAttributes.getNamedItem('data-name').value :  wrapperAttributes.getNamedItem('data-bm-name') ? wrapperAttributes.getNamedItem('data-bm-name').value : wrapperAttributes.getNamedItem('bm-name') ? wrapperAttributes.getNamedItem('bm-name').value :  '';
    var prerender = wrapperAttributes.getNamedItem('data-anim-prerender') ? wrapperAttributes.getNamedItem('data-anim-prerender').value :  wrapperAttributes.getNamedItem('data-bm-prerender') ? wrapperAttributes.getNamedItem('data-bm-prerender').value :  wrapperAttributes.getNamedItem('bm-prerender') ? wrapperAttributes.getNamedItem('bm-prerender').value : '';

    if(prerender === 'false'){
        params.prerender = false;
    }
    this.setParams(params);
};

AnimationItem.prototype.includeLayers = function(data) {
    if(data.op > this.animationData.op){
        this.animationData.op = data.op;
        this.totalFrames = Math.floor(data.op - this.animationData.ip);
    }
    var layers = this.animationData.layers;
    var i, len = layers.length;
    var newLayers = data.layers;
    var j, jLen = newLayers.length;
    for(j=0;j<jLen;j+=1){
        i = 0;
        while(i<len){
            if(layers[i].id == newLayers[j].id){
                layers[i] = newLayers[j];
                break;
            }
            i += 1;
        }
    }
    if(data.chars || data.fonts){
        this.renderer.globalData.fontManager.addChars(data.chars);
        this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
    }
    if(data.assets){
        len = data.assets.length;
        for(i = 0; i < len; i += 1){
            this.animationData.assets.push(data.assets[i]);
        }
    }
    this.animationData.__complete = false;
    dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);
    this.renderer.includeLayers(data.layers);
    if(expressionsPlugin){
        expressionsPlugin.initExpressions(this);
    }
    this.loadNextSegment();
};

AnimationItem.prototype.loadNextSegment = function() {
    var segments = this.animationData.segments;
    if(!segments || segments.length === 0 || !this.autoloadSegments){
        this.trigger('data_ready');
        this.timeCompleted = this.totalFrames;
        return;
    }
    var segment = segments.shift();
    this.timeCompleted = segment.time * this.frameRate;
    var segmentPath = this.path+this.fileName+'_' + this.segmentPos + '.json';
    this.segmentPos += 1;
    assetLoader.load(segmentPath, this.includeLayers.bind(this), function() {
        this.trigger('data_failed');
    }.bind(this));
};

AnimationItem.prototype.loadSegments = function() {
    var segments = this.animationData.segments;
    if(!segments) {
        this.timeCompleted = this.totalFrames;
    }
    this.loadNextSegment();
};

AnimationItem.prototype.imagesLoaded = function() {
    this.trigger('loaded_images');
    this.checkLoaded()
}

AnimationItem.prototype.preloadImages = function() {
    this.imagePreloader.setAssetsPath(this.assetsPath);
    this.imagePreloader.setPath(this.path);
    this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
}

AnimationItem.prototype.configAnimation = function (animData) {
    if(!this.renderer){
        return;
    }
    this.animationData = animData;
    this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
    this.renderer.configAnimation(animData);
    if(!animData.assets){
        animData.assets = [];
    }
    this.renderer.searchExtraCompositions(animData.assets);

    this.assets = this.animationData.assets;
    this.frameRate = this.animationData.fr;
    this.firstFrame = Math.round(this.animationData.ip);
    this.frameMult = this.animationData.fr / 1000;
    this.trigger('config_ready');
    this.preloadImages();
    this.loadSegments();
    this.updaFrameModifier();
    this.waitForFontsLoaded();
};

AnimationItem.prototype.waitForFontsLoaded = function(){
    if(!this.renderer) {
        return;
    }
    if(this.renderer.globalData.fontManager.loaded()){
        this.checkLoaded();
    }else{
        setTimeout(this.waitForFontsLoaded.bind(this),20);
    }
}

AnimationItem.prototype.checkLoaded = function () {
    if (!this.isLoaded && this.renderer.globalData.fontManager.loaded() && (this.imagePreloader.loaded() || this.renderer.rendererType !== 'canvas')) {
        this.isLoaded = true;
        dataManager.completeData(this.animationData, this.renderer.globalData.fontManager);
        if(expressionsPlugin){
            expressionsPlugin.initExpressions(this);
        }
        this.renderer.initItems();
        setTimeout(function() {
            this.trigger('DOMLoaded');
        }.bind(this), 0);
        this.gotoFrame();
        if(this.autoplay){
            this.play();
        }
    }
};

AnimationItem.prototype.resize = function () {
    this.renderer.updateContainerSize();
};

AnimationItem.prototype.setSubframe = function(flag){
    this.subframeEnabled = flag ? true : false;
};

AnimationItem.prototype.gotoFrame = function () {
    this.currentFrame = this.subframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;

    if(this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted){
        this.currentFrame = this.timeCompleted;
    }
    this.trigger('enterFrame');
    this.renderFrame();
};

AnimationItem.prototype.renderFrame = function () {
    if(this.isLoaded === false){
        return;
    }
    this.renderer.renderFrame(this.currentFrame + this.firstFrame);
};

AnimationItem.prototype.play = function (name) {
    if(name && this.name != name){
        return;
    }
    if(this.isPaused === true){
        this.isPaused = false;
        if(this._idle){
            this._idle = false;
            this.trigger('_active');
        }
    }
};

AnimationItem.prototype.pause = function (name) {
    if(name && this.name != name){
        return;
    }
    if(this.isPaused === false){
        this.isPaused = true;
        this._idle = true;
        this.trigger('_idle');
    }
};

AnimationItem.prototype.togglePause = function (name) {
    if(name && this.name != name){
        return;
    }
    if(this.isPaused === true){
        this.play();
    }else{
        this.pause();
    }
};

AnimationItem.prototype.stop = function (name) {
    if(name && this.name != name){
        return;
    }
    this.pause();
    this.playCount = 0;
    this._completedLoop = false;
    this.setCurrentRawFrameValue(0);
};

AnimationItem.prototype.goToAndStop = function (value, isFrame, name) {
    if(name && this.name != name){
        return;
    }
    if(isFrame){
        this.setCurrentRawFrameValue(value);
    }else{
        this.setCurrentRawFrameValue(value * this.frameModifier);
    }
    this.pause();
};

AnimationItem.prototype.goToAndPlay = function (value, isFrame, name) {
    this.goToAndStop(value, isFrame, name);
    this.play();
};

AnimationItem.prototype.advanceTime = function (value) {
    if (this.isPaused === true || this.isLoaded === false) {
        return;
    }
    var nextValue = this.currentRawFrame + value * this.frameModifier;
    var _isComplete = false;
    // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
    // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.
    if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
        if (!this.loop || this.playCount === this.loop) {
            if (!this.checkSegments(nextValue >  this.totalFrames ? nextValue % this.totalFrames : 0)) {
                _isComplete = true;
                nextValue = this.totalFrames - 1;
            }
        } else if (nextValue >= this.totalFrames) {
            this.playCount += 1;
            if (!this.checkSegments(nextValue % this.totalFrames)) {
                this.setCurrentRawFrameValue(nextValue % this.totalFrames);
                this._completedLoop = true;
                this.trigger('loopComplete');
            }
        } else {
            this.setCurrentRawFrameValue(nextValue);
        }
    } else if(nextValue < 0) {
        if (!this.checkSegments(nextValue % this.totalFrames)) {
            if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
                this.setCurrentRawFrameValue(this.totalFrames + (nextValue % this.totalFrames));
                if(!this._completedLoop) {
                    this._completedLoop = true;
                } else {
                    this.trigger('loopComplete');
                }
            } else {
                _isComplete = true;
                nextValue = 0;
            }
        }
    } else {
        this.setCurrentRawFrameValue(nextValue);
    }
    if (_isComplete) {
        this.setCurrentRawFrameValue(nextValue);
        this.pause();
        this.trigger('complete');
    }
};

AnimationItem.prototype.adjustSegment = function(arr, offset){
    this.playCount = 0;
    if(arr[1] < arr[0]){
        if(this.frameModifier > 0){
            if(this.playSpeed < 0){
                this.setSpeed(-this.playSpeed);
            } else {
                this.setDirection(-1);
            }
        }
        this.timeCompleted = this.totalFrames = arr[0] - arr[1];
        this.firstFrame = arr[1];
        this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);
    } else if(arr[1] > arr[0]){
        if(this.frameModifier < 0){
            if(this.playSpeed < 0){
                this.setSpeed(-this.playSpeed);
            } else {
                this.setDirection(1);
            }
        }
        this.timeCompleted = this.totalFrames = arr[1] - arr[0];
        this.firstFrame = arr[0];
        this.setCurrentRawFrameValue(0.001 + offset);
    }
    this.trigger('segmentStart');
};
AnimationItem.prototype.setSegment = function (init,end) {
    var pendingFrame = -1;
    if(this.isPaused) {
        if (this.currentRawFrame + this.firstFrame < init) {
            pendingFrame = init;
        } else if (this.currentRawFrame + this.firstFrame > end) {
            pendingFrame = end - init;
        }
    }

    this.firstFrame = init;
    this.timeCompleted = this.totalFrames = end - init;
    if(pendingFrame !== -1) {
        this.goToAndStop(pendingFrame,true);
    }
};

AnimationItem.prototype.playSegments = function (arr, forceFlag) {
    if (forceFlag) {
        this.segments.length = 0;
    }
    if (typeof arr[0] === 'object') {
        var i, len = arr.length;
        for (i = 0; i < len; i += 1) {
            this.segments.push(arr[i]);
        }
    } else {
        this.segments.push(arr);
    }
    if (this.segments.length && forceFlag) {
        this.adjustSegment(this.segments.shift(), 0);
    }
    if (this.isPaused) {
        this.play();
    }
};

AnimationItem.prototype.resetSegments = function (forceFlag) {
    this.segments.length = 0;
    this.segments.push([this.animationData.ip,this.animationData.op]);
    //this.segments.push([this.animationData.ip*this.frameRate,Math.floor(this.animationData.op - this.animationData.ip+this.animationData.ip*this.frameRate)]);
    if (forceFlag) {
        this.checkSegments(0);
    }
};
AnimationItem.prototype.checkSegments = function(offset) {
    if (this.segments.length) {
        this.adjustSegment(this.segments.shift(), offset);
        return true;
    }
    return false;
};

AnimationItem.prototype.destroy = function (name) {
    if ((name && this.name != name) || !this.renderer) {
        return;
    }
    this.renderer.destroy();
    this.imagePreloader.destroy();
    this.trigger('destroy');
    this._cbs = null;
    this.onEnterFrame = this.onLoopComplete = this.onComplete = this.onSegmentStart = this.onDestroy = null;
    this.renderer = null;
};

AnimationItem.prototype.setCurrentRawFrameValue = function(value){
    this.currentRawFrame = value;
    this.gotoFrame();
};

AnimationItem.prototype.setSpeed = function (val) {
    this.playSpeed = val;
    this.updaFrameModifier();
};

AnimationItem.prototype.setDirection = function (val) {
    this.playDirection = val < 0 ? -1 : 1;
    this.updaFrameModifier();
};

AnimationItem.prototype.updaFrameModifier = function () {
    this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
};

AnimationItem.prototype.getPath = function () {
    return this.path;
};

AnimationItem.prototype.getAssetsPath = function (assetData) {
    var path = '';
    if(assetData.e) {
        path = assetData.p;
    } else if(this.assetsPath){
        var imagePath = assetData.p;
        if(imagePath.indexOf('images/') !== -1){
            imagePath = imagePath.split('/')[1];
        }
        path = this.assetsPath + imagePath;
    } else {
        path = this.path;
        path += assetData.u ? assetData.u : '';
        path += assetData.p;
    }
    return path;
};

AnimationItem.prototype.getAssetData = function (id) {
    var i = 0, len = this.assets.length;
    while (i < len) {
        if(id == this.assets[i].id){
            return this.assets[i];
        }
        i += 1;
    }
};

AnimationItem.prototype.hide = function () {
    this.renderer.hide();
};

AnimationItem.prototype.show = function () {
    this.renderer.show();
};

AnimationItem.prototype.getDuration = function (isFrame) {
    return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
};

AnimationItem.prototype.trigger = function(name){
    if(this._cbs && this._cbs[name]){
        switch(name){
            case 'enterFrame':
                this.triggerEvent(name,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameModifier));
                break;
            case 'loopComplete':
                this.triggerEvent(name,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));
                break;
            case 'complete':
                this.triggerEvent(name,new BMCompleteEvent(name,this.frameMult));
                break;
            case 'segmentStart':
                this.triggerEvent(name,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));
                break;
            case 'destroy':
                this.triggerEvent(name,new BMDestroyEvent(name,this));
                break;
            default:
                this.triggerEvent(name);
        }
    }
    if(name === 'enterFrame' && this.onEnterFrame){
        this.onEnterFrame.call(this,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameMult));
    }
    if(name === 'loopComplete' && this.onLoopComplete){
        this.onLoopComplete.call(this,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));
    }
    if(name === 'complete' && this.onComplete){
        this.onComplete.call(this,new BMCompleteEvent(name,this.frameMult));
    }
    if(name === 'segmentStart' && this.onSegmentStart){
        this.onSegmentStart.call(this,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));
    }
    if(name === 'destroy' && this.onDestroy){
        this.onDestroy.call(this,new BMDestroyEvent(name,this));
    }
};

var Expressions = (function(){
    var ob = {};
    ob.initExpressions = initExpressions;


    function initExpressions(animation){

    	var stackCount = 0;
    	var registers = [];

    	function pushExpression() {
			stackCount += 1;
    	}

    	function popExpression() {
			stackCount -= 1;
			if (stackCount === 0) {
				releaseInstances();
			}
    	}

    	function registerExpressionProperty(expression) {
    		if (registers.indexOf(expression) === -1) {
				registers.push(expression)
    		}
    	}

    	function releaseInstances() {
    		var i, len = registers.length;
    		for (i = 0; i < len; i += 1) {
				registers[i].release();
    		}
    		registers.length = 0;
    	}

        animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
        animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
        animation.renderer.globalData.pushExpression = pushExpression;
        animation.renderer.globalData.popExpression = popExpression;
        animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
    }
   return ob;
}());

expressionsPlugin = Expressions;

var ExpressionManager = (function(){
    'use strict';
    var ob = {};
    var Math = BMMath;
    var window = null;
    var document = null;

    function $bm_isInstanceOfArray(arr) {
        return arr.constructor === Array || arr.constructor === Float32Array;
    }

    function isNumerable(tOfV, v) {
        return tOfV === 'number' || tOfV === 'boolean' || tOfV === 'string' || v instanceof Number;
    }

    function $bm_neg(a){
        var tOfA = typeof a;
        if(tOfA === 'number' || tOfA === 'boolean'  || a instanceof Number ){
            return -a;
        }
        if($bm_isInstanceOfArray(a)){
            var i, lenA = a.length;
            var retArr = [];
            for(i=0;i<lenA;i+=1){
                retArr[i] = -a[i];
            }
            return retArr;
        }
        if (a.propType) {
            return a.v;
        }
    }

    var easeInBez = BezierFactory.getBezierEasing(0.333,0,.833,.833, 'easeIn').get;
    var easeOutBez = BezierFactory.getBezierEasing(0.167,0.167,.667,1, 'easeOut').get;
    var easeInOutBez = BezierFactory.getBezierEasing(.33,0,.667,1, 'easeInOut').get;

    function sum(a,b) {
        var tOfA = typeof a;
        var tOfB = typeof b;
        if(tOfA === 'string' || tOfB === 'string'){
            return a + b;
        }
        if(isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            return a + b;
        }
        if($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)){
            a = a.slice(0);
            a[0] = a[0] + b;
            return a;
        }
        if(isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)){
            b = b.slice(0);
            b[0] = a + b[0];
            return b;
        }
        if($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)){
            
            var i = 0, lenA = a.length, lenB = b.length;
            var retArr = [];
            while(i<lenA || i < lenB){
                if((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)){
                    retArr[i] = a[i] + b[i];
                }else{
                    retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
                }
                i += 1;
            }
            return retArr;
        }
        return 0;
    }
    var add = sum;

    function sub(a,b) {
        var tOfA = typeof a;
        var tOfB = typeof b;
        if(isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            if(tOfA === 'string') {
                a = parseInt(a);
            }
            if(tOfB === 'string') {
                b = parseInt(b);
            }
            return a - b;
        }
        if( $bm_isInstanceOfArray(a) && isNumerable(tOfB, b)){
            a = a.slice(0);
            a[0] = a[0] - b;
            return a;
        }
        if(isNumerable(tOfA, a) &&  $bm_isInstanceOfArray(b)){
            b = b.slice(0);
            b[0] = a - b[0];
            return b;
        }
        if($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)){
            var i = 0, lenA = a.length, lenB = b.length;
            var retArr = [];
            while(i<lenA || i < lenB){
                if((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)){
                    retArr[i] = a[i] - b[i];
                }else{
                    retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
                }
                i += 1;
            }
            return retArr;
        }
        return 0;
    }

    function mul(a,b) {
        var tOfA = typeof a;
        var tOfB = typeof b;
        var arr;
        if(isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            return a * b;
        }

        var i, len;
        if($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)){
            len = a.length;
            arr = createTypedArray('float32', len);
            for(i=0;i<len;i+=1){
                arr[i] = a[i] * b;
            }
            return arr;
        }
        if(isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)){
            len = b.length;
            arr = createTypedArray('float32', len);
            for(i=0;i<len;i+=1){
                arr[i] = a * b[i];
            }
            return arr;
        }
        return 0;
    }

    function div(a,b) {
        var tOfA = typeof a;
        var tOfB = typeof b;
        var arr;
        if(isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            return a / b;
        }
        var i, len;
        if($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)){
            len = a.length;
            arr = createTypedArray('float32', len);
            for(i=0;i<len;i+=1){
                arr[i] = a[i] / b;
            }
            return arr;
        }
        if(isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)){
            len = b.length;
            arr = createTypedArray('float32', len);
            for(i=0;i<len;i+=1){
                arr[i] = a / b[i];
            }
            return arr;
        }
        return 0;
    }
    function mod(a,b) {
        if(typeof a === 'string') {
            a = parseInt(a);
        }
        if(typeof b === 'string') {
            b = parseInt(b);
        }
        return a % b;
    }
    var $bm_sum = sum;
    var $bm_sub = sub;
    var $bm_mul = mul;
    var $bm_div = div;
    var $bm_mod = mod;

    function clamp(num, min, max) {
        if(min > max){
            var mm = max;
            max = min;
            min = mm;
        }
        return Math.min(Math.max(num, min), max);
    }

    function radiansToDegrees(val) {
        return val/degToRads;
    }
    var radians_to_degrees = radiansToDegrees;

    function degreesToRadians(val) {
        return val*degToRads;
    }
    var degrees_to_radians = radiansToDegrees;

    var helperLengthArray = [0,0,0,0,0,0];

    function length(arr1, arr2) {
        if (typeof arr1 === 'number' || arr1 instanceof Number) {
            arr2 = arr2 || 0;
            return Math.abs(arr1 - arr2);
        }
        if(!arr2) {
            arr2 = helperLengthArray;
        }
        var i, len = Math.min(arr1.length, arr2.length);
        var addedLength = 0;
        for (i = 0; i < len; i += 1) {
            addedLength += Math.pow(arr2[i] - arr1[i], 2);
        }
        return Math.sqrt(addedLength);
    }

    function normalize(vec) {
        return div(vec, length(vec));
    }

    function rgbToHsl(val) {
        var r = val[0]; var g = val[1]; var b = val[2];
        var max = Math.max(r, g, b), min = Math.min(r, g, b);
        var h, s, l = (max + min) / 2;

        if(max == min){
            h = s = 0; // achromatic
        }else{
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch(max){
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
            }
            h /= 6;
        }

        return [h, s, l,val[3]];
    }

    function hue2rgb(p, q, t){
        if(t < 0) t += 1;
        if(t > 1) t -= 1;
        if(t < 1/6) return p + (q - p) * 6 * t;
        if(t < 1/2) return q;
        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
        return p;
    }

    function hslToRgb(val){
        var h = val[0];
        var s = val[1];
        var l = val[2];

        var r, g, b;

        if(s === 0){
            r = g = b = l; // achromatic
        }else{

            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1/3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1/3);
        }

        return [r, g , b, val[3]];
    }

    function linear(t, tMin, tMax, value1, value2){
        if(value1 === undefined || value2 === undefined){
            value1 = tMin;
            value2 = tMax;
            tMin = 0;
            tMax = 1;
        }
        if(tMax < tMin) {
            var _tMin = tMax;
            tMax = tMin;
            tMin = _tMin;
        }
        if(t <= tMin) {
            return value1;
        }else if(t >= tMax){
            return value2;
        }
        var perc = tMax === tMin ? 0 : (t-tMin)/(tMax-tMin);
        if(!value1.length){
            return value1 + (value2-value1)*perc;
        }
        var i, len = value1.length;
        var arr = createTypedArray('float32', len);
        for(i=0;i<len;i+=1){
            arr[i] = value1[i] + (value2[i]-value1[i])*perc;
        }
        return arr;
    }
    function random(min,max){
        if(max === undefined){
            if(min === undefined){
                min = 0;
                max = 1;
            } else {
                max = min;
                min = undefined;
            }
        }
        if(max.length){
            var i, len = max.length;
            if(!min){
                min = createTypedArray('float32', len);
            }
            var arr = createTypedArray('float32', len);
            var rnd = BMMath.random();
            for(i=0;i<len;i+=1){
                arr[i] = min[i] + rnd*(max[i]-min[i]);
            }
            return arr;
        }
        if(min === undefined){
            min = 0;
        }
        var rndm = BMMath.random();
        return min + rndm*(max-min);
    }

    function createPath(points, inTangents, outTangents, closed) {
        var i, len = points.length;
        var path = shape_pool.newElement();
        path.setPathData(!!closed, len);
        var arrPlaceholder = [0,0], inVertexPoint, outVertexPoint;
        for(i = 0; i < len; i += 1) {
            inVertexPoint = (inTangents && inTangents[i]) ? inTangents[i] : arrPlaceholder;
            outVertexPoint = (outTangents && outTangents[i]) ? outTangents[i] : arrPlaceholder;
            path.setTripleAt(points[i][0],points[i][1],outVertexPoint[0] + points[i][0],outVertexPoint[1] + points[i][1],inVertexPoint[0] + points[i][0],inVertexPoint[1] + points[i][1],i,true);
        }
        return path;
    }

    function initiateExpression(elem,data,property){
        var val = data.x;
        var needsVelocity = /velocity(?![\w\d])/.test(val);
        var _needsRandom = val.indexOf('random') !== -1;
        var elemType = elem.data.ty;
        var transform,$bm_transform,content,effect;
        var thisProperty = property;
        thisProperty.valueAtTime = thisProperty.getValueAtTime;
        Object.defineProperty(thisProperty, 'value', {
            get: function() {
                return thisProperty.v
            }
        })
        elem.comp.frameDuration = 1/elem.comp.globalData.frameRate;
        elem.comp.displayStartTime = 0;
        var inPoint = elem.data.ip/elem.comp.globalData.frameRate;
        var outPoint = elem.data.op/elem.comp.globalData.frameRate;
        var width = elem.data.sw ? elem.data.sw : 0;
        var height = elem.data.sh ? elem.data.sh : 0;
        var name = elem.data.nm;
        var loopIn, loop_in, loopOut, loop_out, smooth;
        var toWorld,fromWorld,fromComp,toComp,fromCompToSurface, position, rotation, anchorPoint, scale, thisLayer,thisComp,mask,valueAtTime,velocityAtTime;
        var __expression_functions = [];
        if(data.xf) {
            var i, len = data.xf.length;
            for(i = 0; i < len; i += 1) {
                __expression_functions[i] = eval('(function(){ return ' + data.xf[i] + '}())');
            }
        }

        var scoped_bm_rt;
        var expression_function = eval('[function _expression_function(){' + val+';scoped_bm_rt=$bm_rt}' + ']')[0];
        var numKeys = property.kf ? data.k.length : 0;

        var active = !this.data || this.data.hd !== true;

        var wiggle = function wiggle(freq,amp){
            var i,j, len = this.pv.length ? this.pv.length : 1;
            var addedAmps = createTypedArray('float32', len);
            freq = 5;
            var iterations = Math.floor(time*freq);
            i = 0;
            j = 0;
            while(i<iterations){
                //var rnd = BMMath.random();
                for(j=0;j<len;j+=1){
                    addedAmps[j] += -amp + amp*2*BMMath.random();
                    //addedAmps[j] += -amp + amp*2*rnd;
                }
                i += 1;
            }
            //var rnd2 = BMMath.random();
            var periods = time*freq;
            var perc = periods - Math.floor(periods);
            var arr = createTypedArray('float32', len);
            if(len>1){
                for(j=0;j<len;j+=1){
                    arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*BMMath.random())*perc;
                    //arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
                    //arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
                }
                return arr;
            } else {
                return this.pv + addedAmps[0] + (-amp + amp*2*BMMath.random())*perc;
            }
        }.bind(this);

        if(thisProperty.loopIn) {
            loopIn = thisProperty.loopIn.bind(thisProperty);
            loop_in = loopIn;
        }

        if(thisProperty.loopOut) {
            loopOut = thisProperty.loopOut.bind(thisProperty);
            loop_out = loopOut;
        }

        if(thisProperty.smooth) {
            smooth = thisProperty.smooth.bind(thisProperty);
        }

        function loopInDuration(type,duration){
            return loopIn(type,duration,true);
        }

        function loopOutDuration(type,duration){
            return loopOut(type,duration,true);
        }

        if(this.getValueAtTime) {
            valueAtTime = this.getValueAtTime.bind(this);
        }

        if(this.getVelocityAtTime) {
            velocityAtTime = this.getVelocityAtTime.bind(this);
        }

        var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);

        function lookAt(elem1,elem2){
            var fVec = [elem2[0]-elem1[0],elem2[1]-elem1[1],elem2[2]-elem1[2]];
            var pitch = Math.atan2(fVec[0],Math.sqrt(fVec[1]*fVec[1]+fVec[2]*fVec[2]))/degToRads;
            var yaw = -Math.atan2(fVec[1],fVec[2])/degToRads;
            return [yaw,pitch,0];
        }

        function easeOut(t, tMin, tMax, val1, val2){
            return applyEase(easeOutBez, t, tMin, tMax, val1, val2);
        }

        function easeIn(t, tMin, tMax, val1, val2){
            return applyEase(easeInBez, t, tMin, tMax, val1, val2);
        }

        function ease(t, tMin, tMax, val1, val2){
            return applyEase(easeInOutBez, t, tMin, tMax, val1, val2);
        }

        function applyEase(fn, t, tMin, tMax, val1, val2) {
            if(val1 === undefined){
                val1 = tMin;
                val2 = tMax;
            } else {
                t = (t - tMin) / (tMax - tMin);
            }
            t = t > 1 ? 1 : t < 0 ? 0 : t;
            var mult = fn(t);
            if($bm_isInstanceOfArray(val1)) {
                var i, len = val1.length;
                var arr = createTypedArray('float32', len);
                for (i = 0; i < len; i += 1) {
                    arr[i] = (val2[i] - val1[i]) * mult + val1[i];
                }
                return arr;
            } else {
                return (val2 - val1) * mult + val1;
            }
        }

        function nearestKey(time){
            var i, len = data.k.length,index,keyTime;
            if(!data.k.length || typeof(data.k[0]) === 'number'){
                index = 0;
                keyTime = 0;
            } else {
                index = -1;
                time *= elem.comp.globalData.frameRate;
                if (time < data.k[0].t) {
                    index = 1;
                    keyTime = data.k[0].t;
                } else {
                    for(i=0;i<len-1;i+=1){
                        if(time === data.k[i].t){
                            index = i + 1;
                            keyTime = data.k[i].t;
                            break;
                        }else if(time>data.k[i].t && time<data.k[i+1].t){
                            if(time-data.k[i].t > data.k[i+1].t - time){
                                index = i + 2;
                                keyTime = data.k[i+1].t;
                            } else {
                                index = i + 1;
                                keyTime = data.k[i].t;
                            }
                            break;
                        }
                    }
                    if(index === -1){
                        index = i + 1;
                        keyTime = data.k[i].t;
                    }
                }
                
            }
            var ob = {};
            ob.index = index;
            ob.time = keyTime/elem.comp.globalData.frameRate;
            return ob;
        }

        function key(ind){
            var ob, i, len;
            if(!data.k.length || typeof(data.k[0]) === 'number'){
                throw new Error('The property has no keyframe at index ' + ind);
            }
            ind -= 1;
            ob = {
                time: data.k[ind].t/elem.comp.globalData.frameRate,
                value: []
            };
            var arr;
            if(ind === data.k.length - 1 && !data.k[ind].h){
                arr = (data.k[ind].s || data.k[ind].s === 0) ? data.k[ind-1].s : data.k[ind].e;
            }else{
                arr = data.k[ind].s;
            }
            len = arr.length;
            for(i=0;i<len;i+=1){
                ob[i] = arr[i];
                ob.value[i] = arr[i]
            }
            return ob;
        }

        function framesToTime(frames, fps) { 
            if (!fps) {
                fps = elem.comp.globalData.frameRate;
            }
            return frames / fps;
        }

        function timeToFrames(t, fps) {
            if (!t && t !== 0) {
                t = time;
            }
            if (!fps) {
                fps = elem.comp.globalData.frameRate;
            }
            return t * fps;
        }

        function seedRandom(seed){
            BMMath.seedrandom(randSeed + seed);
        }

        function sourceRectAtTime() {
            return elem.sourceRectAtTime();
        }

        function substring(init, end) {
            if(typeof value === 'string') {
                if(end === undefined) {
                return value.substring(init)
                }
                return value.substring(init, end)
            }
            return '';
        }

        function substr(init, end) {
            if(typeof value === 'string') {
                if(end === undefined) {
                return value.substr(init)
                }
                return value.substr(init, end)
            }
            return '';
        }

        var time, velocity, value, text, textIndex, textTotal, selectorValue;
        var index = elem.data.ind;
        var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
        var parent;
        var randSeed = Math.floor(Math.random()*1000000);
        var globalData = elem.globalData;
        function executeExpression(_value) {
            // globalData.pushExpression();
            value = _value;
            if (_needsRandom) {
                seedRandom(randSeed);
            }
            if (this.frameExpressionId === elem.globalData.frameId && this.propType !== 'textSelector') {
                return value;
            }
            if(this.propType === 'textSelector'){
                textIndex = this.textIndex;
                textTotal = this.textTotal;
                selectorValue = this.selectorValue;
            }
            if (!thisLayer) {
                text = elem.layerInterface.text;
                thisLayer = elem.layerInterface;
                thisComp = elem.comp.compInterface;
                toWorld = thisLayer.toWorld.bind(thisLayer);
                fromWorld = thisLayer.fromWorld.bind(thisLayer);
                fromComp = thisLayer.fromComp.bind(thisLayer);
                toComp = thisLayer.toComp.bind(thisLayer);
                mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
                fromCompToSurface = fromComp;
            }
            if (!transform) {
                transform = elem.layerInterface("ADBE Transform Group");
                $bm_transform = transform;
                if(transform) {
                    anchorPoint = transform.anchorPoint;
                    /*position = transform.position;
                    rotation = transform.rotation;
                    scale = transform.scale;*/
                }
            }
            
            if (elemType === 4 && !content) {
                content = thisLayer("ADBE Root Vectors Group");
            }
            if (!effect) {
                effect = thisLayer(4);
            }
            hasParent = !!(elem.hierarchy && elem.hierarchy.length);
            if (hasParent && !parent) {
                parent = elem.hierarchy[0].layerInterface;
            }
            time = this.comp.renderedFrame/this.comp.globalData.frameRate;
            if (needsVelocity) {
                velocity = velocityAtTime(time);
            }
            expression_function();
            this.frameExpressionId = elem.globalData.frameId;


            //TODO: Check if it's possible to return on ShapeInterface the .v value
            if (scoped_bm_rt.propType === "shape") {
                scoped_bm_rt = scoped_bm_rt.v;
            }
            // globalData.popExpression();
            return scoped_bm_rt;
        }
        return executeExpression;
    }

    ob.initiateExpression = initiateExpression;
    return ob;
}());
var expressionHelpers = (function(){

    function searchExpressions(elem,data,prop){
        if(data.x){
            prop.k = true;
            prop.x = true;
            prop.initiateExpression = ExpressionManager.initiateExpression;
            prop.effectsSequence.push(prop.initiateExpression(elem,data,prop).bind(prop));
        }
    }

    function getValueAtTime(frameNum) {
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if(frameNum !== this._cachingAtTime.lastFrame) {
            this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
            this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
            this._cachingAtTime.lastFrame = frameNum;
        }
        return this._cachingAtTime.value;

    }

    function getSpeedAtTime(frameNum) {
        var delta = -0.01;
        var v1 = this.getValueAtTime(frameNum);
        var v2 = this.getValueAtTime(frameNum + delta);
        var speed = 0;
        if(v1.length){
            var i;
            for(i=0;i<v1.length;i+=1){
                speed += Math.pow(v2[i] - v1[i], 2);
            }
            speed = Math.sqrt(speed) * 100;
        } else {
            speed = 0;
        }
        return speed;
    }

    function getVelocityAtTime(frameNum) {
        if(this.vel !== undefined){
            return this.vel;
        }
        var delta = -0.001;
        //frameNum += this.elem.data.st;
        var v1 = this.getValueAtTime(frameNum);
        var v2 = this.getValueAtTime(frameNum + delta);
        var velocity;
        if(v1.length){
            velocity = createTypedArray('float32', v1.length);
            var i;
            for(i=0;i<v1.length;i+=1){
                //removing frameRate
                //if needed, don't add it here
                //velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
                velocity[i] = (v2[i] - v1[i])/delta;
            }
        } else {
            velocity = (v2 - v1)/delta;
        }
        return velocity;
    }

    function getStaticValueAtTime() {
        return this.pv;
    }

    function setGroupProperty(propertyGroup){
        this.propertyGroup = propertyGroup;
    }

	return {
		searchExpressions: searchExpressions,
		getSpeedAtTime: getSpeedAtTime,
		getVelocityAtTime: getVelocityAtTime,
		getValueAtTime: getValueAtTime,
		getStaticValueAtTime: getStaticValueAtTime,
		setGroupProperty: setGroupProperty,
	}
}());
(function addPropertyDecorator() {

    function loopOut(type,duration,durationFlag){
        if(!this.k || !this.keyframes){
            return this.pv;
        }
        type = type ? type.toLowerCase() : '';
        var currentFrame = this.comp.renderedFrame;
        var keyframes = this.keyframes;
        var lastKeyFrame = keyframes[keyframes.length - 1].t;
        if(currentFrame<=lastKeyFrame){
            return this.pv;
        }else{
            var cycleDuration, firstKeyFrame;
            if(!durationFlag){
                if(!duration || duration > keyframes.length - 1){
                    duration = keyframes.length - 1;
                }
                firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
                cycleDuration = lastKeyFrame - firstKeyFrame;
            } else {
                if(!duration){
                    cycleDuration = Math.max(0,lastKeyFrame - this.elem.data.ip);
                } else {
                    cycleDuration = Math.abs(lastKeyFrame - elem.comp.globalData.frameRate*duration);
                }
                firstKeyFrame = lastKeyFrame - cycleDuration;
            }
            var i, len, ret;
            if(type === 'pingpong') {
                var iterations = Math.floor((currentFrame - firstKeyFrame)/cycleDuration);
                if(iterations % 2 !== 0){
                    return this.getValueAtTime(((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
                }
            } else if(type === 'offset'){
                var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame) / this.comp.globalData.frameRate, 0);
                var repeats = Math.floor((currentFrame - firstKeyFrame)/cycleDuration);
                if(this.pv.length){
                    ret = new Array(initV.length);
                    len = ret.length;
                    for(i=0;i<len;i+=1){
                        ret[i] = (endV[i]-initV[i])*repeats + current[i];
                    }
                    return ret;
                }
                return (endV-initV)*repeats + current;
            } else if(type === 'continue'){
                var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                var nextLastValue = this.getValueAtTime((lastKeyFrame - 0.001) / this.comp.globalData.frameRate, 0);
                if(this.pv.length){
                    ret = new Array(lastValue.length);
                    len = ret.length;
                    for(i=0;i<len;i+=1){
                        ret[i] = lastValue[i] + (lastValue[i]-nextLastValue[i])*((currentFrame - lastKeyFrame)/ this.comp.globalData.frameRate)/0.0005;
                    }
                    return ret;
                }
                return lastValue + (lastValue-nextLastValue)*(((currentFrame - lastKeyFrame))/0.001);
            }
            return this.getValueAtTime((((currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
        }
    }

    function loopIn(type,duration, durationFlag) {
        if(!this.k){
            return this.pv;
        }
        type = type ? type.toLowerCase() : '';
        var currentFrame = this.comp.renderedFrame;
        var keyframes = this.keyframes;
        var firstKeyFrame = keyframes[0].t;
        if(currentFrame>=firstKeyFrame){
            return this.pv;
        }else{
            var cycleDuration, lastKeyFrame;
            if(!durationFlag){
                if(!duration || duration > keyframes.length - 1){
                    duration = keyframes.length - 1;
                }
                lastKeyFrame = keyframes[duration].t;
                cycleDuration = lastKeyFrame - firstKeyFrame;
            } else {
                if(!duration){
                    cycleDuration = Math.max(0,this.elem.data.op - firstKeyFrame);
                } else {
                    cycleDuration = Math.abs(elem.comp.globalData.frameRate*duration);
                }
                lastKeyFrame = firstKeyFrame + cycleDuration;
            }
            var i, len, ret;
            if(type === 'pingpong') {
                var iterations = Math.floor((firstKeyFrame - currentFrame)/cycleDuration);
                if(iterations % 2 === 0){
                    return this.getValueAtTime((((firstKeyFrame - currentFrame)%cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
                }
            } else if(type === 'offset'){
                var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame)%cycleDuration +  firstKeyFrame) / this.comp.globalData.frameRate, 0);
                var repeats = Math.floor((firstKeyFrame - currentFrame)/cycleDuration)+1;
                if(this.pv.length){
                    ret = new Array(initV.length);
                    len = ret.length;
                    for(i=0;i<len;i+=1){
                        ret[i] = current[i]-(endV[i]-initV[i])*repeats;
                    }
                    return ret;
                }
                return current-(endV-initV)*repeats;
            } else if(type === 'continue'){
                var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                var nextFirstValue = this.getValueAtTime((firstKeyFrame + 0.001) / this.comp.globalData.frameRate, 0);
                if(this.pv.length){
                    ret = new Array(firstValue.length);
                    len = ret.length;
                    for(i=0;i<len;i+=1){
                        ret[i] = firstValue[i] + (firstValue[i]-nextFirstValue[i])*(firstKeyFrame - currentFrame)/0.001;
                    }
                    return ret;
                }
                return firstValue + (firstValue-nextFirstValue)*(firstKeyFrame - currentFrame)/0.001;
            }
            return this.getValueAtTime(((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
        }
    }

    function smooth(width, samples) {
        if (!this.k){
            return this.pv;
        }
        width = (width || 0.4) * 0.5;
        samples = Math.floor(samples || 5);
        if (samples <= 1) {
            return this.pv;
        }
        var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
        var initFrame = currentTime - width;
        var endFrame = currentTime + width;
        var sampleFrequency = samples > 1 ? (endFrame - initFrame) / (samples - 1) : 1;
        var i = 0, j = 0;
        var value;
        if (this.pv.length) {
            value = createTypedArray('float32', this.pv.length);
        } else {
            value = 0;
        }
        var sampleValue;
        while (i < samples) {
            sampleValue = this.getValueAtTime(initFrame + i * sampleFrequency);
            if(this.pv.length) {
                for (j = 0; j < this.pv.length; j += 1) {
                    value[j] += sampleValue[j];
                }
            } else {
                value += sampleValue;
            }
            i += 1;
        }
        if(this.pv.length) {
            for (j = 0; j < this.pv.length; j += 1) {
                value[j] /= samples;
            }
        } else {
            value /= samples;
        }
        return value;
    }

    function getValueAtTime(frameNum) {
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if(frameNum !== this._cachingAtTime.lastFrame) {
            this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
            this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
            this._cachingAtTime.lastFrame = frameNum;
        }
        return this._cachingAtTime.value;

    }

    function getTransformValueAtTime(time) {
        console.warn('Transform at time not supported');
    }

    function getTransformStaticValueAtTime(time) {

    }

    var getTransformProperty = TransformPropertyFactory.getTransformProperty;
    TransformPropertyFactory.getTransformProperty = function(elem, data, container) {
        var prop = getTransformProperty(elem, data, container);
        if(prop.dynamicProperties.length) {
            prop.getValueAtTime = getTransformValueAtTime.bind(prop);
        } else {
            prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
        }
        prop.setGroupProperty = expressionHelpers.setGroupProperty;
        return prop;
    };

    var propertyGetProp = PropertyFactory.getProp;
    PropertyFactory.getProp = function(elem,data,type, mult, container){
        var prop = propertyGetProp(elem,data,type, mult, container);
        //prop.getVelocityAtTime = getVelocityAtTime;
        //prop.loopOut = loopOut;
        //prop.loopIn = loopIn;
        if(prop.kf){
            prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
        } else {
            prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
        }
        prop.setGroupProperty = expressionHelpers.setGroupProperty;
        prop.loopOut = loopOut;
        prop.loopIn = loopIn;
        prop.smooth = smooth;
        prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
        prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
        prop.numKeys = data.a === 1 ? data.k.length : 0;
        prop.propertyIndex = data.ix;
        var value = 0;
        if(type !== 0) {
            value = createTypedArray('float32', data.a === 1 ?  data.k[0].s.length : data.k.length);
        }
        prop._cachingAtTime = {
            lastFrame: initialDefaultFrame,
            lastIndex: 0,
            value: value
        };
        expressionHelpers.searchExpressions(elem,data,prop);
        if(prop.k){
            container.addDynamicProperty(prop);
        }

        return prop;
    };

    function getShapeValueAtTime(frameNum) {
        //For now this caching object is created only when needed instead of creating it when the shape is initialized.
        if (!this._cachingAtTime) {
            this._cachingAtTime = {
                shapeValue: shape_pool.clone(this.pv),
                lastIndex: 0,
                lastTime: initialDefaultFrame
            };
        }
        
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if(frameNum !== this._cachingAtTime.lastTime) {
            this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
            this._cachingAtTime.lastTime = frameNum;
            this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
        }
        return this._cachingAtTime.shapeValue;
    }

    var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
    var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();

    function ShapeExpressions(){}
    ShapeExpressions.prototype = {
        vertices: function(prop, time){
            if (this.k) {
                this.getValue();
            }
            var shapePath = this.v;
            if(time !== undefined) {
                shapePath = this.getValueAtTime(time, 0);
            }
            var i, len = shapePath._length;
            var vertices = shapePath[prop];
            var points = shapePath.v;
            var arr = createSizedArray(len);
            for(i = 0; i < len; i += 1) {
                if(prop === 'i' || prop === 'o') {
                    arr[i] = [vertices[i][0] - points[i][0], vertices[i][1] - points[i][1]];
                } else {
                    arr[i] = [vertices[i][0], vertices[i][1]];
                }
                
            }
            return arr;
        },
        points: function(time){
            return this.vertices('v', time);
        },
        inTangents: function(time){
            return this.vertices('i', time);
        },
        outTangents: function(time){
            return this.vertices('o', time);
        },
        isClosed: function(){
            return this.v.c;
        },
        pointOnPath: function(perc, time){
            var shapePath = this.v;
            if(time !== undefined) {
                shapePath = this.getValueAtTime(time, 0);
            }
            if(!this._segmentsLength) {
                this._segmentsLength = bez.getSegmentsLength(shapePath);
            }

            var segmentsLength = this._segmentsLength;
            var lengths = segmentsLength.lengths;
            var lengthPos = segmentsLength.totalLength * perc;
            var i = 0, len = lengths.length;
            var j = 0, jLen;
            var accumulatedLength = 0, pt;
            while(i < len) {
                if(accumulatedLength + lengths[i].addedLength > lengthPos) {
                    var initIndex = i;
                    var endIndex = (shapePath.c && i === len - 1) ? 0 : i + 1;
                    var segmentPerc = (lengthPos - accumulatedLength)/lengths[i].addedLength;
                    pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i]);
                    break;
                } else {
                    accumulatedLength += lengths[i].addedLength;
                }
                i += 1;
            }
            if(!pt){
                pt = shapePath.c ? [shapePath.v[0][0],shapePath.v[0][1]]:[shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1]];
            }
            return pt;
        },
        vectorOnPath: function(perc, time, vectorType){
            //perc doesn't use triple equality because it can be a Number object as well as a primitive.
            perc = perc == 1 ? this.v.c ? 0 : 0.999 : perc;
            var pt1 = this.pointOnPath(perc, time);
            var pt2 = this.pointOnPath(perc + 0.001, time);
            var xLength = pt2[0] - pt1[0];
            var yLength = pt2[1] - pt1[1];
            var magnitude = Math.sqrt(Math.pow(xLength,2) + Math.pow(yLength,2));
            var unitVector = vectorType === 'tangent' ? [xLength/magnitude, yLength/magnitude] : [-yLength/magnitude, xLength/magnitude];
            return unitVector;
        },
        tangentOnPath: function(perc, time){
            return this.vectorOnPath(perc, time, 'tangent');
        },
        normalOnPath: function(perc, time){
            return this.vectorOnPath(perc, time, 'normal');
        },
        setGroupProperty: expressionHelpers.setGroupProperty,
        getValueAtTime: expressionHelpers.getStaticValueAtTime
    };
    extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
    extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
    KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
    KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;

    var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
    ShapePropertyFactory.getShapeProp = function(elem,data,type, arr, trims){
        var prop = propertyGetShapeProp(elem,data,type, arr, trims);
        prop.propertyIndex = data.ix;
        prop.lock = false;
        if(type === 3){
            expressionHelpers.searchExpressions(elem,data.pt,prop);
        } else if(type === 4){
            expressionHelpers.searchExpressions(elem,data.ks,prop);
        }
        if(prop.k){
            elem.addDynamicProperty(prop);
        }
        return prop;
    };
}());
(function addDecorator() {

    function searchExpressions(){
        if(this.data.d.x){
            this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this);
            this.addEffect(this.getExpressionValue.bind(this));
            return true;
        }
    }

    TextProperty.prototype.getExpressionValue = function(currentValue, text) {
        var newValue = this.calculateExpression(text);
        if(currentValue.t !== newValue) {
            var newData = {};
            this.copyData(newData, currentValue);
            newData.t = newValue.toString();
            newData.__complete = false;
            return newData;
        }
        return currentValue;
    }

    TextProperty.prototype.searchProperty = function(){

        var isKeyframed = this.searchKeyframes();
        var hasExpressions = this.searchExpressions();
        this.kf = isKeyframed || hasExpressions;
        return this.kf;
    };

    TextProperty.prototype.searchExpressions = searchExpressions;
    
}());
var ShapeExpressionInterface = (function(){

    function iterateElements(shapes,view, propertyGroup){
        var arr = [];
        var i, len = shapes ? shapes.length : 0;
        for(i=0;i<len;i+=1){
            if(shapes[i].ty == 'gr'){
                arr.push(groupInterfaceFactory(shapes[i],view[i],propertyGroup));
            }else if(shapes[i].ty == 'fl'){
                arr.push(fillInterfaceFactory(shapes[i],view[i],propertyGroup));
            }else if(shapes[i].ty == 'st'){
                arr.push(strokeInterfaceFactory(shapes[i],view[i],propertyGroup));
            }else if(shapes[i].ty == 'tm'){
                arr.push(trimInterfaceFactory(shapes[i],view[i],propertyGroup));
            }else if(shapes[i].ty == 'tr'){
                //arr.push(transformInterfaceFactory(shapes[i],view[i],propertyGroup));
            }else if(shapes[i].ty == 'el'){
                arr.push(ellipseInterfaceFactory(shapes[i],view[i],propertyGroup));
            }else if(shapes[i].ty == 'sr'){
                arr.push(starInterfaceFactory(shapes[i],view[i],propertyGroup));
            } else if(shapes[i].ty == 'sh'){
                arr.push(pathInterfaceFactory(shapes[i],view[i],propertyGroup));
            } else if(shapes[i].ty == 'rc'){
                arr.push(rectInterfaceFactory(shapes[i],view[i],propertyGroup));
            } else if(shapes[i].ty == 'rd'){
                arr.push(roundedInterfaceFactory(shapes[i],view[i],propertyGroup));
            } else if(shapes[i].ty == 'rp'){
                arr.push(repeaterInterfaceFactory(shapes[i],view[i],propertyGroup));
            }
        }
        return arr;
    }

    function contentsInterfaceFactory(shape,view, propertyGroup){
       var interfaces;
       var interfaceFunction = function _interfaceFunction(value){
           var i = 0, len = interfaces.length;
            while(i<len){
                if(interfaces[i]._name === value || interfaces[i].mn === value || interfaces[i].propertyIndex === value || interfaces[i].ix === value || interfaces[i].ind === value){
                   return interfaces[i];
                }
                i+=1;
            }
            if(typeof value === 'number'){
               return interfaces[value-1];
            }
       };
       interfaceFunction.propertyGroup = function(val){
           if(val === 1){
               return interfaceFunction;
           } else{
               return propertyGroup(val-1);
           }
       };
       interfaces = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
       interfaceFunction.numProperties = interfaces.length;
       interfaceFunction.propertyIndex = shape.cix;
       interfaceFunction._name = shape.nm;

       return interfaceFunction;
   }

    function groupInterfaceFactory(shape,view, propertyGroup){
        var interfaceFunction = function _interfaceFunction(value){
            switch(value){
                case 'ADBE Vectors Group':
                case 'Contents':
                case 2:
                    return interfaceFunction.content;
                //Not necessary for now. Keeping them here in case a new case appears
                //case 'ADBE Vector Transform Group':
                //case 3:
                default:
                    return interfaceFunction.transform;
            }
        };
        interfaceFunction.propertyGroup = function(val){
            if(val === 1){
                return interfaceFunction;
            } else{
                return propertyGroup(val-1);
            }
        };
        var content = contentsInterfaceFactory(shape,view,interfaceFunction.propertyGroup);
        var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1],view.it[view.it.length - 1],interfaceFunction.propertyGroup);
        interfaceFunction.content = content;
        interfaceFunction.transform = transformInterface;
        Object.defineProperty(interfaceFunction, '_name', {
            get: function(){
                return shape.nm;
            }
        });
        //interfaceFunction.content = interfaceFunction;
        interfaceFunction.numProperties = shape.np;
        interfaceFunction.propertyIndex = shape.ix;
        interfaceFunction.nm = shape.nm;
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
    }

    function fillInterfaceFactory(shape,view,propertyGroup){
        function interfaceFunction(val){
            if(val === 'Color' || val === 'color'){
                return interfaceFunction.color;
            } else if(val === 'Opacity' || val === 'opacity'){
                return interfaceFunction.opacity;
            }
        }
        Object.defineProperties(interfaceFunction, {
            'color': {
                get: ExpressionPropertyInterface(view.c)
            },
            'opacity': {
                get: ExpressionPropertyInterface(view.o)
            },
            '_name': { value: shape.nm },
            'mn': { value: shape.mn }
        });

        view.c.setGroupProperty(propertyGroup);
        view.o.setGroupProperty(propertyGroup);
        return interfaceFunction;
    }

    function strokeInterfaceFactory(shape,view,propertyGroup){
        function _propertyGroup(val){
            if(val === 1){
                return ob;
            } else{
                return propertyGroup(val-1);
            }
        }
        function _dashPropertyGroup(val){
            if(val === 1){
                return dashOb;
            } else{
                return _propertyGroup(val-1);
            }
        }
        function addPropertyToDashOb(i) {
            Object.defineProperty(dashOb, shape.d[i].nm, {
                get: ExpressionPropertyInterface(view.d.dataProps[i].p)
            });
        }
        var i, len = shape.d ? shape.d.length : 0;
        var dashOb = {};
        for (i = 0; i < len; i += 1) {
            addPropertyToDashOb(i);
            view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);
        }

        function interfaceFunction(val){
            if(val === 'Color' || val === 'color'){
                return interfaceFunction.color;
            } else if(val === 'Opacity' || val === 'opacity'){
                return interfaceFunction.opacity;
            } else if(val === 'Stroke Width' || val === 'stroke width'){
                return interfaceFunction.strokeWidth;
            }
        }
        Object.defineProperties(interfaceFunction, {
            'color': {
                get: ExpressionPropertyInterface(view.c)
            },
            'opacity': {
                get: ExpressionPropertyInterface(view.o)
            },
            'strokeWidth': {
                get: ExpressionPropertyInterface(view.w)
            },
            'dash': {
                get: function() {
                    return dashOb;
                }
            },
            '_name': { value: shape.nm },
            'mn': { value: shape.mn }
        });

        view.c.setGroupProperty(_propertyGroup);
        view.o.setGroupProperty(_propertyGroup);
        view.w.setGroupProperty(_propertyGroup);
        return interfaceFunction;
    }

    function trimInterfaceFactory(shape,view,propertyGroup){
        function _propertyGroup(val){
            if(val == 1){
                return interfaceFunction;
            } else {
                return propertyGroup(--val);
            }
        }
        interfaceFunction.propertyIndex = shape.ix;

        view.s.setGroupProperty(_propertyGroup);
        view.e.setGroupProperty(_propertyGroup);
        view.o.setGroupProperty(_propertyGroup);

        function interfaceFunction(val){
            if(val === shape.e.ix || val === 'End' || val === 'end'){
                return interfaceFunction.end;
            }
            if(val === shape.s.ix){
                return interfaceFunction.start;
            }
            if(val === shape.o.ix){
                return interfaceFunction.offset;
            }
        }
        interfaceFunction.propertyIndex = shape.ix;
        interfaceFunction.propertyGroup = propertyGroup;

        Object.defineProperties(interfaceFunction, {
            'start': {
                get: ExpressionPropertyInterface(view.s)
            },
            'end': {
                get: ExpressionPropertyInterface(view.e)
            },
            'offset': {
                get: ExpressionPropertyInterface(view.o)
            },
            '_name': { value: shape.nm }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
    }

    function transformInterfaceFactory(shape,view,propertyGroup){
        function _propertyGroup(val){
            if(val == 1){
                return interfaceFunction;
            } else {
                return propertyGroup(--val);
            }
        }
        view.transform.mProps.o.setGroupProperty(_propertyGroup);
        view.transform.mProps.p.setGroupProperty(_propertyGroup);
        view.transform.mProps.a.setGroupProperty(_propertyGroup);
        view.transform.mProps.s.setGroupProperty(_propertyGroup);
        view.transform.mProps.r.setGroupProperty(_propertyGroup);
        if(view.transform.mProps.sk){
            view.transform.mProps.sk.setGroupProperty(_propertyGroup);
            view.transform.mProps.sa.setGroupProperty(_propertyGroup);
        }
        view.transform.op.setGroupProperty(_propertyGroup);

        function interfaceFunction(value){
            if(shape.a.ix === value || value === 'Anchor Point'){
                return interfaceFunction.anchorPoint;
            }
            if(shape.o.ix === value || value === 'Opacity'){
                return interfaceFunction.opacity;
            }
            if(shape.p.ix === value || value === 'Position'){
                return interfaceFunction.position;
            }
            if(shape.r.ix === value || value === 'Rotation' || value === 'ADBE Vector Rotation'){
                return interfaceFunction.rotation;
            }
            if(shape.s.ix === value || value === 'Scale'){
                return interfaceFunction.scale;
            }
            if(shape.sk && shape.sk.ix === value || value === 'Skew'){
                return interfaceFunction.skew;
            }
            if(shape.sa && shape.sa.ix === value || value === 'Skew Axis'){
                return interfaceFunction.skewAxis;
            }

        }
        Object.defineProperties(interfaceFunction, {
            'opacity': {
                get: ExpressionPropertyInterface(view.transform.mProps.o)
            },
            'position': {
                get: ExpressionPropertyInterface(view.transform.mProps.p)
            },
            'anchorPoint': {
                get: ExpressionPropertyInterface(view.transform.mProps.a)
            },
            'scale': {
                get: ExpressionPropertyInterface(view.transform.mProps.s)
            },
            'rotation': {
                get: ExpressionPropertyInterface(view.transform.mProps.r)
            },
            'skew': {
                get: ExpressionPropertyInterface(view.transform.mProps.sk)
            },
            'skewAxis': {
                get: ExpressionPropertyInterface(view.transform.mProps.sa)
            },
            '_name': { value: shape.nm }
        });
        interfaceFunction.ty = 'tr';
        interfaceFunction.mn = shape.mn;
        interfaceFunction.propertyGroup = propertyGroup;
        return interfaceFunction;
    }

    function ellipseInterfaceFactory(shape,view,propertyGroup){
        function _propertyGroup(val){
            if(val == 1){
                return interfaceFunction;
            } else {
                return propertyGroup(--val);
            }
        }
        interfaceFunction.propertyIndex = shape.ix;
        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
        prop.s.setGroupProperty(_propertyGroup);
        prop.p.setGroupProperty(_propertyGroup);
        function interfaceFunction(value){
            if(shape.p.ix === value){
                return interfaceFunction.position;
            }
            if(shape.s.ix === value){
                return interfaceFunction.size;
            }
        }

        Object.defineProperties(interfaceFunction, {
            'size': {
                get: ExpressionPropertyInterface(prop.s)
            },
            'position': {
                get: ExpressionPropertyInterface(prop.p)
            },
            '_name': { value: shape.nm }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
    }

    function starInterfaceFactory(shape,view,propertyGroup){
        function _propertyGroup(val){
            if(val == 1){
                return interfaceFunction;
            } else {
                return propertyGroup(--val);
            }
        }
        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
        interfaceFunction.propertyIndex = shape.ix;
        prop.or.setGroupProperty(_propertyGroup);
        prop.os.setGroupProperty(_propertyGroup);
        prop.pt.setGroupProperty(_propertyGroup);
        prop.p.setGroupProperty(_propertyGroup);
        prop.r.setGroupProperty(_propertyGroup);
        if(shape.ir){
            prop.ir.setGroupProperty(_propertyGroup);
            prop.is.setGroupProperty(_propertyGroup);
        }

        function interfaceFunction(value){
            if(shape.p.ix === value){
                return interfaceFunction.position;
            }
            if(shape.r.ix === value){
                return interfaceFunction.rotation;
            }
            if(shape.pt.ix === value){
                return interfaceFunction.points;
            }
            if(shape.or.ix === value || 'ADBE Vector Star Outer Radius' === value){
                return interfaceFunction.outerRadius;
            }
            if(shape.os.ix === value){
                return interfaceFunction.outerRoundness;
            }
            if(shape.ir && (shape.ir.ix === value || 'ADBE Vector Star Inner Radius' === value)){
                return interfaceFunction.innerRadius;
            }
            if(shape.is && shape.is.ix === value){
                return interfaceFunction.innerRoundness;
            }

        }

        Object.defineProperties(interfaceFunction, {
            'position': {
                get: ExpressionPropertyInterface(prop.p)
            },
            'rotation': {
                get: ExpressionPropertyInterface(prop.r)
            },
            'points': {
                get: ExpressionPropertyInterface(prop.pt)
            },
            'outerRadius': {
                get: ExpressionPropertyInterface(prop.or)
            },
            'outerRoundness': {
                get: ExpressionPropertyInterface(prop.os)
            },
            'innerRadius': {
                get: ExpressionPropertyInterface(prop.ir)
            },
            'innerRoundness': {
                get: ExpressionPropertyInterface(prop.is)
            },
            '_name': { value: shape.nm }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
    }

    function rectInterfaceFactory(shape,view,propertyGroup){
        function _propertyGroup(val){
            if(val == 1){
                return interfaceFunction;
            } else {
                return propertyGroup(--val);
            }
        }
        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
        interfaceFunction.propertyIndex = shape.ix;
        prop.p.setGroupProperty(_propertyGroup);
        prop.s.setGroupProperty(_propertyGroup);
        prop.r.setGroupProperty(_propertyGroup);

        function interfaceFunction(value){
            if(shape.p.ix === value){
                return interfaceFunction.position;
            }
            if(shape.r.ix === value){
                return interfaceFunction.roundness;
            }
            if(shape.s.ix === value || value === 'Size' || value === 'ADBE Vector Rect Size'){
                return interfaceFunction.size;
            }

        }
        Object.defineProperties(interfaceFunction, {
            'position': {
                get: ExpressionPropertyInterface(prop.p)
            },
            'roundness': {
                get: ExpressionPropertyInterface(prop.r)
            },
            'size': {
                get: ExpressionPropertyInterface(prop.s)
            },
            '_name': { value: shape.nm }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
    }

    function roundedInterfaceFactory(shape,view,propertyGroup){
        function _propertyGroup(val){
            if(val == 1){
                return interfaceFunction;
            } else {
                return propertyGroup(--val);
            }
        }
        var prop = view;
        interfaceFunction.propertyIndex = shape.ix;
        prop.rd.setGroupProperty(_propertyGroup);

        function interfaceFunction(value){
            if(shape.r.ix === value || 'Round Corners 1' === value){
                return interfaceFunction.radius;
            }

        }
        Object.defineProperties(interfaceFunction, {
            'radius': {
                get: ExpressionPropertyInterface(prop.rd)
            },
            '_name': { value: shape.nm }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
    }

    function repeaterInterfaceFactory(shape,view,propertyGroup){
        function _propertyGroup(val){
            if(val == 1){
                return interfaceFunction;
            } else {
                return propertyGroup(--val);
            }
        }
        var prop = view;
        interfaceFunction.propertyIndex = shape.ix;
        prop.c.setGroupProperty(_propertyGroup);
        prop.o.setGroupProperty(_propertyGroup);

        function interfaceFunction(value){
            if(shape.c.ix === value || 'Copies' === value){
                return interfaceFunction.copies;
            } else if(shape.o.ix === value || 'Offset' === value){
                return interfaceFunction.offset;
            }

        }
        Object.defineProperties(interfaceFunction, {
            'copies': {
                get: ExpressionPropertyInterface(prop.c)
            },
            'offset': {
                get: ExpressionPropertyInterface(prop.o)
            },
            '_name': { value: shape.nm }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
    }

    function pathInterfaceFactory(shape,view,propertyGroup){
        var prop = view.sh;
        function _propertyGroup(val){
            if(val == 1){
                return interfaceFunction;
            } else {
                return propertyGroup(--val);
            }
        }
        prop.setGroupProperty(_propertyGroup);

        function interfaceFunction(val){
            if(val === 'Shape' || val === 'shape' || val === 'Path' || val === 'path' || val === 'ADBE Vector Shape' || val === 2){
                return interfaceFunction.path;
            }
        }
        Object.defineProperties(interfaceFunction, {
            'path': {
                get: function(){
                    if(prop.k){
                        prop.getValue();
                    }
                    return prop;
                }
            },
            'shape': {
                get: function(){
                    if(prop.k){
                        prop.getValue();
                    }
                    return prop;
                }
            },
            '_name': { value: shape.nm },
            'ix': { value: shape.ix },
            'mn': { value: shape.mn }
        });
        return interfaceFunction;
    }

    return function(shapes,view,propertyGroup) {
        var interfaces;
        function _interfaceFunction(value){
            if(typeof value === 'number'){
                return interfaces[value-1];
            } else {
                var i = 0, len = interfaces.length;
                while(i<len){
                    if(interfaces[i]._name === value){
                        return interfaces[i];
                    }
                    i+=1;
                }
            }
        }
        _interfaceFunction.propertyGroup = propertyGroup;
        interfaces = iterateElements(shapes, view, _interfaceFunction);
        _interfaceFunction.numProperties = interfaces.length;
        return _interfaceFunction;
    };
}());

var TextExpressionInterface = (function(){
	return function(elem){
        var _prevValue, _sourceText;
        function _thisLayerFunction(){
        }
        Object.defineProperty(_thisLayerFunction, "sourceText", {
            get: function(){
                elem.textProperty.getValue()
                var stringValue = elem.textProperty.currentData.t;
                if(stringValue !== _prevValue) {
                    elem.textProperty.currentData.t = _prevValue;
                    _sourceText = new String(stringValue);
                    //If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive
                    _sourceText.value = stringValue ? stringValue : new String(stringValue);
                }
                return _sourceText;
            }
        });
        return _thisLayerFunction;
    };
}());
var LayerExpressionInterface = (function (){
    function toWorld(arr, time){
        var toWorldMat = new Matrix();
        toWorldMat.reset();
        var transformMat;
        if(time) {
            //Todo implement value at time on transform properties
            //transformMat = this._elem.finalTransform.mProp.getValueAtTime(time);
            transformMat = this._elem.finalTransform.mProp;
        } else {
            transformMat = this._elem.finalTransform.mProp;
        }
        transformMat.applyToMatrix(toWorldMat);
        if(this._elem.hierarchy && this._elem.hierarchy.length){
            var i, len = this._elem.hierarchy.length;
            for(i=0;i<len;i+=1){
                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
            }
            return toWorldMat.applyToPointArray(arr[0],arr[1],arr[2]||0);
        }
        return toWorldMat.applyToPointArray(arr[0],arr[1],arr[2]||0);
    }
    function fromWorld(arr, time){
        var toWorldMat = new Matrix();
        toWorldMat.reset();
        var transformMat;
        if(time) {
            //Todo implement value at time on transform properties
            //transformMat = this._elem.finalTransform.mProp.getValueAtTime(time);
            transformMat = this._elem.finalTransform.mProp;
        } else {
            transformMat = this._elem.finalTransform.mProp;
        }
        transformMat.applyToMatrix(toWorldMat);
        if(this._elem.hierarchy && this._elem.hierarchy.length){
            var i, len = this._elem.hierarchy.length;
            for(i=0;i<len;i+=1){
                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
            }
            return toWorldMat.inversePoint(arr);
        }
        return toWorldMat.inversePoint(arr);
    }
    function fromComp(arr){
        var toWorldMat = new Matrix();
        toWorldMat.reset();
        this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
        if(this._elem.hierarchy && this._elem.hierarchy.length){
            var i, len = this._elem.hierarchy.length;
            for(i=0;i<len;i+=1){
                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
            }
            return toWorldMat.inversePoint(arr);
        }
        return toWorldMat.inversePoint(arr);
    }

    function sampleImage() {
        return [1,1,1,1];
    }


    return function(elem){

        var transformInterface;

        function _registerMaskInterface(maskManager){
            _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem);
        }
        function _registerEffectsInterface(effects){
            _thisLayerFunction.effect = effects;
        }

        function _thisLayerFunction(name){
            switch(name){
                case "ADBE Root Vectors Group":
                case "Contents":
                case 2:
                    return _thisLayerFunction.shapeInterface;
                case 1:
                case 6:
                case "Transform":
                case "transform":
                case "ADBE Transform Group":
                    return transformInterface;
                case 4:
                case "ADBE Effect Parade":
                case "effects":
                case "Effects":
                    return _thisLayerFunction.effect;
            }
        }
        _thisLayerFunction.toWorld = toWorld;
        _thisLayerFunction.fromWorld = fromWorld;
        _thisLayerFunction.toComp = toWorld;
        _thisLayerFunction.fromComp = fromComp;
        _thisLayerFunction.sampleImage = sampleImage;
        _thisLayerFunction.sourceRectAtTime = elem.sourceRectAtTime.bind(elem);
        _thisLayerFunction._elem = elem;
        transformInterface = TransformExpressionInterface(elem.finalTransform.mProp);
        var anchorPointDescriptor = getDescriptor(transformInterface, 'anchorPoint');
        Object.defineProperties(_thisLayerFunction,{
            hasParent: {
                get: function(){
                    return elem.hierarchy.length;
                }
            },
            parent: {
                get: function(){
                    return elem.hierarchy[0].layerInterface;
                }
            },
            rotation: getDescriptor(transformInterface, 'rotation'),
            scale: getDescriptor(transformInterface, 'scale'),
            position: getDescriptor(transformInterface, 'position'),
            opacity: getDescriptor(transformInterface, 'opacity'),
            anchorPoint: anchorPointDescriptor,
            anchor_point: anchorPointDescriptor,
            transform: {
                get: function () {
                    return transformInterface;
                }
            },
            active: {
                get: function(){
                    return elem.isInRange;
                }
            }
        });

        _thisLayerFunction.startTime = elem.data.st;
        _thisLayerFunction.index = elem.data.ind;
        _thisLayerFunction.source = elem.data.refId;
        _thisLayerFunction.height = elem.data.ty === 0 ? elem.data.h : 100;
        _thisLayerFunction.width = elem.data.ty === 0 ? elem.data.w : 100;
        _thisLayerFunction.inPoint = elem.data.ip/elem.comp.globalData.frameRate;
        _thisLayerFunction.outPoint = elem.data.op/elem.comp.globalData.frameRate;
        _thisLayerFunction._name = elem.data.nm;

        _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
        _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
        return _thisLayerFunction;
    };
}());

var CompExpressionInterface = (function (){
    return function(comp){
        function _thisLayerFunction(name){
            var i=0, len = comp.layers.length;
            while(i<len){
                if(comp.layers[i].nm === name || comp.layers[i].ind === name){
                    return comp.elements[i].layerInterface;
                }
                i += 1;
            }
            return null;
            //return {active:false};
        }
        Object.defineProperty(_thisLayerFunction, "_name", { value:comp.data.nm });
        _thisLayerFunction.layer = _thisLayerFunction;
        _thisLayerFunction.pixelAspect = 1;
        _thisLayerFunction.height = comp.data.h || comp.globalData.compSize.h;
        _thisLayerFunction.width = comp.data.w || comp.globalData.compSize.w;
        _thisLayerFunction.pixelAspect = 1;
        _thisLayerFunction.frameDuration = 1/comp.globalData.frameRate;
        _thisLayerFunction.displayStartTime = 0;
        _thisLayerFunction.numLayers = comp.layers.length;
        return _thisLayerFunction;
    };
}());
var TransformExpressionInterface = (function (){
    return function(transform){
        function _thisFunction(name){
            switch(name){
                case "scale":
                case "Scale":
                case "ADBE Scale":
                case 6:
                    return _thisFunction.scale;
                case "rotation":
                case "Rotation":
                case "ADBE Rotation":
                case "ADBE Rotate Z":
                case 10:
                    return _thisFunction.rotation;
                case "ADBE Rotate X":
                    return _thisFunction.xRotation;
                case "ADBE Rotate Y":
                    return _thisFunction.yRotation;
                case "position":
                case "Position":
                case "ADBE Position":
                case 2:
                    return _thisFunction.position;
                case 'ADBE Position_0':
                    return _thisFunction.xPosition;
                case 'ADBE Position_1':
                    return _thisFunction.yPosition;
                case 'ADBE Position_2':
                    return _thisFunction.zPosition;
                case "anchorPoint":
                case "AnchorPoint":
                case "Anchor Point":
                case "ADBE AnchorPoint":
                case 1:
                    return _thisFunction.anchorPoint;
                case "opacity":
                case "Opacity":
                case 11:
                    return _thisFunction.opacity;
            }
        }

        Object.defineProperty(_thisFunction, "rotation", {
            get: ExpressionPropertyInterface(transform.r || transform.rz)
        });

        Object.defineProperty(_thisFunction, "zRotation", {
            get: ExpressionPropertyInterface(transform.rz || transform.r)
        });

        Object.defineProperty(_thisFunction, "xRotation", {
            get: ExpressionPropertyInterface(transform.rx)
        });

        Object.defineProperty(_thisFunction, "yRotation", {
            get: ExpressionPropertyInterface(transform.ry)
        });
        Object.defineProperty(_thisFunction, "scale", {
            get: ExpressionPropertyInterface(transform.s)
        });

        if(transform.p) {
            var _transformFactory = ExpressionPropertyInterface(transform.p);
        }
        Object.defineProperty(_thisFunction, "position", {
            get: function () {
                if(transform.p) {
                    return _transformFactory();
                } else {
                    return [transform.px.v, transform.py.v, transform.pz ? transform.pz.v : 0];
                }
            }
        });

        Object.defineProperty(_thisFunction, "xPosition", {
            get: ExpressionPropertyInterface(transform.px)
        });

        Object.defineProperty(_thisFunction, "yPosition", {
            get: ExpressionPropertyInterface(transform.py)
        });

        Object.defineProperty(_thisFunction, "zPosition", {
            get: ExpressionPropertyInterface(transform.pz)
        });

        Object.defineProperty(_thisFunction, "anchorPoint", {
            get: ExpressionPropertyInterface(transform.a)
        });

        Object.defineProperty(_thisFunction, "opacity", {
            get: ExpressionPropertyInterface(transform.o)
        });

        Object.defineProperty(_thisFunction, "skew", {
            get: ExpressionPropertyInterface(transform.sk)
        });

        Object.defineProperty(_thisFunction, "skewAxis", {
            get: ExpressionPropertyInterface(transform.sa)
        });

        Object.defineProperty(_thisFunction, "orientation", {
            get: ExpressionPropertyInterface(transform.or)
        });

        return _thisFunction;
    };
}());
var ProjectInterface = (function (){

    function registerComposition(comp){
        this.compositions.push(comp);
    }

    return function(){
        function _thisProjectFunction(name){
            var i = 0, len = this.compositions.length;
            while(i<len){
                if(this.compositions[i].data && this.compositions[i].data.nm === name){
                    if(this.compositions[i].prepareFrame && this.compositions[i].data.xt) {
                        this.compositions[i].prepareFrame(this.currentFrame);
                    }
                    return this.compositions[i].compInterface;
                }
                i+=1;
            }
        }

        _thisProjectFunction.compositions = [];
        _thisProjectFunction.currentFrame = 0;

        _thisProjectFunction.registerComposition = registerComposition;



        return _thisProjectFunction;
    };
}());
var EffectsExpressionInterface = (function (){
    var ob = {
        createEffectsInterface: createEffectsInterface
    };

    function createEffectsInterface(elem, propertyGroup){
        if(elem.effectsManager){

            var effectElements = [];
            var effectsData = elem.data.ef;
            var i, len = elem.effectsManager.effectElements.length;
            for(i=0;i<len;i+=1){
                effectElements.push(createGroupInterface(effectsData[i],elem.effectsManager.effectElements[i],propertyGroup,elem));
            }

            return function(name){
                var effects = elem.data.ef || [], i = 0, len = effects.length;
                while(i<len) {
                    if(name === effects[i].nm || name === effects[i].mn || name === effects[i].ix){
                        return effectElements[i];
                    }
                    i += 1;
                }
            };
        }
    }

    function createGroupInterface(data,elements, propertyGroup, elem){
        var effectElements = [];
        var i, len = data.ef.length;
        for(i=0;i<len;i+=1){
            if(data.ef[i].ty === 5){
                effectElements.push(createGroupInterface(data.ef[i],elements.effectElements[i],elements.effectElements[i].propertyGroup, elem));
            } else {
                effectElements.push(createValueInterface(elements.effectElements[i],data.ef[i].ty, elem, _propertyGroup));
            }
        }

        function _propertyGroup(val) {
            if(val === 1){
               return groupInterface;
            } else{
               return propertyGroup(val-1);
            }
        }

        var groupInterface = function(name){
            var effects = data.ef, i = 0, len = effects.length;
            while(i<len) {
                if(name === effects[i].nm || name === effects[i].mn || name === effects[i].ix){
                    if(effects[i].ty === 5){
                        return effectElements[i];
                    } else {
                        return effectElements[i]();
                    }
                }
                i += 1;
            }
            return effectElements[0]();
        };

        groupInterface.propertyGroup = _propertyGroup;

        if(data.mn === 'ADBE Color Control'){
            Object.defineProperty(groupInterface, 'color', {
                get: function(){
                    return effectElements[0]();
                }
            });
        }
        Object.defineProperty(groupInterface, 'numProperties', {
            get: function(){
                return data.np;
            }
        });
        groupInterface.active = groupInterface.enabled = data.en !== 0;
        return groupInterface;
    }

    function createValueInterface(element, type, elem, propertyGroup){
        var expressionProperty = ExpressionPropertyInterface(element.p);
        function interfaceFunction(){
            if(type === 10){
                return elem.comp.compInterface(element.p.v);
            }
            return expressionProperty();
        }

        if(element.p.setGroupProperty) {
            element.p.setGroupProperty(propertyGroup);
        }

        return interfaceFunction;
    }

    return ob;

}());
var MaskManagerInterface = (function(){

	function MaskInterface(mask, data){
		this._mask = mask;
		this._data = data;
	}
	Object.defineProperty(MaskInterface.prototype, 'maskPath', {
        get: function(){
                if(this._mask.prop.k){
                    this._mask.prop.getValue();
                }
                return this._mask.prop;
            }
        });

	var MaskManager = function(maskManager, elem){
		var _maskManager = maskManager;
		var _elem = elem;
		var _masksInterfaces = createSizedArray(maskManager.viewData.length);
		var i, len = maskManager.viewData.length;
		for(i = 0; i < len; i += 1) {
			_masksInterfaces[i] = new MaskInterface(maskManager.viewData[i], maskManager.masksProperties[i]);
		}

		var maskFunction = function(name){
			i = 0;
		    while(i<len){
		        if(maskManager.masksProperties[i].nm === name){
		            return _masksInterfaces[i];
		        }
		        i += 1;
		    }
		};
		return maskFunction;
	};
	return MaskManager;
}());

var ExpressionPropertyInterface = (function() {

    var defaultUnidimensionalValue = {pv:0, v:0, mult: 1}
    var defaultMultidimensionalValue = {pv:[0,0,0], v:[0,0,0], mult: 1}

    function completeProperty(expressionValue, property, type) {
        Object.defineProperty(expressionValue, 'velocity', {
            get: function(){
                return property.getVelocityAtTime(property.comp.currentFrame);
            }
        });
        expressionValue.numKeys = property.keyframes ? property.keyframes.length : 0;
        expressionValue.key = function(pos) {
            if (!expressionValue.numKeys) {
                return 0;
            } else {
                var value = '';
                if ('s' in property.keyframes[pos-1]) {
                    value = property.keyframes[pos-1].s;
                } else if ('e' in property.keyframes[pos-2]) {
                    value = property.keyframes[pos-2].e;
                } else {
                    value = property.keyframes[pos-2].s;
                }
                var valueProp = type === 'unidimensional' ? new Number(value) : Object.assign({}, value);
                valueProp.time = property.keyframes[pos-1].t / property.elem.comp.globalData.frameRate;
                return valueProp;
            }
        };
        expressionValue.valueAtTime = property.getValueAtTime;
        expressionValue.speedAtTime = property.getSpeedAtTime;
        expressionValue.velocityAtTime = property.getVelocityAtTime;
        expressionValue.propertyGroup = property.propertyGroup;
    }

    function UnidimensionalPropertyInterface(property) {
        if(!property || !('pv' in property)) {
            property = defaultUnidimensionalValue;
        }
        var mult = 1 / property.mult;
        var val = property.pv * mult;
        var expressionValue = new Number(val);
        expressionValue.value = val;
        completeProperty(expressionValue, property, 'unidimensional');

        return function() {
            if (property.k) {
                property.getValue();
            }
            val = property.v * mult;
            if(expressionValue.value !== val) {
                expressionValue = new Number(val);
                expressionValue.value = val;
                completeProperty(expressionValue, property, 'unidimensional');
            }
            return expressionValue;
        }
    }

    function MultidimensionalPropertyInterface(property) {
        if(!property || !('pv' in property)) {
            property = defaultMultidimensionalValue;
        }
        var mult = 1 / property.mult;
        var len = property.pv.length;
        var expressionValue = createTypedArray('float32', len);
        var arrValue = createTypedArray('float32', len);
        expressionValue.value = arrValue;
        completeProperty(expressionValue, property, 'multidimensional');

        return function() {
            if (property.k) {
                property.getValue();
            }
            for (var i = 0; i < len; i += 1) {
                expressionValue[i] = arrValue[i] = property.v[i] * mult;
            }
            return expressionValue;
        }
    }

    //TODO: try to avoid using this getter
    function defaultGetter() {
        return defaultUnidimensionalValue;
    }
    
    return function(property) {
        if(!property) {
            return defaultGetter;
        } else if (property.propType === 'unidimensional') {
            return UnidimensionalPropertyInterface(property);
        } else {
            return MultidimensionalPropertyInterface(property);
        }
    }
}());

(function(){

    var TextExpressionSelectorProp = (function(){

        function getValueProxy(index,total){
            this.textIndex = index+1;
            this.textTotal = total;
            this.v = this.getValue() * this.mult;
            return this.v;
        }

        return function TextExpressionSelectorProp(elem,data){
            this.pv = 1;
            this.comp = elem.comp;
            this.elem = elem;
            this.mult = 0.01;
            this.propType = 'textSelector';
            this.textTotal = data.totalChars;
            this.selectorValue = 100;
            this.lastValue = [1,1,1];
            this.k = true;
            this.x = true;
            this.getValue = ExpressionManager.initiateExpression.bind(this)(elem,data,this);
            this.getMult = getValueProxy;
            this.getVelocityAtTime = expressionHelpers.getVelocityAtTime;
            if(this.kf){
                this.getValueAtTime = expressionHelpers.getValueAtTime.bind(this);
            } else {
                this.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(this);
            }
            this.setGroupProperty = expressionHelpers.setGroupProperty;
        };
    }());

	var propertyGetTextProp = TextSelectorProp.getTextSelectorProp;
	TextSelectorProp.getTextSelectorProp = function(elem, data,arr){
	    if(data.t === 1){
	        return new TextExpressionSelectorProp(elem, data,arr);
	    } else {
	        return propertyGetTextProp(elem,data,arr);
	    }
	};
}());
function SliderEffect(data,elem, container){
    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
}
function AngleEffect(data,elem, container){
    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
}
function ColorEffect(data,elem, container){
    this.p = PropertyFactory.getProp(elem,data.v,1,0,container);
}
function PointEffect(data,elem, container){
    this.p = PropertyFactory.getProp(elem,data.v,1,0,container);
}
function LayerIndexEffect(data,elem, container){
    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
}
function MaskIndexEffect(data,elem, container){
    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
}
function CheckboxEffect(data,elem, container){
    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
}
function NoValueEffect(){
    this.p = {};
}
function EffectsManager(){}
function EffectsManager(data,element){
    var effects = data.ef || [];
    this.effectElements = [];
    var i,len = effects.length;
    var effectItem;
    for(i=0;i<len;i++) {
        effectItem = new GroupEffect(effects[i],element);
        this.effectElements.push(effectItem);
    }
}

function GroupEffect(data,element){
    this.init(data,element);
}

extendPrototype([DynamicPropertyContainer], GroupEffect);

GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;

GroupEffect.prototype.init = function(data,element){
    this.data = data;
    this.effectElements = [];
    this.initDynamicPropertyContainer(element);
    var i, len = this.data.ef.length;
    var eff, effects = this.data.ef;
    for(i=0;i<len;i+=1){
        eff = null;
        switch(effects[i].ty){
            case 0:
                eff = new SliderEffect(effects[i],element,this);
                break;
            case 1:
                eff = new AngleEffect(effects[i],element,this);
                break;
            case 2:
                eff = new ColorEffect(effects[i],element,this);
                break;
            case 3:
                eff = new PointEffect(effects[i],element,this);
                break;
            case 4:
            case 7:
                eff = new CheckboxEffect(effects[i],element,this);
                break;
            case 10:
                eff = new LayerIndexEffect(effects[i],element,this);
                break;
            case 11:
                eff = new MaskIndexEffect(effects[i],element,this);
                break;
            case 5:
                eff = new EffectsManager(effects[i],element,this);
                break;
            //case 6:
            default:
                eff = new NoValueEffect(effects[i],element,this);
                break;
        }
        if(eff) {
            this.effectElements.push(eff);
        }
    }
};

    var lottiejs = {};

    var _isFrozen = false;

    function setLocationHref (href) {
        locationHref = href;
    }

    function searchAnimations() {
        if (standalone === true) {
            animationManager.searchAnimations(animationData, standalone, renderer);
        } else {
            animationManager.searchAnimations();
        }
    }

    function setSubframeRendering(flag) {
        subframeEnabled = flag;
    }

    function loadAnimation(params) {
        if (standalone === true) {
            params.animationData = JSON.parse(animationData);
        }
        return animationManager.loadAnimation(params);
    }

    function setQuality(value) {
        if (typeof value === 'string') {
            switch (value) {
                case 'high':
                    defaultCurveSegments = 200;
                    break;
                case 'medium':
                    defaultCurveSegments = 50;
                    break;
                case 'low':
                    defaultCurveSegments = 10;
                    break;
            }
        } else if (!isNaN(value) && value > 1) {
            defaultCurveSegments = value;
        }
        if (defaultCurveSegments >= 50) {
            roundValues(false);
        } else {
            roundValues(true);
        }
    }

    function inBrowser() {
        return typeof navigator !== 'undefined';
    }

    function installPlugin(type, plugin) {
        if (type === 'expressions') {
            expressionsPlugin = plugin;
        }
    }

    function getFactory(name) {
        switch (name) {
            case "propertyFactory":
                return PropertyFactory;
            case "shapePropertyFactory":
                return ShapePropertyFactory;
            case "matrix":
                return Matrix;
        }
    }

    lottiejs.play = animationManager.play;
    lottiejs.pause = animationManager.pause;
    lottiejs.setLocationHref = setLocationHref;
    lottiejs.togglePause = animationManager.togglePause;
    lottiejs.setSpeed = animationManager.setSpeed;
    lottiejs.setDirection = animationManager.setDirection;
    lottiejs.stop = animationManager.stop;
    lottiejs.searchAnimations = searchAnimations;
    lottiejs.registerAnimation = animationManager.registerAnimation;
    lottiejs.loadAnimation = loadAnimation;
    lottiejs.setSubframeRendering = setSubframeRendering;
    lottiejs.resize = animationManager.resize;
    //lottiejs.start = start;
    lottiejs.goToAndStop = animationManager.goToAndStop;
    lottiejs.destroy = animationManager.destroy;
    lottiejs.setQuality = setQuality;
    lottiejs.inBrowser = inBrowser;
    lottiejs.installPlugin = installPlugin;
    lottiejs.freeze = animationManager.freeze;
    lottiejs.unfreeze = animationManager.unfreeze;
    lottiejs.getRegisteredAnimations = animationManager.getRegisteredAnimations;
    lottiejs.__getFactory = getFactory;
    lottiejs.version = '5.5.2';

    function checkReady() {
        if (document.readyState === "complete") {
            clearInterval(readyStateCheckInterval);
            searchAnimations();
        }
    }

    function getQueryVariable(variable) {
        var vars = queryString.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if (decodeURIComponent(pair[0]) == variable) {
                return decodeURIComponent(pair[1]);
            }
        }
    }
    var standalone = '__[STANDALONE]__';
    var animationData = '__[ANIMATIONDATA]__';
    var renderer = '';
    if (standalone) {
        var scripts = document.getElementsByTagName('script');
        var index = scripts.length - 1;
        var myScript = scripts[index] || {
            src: ''
        };
        var queryString = myScript.src.replace(/^[^\?]+\??/, '');
        renderer = getQueryVariable('renderer');
    }
    var readyStateCheckInterval = setInterval(checkReady, 100);
    return lottiejs;
}));

},{}],"../node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
},{}],"../node_modules/style-value-types/dist/style-value-types.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complex = exports.color = exports.hex = exports.hsla = exports.rgbUnit = exports.rgba = exports.vh = exports.vw = exports.px = exports.progressPercentage = exports.percent = exports.degrees = exports.alpha = exports.scale = exports.number = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var clamp = function (min, max) {
  return function (v) {
    return Math.max(Math.min(v, max), min);
  };
};

var sanitize = function (v) {
  return v % 1 ? Number(v.toFixed(5)) : v;
};

var floatRegex = /(-)?(\d[\d\.]*)/g;
var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))$/i;
var number = {
  test: function (v) {
    return typeof v === 'number';
  },
  parse: parseFloat,
  transform: function (v) {
    return v;
  }
};
exports.number = number;

var alpha = __assign({}, number, {
  transform: clamp(0, 1)
});

exports.alpha = alpha;

var scale = __assign({}, number, {
  default: 1
});

exports.scale = scale;

var createUnitType = function (unit) {
  return {
    test: function (v) {
      return typeof v === 'string' && v.endsWith(unit) && v.split(' ').length === 1;
    },
    parse: parseFloat,
    transform: function (v) {
      return "" + v + unit;
    }
  };
};

var degrees = createUnitType('deg');
exports.degrees = degrees;
var percent = createUnitType('%');
exports.percent = percent;
var px = createUnitType('px');
exports.px = px;
var vh = createUnitType('vh');
exports.vh = vh;
var vw = createUnitType('vw');
exports.vw = vw;

var progressPercentage = __assign({}, percent, {
  parse: function (v) {
    return percent.parse(v) / 100;
  },
  transform: function (v) {
    return percent.transform(v * 100);
  }
});

exports.progressPercentage = progressPercentage;

var getValueFromFunctionString = function (value) {
  return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));
};

var clampRgbUnit = clamp(0, 255);

var isRgba = function (v) {
  return v.red !== undefined;
};

var isHsla = function (v) {
  return v.hue !== undefined;
};

var splitColorValues = function (terms) {
  return function (v) {
    if (typeof v !== 'string') return v;
    var values = {};
    var valuesArray = getValueFromFunctionString(v).split(/,\s*/);

    for (var i = 0; i < 4; i++) {
      values[terms[i]] = valuesArray[i] !== undefined ? parseFloat(valuesArray[i]) : 1;
    }

    return values;
  };
};

var rgbaTemplate = function (_a) {
  var red = _a.red,
      green = _a.green,
      blue = _a.blue,
      _b = _a.alpha,
      alpha$$1 = _b === void 0 ? 1 : _b;
  return "rgba(" + red + ", " + green + ", " + blue + ", " + alpha$$1 + ")";
};

var hslaTemplate = function (_a) {
  var hue = _a.hue,
      saturation = _a.saturation,
      lightness = _a.lightness,
      _b = _a.alpha,
      alpha$$1 = _b === void 0 ? 1 : _b;
  return "hsla(" + hue + ", " + saturation + ", " + lightness + ", " + alpha$$1 + ")";
};

var rgbUnit = __assign({}, number, {
  transform: function (v) {
    return Math.round(clampRgbUnit(v));
  }
});

exports.rgbUnit = rgbUnit;

function isColorString(color, colorType) {
  return color.startsWith(colorType) && singleColorRegex.test(color);
}

var rgba = {
  test: function (v) {
    return typeof v === 'string' ? isColorString(v, 'rgb') : isRgba(v);
  },
  parse: splitColorValues(['red', 'green', 'blue', 'alpha']),
  transform: function (_a) {
    var red = _a.red,
        green = _a.green,
        blue = _a.blue,
        alpha$$1 = _a.alpha;
    return rgbaTemplate({
      red: rgbUnit.transform(red),
      green: rgbUnit.transform(green),
      blue: rgbUnit.transform(blue),
      alpha: sanitize(alpha$$1)
    });
  }
};
exports.rgba = rgba;
var hsla = {
  test: function (v) {
    return typeof v === 'string' ? isColorString(v, 'hsl') : isHsla(v);
  },
  parse: splitColorValues(['hue', 'saturation', 'lightness', 'alpha']),
  transform: function (_a) {
    var hue = _a.hue,
        saturation = _a.saturation,
        lightness = _a.lightness,
        alpha$$1 = _a.alpha;
    return hslaTemplate({
      hue: Math.round(hue),
      saturation: percent.transform(sanitize(saturation)),
      lightness: percent.transform(sanitize(lightness)),
      alpha: sanitize(alpha$$1)
    });
  }
};
exports.hsla = hsla;

var hex = __assign({}, rgba, {
  test: function (v) {
    return typeof v === 'string' && isColorString(v, '#');
  },
  parse: function (v) {
    var r = '';
    var g = '';
    var b = '';

    if (v.length > 4) {
      r = v.substr(1, 2);
      g = v.substr(3, 2);
      b = v.substr(5, 2);
    } else {
      r = v.substr(1, 1);
      g = v.substr(2, 1);
      b = v.substr(3, 1);
      r += r;
      g += g;
      b += b;
    }

    return {
      red: parseInt(r, 16),
      green: parseInt(g, 16),
      blue: parseInt(b, 16),
      alpha: 1
    };
  }
});

exports.hex = hex;
var color = {
  test: function (v) {
    return typeof v === 'string' && singleColorRegex.test(v) || isRgba(v) || isHsla(v);
  },
  parse: function (v) {
    if (rgba.test(v)) {
      return rgba.parse(v);
    } else if (hsla.test(v)) {
      return hsla.parse(v);
    } else if (hex.test(v)) {
      return hex.parse(v);
    }

    return v;
  },
  transform: function (v) {
    if (isRgba(v)) {
      return rgba.transform(v);
    } else if (isHsla(v)) {
      return hsla.transform(v);
    }

    return v;
  }
};
exports.color = color;
var COLOR_TOKEN = '${c}';
var NUMBER_TOKEN = '${n}';

var convertNumbersToZero = function (v) {
  return typeof v === 'number' ? 0 : v;
};

var complex = {
  test: function (v) {
    if (typeof v !== 'string' || !isNaN(v)) return false;
    var numValues = 0;
    var foundNumbers = v.match(floatRegex);
    var foundColors = v.match(colorRegex);
    if (foundNumbers) numValues += foundNumbers.length;
    if (foundColors) numValues += foundColors.length;
    return numValues > 0;
  },
  parse: function (v) {
    var input = v;
    var parsed = [];
    var foundColors = input.match(colorRegex);

    if (foundColors) {
      input = input.replace(colorRegex, COLOR_TOKEN);
      parsed.push.apply(parsed, foundColors.map(color.parse));
    }

    var foundNumbers = input.match(floatRegex);

    if (foundNumbers) {
      parsed.push.apply(parsed, foundNumbers.map(number.parse));
    }

    return parsed;
  },
  createTransformer: function (prop) {
    var template = prop;
    var token = 0;
    var foundColors = prop.match(colorRegex);
    var numColors = foundColors ? foundColors.length : 0;

    if (foundColors) {
      for (var i = 0; i < numColors; i++) {
        template = template.replace(foundColors[i], COLOR_TOKEN);
        token++;
      }
    }

    var foundNumbers = template.match(floatRegex);
    var numNumbers = foundNumbers ? foundNumbers.length : 0;

    if (foundNumbers) {
      for (var i = 0; i < numNumbers; i++) {
        template = template.replace(foundNumbers[i], NUMBER_TOKEN);
        token++;
      }
    }

    return function (v) {
      var output = template;

      for (var i = 0; i < token; i++) {
        output = output.replace(i < numColors ? COLOR_TOKEN : NUMBER_TOKEN, i < numColors ? color.transform(v[i]) : sanitize(v[i]));
      }

      return output;
    };
  },
  getAnimatableNone: function (target) {
    var parsedTarget = complex.parse(target);
    var targetTransformer = complex.createTransformer(target);
    return targetTransformer(parsedTarget.map(convertNumbersToZero));
  }
};
exports.complex = complex;
},{}],"../node_modules/hey-listen/dist/hey-listen.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warning = exports.invariant = void 0;

var warning = function () {};

exports.warning = warning;

var invariant = function () {};

exports.invariant = invariant;

if ("development" !== 'production') {
  exports.warning = warning = function (check, message) {
    if (!check && typeof console !== 'undefined') {
      console.warn(message);
    }
  };

  exports.invariant = invariant = function (check, message) {
    if (!check) {
      throw new Error(message);
    }
  };
}
},{}],"../node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../node_modules/framesync/dist/framesync.es.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFrameData = exports.cancelSync = exports.default = void 0;

var _heyListen = require("hey-listen");

var prevTime = 0;
var onNextFrame = typeof window !== 'undefined' && window.requestAnimationFrame !== undefined ? function (callback) {
  return window.requestAnimationFrame(callback);
} : function (callback) {
  var timestamp = Date.now();
  var timeToCall = Math.max(0, 16.7 - (timestamp - prevTime));
  prevTime = timestamp + timeToCall;
  setTimeout(function () {
    return callback(prevTime);
  }, timeToCall);
};

var createStep = function (setRunNextFrame) {
  var processToRun = [];
  var processToRunNextFrame = [];
  var numThisFrame = 0;
  var isProcessing = false;
  var i = 0;
  var cancelled = new WeakSet();
  var toKeepAlive = new WeakSet();
  var renderStep = {
    cancel: function (process) {
      var indexOfCallback = processToRunNextFrame.indexOf(process);
      cancelled.add(process);

      if (indexOfCallback !== -1) {
        processToRunNextFrame.splice(indexOfCallback, 1);
      }
    },
    process: function (frame) {
      var _a;

      isProcessing = true;
      _a = [processToRunNextFrame, processToRun], processToRun = _a[0], processToRunNextFrame = _a[1];
      processToRunNextFrame.length = 0;
      numThisFrame = processToRun.length;

      if (numThisFrame) {
        var process_1;

        for (i = 0; i < numThisFrame; i++) {
          process_1 = processToRun[i];
          process_1(frame);

          if (toKeepAlive.has(process_1) === true && !cancelled.has(process_1)) {
            renderStep.schedule(process_1);
            setRunNextFrame(true);
          }
        }
      }

      isProcessing = false;
    },
    schedule: function (process, keepAlive, immediate) {
      if (keepAlive === void 0) {
        keepAlive = false;
      }

      if (immediate === void 0) {
        immediate = false;
      }

      (0, _heyListen.invariant)(typeof process === 'function', 'Argument must be a function');
      var addToCurrentBuffer = immediate && isProcessing;
      var buffer = addToCurrentBuffer ? processToRun : processToRunNextFrame;
      cancelled.delete(process);
      if (keepAlive) toKeepAlive.add(process);

      if (buffer.indexOf(process) === -1) {
        buffer.push(process);
        if (addToCurrentBuffer) numThisFrame = processToRun.length;
      }
    }
  };
  return renderStep;
};

var StepId;

(function (StepId) {
  StepId["Read"] = "read";
  StepId["Update"] = "update";
  StepId["Render"] = "render";
  StepId["PostRender"] = "postRender";
  StepId["FixedUpdate"] = "fixedUpdate";
})(StepId || (StepId = {}));

var maxElapsed = 40;
var defaultElapsed = 1 / 60 * 1000;
var useDefaultElapsed = true;
var willRunNextFrame = false;
var isProcessing = false;
var frame = {
  delta: 0,
  timestamp: 0
};
var stepsOrder = [StepId.Read, StepId.Update, StepId.Render, StepId.PostRender];

var setWillRunNextFrame = function (willRun) {
  return willRunNextFrame = willRun;
};

var _a = stepsOrder.reduce(function (acc, key) {
  var step = createStep(setWillRunNextFrame);

  acc.sync[key] = function (process, keepAlive, immediate) {
    if (keepAlive === void 0) {
      keepAlive = false;
    }

    if (immediate === void 0) {
      immediate = false;
    }

    if (!willRunNextFrame) startLoop();
    step.schedule(process, keepAlive, immediate);
    return process;
  };

  acc.cancelSync[key] = function (process) {
    return step.cancel(process);
  };

  acc.steps[key] = step;
  return acc;
}, {
  steps: {},
  sync: {},
  cancelSync: {}
}),
    steps = _a.steps,
    sync = _a.sync,
    cancelSync = _a.cancelSync;

exports.cancelSync = cancelSync;

var processStep = function (stepId) {
  return steps[stepId].process(frame);
};

var processFrame = function (timestamp) {
  willRunNextFrame = false;
  frame.delta = useDefaultElapsed ? defaultElapsed : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
  if (!useDefaultElapsed) defaultElapsed = frame.delta;
  frame.timestamp = timestamp;
  isProcessing = true;
  stepsOrder.forEach(processStep);
  isProcessing = false;

  if (willRunNextFrame) {
    useDefaultElapsed = false;
    onNextFrame(processFrame);
  }
};

var startLoop = function () {
  willRunNextFrame = true;
  useDefaultElapsed = true;
  if (!isProcessing) onNextFrame(processFrame);
};

var getFrameData = function () {
  return frame;
};

exports.getFrameData = getFrameData;
var _default = sync;
exports.default = _default;
},{"hey-listen":"../node_modules/hey-listen/dist/hey-listen.es.js","process":"../node_modules/process/browser.js"}],"../node_modules/@popmotion/easing/dist/easing.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubicBezier = cubicBezier;
exports.bounceInOut = exports.bounceIn = exports.bounceOut = exports.anticipate = exports.backInOut = exports.backOut = exports.backIn = exports.circInOut = exports.circOut = exports.circIn = exports.easeInOut = exports.easeOut = exports.easeIn = exports.linear = exports.createAnticipateEasing = exports.createBackIn = exports.createExpoIn = exports.createMirroredEasing = exports.createReversedEasing = exports.mirrored = exports.reversed = void 0;
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;

var reversed = function (easing) {
  return function (p) {
    return 1 - easing(1 - p);
  };
};

exports.reversed = reversed;

var mirrored = function (easing) {
  return function (p) {
    return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
  };
};

exports.mirrored = mirrored;
var createReversedEasing = reversed;
exports.createReversedEasing = createReversedEasing;
var createMirroredEasing = mirrored;
exports.createMirroredEasing = createMirroredEasing;

var createExpoIn = function (power) {
  return function (p) {
    return Math.pow(p, power);
  };
};

exports.createExpoIn = createExpoIn;

var createBackIn = function (power) {
  return function (p) {
    return p * p * ((power + 1) * p - power);
  };
};

exports.createBackIn = createBackIn;

var createAnticipateEasing = function (power) {
  var backEasing = createBackIn(power);
  return function (p) {
    return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
  };
};

exports.createAnticipateEasing = createAnticipateEasing;

var linear = function (p) {
  return p;
};

exports.linear = linear;
var easeIn =
/*#__PURE__*/
createExpoIn(2);
exports.easeIn = easeIn;
var easeOut =
/*#__PURE__*/
reversed(easeIn);
exports.easeOut = easeOut;
var easeInOut =
/*#__PURE__*/
mirrored(easeIn);
exports.easeInOut = easeInOut;

var circIn = function (p) {
  return 1 - Math.sin(Math.acos(p));
};

exports.circIn = circIn;
var circOut =
/*#__PURE__*/
reversed(circIn);
exports.circOut = circOut;
var circInOut =
/*#__PURE__*/
mirrored(circOut);
exports.circInOut = circInOut;
var backIn =
/*#__PURE__*/
createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
exports.backIn = backIn;
var backOut =
/*#__PURE__*/
reversed(backIn);
exports.backOut = backOut;
var backInOut =
/*#__PURE__*/
mirrored(backIn);
exports.backInOut = backInOut;
var anticipate =
/*#__PURE__*/
createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);
exports.anticipate = anticipate;
var BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;
var BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;
var BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;
var ca = 4356.0 / 361.0;
var cb = 35442.0 / 1805.0;
var cc = 16061.0 / 1805.0;

var bounceOut = function (p) {
  var p2 = p * p;
  return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
};

exports.bounceOut = bounceOut;

var bounceIn = function (p) {
  return 1.0 - bounceOut(1.0 - p);
};

exports.bounceIn = bounceIn;

var bounceInOut = function (p) {
  return p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;
};

exports.bounceInOut = bounceInOut;
var NEWTON_ITERATIONS = 8;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var K_SPLINE_TABLE_SIZE = 11;
var K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);
var FLOAT_32_SUPPORTED = typeof Float32Array !== 'undefined';

var a = function (a1, a2) {
  return 1.0 - 3.0 * a2 + 3.0 * a1;
};

var b = function (a1, a2) {
  return 3.0 * a2 - 6.0 * a1;
};

var c = function (a1) {
  return 3.0 * a1;
};

var getSlope = function (t, a1, a2) {
  return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);
};

var calcBezier = function (t, a1, a2) {
  return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
};

function cubicBezier(mX1, mY1, mX2, mY2) {
  var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);

  var binarySubdivide = function (aX, aA, aB) {
    var i = 0;
    var currentX;
    var currentT;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  };

  var newtonRaphsonIterate = function (aX, aGuessT) {
    var i = 0;
    var currentSlope = 0;
    var currentX;

    for (; i < NEWTON_ITERATIONS; ++i) {
      currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  };

  var calcSampleValues = function () {
    for (var i = 0; i < K_SPLINE_TABLE_SIZE; ++i) {
      sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);
    }
  };

  var getTForX = function (aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = K_SPLINE_TABLE_SIZE - 1;
    var dist = 0.0;
    var guessForT = 0.0;
    var initialSlope = 0.0;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += K_SAMPLE_STEP_SIZE;
    }

    --currentSample;
    dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;
    initialSlope = getSlope(guessForT, mX1, mX2);

    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);
    }
  };

  calcSampleValues();

  var resolver = function (aX) {
    var returnValue;

    if (mX1 === mY1 && mX2 === mY2) {
      returnValue = aX;
    } else if (aX === 0) {
      returnValue = 0;
    } else if (aX === 1) {
      returnValue = 1;
    } else {
      returnValue = calcBezier(getTForX(aX), mY1, mY2);
    }

    return returnValue;
  };

  return resolver;
}
},{}],"../node_modules/@popmotion/popcorn/dist/popcorn.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolate = interpolate$$1;
Object.defineProperty(exports, "createAnticipateEasing", {
  enumerable: true,
  get: function () {
    return _easing.createAnticipateEasing;
  }
});
Object.defineProperty(exports, "createBackIn", {
  enumerable: true,
  get: function () {
    return _easing.createBackIn;
  }
});
Object.defineProperty(exports, "createExpoIn", {
  enumerable: true,
  get: function () {
    return _easing.createExpoIn;
  }
});
Object.defineProperty(exports, "cubicBezier", {
  enumerable: true,
  get: function () {
    return _easing.cubicBezier;
  }
});
Object.defineProperty(exports, "linear", {
  enumerable: true,
  get: function () {
    return _easing.linear;
  }
});
Object.defineProperty(exports, "easeIn", {
  enumerable: true,
  get: function () {
    return _easing.easeIn;
  }
});
Object.defineProperty(exports, "easeOut", {
  enumerable: true,
  get: function () {
    return _easing.easeOut;
  }
});
Object.defineProperty(exports, "easeInOut", {
  enumerable: true,
  get: function () {
    return _easing.easeInOut;
  }
});
Object.defineProperty(exports, "circIn", {
  enumerable: true,
  get: function () {
    return _easing.circIn;
  }
});
Object.defineProperty(exports, "circOut", {
  enumerable: true,
  get: function () {
    return _easing.circOut;
  }
});
Object.defineProperty(exports, "circInOut", {
  enumerable: true,
  get: function () {
    return _easing.circInOut;
  }
});
Object.defineProperty(exports, "backIn", {
  enumerable: true,
  get: function () {
    return _easing.backIn;
  }
});
Object.defineProperty(exports, "backOut", {
  enumerable: true,
  get: function () {
    return _easing.backOut;
  }
});
Object.defineProperty(exports, "backInOut", {
  enumerable: true,
  get: function () {
    return _easing.backInOut;
  }
});
Object.defineProperty(exports, "anticipate", {
  enumerable: true,
  get: function () {
    return _easing.anticipate;
  }
});
Object.defineProperty(exports, "reversed", {
  enumerable: true,
  get: function () {
    return _easing.reversed;
  }
});
Object.defineProperty(exports, "mirrored", {
  enumerable: true,
  get: function () {
    return _easing.mirrored;
  }
});
exports.wrap = exports.velocityPerSecond = exports.velocityPerFrame = exports.toDecimal = exports.steps = exports.springForceLinear = exports.springForceExpo = exports.springForce = exports.snap = exports.smoothFrame = exports.smooth = exports.radiansToDegrees = exports.progress = exports.pointFromVector = exports.pipe = exports.mixObject = exports.mixComplex = exports.mixColor = exports.mixArray = exports.mix = exports.isPoint3D = exports.isPoint = exports.distance = exports.degreesToRadians = exports.conditional = exports.clamp = exports.applyOffset = exports.angle = void 0;

var _styleValueTypes = require("style-value-types");

var _heyListen = require("hey-listen");

var _framesync = require("framesync");

var _easing = require("@popmotion/easing");

var zeroPoint = {
  x: 0,
  y: 0,
  z: 0
};

var isNum = function (v) {
  return typeof v === 'number';
};

var radiansToDegrees = function (radians) {
  return radians * 180 / Math.PI;
};

exports.radiansToDegrees = radiansToDegrees;

var angle = function (a, b) {
  if (b === void 0) {
    b = zeroPoint;
  }

  return radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));
};

exports.angle = angle;

var applyOffset = function (from, to) {
  var hasReceivedFrom = true;

  if (to === undefined) {
    to = from;
    hasReceivedFrom = false;
  }

  return function (v) {
    if (hasReceivedFrom) {
      return v - from + to;
    } else {
      from = v;
      hasReceivedFrom = true;
      return to;
    }
  };
};

exports.applyOffset = applyOffset;

var curryRange = function (func) {
  return function (min, max, v) {
    return v !== undefined ? func(min, max, v) : function (cv) {
      return func(min, max, cv);
    };
  };
};

var clamp = function (min, max, v) {
  return Math.min(Math.max(v, min), max);
};

var clamp$1 = curryRange(clamp);
exports.clamp = clamp$1;

var conditional = function (check, apply) {
  return function (v) {
    return check(v) ? apply(v) : v;
  };
};

exports.conditional = conditional;

var degreesToRadians = function (degrees) {
  return degrees * Math.PI / 180;
};

exports.degreesToRadians = degreesToRadians;

var isPoint = function (point) {
  return point.hasOwnProperty('x') && point.hasOwnProperty('y');
};

exports.isPoint = isPoint;

var isPoint3D = function (point) {
  return isPoint(point) && point.hasOwnProperty('z');
};

exports.isPoint3D = isPoint3D;

var distance1D = function (a, b) {
  return Math.abs(a - b);
};

var distance = function (a, b) {
  if (b === void 0) {
    b = zeroPoint;
  }

  if (isNum(a) && isNum(b)) {
    return distance1D(a, b);
  } else if (isPoint(a) && isPoint(b)) {
    var xDelta = distance1D(a.x, b.x);
    var yDelta = distance1D(a.y, b.y);
    var zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;
    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
  }

  return 0;
};

exports.distance = distance;

var progress = function (from, to, value) {
  var toFromDifference = to - from;
  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};

exports.progress = progress;

var mix = function (from, to, progress) {
  return -progress * from + progress * to + from;
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


exports.mix = mix;

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var mixLinearColor = function (from, to, v) {
  var fromExpo = from * from;
  var toExpo = to * to;
  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
};

var colorTypes = [_styleValueTypes.hex, _styleValueTypes.rgba, _styleValueTypes.hsla];

var getColorType = function (v) {
  return colorTypes.find(function (type) {
    return type.test(v);
  });
};

var notAnimatable = function (color$$1) {
  return "'" + color$$1 + "' is not an animatable color. Use the equivalent color code instead.";
};

var mixColor = function (from, to) {
  var fromColorType = getColorType(from);
  var toColorType = getColorType(to);
  (0, _heyListen.invariant)(!!fromColorType, notAnimatable(from));
  (0, _heyListen.invariant)(!!toColorType, notAnimatable(to));
  (0, _heyListen.invariant)(fromColorType.transform === toColorType.transform, 'Both colors must be hex/RGBA, OR both must be HSLA.');
  var fromColor = fromColorType.parse(from);
  var toColor = toColorType.parse(to);

  var blended = __assign({}, fromColor);

  var mixFunc = fromColorType === _styleValueTypes.hsla ? mix : mixLinearColor;
  return function (v) {
    for (var key in blended) {
      if (key !== 'alpha') {
        blended[key] = mixFunc(fromColor[key], toColor[key], v);
      }
    }

    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
    return fromColorType.transform(blended);
  };
};

exports.mixColor = mixColor;

var combineFunctions = function (a, b) {
  return function (v) {
    return b(a(v));
  };
};

var pipe = function () {
  var transformers = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    transformers[_i] = arguments[_i];
  }

  return transformers.reduce(combineFunctions);
};

exports.pipe = pipe;

function getMixer(origin, target) {
  if (isNum(origin)) {
    return function (v) {
      return mix(origin, target, v);
    };
  } else if (_styleValueTypes.color.test(origin)) {
    return mixColor(origin, target);
  } else {
    return mixComplex(origin, target);
  }
}

var mixArray = function (from, to) {
  var output = from.slice();
  var numValues = output.length;
  var blendValue = from.map(function (fromThis, i) {
    return getMixer(fromThis, to[i]);
  });
  return function (v) {
    for (var i = 0; i < numValues; i++) {
      output[i] = blendValue[i](v);
    }

    return output;
  };
};

exports.mixArray = mixArray;

var mixObject = function (origin, target) {
  var output = __assign({}, origin, target);

  var blendValue = {};

  for (var key in output) {
    if (origin[key] !== undefined && target[key] !== undefined) {
      blendValue[key] = getMixer(origin[key], target[key]);
    }
  }

  return function (v) {
    for (var key in blendValue) {
      output[key] = blendValue[key](v);
    }

    return output;
  };
};

exports.mixObject = mixObject;

function analyse(value) {
  var parsed = _styleValueTypes.complex.parse(value);

  var numValues = parsed.length;
  var numNumbers = 0;
  var numRGB = 0;
  var numHSL = 0;

  for (var i = 0; i < numValues; i++) {
    if (numNumbers || typeof parsed[i] === 'number') {
      numNumbers++;
    } else {
      if (parsed[i].hue !== undefined) {
        numHSL++;
      } else {
        numRGB++;
      }
    }
  }

  return {
    parsed: parsed,
    numNumbers: numNumbers,
    numRGB: numRGB,
    numHSL: numHSL
  };
}

var mixComplex = function (origin, target) {
  var template = _styleValueTypes.complex.createTransformer(target);

  var originStats = analyse(origin);
  var targetStats = analyse(target);
  (0, _heyListen.invariant)(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, "Complex values '" + origin + "' and '" + target + "' too different to mix. Ensure all colors are of the same type.");
  return pipe(mixArray(originStats.parsed, targetStats.parsed), template);
};

exports.mixComplex = mixComplex;

var mixNumber = function (from, to) {
  return function (p) {
    return mix(from, to, p);
  };
};

function detectMixerFactory(v) {
  if (typeof v === 'number') {
    return mixNumber;
  } else if (typeof v === 'string') {
    if (_styleValueTypes.color.test(v)) {
      return mixColor;
    } else {
      return mixComplex;
    }
  } else if (Array.isArray(v)) {
    return mixArray;
  } else if (typeof v === 'object') {
    return mixObject;
  }
}

function createMixers(output, ease, customMixer) {
  var mixers = [];
  var mixerFactory = customMixer || detectMixerFactory(output[0]);
  var numMixers = output.length - 1;

  for (var i = 0; i < numMixers; i++) {
    var mixer = mixerFactory(output[i], output[i + 1]);

    if (ease) {
      var easingFunction = Array.isArray(ease) ? ease[i] : ease;
      mixer = pipe(easingFunction, mixer);
    }

    mixers.push(mixer);
  }

  return mixers;
}

function fastInterpolate(_a, _b) {
  var from = _a[0],
      to = _a[1];
  var mixer = _b[0];
  return function (v) {
    return mixer(progress(from, to, v));
  };
}

function slowInterpolate(input, mixers) {
  var inputLength = input.length;
  var lastInputIndex = inputLength - 1;
  return function (v) {
    var mixerIndex = 0;
    var foundMixerIndex = false;

    if (v <= input[0]) {
      foundMixerIndex = true;
    } else if (v >= input[lastInputIndex]) {
      mixerIndex = lastInputIndex - 1;
      foundMixerIndex = true;
    }

    if (!foundMixerIndex) {
      var i = 1;

      for (; i < inputLength; i++) {
        if (input[i] > v || i === lastInputIndex) {
          break;
        }
      }

      mixerIndex = i - 1;
    }

    var progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
    return mixers[mixerIndex](progressInRange);
  };
}

function interpolate$$1(input, output, _a) {
  var _b = _a === void 0 ? {} : _a,
      _c = _b.clamp,
      clamp = _c === void 0 ? true : _c,
      ease = _b.ease,
      mixer = _b.mixer;

  var inputLength = input.length;
  (0, _heyListen.invariant)(inputLength === output.length, 'Both input and output ranges must be the same length');
  (0, _heyListen.invariant)(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, 'Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.');

  if (input[0] > input[inputLength - 1]) {
    input = [].concat(input);
    output = [].concat(output);
    input.reverse();
    output.reverse();
  }

  var mixers = createMixers(output, ease, mixer);
  var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
  return clamp ? pipe(clamp$1(input[0], input[inputLength - 1]), interpolator) : interpolator;
}

var pointFromVector = function (origin, angle, distance) {
  angle = degreesToRadians(angle);
  return {
    x: distance * Math.cos(angle) + origin.x,
    y: distance * Math.sin(angle) + origin.y
  };
};

exports.pointFromVector = pointFromVector;

var toDecimal = function (num, precision) {
  if (precision === void 0) {
    precision = 2;
  }

  precision = Math.pow(10, precision);
  return Math.round(num * precision) / precision;
};

exports.toDecimal = toDecimal;

var smoothFrame = function (prevValue, nextValue, duration, smoothing) {
  if (smoothing === void 0) {
    smoothing = 0;
  }

  return toDecimal(prevValue + duration * (nextValue - prevValue) / Math.max(smoothing, duration));
};

exports.smoothFrame = smoothFrame;

var smooth = function (strength) {
  if (strength === void 0) {
    strength = 50;
  }

  var previousValue = 0;
  var lastUpdated = 0;
  return function (v) {
    var currentFramestamp = (0, _framesync.getFrameData)().timestamp;
    var timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;
    var newValue = timeDelta ? smoothFrame(previousValue, v, timeDelta, strength) : previousValue;
    lastUpdated = currentFramestamp;
    previousValue = newValue;
    return newValue;
  };
};

exports.smooth = smooth;

var snap = function (points) {
  if (typeof points === 'number') {
    return function (v) {
      return Math.round(v / points) * points;
    };
  } else {
    var i_1 = 0;
    var numPoints_1 = points.length;
    return function (v) {
      var lastDistance = Math.abs(points[0] - v);

      for (i_1 = 1; i_1 < numPoints_1; i_1++) {
        var point = points[i_1];
        var distance = Math.abs(point - v);
        if (distance === 0) return point;
        if (distance > lastDistance) return points[i_1 - 1];
        if (i_1 === numPoints_1 - 1) return point;
        lastDistance = distance;
      }
    };
  }
};

exports.snap = snap;

var identity = function (v) {
  return v;
};

var springForce = function (alterDisplacement) {
  if (alterDisplacement === void 0) {
    alterDisplacement = identity;
  }

  return curryRange(function (constant, origin, v) {
    var displacement = origin - v;
    var springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));
    return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
  });
};

exports.springForce = springForce;
var springForceLinear = springForce();
exports.springForceLinear = springForceLinear;
var springForceExpo = springForce(Math.sqrt);
exports.springForceExpo = springForceExpo;

var velocityPerFrame = function (xps, frameDuration) {
  return isNum(xps) ? xps / (1000 / frameDuration) : 0;
};

exports.velocityPerFrame = velocityPerFrame;

var velocityPerSecond = function (velocity, frameDuration) {
  return frameDuration ? velocity * (1000 / frameDuration) : 0;
};

exports.velocityPerSecond = velocityPerSecond;

var wrap = function (min, max, v) {
  var rangeSize = max - min;
  return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
};

var wrap$1 = curryRange(wrap);
exports.wrap = wrap$1;
var clampProgress = clamp$1(0, 1);

var steps = function (steps, direction) {
  if (direction === void 0) {
    direction = 'end';
  }

  return function (progress) {
    progress = direction === 'end' ? Math.min(progress, 0.999) : Math.max(progress, 0.001);
    var expanded = progress * steps;
    var rounded = direction === 'end' ? Math.floor(expanded) : Math.ceil(expanded);
    return clampProgress(rounded / steps);
  };
};

exports.steps = steps;
},{"style-value-types":"../node_modules/style-value-types/dist/style-value-types.es.js","hey-listen":"../node_modules/hey-listen/dist/hey-listen.es.js","framesync":"../node_modules/framesync/dist/framesync.es.js","@popmotion/easing":"../node_modules/@popmotion/easing/dist/easing.es.js"}],"../node_modules/stylefire/dist/stylefire.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildStyleProperty = buildStyleProperty;
exports.isTransformProp = isTransformProp;
exports.createStylerFactory = exports.default = void 0;

var _framesync = _interopRequireDefault(require("framesync"));

var _styleValueTypes = require("style-value-types");

var _heyListen = require("hey-listen");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}

var createStyler = function (_a) {
  var onRead = _a.onRead,
      onRender = _a.onRender,
      _b = _a.uncachedValues,
      uncachedValues = _b === void 0 ? new Set() : _b,
      _c = _a.useCache,
      useCache = _c === void 0 ? true : _c;
  return function (_a) {
    if (_a === void 0) {
      _a = {};
    }

    var props = __rest(_a, []);

    var state = {};
    var changedValues = [];
    var hasChanged = false;

    function setValue(key, value) {
      if (key.startsWith('--')) {
        props.hasCSSVariable = true;
      }

      var currentValue = state[key];
      state[key] = value;
      if (state[key] === currentValue) return;

      if (changedValues.indexOf(key) === -1) {
        changedValues.push(key);
      }

      if (!hasChanged) {
        hasChanged = true;

        _framesync.default.render(styler.render);
      }
    }

    var styler = {
      get: function (key, forceRead) {
        if (forceRead === void 0) {
          forceRead = false;
        }

        var useCached = !forceRead && useCache && !uncachedValues.has(key) && state[key] !== undefined;
        return useCached ? state[key] : onRead(key, props);
      },
      set: function (values, value) {
        if (typeof values === 'string') {
          setValue(values, value);
        } else {
          for (var key in values) {
            setValue(key, values[key]);
          }
        }

        return this;
      },
      render: function (forceRender) {
        if (forceRender === void 0) {
          forceRender = false;
        }

        if (hasChanged || forceRender === true) {
          onRender(state, props, changedValues);
          hasChanged = false;
          changedValues.length = 0;
        }

        return this;
      }
    };
    return styler;
  };
};

exports.createStylerFactory = createStyler;
var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
var REPLACE_TEMPLATE = '$1-$2';

var camelToDash = function (str) {
  return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
};

var setDomAttrs = function (element, attrs) {
  for (var key in attrs) {
    if (attrs.hasOwnProperty(key)) {
      element.setAttribute(key, attrs[key]);
    }
  }
};

var camelCache =
/*#__PURE__*/
new Map();
var dashCache =
/*#__PURE__*/
new Map();
var prefixes = ['Webkit', 'Moz', 'O', 'ms', ''];
var numPrefixes = prefixes.length;
var isBrowser = typeof document !== 'undefined';
var testElement;

var setDashPrefix = function (key, prefixed) {
  return dashCache.set(key, camelToDash(prefixed));
};

var testPrefix = function (key) {
  testElement = testElement || document.createElement('div');

  for (var i = 0; i < numPrefixes; i++) {
    var prefix = prefixes[i];
    var noPrefix = prefix === '';
    var prefixedPropertyName = noPrefix ? key : prefix + key.charAt(0).toUpperCase() + key.slice(1);

    if (prefixedPropertyName in testElement.style || noPrefix) {
      camelCache.set(key, prefixedPropertyName);
      setDashPrefix(key, "" + (noPrefix ? '' : '-') + camelToDash(prefixedPropertyName));
    }
  }
};

var setServerProperty = function (key) {
  return setDashPrefix(key, key);
};

var prefixer = function (key, asDashCase) {
  if (asDashCase === void 0) {
    asDashCase = false;
  }

  var cache = asDashCase ? dashCache : camelCache;
  if (!cache.has(key)) isBrowser ? testPrefix(key) : setServerProperty(key);
  return cache.get(key) || key;
};

var axes = ['', 'X', 'Y', 'Z'];
var order = ['scale', 'rotate', 'skew', 'transformPerspective'];
var transformProps =
/*#__PURE__*/
order.reduce(function (acc, key) {
  return axes.reduce(function (axesAcc, axesKey) {
    axesAcc.push(key + axesKey);
    return axesAcc;
  }, acc);
}, ['x', 'y', 'z']);
var transformPropDictionary =
/*#__PURE__*/
transformProps.reduce(function (dict, key) {
  dict[key] = true;
  return dict;
}, {});

function isTransformProp(key) {
  return transformPropDictionary[key] === true;
}

function sortTransformProps(a, b) {
  return transformProps.indexOf(a) - transformProps.indexOf(b);
}

var transformOriginProps =
/*#__PURE__*/
new Set(['originX', 'originY', 'originZ']);

function isTransformOriginProp(key) {
  return transformOriginProps.has(key);
}

var rounded =
/*#__PURE__*/
__assign({}, _styleValueTypes.number, {
  transform: Math.round
});

var valueTypes = {
  color: _styleValueTypes.color,
  backgroundColor: _styleValueTypes.color,
  outlineColor: _styleValueTypes.color,
  fill: _styleValueTypes.color,
  stroke: _styleValueTypes.color,
  borderColor: _styleValueTypes.color,
  borderTopColor: _styleValueTypes.color,
  borderRightColor: _styleValueTypes.color,
  borderBottomColor: _styleValueTypes.color,
  borderLeftColor: _styleValueTypes.color,
  borderWidth: _styleValueTypes.px,
  borderTopWidth: _styleValueTypes.px,
  borderRightWidth: _styleValueTypes.px,
  borderBottomWidth: _styleValueTypes.px,
  borderLeftWidth: _styleValueTypes.px,
  borderRadius: _styleValueTypes.px,
  radius: _styleValueTypes.px,
  borderTopLeftRadius: _styleValueTypes.px,
  borderTopRightRadius: _styleValueTypes.px,
  borderBottomRightRadius: _styleValueTypes.px,
  borderBottomLeftRadius: _styleValueTypes.px,
  width: _styleValueTypes.px,
  maxWidth: _styleValueTypes.px,
  height: _styleValueTypes.px,
  maxHeight: _styleValueTypes.px,
  size: _styleValueTypes.px,
  top: _styleValueTypes.px,
  right: _styleValueTypes.px,
  bottom: _styleValueTypes.px,
  left: _styleValueTypes.px,
  padding: _styleValueTypes.px,
  paddingTop: _styleValueTypes.px,
  paddingRight: _styleValueTypes.px,
  paddingBottom: _styleValueTypes.px,
  paddingLeft: _styleValueTypes.px,
  margin: _styleValueTypes.px,
  marginTop: _styleValueTypes.px,
  marginRight: _styleValueTypes.px,
  marginBottom: _styleValueTypes.px,
  marginLeft: _styleValueTypes.px,
  rotate: _styleValueTypes.degrees,
  rotateX: _styleValueTypes.degrees,
  rotateY: _styleValueTypes.degrees,
  rotateZ: _styleValueTypes.degrees,
  scale: _styleValueTypes.scale,
  scaleX: _styleValueTypes.scale,
  scaleY: _styleValueTypes.scale,
  scaleZ: _styleValueTypes.scale,
  skew: _styleValueTypes.degrees,
  skewX: _styleValueTypes.degrees,
  skewY: _styleValueTypes.degrees,
  distance: _styleValueTypes.px,
  x: _styleValueTypes.px,
  y: _styleValueTypes.px,
  z: _styleValueTypes.px,
  perspective: _styleValueTypes.px,
  opacity: _styleValueTypes.alpha,
  originX: _styleValueTypes.progressPercentage,
  originY: _styleValueTypes.progressPercentage,
  originZ: _styleValueTypes.px,
  zIndex: rounded
};

var getValueType = function (key) {
  return valueTypes[key];
};

var getValueAsType = function (value, type) {
  return type && typeof value === 'number' ? type.transform(value) : value;
};

var SCROLL_LEFT = 'scrollLeft';
var SCROLL_TOP = 'scrollTop';
var scrollKeys =
/*#__PURE__*/
new Set([SCROLL_LEFT, SCROLL_TOP]);
var blacklist =
/*#__PURE__*/
new Set([SCROLL_LEFT, SCROLL_TOP, 'transform']);
var translateAlias = {
  x: 'translateX',
  y: 'translateY',
  z: 'translateZ'
};

function isCustomTemplate(v) {
  return typeof v === 'function';
}

function buildTransform(state, transform, transformKeys, transformIsDefault, enableHardwareAcceleration) {
  var transformString = '';
  var transformHasZ = false;
  transformKeys.sort(sortTransformProps);
  var numTransformKeys = transformKeys.length;

  for (var i = 0; i < numTransformKeys; i++) {
    var key = transformKeys[i];
    transformString += (translateAlias[key] || key) + "(" + transform[key] + ") ";
    transformHasZ = key === 'z' ? true : transformHasZ;
  }

  if (!transformHasZ && enableHardwareAcceleration) {
    transformString += 'translateZ(0)';
  } else {
    transformString = transformString.trim();
  }

  if (isCustomTemplate(state.transform)) {
    transformString = state.transform(transform, transformString);
  } else if (transformIsDefault) {
    transformString = 'none';
  }

  return transformString;
}

function buildStyleProperty(state, enableHardwareAcceleration, styles, transform, transformOrigin, transformKeys, isDashCase) {
  if (enableHardwareAcceleration === void 0) {
    enableHardwareAcceleration = true;
  }

  if (styles === void 0) {
    styles = {};
  }

  if (transform === void 0) {
    transform = {};
  }

  if (transformOrigin === void 0) {
    transformOrigin = {};
  }

  if (transformKeys === void 0) {
    transformKeys = [];
  }

  if (isDashCase === void 0) {
    isDashCase = false;
  }

  var transformIsDefault = true;
  var hasTransform = false;
  var hasTransformOrigin = false;

  for (var key in state) {
    var value = state[key];
    var valueType = getValueType(key);
    var valueAsType = getValueAsType(value, valueType);

    if (isTransformProp(key)) {
      hasTransform = true;
      transform[key] = valueAsType;
      transformKeys.push(key);

      if (transformIsDefault) {
        if (valueType.default && value !== valueType.default || !valueType.default && value !== 0) {
          transformIsDefault = false;
        }
      }
    } else if (isTransformOriginProp(key)) {
      transformOrigin[key] = valueAsType;
      hasTransformOrigin = true;
    } else if (!blacklist.has(key) || !isCustomTemplate(valueAsType)) {
      styles[prefixer(key, isDashCase)] = valueAsType;
    }
  }

  if (hasTransform || typeof state.transform === 'function') {
    styles.transform = buildTransform(state, transform, transformKeys, transformIsDefault, enableHardwareAcceleration);
  }

  if (hasTransformOrigin) {
    styles.transformOrigin = (transformOrigin.originX || 0) + " " + (transformOrigin.originY || 0) + " " + (transformOrigin.originZ || 0);
  }

  return styles;
}

function createStyleBuilder(enableHardwareAcceleration) {
  if (enableHardwareAcceleration === void 0) {
    enableHardwareAcceleration = true;
  }

  var styles = {};
  var transform = {};
  var transformOrigin = {};
  var transformKeys = [];
  return function (state) {
    transformKeys.length = 0;
    buildStyleProperty(state, enableHardwareAcceleration, styles, transform, transformOrigin, transformKeys, true);
    return styles;
  };
}

function onRead(key, options) {
  var element = options.element,
      preparseOutput = options.preparseOutput;
  var defaultValueType = getValueType(key);

  if (isTransformProp(key)) {
    return defaultValueType ? defaultValueType.default || 0 : 0;
  } else if (scrollKeys.has(key)) {
    return element[key];
  } else {
    var domValue = window.getComputedStyle(element, null).getPropertyValue(prefixer(key, true)) || 0;
    return preparseOutput && defaultValueType && defaultValueType.test(domValue) && defaultValueType.parse ? defaultValueType.parse(domValue) : domValue;
  }
}

function onRender(state, _a, changedValues) {
  var element = _a.element,
      buildStyles = _a.buildStyles,
      hasCSSVariable = _a.hasCSSVariable;
  Object.assign(element.style, buildStyles(state));

  if (hasCSSVariable) {
    var numChangedValues = changedValues.length;

    for (var i = 0; i < numChangedValues; i++) {
      var key = changedValues[i];

      if (key.startsWith('--')) {
        element.style.setProperty(key, state[key]);
      }
    }
  }

  if (changedValues.indexOf(SCROLL_LEFT) !== -1) {
    element[SCROLL_LEFT] = state[SCROLL_LEFT];
  }

  if (changedValues.indexOf(SCROLL_TOP) !== -1) {
    element[SCROLL_TOP] = state[SCROLL_TOP];
  }
}

var cssStyler =
/*#__PURE__*/
createStyler({
  onRead: onRead,
  onRender: onRender,
  uncachedValues: scrollKeys
});

function createCssStyler(element, _a) {
  if (_a === void 0) {
    _a = {};
  }

  var enableHardwareAcceleration = _a.enableHardwareAcceleration,
      props = __rest(_a, ["enableHardwareAcceleration"]);

  return cssStyler(__assign({
    element: element,
    buildStyles: createStyleBuilder(enableHardwareAcceleration),
    preparseOutput: true
  }, props));
}

var camelCaseAttributes =
/*#__PURE__*/
new Set(['baseFrequency', 'diffuseConstant', 'kernelMatrix', 'kernelUnitLength', 'keySplines', 'keyTimes', 'limitingConeAngle', 'markerHeight', 'markerWidth', 'numOctaves', 'targetX', 'targetY', 'surfaceScale', 'specularConstant', 'specularExponent', 'stdDeviation', 'tableValues']);
var ZERO_NOT_ZERO = 0.0000001;

var progressToPixels = function (progress, length) {
  return progress * length + 'px';
};

var build = function (state, dimensions, isPath, pathLength) {
  var hasTransform = false;
  var hasDashArray = false;
  var props = {};
  var dashArrayStyles = isPath ? {
    pathLength: '0',
    pathSpacing: "" + pathLength
  } : undefined;
  var scale$$1 = state.scale !== undefined ? state.scale || ZERO_NOT_ZERO : state.scaleX || 1;
  var scaleY = state.scaleY !== undefined ? state.scaleY || ZERO_NOT_ZERO : scale$$1 || 1;
  var transformOriginX = dimensions.width * (state.originX || 50) + dimensions.x;
  var transformOriginY = dimensions.height * (state.originY || 50) + dimensions.y;
  var scaleTransformX = -transformOriginX * (scale$$1 * 1);
  var scaleTransformY = -transformOriginY * (scaleY * 1);
  var scaleReplaceX = transformOriginX / scale$$1;
  var scaleReplaceY = transformOriginY / scaleY;
  var transform = {
    translate: "translate(" + state.x + ", " + state.y + ") ",
    scale: "translate(" + scaleTransformX + ", " + scaleTransformY + ") scale(" + scale$$1 + ", " + scaleY + ") translate(" + scaleReplaceX + ", " + scaleReplaceY + ") ",
    rotate: "rotate(" + state.rotate + ", " + transformOriginX + ", " + transformOriginY + ") ",
    skewX: "skewX(" + state.skewX + ") ",
    skewY: "skewY(" + state.skewY + ") "
  };

  for (var key in state) {
    if (state.hasOwnProperty(key)) {
      var value = state[key];

      if (isTransformProp(key)) {
        hasTransform = true;
      } else if (isPath && (key === 'pathLength' || key === 'pathSpacing') && typeof value === 'number') {
        hasDashArray = true;
        dashArrayStyles[key] = progressToPixels(value, pathLength);
      } else if (isPath && key === 'pathOffset') {
        props['stroke-dashoffset'] = progressToPixels(-value, pathLength);
      } else {
        var attrKey = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
        props[attrKey] = value;
      }
    }
  }

  if (hasDashArray) {
    props['stroke-dasharray'] = dashArrayStyles.pathLength + ' ' + dashArrayStyles.pathSpacing;
  }

  if (hasTransform) {
    props.transform = '';

    for (var key in transform) {
      if (transform.hasOwnProperty(key)) {
        var defaultValue = key === 'scale' ? '1' : '0';
        props.transform += transform[key].replace(/undefined/g, defaultValue);
      }
    }
  }

  return props;
};

var int =
/*#__PURE__*/
__assign({}, _styleValueTypes.number, {
  transform: Math.round
});

var valueTypes$1 = {
  fill: _styleValueTypes.color,
  stroke: _styleValueTypes.color,
  scale: _styleValueTypes.scale,
  scaleX: _styleValueTypes.scale,
  scaleY: _styleValueTypes.scale,
  opacity: _styleValueTypes.alpha,
  fillOpacity: _styleValueTypes.alpha,
  strokeOpacity: _styleValueTypes.alpha,
  numOctaves: int
};

var getValueType$1 = function (key) {
  return valueTypes$1[key];
};

var getDimensions = function (element) {
  return typeof element.getBBox === 'function' ? element.getBBox() : element.getBoundingClientRect();
};

var getSVGElementDimensions = function (element) {
  try {
    return getDimensions(element);
  } catch (e) {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
  }
};

var svgStyler =
/*#__PURE__*/
createStyler({
  onRead: function (key, _a) {
    var element = _a.element;

    if (!isTransformProp(key)) {
      return element.getAttribute(key);
    } else {
      var valueType = getValueType$1(key);
      return valueType ? valueType.default : 0;
    }
  },
  onRender: function (state, _a) {
    var dimensions = _a.dimensions,
        element = _a.element,
        isPath = _a.isPath,
        pathLength = _a.pathLength;
    setDomAttrs(element, build(state, dimensions, isPath, pathLength));
  }
});

var svg = function (element) {
  var dimensions = getSVGElementDimensions(element);
  var props = {
    element: element,
    dimensions: dimensions,
    isPath: false
  };

  if (element.tagName === 'path') {
    props.isPath = true;
    props.pathLength = element.getTotalLength();
  }

  return svgStyler(props);
};

var viewport =
/*#__PURE__*/
createStyler({
  useCache: false,
  onRead: function (key) {
    return key === 'scrollTop' ? window.pageYOffset : window.pageXOffset;
  },
  onRender: function (_a) {
    var _b = _a.scrollTop,
        scrollTop = _b === void 0 ? 0 : _b,
        _c = _a.scrollLeft,
        scrollLeft = _c === void 0 ? 0 : _c;
    return window.scrollTo(scrollLeft, scrollTop);
  }
});
var cache =
/*#__PURE__*/
new WeakMap();

var createDOMStyler = function (node, props) {
  var styler;

  if (node instanceof HTMLElement) {
    styler = createCssStyler(node, props);
  } else if (node instanceof SVGElement) {
    styler = svg(node);
  } else if (node === window) {
    styler = viewport(node);
  }

  (0, _heyListen.invariant)(styler !== undefined, 'No valid node provided. Node must be HTMLElement, SVGElement or window.');
  cache.set(node, styler);
  return styler;
};

var getStyler = function (node, props) {
  return cache.has(node) ? cache.get(node) : createDOMStyler(node, props);
};

function index(nodeOrSelector, props) {
  var node = typeof nodeOrSelector === 'string' ? document.querySelector(nodeOrSelector) : nodeOrSelector;
  return getStyler(node, props);
}

var _default = index;
exports.default = _default;
},{"framesync":"../node_modules/framesync/dist/framesync.es.js","style-value-types":"../node_modules/style-value-types/dist/style-value-types.es.js","hey-listen":"../node_modules/hey-listen/dist/hey-listen.es.js"}],"../node_modules/popmotion/dist/popmotion.es.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "styler", {
  enumerable: true,
  get: function () {
    return _stylefire.default;
  }
});
exports.easing = exports.valueTypes = exports.ValueReaction = exports.Action = exports.svg = exports.css = exports.transform = exports.calc = exports.stagger = exports.schedule = exports.parallel = exports.merge = exports.delay = exports.crossfade = exports.composite = exports.chain = exports.multitouch = exports.mouse = exports.pointer = exports.listen = exports.tween = exports.timeline = exports.spring = exports.physics = exports.everyFrame = exports.keyframes = exports.inertia = exports.decay = exports.value = exports.multicast = exports.action = void 0;

var _tslib = require("tslib");

var _popcorn = require("@popmotion/popcorn");

var _framesync = _interopRequireWildcard(require("framesync"));

var styleValueTypes = _interopRequireWildcard(require("style-value-types"));

exports.valueTypes = styleValueTypes;

var easing = _interopRequireWildcard(require("@popmotion/easing"));

exports.easing = easing;

var _stylefire = _interopRequireDefault(require("stylefire"));

var _heyListen = require("hey-listen");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var Chainable =
/*#__PURE__*/
function () {
  function Chainable(props) {
    if (props === void 0) {
      props = {};
    }

    this.props = props;
  }

  Chainable.prototype.applyMiddleware = function (middleware) {
    return this.create((0, _tslib.__assign)({}, this.props, {
      middleware: this.props.middleware ? [middleware].concat(this.props.middleware) : [middleware]
    }));
  };

  Chainable.prototype.pipe = function () {
    var funcs = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      funcs[_i] = arguments[_i];
    }

    var pipedUpdate = funcs.length === 1 ? funcs[0] : _popcorn.pipe.apply(void 0, funcs);
    return this.applyMiddleware(function (update) {
      return function (v) {
        return update(pipedUpdate(v));
      };
    });
  };

  Chainable.prototype.while = function (predicate) {
    return this.applyMiddleware(function (update, complete) {
      return function (v) {
        return predicate(v) ? update(v) : complete();
      };
    });
  };

  Chainable.prototype.filter = function (predicate) {
    return this.applyMiddleware(function (update) {
      return function (v) {
        return predicate(v) && update(v);
      };
    });
  };

  return Chainable;
}();

var Observer =
/*#__PURE__*/
function () {
  function Observer(_a, observer) {
    var middleware = _a.middleware,
        onComplete = _a.onComplete;

    var _this = this;

    this.isActive = true;

    this.update = function (v) {
      if (_this.observer.update) _this.updateObserver(v);
    };

    this.complete = function () {
      if (_this.observer.complete && _this.isActive) _this.observer.complete();
      if (_this.onComplete) _this.onComplete();
      _this.isActive = false;
    };

    this.error = function (err) {
      if (_this.observer.error && _this.isActive) _this.observer.error(err);
      _this.isActive = false;
    };

    this.observer = observer;

    this.updateObserver = function (v) {
      return observer.update(v);
    };

    this.onComplete = onComplete;

    if (observer.update && middleware && middleware.length) {
      middleware.forEach(function (m) {
        return _this.updateObserver = m(_this.updateObserver, _this.complete);
      });
    }
  }

  return Observer;
}();

var createObserver = function (observerCandidate, _a, onComplete) {
  var middleware = _a.middleware;

  if (typeof observerCandidate === 'function') {
    return new Observer({
      middleware: middleware,
      onComplete: onComplete
    }, {
      update: observerCandidate
    });
  } else {
    return new Observer({
      middleware: middleware,
      onComplete: onComplete
    }, observerCandidate);
  }
};

var Action =
/*#__PURE__*/
function (_super) {
  (0, _tslib.__extends)(Action, _super);

  function Action() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Action.prototype.create = function (props) {
    return new Action(props);
  };

  Action.prototype.start = function (observerCandidate) {
    if (observerCandidate === void 0) {
      observerCandidate = {};
    }

    var isComplete = false;
    var subscription = {
      stop: function () {
        return undefined;
      }
    };
    var _a = this.props,
        init = _a.init,
        observerProps = (0, _tslib.__rest)(_a, ["init"]);
    var observer = createObserver(observerCandidate, observerProps, function () {
      isComplete = true;
      subscription.stop();
    });
    var api = init(observer);
    subscription = api ? (0, _tslib.__assign)({}, subscription, api) : subscription;

    if (observerCandidate.registerParent) {
      observerCandidate.registerParent(subscription);
    }

    if (isComplete) subscription.stop();
    return subscription;
  };

  return Action;
}(Chainable);

exports.Action = Action;

var action = function (init) {
  return new Action({
    init: init
  });
};

exports.action = action;

var BaseMulticast =
/*#__PURE__*/
function (_super) {
  (0, _tslib.__extends)(BaseMulticast, _super);

  function BaseMulticast() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.subscribers = [];
    return _this;
  }

  BaseMulticast.prototype.complete = function () {
    this.subscribers.forEach(function (subscriber) {
      return subscriber.complete();
    });
  };

  BaseMulticast.prototype.error = function (err) {
    this.subscribers.forEach(function (subscriber) {
      return subscriber.error(err);
    });
  };

  BaseMulticast.prototype.update = function (v) {
    for (var i = 0; i < this.subscribers.length; i++) {
      this.subscribers[i].update(v);
    }
  };

  BaseMulticast.prototype.subscribe = function (observerCandidate) {
    var _this = this;

    var observer = createObserver(observerCandidate, this.props);
    this.subscribers.push(observer);
    var subscription = {
      unsubscribe: function () {
        var index = _this.subscribers.indexOf(observer);

        if (index !== -1) _this.subscribers.splice(index, 1);
      }
    };
    return subscription;
  };

  BaseMulticast.prototype.stop = function () {
    if (this.parent) this.parent.stop();
  };

  BaseMulticast.prototype.registerParent = function (subscription) {
    this.stop();
    this.parent = subscription;
  };

  return BaseMulticast;
}(Chainable);

var Multicast =
/*#__PURE__*/
function (_super) {
  (0, _tslib.__extends)(Multicast, _super);

  function Multicast() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Multicast.prototype.create = function (props) {
    return new Multicast(props);
  };

  return Multicast;
}(BaseMulticast);

var multicast = function () {
  return new Multicast();
};

exports.multicast = multicast;

var stepProgress = function (steps, progress$$1) {
  var segment = 1 / (steps - 1);
  var subsegment = 1 / (2 * (steps - 1));
  var percentProgressOfTarget = Math.min(progress$$1, 1);
  var subsegmentProgressOfTarget = percentProgressOfTarget / subsegment;
  var segmentProgressOfTarget = Math.floor((subsegmentProgressOfTarget + 1) / 2);
  return segmentProgressOfTarget * segment;
};

var calc =
/*#__PURE__*/
Object.freeze({
  angle: _popcorn.angle,
  degreesToRadians: _popcorn.degreesToRadians,
  distance: _popcorn.distance,
  isPoint3D: _popcorn.isPoint3D,
  isPoint: _popcorn.isPoint,
  dilate: _popcorn.mix,
  getValueFromProgress: _popcorn.mix,
  pointFromAngleAndDistance: _popcorn.pointFromVector,
  getProgressFromValue: _popcorn.progress,
  radiansToDegrees: _popcorn.radiansToDegrees,
  smooth: _popcorn.smoothFrame,
  speedPerFrame: _popcorn.velocityPerFrame,
  speedPerSecond: _popcorn.velocityPerSecond,
  stepProgress: stepProgress
});
exports.calc = calc;

var isValueList = function (v) {
  return Array.isArray(v);
};

var isSingleValue = function (v) {
  var typeOfV = typeof v;
  return typeOfV === 'string' || typeOfV === 'number';
};

var ValueReaction =
/*#__PURE__*/
function (_super) {
  (0, _tslib.__extends)(ValueReaction, _super);

  function ValueReaction(props) {
    var _this = _super.call(this, props) || this;

    _this.scheduleVelocityCheck = function () {
      return _framesync.default.postRender(_this.velocityCheck);
    };

    _this.velocityCheck = function (_a) {
      var timestamp = _a.timestamp;

      if (timestamp !== _this.lastUpdated) {
        _this.prev = _this.current;
      }
    };

    _this.prev = _this.current = props.value || 0;

    if (isSingleValue(_this.current)) {
      _this.updateCurrent = function (v) {
        return _this.current = v;
      };

      _this.getVelocityOfCurrent = function () {
        return _this.getSingleVelocity(_this.current, _this.prev);
      };
    } else if (isValueList(_this.current)) {
      _this.updateCurrent = function (v) {
        return _this.current = v.slice();
      };

      _this.getVelocityOfCurrent = function () {
        return _this.getListVelocity();
      };
    } else {
      _this.updateCurrent = function (v) {
        _this.current = {};

        for (var key in v) {
          if (v.hasOwnProperty(key)) {
            _this.current[key] = v[key];
          }
        }
      };

      _this.getVelocityOfCurrent = function () {
        return _this.getMapVelocity();
      };
    }

    if (props.initialSubscription) _this.subscribe(props.initialSubscription);
    return _this;
  }

  ValueReaction.prototype.create = function (props) {
    return new ValueReaction(props);
  };

  ValueReaction.prototype.get = function () {
    return this.current;
  };

  ValueReaction.prototype.getVelocity = function () {
    return this.getVelocityOfCurrent();
  };

  ValueReaction.prototype.update = function (v) {
    _super.prototype.update.call(this, v);

    this.prev = this.current;
    this.updateCurrent(v);

    var _a = (0, _framesync.getFrameData)(),
        delta = _a.delta,
        timestamp = _a.timestamp;

    this.timeDelta = delta;
    this.lastUpdated = timestamp;

    _framesync.default.postRender(this.scheduleVelocityCheck);
  };

  ValueReaction.prototype.subscribe = function (observerCandidate) {
    var sub = _super.prototype.subscribe.call(this, observerCandidate);

    this.subscribers[this.subscribers.length - 1].update(this.current);
    return sub;
  };

  ValueReaction.prototype.getSingleVelocity = function (current, prev) {
    return typeof current === 'number' && typeof prev === 'number' ? (0, _popcorn.velocityPerSecond)(current - prev, this.timeDelta) : (0, _popcorn.velocityPerSecond)(parseFloat(current) - parseFloat(prev), this.timeDelta) || 0;
  };

  ValueReaction.prototype.getListVelocity = function () {
    var _this = this;

    return this.current.map(function (c, i) {
      return _this.getSingleVelocity(c, _this.prev[i]);
    });
  };

  ValueReaction.prototype.getMapVelocity = function () {
    var velocity = {};

    for (var key in this.current) {
      if (this.current.hasOwnProperty(key)) {
        velocity[key] = this.getSingleVelocity(this.current[key], this.prev[key]);
      }
    }

    return velocity;
  };

  return ValueReaction;
}(BaseMulticast);

exports.ValueReaction = ValueReaction;

var value = function (value, initialSubscription) {
  return new ValueReaction({
    value: value,
    initialSubscription: initialSubscription
  });
};

exports.value = value;

var multi = function (_a) {
  var getCount = _a.getCount,
      getFirst = _a.getFirst,
      getOutput = _a.getOutput,
      mapApi = _a.mapApi,
      setProp = _a.setProp,
      startActions = _a.startActions;
  return function (actions) {
    return action(function (_a) {
      var update = _a.update,
          complete = _a.complete,
          error = _a.error;
      var numActions = getCount(actions);
      var output = getOutput();

      var updateOutput = function () {
        return update(output);
      };

      var numCompletedActions = 0;
      var subs = startActions(actions, function (a, name) {
        var hasCompleted = false;
        return a.start({
          complete: function () {
            if (!hasCompleted) {
              hasCompleted = true;
              numCompletedActions++;
              if (numCompletedActions === numActions) _framesync.default.update(complete);
            }
          },
          error: error,
          update: function (v) {
            setProp(output, name, v);

            _framesync.default.update(updateOutput, false, true);
          }
        });
      });
      return Object.keys(getFirst(subs)).reduce(function (api, methodName) {
        api[methodName] = mapApi(subs, methodName);
        return api;
      }, {});
    });
  };
};

var composite =
/*#__PURE__*/
multi({
  getOutput: function () {
    return {};
  },
  getCount: function (subs) {
    return Object.keys(subs).length;
  },
  getFirst: function (subs) {
    return subs[Object.keys(subs)[0]];
  },
  mapApi: function (subs, methodName) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return Object.keys(subs).reduce(function (output, propKey) {
        var _a;

        if (subs[propKey][methodName]) {
          args[0] && args[0][propKey] !== undefined ? output[propKey] = subs[propKey][methodName](args[0][propKey]) : output[propKey] = (_a = subs[propKey])[methodName].apply(_a, args);
        }

        return output;
      }, {});
    };
  },
  setProp: function (output, name, v) {
    return output[name] = v;
  },
  startActions: function (actions, starter) {
    return Object.keys(actions).reduce(function (subs, key) {
      subs[key] = starter(actions[key], key);
      return subs;
    }, {});
  }
});
exports.composite = composite;
var parallel =
/*#__PURE__*/
multi({
  getOutput: function () {
    return [];
  },
  getCount: function (subs) {
    return subs.length;
  },
  getFirst: function (subs) {
    return subs[0];
  },
  mapApi: function (subs, methodName) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return subs.map(function (sub, i) {
        if (sub[methodName]) {
          return Array.isArray(args[0]) ? sub[methodName](args[0][i]) : sub[methodName].apply(sub, args);
        }
      });
    };
  },
  setProp: function (output, name, v) {
    return output[name] = v;
  },
  startActions: function (actions, starter) {
    return actions.map(function (action, i) {
      return starter(action, i);
    });
  }
});

var parallel$1 = function () {
  var actions = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    actions[_i] = arguments[_i];
  }

  return parallel(actions);
};

exports.parallel = parallel$1;

var createVectorTests = function (typeTests) {
  var testNames = Object.keys(typeTests);

  var isVectorProp = function (prop, key) {
    return prop !== undefined && !typeTests[key](prop);
  };

  var getVectorKeys = function (props) {
    return testNames.reduce(function (vectorKeys, key) {
      if (isVectorProp(props[key], key)) vectorKeys.push(key);
      return vectorKeys;
    }, []);
  };

  var testVectorProps = function (props) {
    return props && testNames.some(function (key) {
      return isVectorProp(props[key], key);
    });
  };

  return {
    getVectorKeys: getVectorKeys,
    testVectorProps: testVectorProps
  };
};

var unitTypes = [styleValueTypes.px, styleValueTypes.percent, styleValueTypes.degrees, styleValueTypes.vh, styleValueTypes.vw];

var findUnitType = function (prop) {
  return unitTypes.find(function (type) {
    return type.test(prop);
  });
};

var isUnitProp = function (prop) {
  return Boolean(findUnitType(prop));
};

var createAction = function (action, props) {
  return action(props);
};

var reduceArrayValue = function (i) {
  return function (props, key) {
    props[key] = props[key][i];
    return props;
  };
};

var createArrayAction = function (action, props, vectorKeys) {
  var firstVectorKey = vectorKeys[0];
  var actionList = props[firstVectorKey].map(function (v, i) {
    var childActionProps = vectorKeys.reduce(reduceArrayValue(i), (0, _tslib.__assign)({}, props));
    return getActionCreator(v)(action, childActionProps);
  });
  return parallel$1.apply(void 0, actionList);
};

var reduceObjectValue = function (key) {
  return function (props, propKey) {
    props[propKey] = props[propKey][key];
    return props;
  };
};

var createObjectAction = function (action, props, vectorKeys) {
  var firstVectorKey = vectorKeys[0];
  var actionMap = Object.keys(props[firstVectorKey]).reduce(function (map, key) {
    var childActionProps = vectorKeys.reduce(reduceObjectValue(key), (0, _tslib.__assign)({}, props));
    map[key] = getActionCreator(props[firstVectorKey][key])(action, childActionProps);
    return map;
  }, {});
  return composite(actionMap);
};

var createUnitAction = function (action, _a) {
  var from = _a.from,
      to = _a.to,
      props = (0, _tslib.__rest)(_a, ["from", "to"]);
  var unitType = findUnitType(from) || findUnitType(to);
  var transform = unitType.transform,
      parse = unitType.parse;
  return action((0, _tslib.__assign)({}, props, {
    from: typeof from === 'string' ? parse(from) : from,
    to: typeof to === 'string' ? parse(to) : to
  })).pipe(transform);
};

var createMixerAction = function (mixer) {
  return function (action, _a) {
    var from = _a.from,
        to = _a.to,
        props = (0, _tslib.__rest)(_a, ["from", "to"]);
    return action((0, _tslib.__assign)({}, props, {
      from: 0,
      to: 1
    })).pipe(mixer(from, to));
  };
};

var createColorAction =
/*#__PURE__*/
createMixerAction(_popcorn.mixColor);
var createComplexAction =
/*#__PURE__*/
createMixerAction(_popcorn.mixComplex);

var createVectorAction = function (action, typeTests) {
  var _a = createVectorTests(typeTests),
      testVectorProps = _a.testVectorProps,
      getVectorKeys = _a.getVectorKeys;

  var vectorAction = function (props) {
    var isVector = testVectorProps(props);
    if (!isVector) return action(props);
    var vectorKeys = getVectorKeys(props);
    var testKey = vectorKeys[0];
    var testProp = props[testKey];
    return getActionCreator(testProp)(action, props, vectorKeys);
  };

  return vectorAction;
};

var getActionCreator = function (prop) {
  if (typeof prop === 'number') {
    return createAction;
  } else if (Array.isArray(prop)) {
    return createArrayAction;
  } else if (isUnitProp(prop)) {
    return createUnitAction;
  } else if (styleValueTypes.color.test(prop)) {
    return createColorAction;
  } else if (styleValueTypes.complex.test(prop)) {
    return createComplexAction;
  } else if (typeof prop === 'object') {
    return createObjectAction;
  } else {
    return createAction;
  }
};

var decay = function (props) {
  if (props === void 0) {
    props = {};
  }

  return action(function (_a) {
    var complete = _a.complete,
        update = _a.update;
    var _b = props.velocity,
        velocity = _b === void 0 ? 0 : _b,
        _c = props.from,
        from = _c === void 0 ? 0 : _c,
        _d = props.power,
        power = _d === void 0 ? 0.8 : _d,
        _e = props.timeConstant,
        timeConstant = _e === void 0 ? 350 : _e,
        _f = props.restDelta,
        restDelta = _f === void 0 ? 0.5 : _f,
        modifyTarget = props.modifyTarget;
    var elapsed = 0;
    var amplitude = power * velocity;
    var idealTarget = Math.round(from + amplitude);
    var target = typeof modifyTarget === 'undefined' ? idealTarget : modifyTarget(idealTarget);

    var process = _framesync.default.update(function (_a) {
      var frameDelta = _a.delta;
      elapsed += frameDelta;
      var delta = -amplitude * Math.exp(-elapsed / timeConstant);
      var isMoving = delta > restDelta || delta < -restDelta;
      var current = isMoving ? target + delta : target;
      update(current);

      if (!isMoving) {
        _framesync.cancelSync.update(process);

        complete();
      }
    }, true);

    return {
      stop: function () {
        return _framesync.cancelSync.update(process);
      }
    };
  });
};

var vectorDecay =
/*#__PURE__*/
createVectorAction(decay, {
  from: styleValueTypes.number.test,
  modifyTarget: function (func) {
    return typeof func === 'function';
  },
  velocity: styleValueTypes.number.test
});
exports.decay = vectorDecay;

var spring = function (props) {
  if (props === void 0) {
    props = {};
  }

  return action(function (_a) {
    var update = _a.update,
        complete = _a.complete;
    var _b = props.velocity,
        velocity = _b === void 0 ? 0.0 : _b;
    var _c = props.from,
        from = _c === void 0 ? 0.0 : _c,
        _d = props.to,
        to = _d === void 0 ? 0.0 : _d,
        _e = props.stiffness,
        stiffness = _e === void 0 ? 100 : _e,
        _f = props.damping,
        damping = _f === void 0 ? 10 : _f,
        _g = props.mass,
        mass = _g === void 0 ? 1.0 : _g,
        _h = props.restSpeed,
        restSpeed = _h === void 0 ? 0.01 : _h,
        _j = props.restDelta,
        restDelta = _j === void 0 ? 0.01 : _j;
    var initialVelocity = velocity ? -(velocity / 1000) : 0.0;
    var t = 0;
    var delta = to - from;
    var position = from;
    var prevPosition = position;

    var process = _framesync.default.update(function (_a) {
      var timeDelta = _a.delta;
      t += timeDelta;
      var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
      var angularFreq = Math.sqrt(stiffness / mass) / 1000;
      prevPosition = position;

      if (dampingRatio < 1) {
        var envelope = Math.exp(-dampingRatio * angularFreq * t);
        var expoDecay = angularFreq * Math.sqrt(1.0 - dampingRatio * dampingRatio);
        position = to - envelope * ((initialVelocity + dampingRatio * angularFreq * delta) / expoDecay * Math.sin(expoDecay * t) + delta * Math.cos(expoDecay * t));
      } else {
        var envelope = Math.exp(-angularFreq * t);
        position = to - envelope * (delta + (initialVelocity + angularFreq * delta) * t);
      }

      velocity = (0, _popcorn.velocityPerSecond)(position - prevPosition, timeDelta);
      var isBelowVelocityThreshold = Math.abs(velocity) <= restSpeed;
      var isBelowDisplacementThreshold = Math.abs(to - position) <= restDelta;

      if (isBelowVelocityThreshold && isBelowDisplacementThreshold) {
        position = to;
        update(position);

        _framesync.cancelSync.update(process);

        complete();
      } else {
        update(position);
      }
    }, true);

    return {
      stop: function () {
        return _framesync.cancelSync.update(process);
      }
    };
  });
};

var vectorSpring =
/*#__PURE__*/
createVectorAction(spring, {
  from: styleValueTypes.number.test,
  to: styleValueTypes.number.test,
  stiffness: styleValueTypes.number.test,
  damping: styleValueTypes.number.test,
  mass: styleValueTypes.number.test,
  velocity: styleValueTypes.number.test
});
exports.spring = vectorSpring;

var inertia = function (_a) {
  var _b = _a.from,
      from = _b === void 0 ? 0 : _b,
      _c = _a.velocity,
      velocity = _c === void 0 ? 0 : _c,
      min = _a.min,
      max = _a.max,
      _d = _a.power,
      power = _d === void 0 ? 0.8 : _d,
      _e = _a.timeConstant,
      timeConstant = _e === void 0 ? 700 : _e,
      _f = _a.bounceStiffness,
      bounceStiffness = _f === void 0 ? 500 : _f,
      _g = _a.bounceDamping,
      bounceDamping = _g === void 0 ? 10 : _g,
      _h = _a.restDelta,
      restDelta = _h === void 0 ? 1 : _h,
      modifyTarget = _a.modifyTarget;
  return action(function (_a) {
    var update = _a.update,
        complete = _a.complete;
    var current = value(from);
    var activeAnimation;
    var isSpring = false;

    var isLessThanMin = function (v) {
      return min !== undefined && v <= min;
    };

    var isMoreThanMax = function (v) {
      return max !== undefined && v >= max;
    };

    var isOutOfBounds = function (v) {
      return isLessThanMin(v) || isMoreThanMax(v);
    };

    var isTravellingAwayFromBounds = function (v, currentVelocity) {
      return isLessThanMin(v) && currentVelocity < 0 || isMoreThanMax(v) && currentVelocity > 0;
    };

    var startAnimation = function (animation, next) {
      activeAnimation && activeAnimation.stop();
      activeAnimation = animation.start({
        update: function (v) {
          return current.update(v);
        },
        complete: function () {
          if (next) {
            next();
            return;
          }

          complete();
        }
      });
    };

    var startSpring = function (props) {
      isSpring = true;
      startAnimation(vectorSpring((0, _tslib.__assign)({}, props, {
        to: isLessThanMin(props.from) ? min : max,
        stiffness: bounceStiffness,
        damping: bounceDamping,
        restDelta: restDelta
      })));
    };

    current.subscribe(function (v) {
      update(v);
      var currentVelocity = current.getVelocity();

      if (activeAnimation && !isSpring && isTravellingAwayFromBounds(v, currentVelocity)) {
        startSpring({
          from: v,
          velocity: currentVelocity
        });
      }
    });

    if (isOutOfBounds(from)) {
      startSpring({
        from: from,
        velocity: velocity
      });
    } else if (velocity !== 0) {
      var animation = vectorDecay({
        from: from,
        velocity: velocity,
        timeConstant: timeConstant,
        power: power,
        restDelta: isOutOfBounds(from) ? 20 : restDelta,
        modifyTarget: modifyTarget
      });
      startAnimation(animation, function () {
        var v = current.get();

        if (isOutOfBounds(v)) {
          startSpring({
            from: v,
            velocity: current.getVelocity()
          });
        } else {
          complete();
        }
      });
    } else {
      complete();
    }

    return {
      stop: function () {
        return activeAnimation && activeAnimation.stop();
      }
    };
  });
};

var index =
/*#__PURE__*/
createVectorAction(inertia, {
  from: styleValueTypes.number.test,
  velocity: styleValueTypes.number.test,
  min: styleValueTypes.number.test,
  max: styleValueTypes.number.test,
  damping: styleValueTypes.number.test,
  stiffness: styleValueTypes.number.test,
  modifyTarget: function (func) {
    return typeof func === 'function';
  }
});
exports.inertia = index;

var frame = function () {
  return action(function (_a) {
    var update = _a.update;
    var initialTime = 0;

    var process = _framesync.default.update(function (_a) {
      var timestamp = _a.timestamp;
      if (!initialTime) initialTime = timestamp;
      update(timestamp - initialTime);
    }, true, true);

    return {
      stop: function () {
        return _framesync.cancelSync.update(process);
      }
    };
  });
};

exports.everyFrame = frame;

var scrubber = function (_a) {
  var _b = _a.from,
      from = _b === void 0 ? 0 : _b,
      _c = _a.to,
      to = _c === void 0 ? 1 : _c,
      _d = _a.ease,
      ease = _d === void 0 ? easing.linear : _d;
  return action(function (_a) {
    var update = _a.update;
    return {
      seek: function (progress$$1) {
        return update(progress$$1);
      }
    };
  }).pipe(ease, function (v) {
    return (0, _popcorn.mix)(from, to, v);
  });
};

var vectorScrubber =
/*#__PURE__*/
createVectorAction(scrubber, {
  ease: function (func) {
    return typeof func === 'function';
  },
  from: styleValueTypes.number.test,
  to: styleValueTypes.number.test
});
var clampProgress =
/*#__PURE__*/
(0, _popcorn.clamp)(0, 1);

var tween = function (props) {
  if (props === void 0) {
    props = {};
  }

  return action(function (_a) {
    var update = _a.update,
        complete = _a.complete;
    var _b = props.duration,
        duration = _b === void 0 ? 300 : _b,
        _c = props.ease,
        ease = _c === void 0 ? easing.easeOut : _c,
        _d = props.flip,
        flip = _d === void 0 ? 0 : _d,
        _e = props.loop,
        loop = _e === void 0 ? 0 : _e,
        _f = props.yoyo,
        yoyo = _f === void 0 ? 0 : _f;
    var _g = props.from,
        from = _g === void 0 ? 0 : _g,
        _h = props.to,
        to = _h === void 0 ? 1 : _h,
        _j = props.elapsed,
        elapsed = _j === void 0 ? 0 : _j,
        _k = props.playDirection,
        playDirection = _k === void 0 ? 1 : _k,
        _l = props.flipCount,
        flipCount = _l === void 0 ? 0 : _l,
        _m = props.yoyoCount,
        yoyoCount = _m === void 0 ? 0 : _m,
        _o = props.loopCount,
        loopCount = _o === void 0 ? 0 : _o;
    var playhead = vectorScrubber({
      from: from,
      to: to,
      ease: ease
    }).start(update);
    var currentProgress = 0;
    var process;
    var isActive = false;

    var reverseTween = function () {
      if (elapsed > duration) {
        var remainder = elapsed - duration;
        elapsed = elapsed - remainder * 2;
      } else if (elapsed < 0) {
        var remainder = -1 * elapsed;
        elapsed = elapsed + remainder * 2;
      }

      playDirection *= -1;
    };

    var isTweenComplete = function () {
      var _a;

      var isComplete = playDirection === 1 ? isActive && elapsed >= duration : isActive && elapsed <= 0;
      if (!isComplete) return false;
      if (isComplete && !loop && !flip && !yoyo) return true;
      var isStepTaken = false;

      if (loop && loopCount < loop) {
        elapsed = duration - elapsed;
        loopCount++;
        isStepTaken = true;
      } else if (flip && flipCount < flip) {
        elapsed = duration - elapsed;
        _a = [to, from], from = _a[0], to = _a[1];
        playhead = vectorScrubber({
          from: from,
          to: to,
          ease: ease
        }).start(update);
        flipCount++;
        isStepTaken = true;
      } else if (yoyo && yoyoCount < yoyo) {
        reverseTween();
        yoyoCount++;
        isStepTaken = true;
      }

      return !isStepTaken;
    };

    var updateTween = function () {
      currentProgress = clampProgress((0, _popcorn.progress)(0, duration, elapsed));
      playhead.seek(currentProgress);
    };

    var startTimer = function () {
      isActive = true;
      process = _framesync.default.update(function (_a) {
        var delta = _a.delta;
        elapsed += delta * playDirection;
        updateTween();

        if (isTweenComplete() && complete) {
          _framesync.cancelSync.update(process);

          _framesync.default.update(complete, false, true);
        }
      }, true);
    };

    var stopTimer = function () {
      isActive = false;
      if (process) _framesync.cancelSync.update(process);
    };

    startTimer();
    return {
      isActive: function () {
        return isActive;
      },
      getElapsed: function () {
        return (0, _popcorn.clamp)(0, duration, elapsed);
      },
      getProgress: function () {
        return currentProgress;
      },
      stop: function () {
        stopTimer();
      },
      pause: function () {
        stopTimer();
        return this;
      },
      resume: function () {
        if (!isActive) startTimer();
        return this;
      },
      seek: function (newProgress) {
        elapsed = (0, _popcorn.mix)(0, duration, newProgress);

        _framesync.default.update(updateTween, false, true);

        return this;
      },
      reverse: function () {
        reverseTween();
        return this;
      }
    };
  });
};

exports.tween = tween;
var clampProgress$1 =
/*#__PURE__*/
(0, _popcorn.clamp)(0, 1);

var defaultEasings = function (values, easing$$1) {
  return values.map(function () {
    return easing$$1 || easing.easeOut;
  }).splice(0, values.length - 1);
};

var defaultTimings = function (values) {
  var numValues = values.length;
  return values.map(function (value, i) {
    return i !== 0 ? i / (numValues - 1) : 0;
  });
};

var interpolateScrubbers = function (input, scrubbers, update) {
  var rangeLength = input.length;
  var finalInputIndex = rangeLength - 1;
  var finalScrubberIndex = finalInputIndex - 1;
  var subs = scrubbers.map(function (scrub) {
    return scrub.start(update);
  });
  return function (v) {
    if (v <= input[0]) {
      subs[0].seek(0);
    }

    if (v >= input[finalInputIndex]) {
      subs[finalScrubberIndex].seek(1);
    }

    var i = 1;

    for (; i < rangeLength; i++) {
      if (input[i] > v || i === finalInputIndex) break;
    }

    var progressInRange = (0, _popcorn.progress)(input[i - 1], input[i], v);
    subs[i - 1].seek(clampProgress$1(progressInRange));
  };
};

var keyframes = function (_a) {
  var easings = _a.easings,
      _b = _a.ease,
      ease = _b === void 0 ? easing.linear : _b,
      times = _a.times,
      values = _a.values,
      tweenProps = (0, _tslib.__rest)(_a, ["easings", "ease", "times", "values"]);
  easings = Array.isArray(easings) ? easings : defaultEasings(values, easings);
  times = times || defaultTimings(values);
  var scrubbers = easings.map(function (easing$$1, i) {
    return vectorScrubber({
      from: values[i],
      to: values[i + 1],
      ease: easing$$1
    });
  });
  return tween((0, _tslib.__assign)({}, tweenProps, {
    ease: ease
  })).applyMiddleware(function (update) {
    return interpolateScrubbers(times, scrubbers, update);
  });
};

exports.keyframes = keyframes;

var physics = function (props) {
  if (props === void 0) {
    props = {};
  }

  return action(function (_a) {
    var complete = _a.complete,
        update = _a.update;
    var _b = props.acceleration,
        acceleration = _b === void 0 ? 0 : _b,
        _c = props.friction,
        friction = _c === void 0 ? 0 : _c,
        _d = props.velocity,
        velocity = _d === void 0 ? 0 : _d,
        springStrength = props.springStrength,
        to = props.to;
    var _e = props.restSpeed,
        restSpeed = _e === void 0 ? 0.001 : _e,
        _f = props.from,
        from = _f === void 0 ? 0 : _f;
    var current = from;

    var process = _framesync.default.update(function (_a) {
      var delta = _a.delta;
      var elapsed = Math.max(delta, 16);
      if (acceleration) velocity += (0, _popcorn.velocityPerFrame)(acceleration, elapsed);
      if (friction) velocity *= Math.pow(1 - friction, elapsed / 100);

      if (springStrength !== undefined && to !== undefined) {
        var distanceToTarget = to - current;
        velocity += distanceToTarget * (0, _popcorn.velocityPerFrame)(springStrength, elapsed);
      }

      current += (0, _popcorn.velocityPerFrame)(velocity, elapsed);
      update(current);
      var isComplete = restSpeed !== false && (!velocity || Math.abs(velocity) <= restSpeed);

      if (isComplete) {
        _framesync.cancelSync.update(process);

        complete();
      }
    }, true);

    return {
      set: function (v) {
        current = v;
        return this;
      },
      setAcceleration: function (v) {
        acceleration = v;
        return this;
      },
      setFriction: function (v) {
        friction = v;
        return this;
      },
      setSpringStrength: function (v) {
        springStrength = v;
        return this;
      },
      setSpringTarget: function (v) {
        to = v;
        return this;
      },
      setVelocity: function (v) {
        velocity = v;
        return this;
      },
      stop: function () {
        return _framesync.cancelSync.update(process);
      }
    };
  });
};

var vectorPhysics =
/*#__PURE__*/
createVectorAction(physics, {
  acceleration: styleValueTypes.number.test,
  friction: styleValueTypes.number.test,
  velocity: styleValueTypes.number.test,
  from: styleValueTypes.number.test,
  to: styleValueTypes.number.test,
  springStrength: styleValueTypes.number.test
});
exports.physics = vectorPhysics;
var DEFAULT_DURATION = 300;

var flattenTimings = function (instructions) {
  var flatInstructions = [];
  var lastArg = instructions[instructions.length - 1];
  var isStaggered = typeof lastArg === 'number';
  var staggerDelay = isStaggered ? lastArg : 0;
  var segments = isStaggered ? instructions.slice(0, -1) : instructions;
  var numSegments = segments.length;
  var offset = 0;
  segments.forEach(function (item, i) {
    flatInstructions.push(item);

    if (i !== numSegments - 1) {
      var duration = item.duration || DEFAULT_DURATION;
      offset += staggerDelay;
      flatInstructions.push("-" + (duration - offset));
    }
  });
  return flatInstructions;
};

var flattenArrayInstructions = function (instructions, instruction) {
  Array.isArray(instruction) ? instructions.push.apply(instructions, flattenTimings(instruction)) : instructions.push(instruction);
  return instructions;
};

var convertDefToProps = function (props, def, i) {
  var duration = props.duration,
      easings = props.easings,
      times = props.times,
      values = props.values;
  var numValues = values.length;
  var prevTimeTo = times[numValues - 1];
  var timeFrom = def.at === 0 ? 0 : def.at / duration;
  var timeTo = (def.at + def.duration) / duration;

  if (i === 0) {
    values.push(def.from);
    times.push(timeFrom);
  } else {
    if (prevTimeTo !== timeFrom) {
      if (def.from !== undefined) {
        values.push(values[numValues - 1]);
        times.push(timeFrom);
        easings.push(easing.linear);
      }

      var from = def.from !== undefined ? def.from : values[numValues - 1];
      values.push(from);
      times.push(timeFrom);
      easings.push(easing.linear);
    } else if (def.from !== undefined) {
      values.push(def.from);
      times.push(timeFrom);
      easings.push(easing.linear);
    }
  }

  values.push(def.to);
  times.push(timeTo);
  easings.push(def.ease || easing.easeInOut);
  return props;
};

var timeline = function (instructions, _a) {
  var _b = _a === void 0 ? {} : _a,
      duration = _b.duration,
      elapsed = _b.elapsed,
      ease = _b.ease,
      loop = _b.loop,
      flip = _b.flip,
      yoyo = _b.yoyo;

  var playhead = 0;
  var calculatedDuration = 0;
  var flatInstructions = instructions.reduce(flattenArrayInstructions, []);
  var animationDefs = [];
  flatInstructions.forEach(function (instruction) {
    if (typeof instruction === 'string') {
      playhead += parseFloat(instruction);
    } else if (typeof instruction === 'number') {
      playhead = instruction;
    } else {
      var def = (0, _tslib.__assign)({}, instruction, {
        at: playhead
      });
      def.duration = def.duration === undefined ? DEFAULT_DURATION : def.duration;
      animationDefs.push(def);
      playhead += def.duration;
      calculatedDuration = Math.max(calculatedDuration, def.at + def.duration);
    }
  });
  var tracks = {};
  var numDefs = animationDefs.length;

  for (var i = 0; i < numDefs; i++) {
    var def = animationDefs[i];
    var track = def.track;

    if (track === undefined) {
      throw new Error('No track defined');
    }

    if (!tracks.hasOwnProperty(track)) tracks[track] = [];
    tracks[track].push(def);
  }

  var trackKeyframes = {};

  for (var key in tracks) {
    if (tracks.hasOwnProperty(key)) {
      var keyframeProps = tracks[key].reduce(convertDefToProps, {
        duration: calculatedDuration,
        easings: [],
        times: [],
        values: []
      });
      trackKeyframes[key] = keyframes((0, _tslib.__assign)({}, keyframeProps, {
        duration: duration || calculatedDuration,
        ease: ease,
        elapsed: elapsed,
        loop: loop,
        yoyo: yoyo,
        flip: flip
      }));
    }
  }

  return composite(trackKeyframes);
};

exports.timeline = timeline;

var listen = function (element, events, options) {
  return action(function (_a) {
    var update = _a.update;
    var eventNames = events.split(' ').map(function (eventName) {
      element.addEventListener(eventName, update, options);
      return eventName;
    });
    return {
      stop: function () {
        return eventNames.forEach(function (eventName) {
          return element.removeEventListener(eventName, update, options);
        });
      }
    };
  });
};

exports.listen = listen;

var defaultPointerPos = function () {
  return {
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    x: 0,
    y: 0
  };
};

var eventToPoint = function (e, point) {
  if (point === void 0) {
    point = defaultPointerPos();
  }

  point.clientX = point.x = e.clientX;
  point.clientY = point.y = e.clientY;
  point.pageX = e.pageX;
  point.pageY = e.pageY;
  return point;
};

var points = [
/*#__PURE__*/
defaultPointerPos()];
var isTouchDevice = false;

if (typeof document !== 'undefined') {
  var updatePointsLocation = function (_a) {
    var touches = _a.touches;
    isTouchDevice = true;
    var numTouches = touches.length;
    points.length = 0;

    for (var i = 0; i < numTouches; i++) {
      var thisTouch = touches[i];
      points.push(eventToPoint(thisTouch));
    }
  };

  listen(document, 'touchstart touchmove', {
    passive: true,
    capture: true
  }).start(updatePointsLocation);
}

var multitouch = function (_a) {
  var _b = _a === void 0 ? {} : _a,
      _c = _b.preventDefault,
      preventDefault = _c === void 0 ? true : _c,
      _d = _b.scale,
      scale = _d === void 0 ? 1.0 : _d,
      _e = _b.rotate,
      rotate = _e === void 0 ? 0.0 : _e;

  return action(function (_a) {
    var update = _a.update;
    var output = {
      touches: points,
      scale: scale,
      rotate: rotate
    };
    var initialDistance = 0.0;
    var initialRotation = 0.0;
    var isGesture = points.length > 1;

    if (isGesture) {
      var firstTouch = points[0],
          secondTouch = points[1];
      initialDistance = (0, _popcorn.distance)(firstTouch, secondTouch);
      initialRotation = (0, _popcorn.angle)(firstTouch, secondTouch);
    }

    var updatePoint = function () {
      if (isGesture) {
        var firstTouch = points[0],
            secondTouch = points[1];
        var newDistance = (0, _popcorn.distance)(firstTouch, secondTouch);
        var newRotation = (0, _popcorn.angle)(firstTouch, secondTouch);
        output.scale = scale * (newDistance / initialDistance);
        output.rotate = rotate + (newRotation - initialRotation);
      }

      update(output);
    };

    var onMove = function (e) {
      if (preventDefault || e.touches.length > 1) e.preventDefault();

      _framesync.default.update(updatePoint);
    };

    var updateOnMove = listen(document, 'touchmove', {
      passive: !preventDefault
    }).start(onMove);
    if (isTouchDevice) _framesync.default.update(updatePoint);
    return {
      stop: function () {
        _framesync.cancelSync.update(updatePoint);

        updateOnMove.stop();
      }
    };
  });
};

exports.multitouch = multitouch;

var getIsTouchDevice = function () {
  return isTouchDevice;
};

var point =
/*#__PURE__*/
defaultPointerPos();
var isMouseDevice = false;

if (typeof document !== 'undefined') {
  var updatePointLocation = function (e) {
    isMouseDevice = true;
    eventToPoint(e, point);
  };

  listen(document, 'mousedown mousemove', true).start(updatePointLocation);
}

var mouse = function (_a) {
  var _b = (_a === void 0 ? {} : _a).preventDefault,
      preventDefault = _b === void 0 ? true : _b;
  return action(function (_a) {
    var update = _a.update;

    var updatePoint = function () {
      return update(point);
    };

    var onMove = function (e) {
      if (preventDefault) e.preventDefault();

      _framesync.default.update(updatePoint);
    };

    var updateOnMove = listen(document, 'mousemove').start(onMove);
    if (isMouseDevice) _framesync.default.update(updatePoint);
    return {
      stop: function () {
        _framesync.cancelSync.update(updatePoint);

        updateOnMove.stop();
      }
    };
  });
};

exports.mouse = mouse;

var getFirstTouch = function (_a) {
  var firstTouch = _a[0];
  return firstTouch;
};

var pointer = function (props) {
  if (props === void 0) {
    props = {};
  }

  return getIsTouchDevice() ? multitouch(props).pipe(function (_a) {
    var touches = _a.touches;
    return touches;
  }, getFirstTouch) : mouse(props);
};

var index$1 = function (_a) {
  if (_a === void 0) {
    _a = {};
  }

  var x = _a.x,
      y = _a.y,
      props = (0, _tslib.__rest)(_a, ["x", "y"]);

  if (x !== undefined || y !== undefined) {
    var applyXOffset_1 = (0, _popcorn.applyOffset)(x || 0);
    var applyYOffset_1 = (0, _popcorn.applyOffset)(y || 0);
    var delta_1 = {
      x: 0,
      y: 0
    };
    return pointer(props).pipe(function (point) {
      delta_1.x = applyXOffset_1(point.x);
      delta_1.y = applyYOffset_1(point.y);
      return delta_1;
    });
  } else {
    return pointer(props);
  }
};

exports.pointer = index$1;

var chain = function () {
  var actions = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    actions[_i] = arguments[_i];
  }

  return action(function (_a) {
    var update = _a.update,
        complete = _a.complete;
    var i = 0;
    var current;

    var playCurrent = function () {
      current = actions[i].start({
        complete: function () {
          i++;
          i >= actions.length ? complete() : playCurrent();
        },
        update: update
      });
    };

    playCurrent();
    return {
      stop: function () {
        return current && current.stop();
      }
    };
  });
};

exports.chain = chain;

var crossfade = function (a, b) {
  return action(function (observer) {
    var balance = 0;
    var fadable = parallel$1(a, b).start((0, _tslib.__assign)({}, observer, {
      update: function (_a) {
        var va = _a[0],
            vb = _a[1];
        observer.update((0, _popcorn.mix)(va, vb, balance));
      }
    }));
    return {
      setBalance: function (v) {
        return balance = v;
      },
      stop: function () {
        return fadable.stop();
      }
    };
  });
};

exports.crossfade = crossfade;

var delay = function (timeToDelay) {
  return action(function (_a) {
    var complete = _a.complete;
    var timeout = setTimeout(complete, timeToDelay);
    return {
      stop: function () {
        return clearTimeout(timeout);
      }
    };
  });
};

exports.delay = delay;

var merge = function () {
  var actions = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    actions[_i] = arguments[_i];
  }

  return action(function (observer) {
    var subs = actions.map(function (thisAction) {
      return thisAction.start(observer);
    });
    return {
      stop: function () {
        return subs.forEach(function (sub) {
          return sub.stop();
        });
      }
    };
  });
};

exports.merge = merge;

var schedule = function (scheduler, schedulee) {
  return action(function (_a) {
    var update = _a.update,
        complete = _a.complete;
    var latest;
    var schedulerSub = scheduler.start({
      update: function () {
        return latest !== undefined && update(latest);
      },
      complete: complete
    });
    var scheduleeSub = schedulee.start({
      update: function (v) {
        return latest = v;
      },
      complete: complete
    });
    return {
      stop: function () {
        schedulerSub.stop();
        scheduleeSub.stop();
      }
    };
  });
};

exports.schedule = schedule;

var stagger = function (actions, interval) {
  var intervalIsNumber = typeof interval === 'number';
  var actionsWithDelay = actions.map(function (a, i) {
    var timeToDelay = intervalIsNumber ? interval * i : interval(i);
    return chain(delay(timeToDelay), a);
  });
  return parallel$1.apply(void 0, actionsWithDelay);
};

exports.stagger = stagger;

var appendUnit = function (unit) {
  return function (v) {
    return "" + v + unit;
  };
};

var steps = function (st, min, max) {
  if (min === void 0) {
    min = 0;
  }

  if (max === void 0) {
    max = 1;
  }

  return function (v) {
    var current = (0, _popcorn.progress)(min, max, v);
    return (0, _popcorn.mix)(min, max, stepProgress(st, current));
  };
};

var transformMap = function (childTransformers) {
  return function (v) {
    var output = (0, _tslib.__assign)({}, v);

    for (var key in childTransformers) {
      if (childTransformers.hasOwnProperty(key)) {
        var childTransformer = childTransformers[key];
        output[key] = childTransformer(v[key]);
      }
    }

    return output;
  };
};

var transformers =
/*#__PURE__*/
Object.freeze({
  applyOffset: _popcorn.applyOffset,
  clamp: _popcorn.clamp,
  conditional: _popcorn.conditional,
  interpolate: _popcorn.interpolate,
  blendArray: _popcorn.mixArray,
  blendColor: _popcorn.mixColor,
  pipe: _popcorn.pipe,
  smooth: _popcorn.smooth,
  snap: _popcorn.snap,
  generateStaticSpring: _popcorn.springForce,
  nonlinearSpring: _popcorn.springForceExpo,
  linearSpring: _popcorn.springForceLinear,
  wrap: _popcorn.wrap,
  appendUnit: appendUnit,
  steps: steps,
  transformMap: transformMap
});
exports.transform = transformers;

var css = function (element, props) {
  (0, _heyListen.warning)(false, 'css() is deprecated, use styler instead');
  return (0, _stylefire.default)(element, props);
};

exports.css = css;

var svg = function (element, props) {
  (0, _heyListen.warning)(false, 'svg() is deprecated, use styler instead');
  return (0, _stylefire.default)(element, props);
};

exports.svg = svg;
},{"tslib":"../node_modules/tslib/tslib.es6.js","@popmotion/popcorn":"../node_modules/@popmotion/popcorn/dist/popcorn.es.js","framesync":"../node_modules/framesync/dist/framesync.es.js","style-value-types":"../node_modules/style-value-types/dist/style-value-types.es.js","@popmotion/easing":"../node_modules/@popmotion/easing/dist/easing.es.js","stylefire":"../node_modules/stylefire/dist/stylefire.es.js","hey-listen":"../node_modules/hey-listen/dist/hey-listen.es.js","process":"../node_modules/process/browser.js"}],"../node_modules/pose-core/dist/pose-core.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tslib = require("tslib");

var _heyListen = require("hey-listen");

var getPoseValues = function (_a) {
  var transition = _a.transition,
      flip = _a.flip,
      delay = _a.delay,
      delayChildren = _a.delayChildren,
      staggerChildren = _a.staggerChildren,
      staggerDirection = _a.staggerDirection,
      afterChildren = _a.afterChildren,
      beforeChildren = _a.beforeChildren,
      preTransition = _a.preTransition,
      applyAtStart = _a.applyAtStart,
      applyAtEnd = _a.applyAtEnd,
      props = (0, _tslib.__rest)(_a, ["transition", "flip", "delay", "delayChildren", "staggerChildren", "staggerDirection", "afterChildren", "beforeChildren", "preTransition", "applyAtStart", "applyAtEnd"]);
  return props;
};

var selectPoses = function (_a) {
  var label = _a.label,
      props = _a.props,
      values = _a.values,
      parentValues = _a.parentValues,
      ancestorValues = _a.ancestorValues,
      onChange = _a.onChange,
      passive = _a.passive,
      initialPose = _a.initialPose,
      poses = (0, _tslib.__rest)(_a, ["label", "props", "values", "parentValues", "ancestorValues", "onChange", "passive", "initialPose"]);
  return poses;
};

var selectAllValues = function (values, selectValue) {
  var allValues = {};
  values.forEach(function (value, key) {
    return allValues[key] = selectValue(value);
  });
  return allValues;
};

var resolveProp = function (target, props) {
  return typeof target === 'function' ? target(props) : target;
};

var poseDefault = function (pose, prop, defaultValue, resolveProps) {
  return pose && pose[prop] !== undefined ? resolveProp(pose[prop], resolveProps) : defaultValue;
};

var startChildAnimations = function (children, next, pose, props) {
  var animations = [];
  var delay = poseDefault(pose, 'delayChildren', 0, props);
  var stagger = poseDefault(pose, 'staggerChildren', 0, props);
  var staggerDirection = poseDefault(pose, 'staggerDirection', 1, props);
  var maxStaggerDuration = (children.size - 1) * stagger;
  var generateStaggerDuration = staggerDirection === 1 ? function (i) {
    return i * stagger;
  } : function (i) {
    return maxStaggerDuration - i * stagger;
  };
  Array.from(children).forEach(function (child, i) {
    animations.push(child.set(next, {
      delay: delay + generateStaggerDuration(i)
    }));
  });
  return animations;
};

var resolveTransition = function (transition, key, value, props, convertTransitionDefinition, getInstantTransition) {
  var resolvedTransition;

  if (typeof transition === 'function') {
    var resolvedTransitionMap = transition(props);
    resolvedTransition = resolveTransition(resolvedTransitionMap, key, value, props, convertTransitionDefinition, getInstantTransition);
  } else if (transition[key] || transition.default) {
    var keyTransition = transition[key] || transition.default;

    if (typeof keyTransition === 'function') {
      resolvedTransition = keyTransition(props);
    } else {
      resolvedTransition = keyTransition;
    }
  } else {
    resolvedTransition = transition;
  }

  return resolvedTransition === false ? getInstantTransition(value, props) : convertTransitionDefinition(value, resolvedTransition, props);
};

var findInsertionIndex = function (poseList, priorityList, priorityIndex) {
  var insertionIndex = 0;

  for (var i = priorityIndex - 1; i >= 0; i--) {
    var nextHighestPriorityIndex = poseList.indexOf(priorityList[i]);

    if (nextHighestPriorityIndex !== -1) {
      insertionIndex = nextHighestPriorityIndex + 1;
      break;
    }
  }

  return insertionIndex;
};

var applyValues = function (toApply, values, props, setValue, setValueNative) {
  (0, _heyListen.invariant)(typeof toApply === 'object', 'applyAtStart and applyAtEnd must be of type object');
  return Object.keys(toApply).forEach(function (key) {
    var valueToSet = resolveProp(toApply[key], props);
    values.has(key) ? setValue(values.get(key), valueToSet) : setValueNative(key, valueToSet, props);
  });
};

var createPoseSetter = function (setterProps) {
  var state = setterProps.state,
      poses = setterProps.poses,
      startAction = setterProps.startAction,
      stopAction = setterProps.stopAction,
      getInstantTransition = setterProps.getInstantTransition,
      addActionDelay = setterProps.addActionDelay,
      getTransitionProps = setterProps.getTransitionProps,
      resolveTarget = setterProps.resolveTarget,
      transformPose = setterProps.transformPose,
      posePriority = setterProps.posePriority,
      convertTransitionDefinition = setterProps.convertTransitionDefinition,
      setValue = setterProps.setValue,
      setValueNative = setterProps.setValueNative,
      forceRender = setterProps.forceRender;
  return function (next, nextProps, propagate) {
    if (nextProps === void 0) {
      nextProps = {};
    }

    if (propagate === void 0) {
      propagate = true;
    }

    var children = state.children,
        values = state.values,
        props = state.props,
        activeActions = state.activeActions,
        activePoses = state.activePoses;
    var _a = nextProps.delay,
        delay = _a === void 0 ? 0 : _a;
    var hasChildren = children.size;
    var baseTransitionProps = (0, _tslib.__assign)({}, props, nextProps);
    var nextPose = poses[next];

    var getChildAnimations = function () {
      return hasChildren && propagate ? startChildAnimations(children, next, nextPose, baseTransitionProps) : [];
    };

    var getParentAnimations = function () {
      if (!nextPose) return [];
      var applyAtStart = nextPose.applyAtStart;

      if (applyAtStart) {
        applyValues(applyAtStart, values, baseTransitionProps, setValue, setValueNative);
        if (forceRender) forceRender(baseTransitionProps);
      }

      if (transformPose) nextPose = transformPose(nextPose, next, state);
      var preTransition = nextPose.preTransition,
          getTransition = nextPose.transition,
          applyAtEnd = nextPose.applyAtEnd;
      if (preTransition) preTransition(baseTransitionProps);
      var animations = Object.keys(getPoseValues(nextPose)).map(function (key) {
        var valuePoses = activePoses.has(key) ? activePoses.get(key) : (activePoses.set(key, []), activePoses.get(key));
        var existingIndex = valuePoses.indexOf(next);
        if (existingIndex !== -1) valuePoses.splice(existingIndex, 1);
        var priority = posePriority ? posePriority.indexOf(next) : 0;
        var insertionIndex = priority <= 0 ? 0 : findInsertionIndex(valuePoses, posePriority, priority);
        valuePoses.splice(insertionIndex, 0, next);
        return insertionIndex === 0 ? new Promise(function (complete) {
          var value = values.get(key);
          var transitionProps = (0, _tslib.__assign)({}, baseTransitionProps, {
            key: key,
            value: value
          });
          var target = resolveTarget(value, resolveProp(nextPose[key], transitionProps));
          if (activeActions.has(key)) stopAction(activeActions.get(key));
          var resolveTransitionProps = (0, _tslib.__assign)({
            to: target
          }, transitionProps, getTransitionProps(value, target, transitionProps));
          var transition = resolveTransition(getTransition, key, value, resolveTransitionProps, convertTransitionDefinition, getInstantTransition);
          var poseDelay = delay || resolveProp(nextPose.delay, transitionProps);

          if (poseDelay) {
            transition = addActionDelay(poseDelay, transition);
          }

          activeActions.set(key, startAction(value, transition, complete));
        }) : Promise.resolve();
      });
      return applyAtEnd ? [Promise.all(animations).then(function () {
        applyValues(applyAtEnd, values, baseTransitionProps, setValue, setValueNative);
      })] : animations;
    };

    if (nextPose && hasChildren) {
      if (resolveProp(nextPose.beforeChildren, baseTransitionProps)) {
        return Promise.all(getParentAnimations()).then(function () {
          return Promise.all(getChildAnimations());
        });
      } else if (resolveProp(nextPose.afterChildren, baseTransitionProps)) {
        return Promise.all(getChildAnimations()).then(function () {
          return Promise.all(getParentAnimations());
        });
      }
    }

    return Promise.all(getParentAnimations().concat(getChildAnimations()));
  };
};

var DEFAULT_INITIAL_POSE = 'init';

var isScale = function (key) {
  return key.includes('scale');
};

var defaultReadValueFromSource = function (key) {
  return isScale(key) ? 1 : 0;
};

var readValueFromPose = function (pose, key, props) {
  var valueToResolve = pose.applyAtEnd && pose.applyAtEnd[key] !== undefined ? pose.applyAtEnd[key] : pose[key] !== undefined ? pose[key] : pose.applyAtStart && pose.applyAtStart[key] !== undefined ? pose.applyAtStart[key] : 0;
  return resolveProp(valueToResolve, props);
};

var getPosesToSearch = function (pose) {
  var posesToSearch = Array.isArray(pose) ? pose : [pose];
  posesToSearch.push(DEFAULT_INITIAL_POSE);
  return posesToSearch;
};

var getInitialValue = function (poses, key, initialPose, props, readValueFromSource, activePoses) {
  if (readValueFromSource === void 0) {
    readValueFromSource = defaultReadValueFromSource;
  }

  var posesToSearch = getPosesToSearch(initialPose);
  var pose = posesToSearch.filter(Boolean).find(function (name) {
    var thisPose = poses[name];
    return thisPose && (thisPose[key] !== undefined || thisPose.applyAtStart && thisPose.applyAtStart[key] !== undefined || thisPose.applyAtEnd && thisPose.applyAtEnd[key] !== undefined);
  });
  activePoses.set(key, [pose || DEFAULT_INITIAL_POSE]);
  return pose ? readValueFromPose(poses[pose], key, props) : readValueFromSource(key, props);
};

var createValues = function (values, _a) {
  var userSetValues = _a.userSetValues,
      createValue = _a.createValue,
      convertValue = _a.convertValue,
      readValueFromSource = _a.readValueFromSource,
      initialPose = _a.initialPose,
      poses = _a.poses,
      activePoses = _a.activePoses,
      props = _a.props;
  return function (key) {
    if (values.has(key)) return;
    var value;

    if (userSetValues && userSetValues[key] !== undefined) {
      value = convertValue(userSetValues[key], key, props);
    } else {
      var initValue = getInitialValue(poses, key, initialPose, props, readValueFromSource, activePoses);
      value = createValue(initValue, key, props);
    }

    values.set(key, value);
  };
};

var scrapeValuesFromPose = function (values, props) {
  return function (key) {
    var pose = props.poses[key];
    Object.keys(getPoseValues(pose)).forEach(createValues(values, props));
  };
};

var getAncestorValue = function (key, fromParent, ancestors) {
  if (fromParent === true) {
    return ancestors[0] && ancestors[0].values.get(key);
  } else {
    var foundAncestor = ancestors.find(function (_a) {
      var label = _a.label;
      return label === fromParent;
    });
    return foundAncestor && foundAncestor.values.get(key);
  }
};

var bindPassiveValues = function (values, _a) {
  var passive = _a.passive,
      ancestorValues = _a.ancestorValues,
      createValue = _a.createValue,
      readValue = _a.readValue,
      props = _a.props;
  return function (key) {
    var _a = passive[key],
        valueKey = _a[0],
        passiveProps = _a[1],
        fromParent = _a[2];
    var valueToBind = fromParent && ancestorValues.length ? getAncestorValue(valueKey, fromParent, ancestorValues) : values.has(valueKey) ? values.get(valueKey) : false;
    if (!valueToBind) return;
    var newValue = createValue(readValue(valueToBind), key, props, {
      passiveParentKey: valueKey,
      passiveParent: valueToBind,
      passiveProps: passiveProps
    });
    values.set(key, newValue);
  };
};

var setNativeValues = function (_a) {
  var setValueNative = _a.setValueNative,
      initialPose = _a.initialPose,
      props = _a.props,
      poses = _a.poses;
  var valuesHaveSet = new Set();

  var setValues = function (pose, propKey) {
    if (pose[propKey]) {
      for (var key in pose[propKey]) {
        if (!valuesHaveSet.has(key)) {
          valuesHaveSet.add(key);
          setValueNative(key, resolveProp(pose[propKey][key], props), props);
        }
      }
    }
  };

  getPosesToSearch(initialPose).forEach(function (poseKey) {
    var pose = poses[poseKey];

    if (pose) {
      setValues(pose, 'applyAtEnd');
      setValues(pose, 'applyAtStart');
    }
  });
};

var createValueMap = function (props) {
  var poses = props.poses,
      passive = props.passive;
  var values = new Map();
  Object.keys(poses).forEach(scrapeValuesFromPose(values, props));
  setNativeValues(props);
  if (passive) Object.keys(passive).forEach(bindPassiveValues(values, props));
  return values;
};

var applyDefaultTransition = function (pose, key, defaultTransitions) {
  return (0, _tslib.__assign)({}, pose, {
    transition: defaultTransitions.has(key) ? defaultTransitions.get(key) : defaultTransitions.get('default')
  });
};

var generateTransitions = function (poses, defaultTransitions) {
  Object.keys(poses).forEach(function (key) {
    var pose = poses[key];
    (0, _heyListen.invariant)(typeof pose === 'object', "Pose '" + key + "' is of invalid type. All poses should be objects.");
    poses[key] = pose.transition !== undefined ? pose : applyDefaultTransition(pose, key, defaultTransitions);
  });
  return poses;
};

var sortByReversePriority = function (priorityOrder) {
  return function (a, b) {
    var aP = priorityOrder.indexOf(a);
    var bP = priorityOrder.indexOf(b);
    if (aP === -1 && bP !== -1) return -1;
    if (aP !== -1 && bP === -1) return 1;
    return aP - bP;
  };
};

var poseFactory = function (_a) {
  var getDefaultProps = _a.getDefaultProps,
      defaultTransitions = _a.defaultTransitions,
      bindOnChange = _a.bindOnChange,
      startAction = _a.startAction,
      stopAction = _a.stopAction,
      readValue = _a.readValue,
      readValueFromSource = _a.readValueFromSource,
      resolveTarget = _a.resolveTarget,
      setValue = _a.setValue,
      setValueNative = _a.setValueNative,
      createValue = _a.createValue,
      convertValue = _a.convertValue,
      getInstantTransition = _a.getInstantTransition,
      getTransitionProps = _a.getTransitionProps,
      addActionDelay = _a.addActionDelay,
      selectValueToRead = _a.selectValueToRead,
      convertTransitionDefinition = _a.convertTransitionDefinition,
      transformPose = _a.transformPose,
      posePriority = _a.posePriority,
      forceRender = _a.forceRender,
      extendAPI = _a.extendAPI;
  return function (config) {
    var parentValues = config.parentValues,
        _a = config.ancestorValues,
        ancestorValues = _a === void 0 ? [] : _a;
    if (parentValues) ancestorValues.unshift({
      values: parentValues
    });
    var activeActions = new Map();
    var activePoses = new Map();
    var children = new Set();
    var poses = generateTransitions(selectPoses(config), defaultTransitions);
    var _b = config.props,
        props = _b === void 0 ? {} : _b;
    if (getDefaultProps) props = (0, _tslib.__assign)({}, getDefaultProps(config), props);
    var passive = config.passive,
        userSetValues = config.values,
        _c = config.initialPose,
        initialPose = _c === void 0 ? DEFAULT_INITIAL_POSE : _c;
    var values = createValueMap({
      poses: poses,
      passive: passive,
      ancestorValues: ancestorValues,
      readValue: readValue,
      setValueNative: setValueNative,
      createValue: createValue,
      convertValue: convertValue,
      readValueFromSource: readValueFromSource,
      userSetValues: userSetValues,
      initialPose: initialPose,
      activePoses: activePoses,
      props: props
    });
    var state = {
      activeActions: activeActions,
      activePoses: activePoses,
      children: children,
      props: props,
      values: values
    };
    var onChange = config.onChange;
    if (onChange) Object.keys(onChange).forEach(bindOnChange(values, onChange));
    var set = createPoseSetter({
      state: state,
      poses: poses,
      getInstantTransition: getInstantTransition,
      getTransitionProps: getTransitionProps,
      convertTransitionDefinition: convertTransitionDefinition,
      setValue: setValue,
      setValueNative: setValueNative,
      startAction: startAction,
      stopAction: stopAction,
      resolveTarget: resolveTarget,
      addActionDelay: addActionDelay,
      transformPose: transformPose,
      posePriority: posePriority,
      forceRender: forceRender
    });

    var has = function (poseName) {
      return !!poses[poseName];
    };

    var api = {
      set: set,
      unset: function (poseName, poseProps) {
        var posesToSet = [];
        activePoses.forEach(function (valuePoses) {
          var poseIndex = valuePoses.indexOf(poseName);
          if (poseIndex === -1) return;
          var currentPose = valuePoses[0];
          valuePoses.splice(poseIndex, 1);
          var nextPose = valuePoses[0];
          if (nextPose === currentPose) return;

          if (posesToSet.indexOf(nextPose) === -1) {
            posesToSet.push(nextPose);
          }
        });
        var animationsToResolve = posesToSet.sort(sortByReversePriority(posePriority)).map(function (poseToSet) {
          return set(poseToSet, poseProps, false);
        });
        children.forEach(function (child) {
          return animationsToResolve.push(child.unset(poseName));
        });
        return Promise.all(animationsToResolve);
      },
      get: function (valueName) {
        return valueName ? selectValueToRead(values.get(valueName)) : selectAllValues(values, selectValueToRead);
      },
      has: has,
      setProps: function (newProps) {
        return state.props = (0, _tslib.__assign)({}, state.props, newProps);
      },
      _addChild: function (childConfig, factory) {
        var child = factory((0, _tslib.__assign)({
          initialPose: initialPose
        }, childConfig, {
          ancestorValues: [{
            label: config.label,
            values: values
          }].concat(ancestorValues)
        }));
        children.add(child);
        return child;
      },
      removeChild: function (child) {
        return children.delete(child);
      },
      clearChildren: function () {
        children.forEach(function (child) {
          return child.destroy();
        });
        children.clear();
      },
      destroy: function () {
        activeActions.forEach(stopAction);
        children.forEach(function (child) {
          return child.destroy();
        });
      }
    };
    return extendAPI(api, state, config);
  };
};

var _default = poseFactory;
exports.default = _default;
},{"tslib":"../node_modules/tslib/tslib.es6.js","hey-listen":"../node_modules/hey-listen/dist/hey-listen.es.js"}],"../node_modules/popmotion-pose/dist/popmotion-pose.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popmotion = require("popmotion");

var _easing = require("@popmotion/easing");

var _styleValueTypes = require("style-value-types");

var _poseCore = _interopRequireDefault(require("pose-core"));

var _heyListen = require("hey-listen");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}

var BoundingBoxDimension;

(function (BoundingBoxDimension) {
  BoundingBoxDimension["width"] = "width";
  BoundingBoxDimension["height"] = "height";
  BoundingBoxDimension["left"] = "left";
  BoundingBoxDimension["right"] = "right";
  BoundingBoxDimension["top"] = "top";
  BoundingBoxDimension["bottom"] = "bottom";
})(BoundingBoxDimension || (BoundingBoxDimension = {}));

var measureWithoutTransform = function (element) {
  var transform$$1 = element.style.transform;
  element.style.transform = '';
  var bbox = element.getBoundingClientRect();
  element.style.transform = transform$$1;
  return bbox;
};

var resolveProp = function (target, props) {
  return typeof target === 'function' ? target(props) : target;
};

var interpolate = _popmotion.transform.interpolate;

var singleAxisPointer = function (axis) {
  return function (from) {
    var _a;

    return (0, _popmotion.pointer)((_a = {}, _a[axis] = typeof from === 'string' ? parseFloat(from) : from, _a)).pipe(function (v) {
      return v[axis];
    });
  };
};

var pointerX =
/*#__PURE__*/
singleAxisPointer('x');
var pointerY =
/*#__PURE__*/
singleAxisPointer('y');

var createPointer = function (axisPointerCreator, min, max, measurement) {
  return function (transitionProps) {
    var from = transitionProps.from,
        type = transitionProps.type,
        dimensions = transitionProps.dimensions,
        dragBounds = transitionProps.dragBounds;
    var axisPointer = axisPointerCreator(dimensions.measurementAsPixels(measurement, from, type));
    var transformQueue = [];

    if (dragBounds) {
      var resolvedDragBounds_1 = resolveProp(dragBounds, transitionProps);

      if (resolvedDragBounds_1[min] !== undefined) {
        transformQueue.push(function (v) {
          return Math.max(v, dimensions.measurementAsPixels(measurement, resolvedDragBounds_1[min], type));
        });
      }

      if (resolvedDragBounds_1[max] !== undefined) {
        transformQueue.push(function (v) {
          return Math.min(v, dimensions.measurementAsPixels(measurement, resolvedDragBounds_1[max], type));
        });
      }
    }

    if (type === _styleValueTypes.percent) {
      transformQueue.push(interpolate([0, dimensions.get(measurement)], [0, 100], {
        clamp: false
      }), function (v) {
        return v + '%';
      });
    }

    return transformQueue.length ? axisPointer.pipe.apply(axisPointer, transformQueue) : axisPointer;
  };
};

var just = function (from) {
  return (0, _popmotion.action)(function (_a) {
    var update = _a.update,
        complete = _a.complete;
    update(from);
    complete();
  });
};

var underDampedSpring = function (_a) {
  var from = _a.from,
      velocity = _a.velocity,
      to = _a.to;
  return (0, _popmotion.spring)({
    from: from,
    to: to,
    velocity: velocity,
    stiffness: 500,
    damping: 25,
    restDelta: 0.5,
    restSpeed: 10
  });
};

var overDampedSpring = function (_a) {
  var from = _a.from,
      velocity = _a.velocity,
      to = _a.to;
  return (0, _popmotion.spring)({
    from: from,
    to: to,
    velocity: velocity,
    stiffness: 700,
    damping: to === 0 ? 100 : 35
  });
};

var linearTween = function (_a) {
  var from = _a.from,
      to = _a.to;
  return (0, _popmotion.tween)({
    from: from,
    to: to,
    ease: _easing.linear
  });
};

var intelligentTransition = {
  x: underDampedSpring,
  y: underDampedSpring,
  z: underDampedSpring,
  rotate: underDampedSpring,
  rotateX: underDampedSpring,
  rotateY: underDampedSpring,
  rotateZ: underDampedSpring,
  scaleX: overDampedSpring,
  scaleY: overDampedSpring,
  scale: overDampedSpring,
  opacity: linearTween,
  default: _popmotion.tween
};

var dragAction =
/*#__PURE__*/
__assign({}, intelligentTransition, {
  x:
  /*#__PURE__*/
  createPointer(pointerX, 'left', 'right', BoundingBoxDimension.width),
  y:
  /*#__PURE__*/
  createPointer(pointerY, 'top', 'bottom', BoundingBoxDimension.height)
});

var justAxis = function (_a) {
  var from = _a.from;
  return just(from);
};

var intelligentDragEnd =
/*#__PURE__*/
__assign({}, intelligentTransition, {
  x: justAxis,
  y: justAxis
});

var defaultTransitions =
/*#__PURE__*/
new Map([['default', intelligentTransition], ['drag', dragAction], ['dragEnd', intelligentDragEnd]]);
var animationLookup = {
  tween: _popmotion.tween,
  spring: _popmotion.spring,
  decay: _popmotion.decay,
  keyframes: _popmotion.keyframes,
  physics: _popmotion.physics
};
var easingLookup = {
  linear: _easing.linear,
  easeIn: _easing.easeIn,
  easeOut: _easing.easeOut,
  easeInOut: _easing.easeInOut,
  circIn: _easing.circIn,
  circOut: _easing.circOut,
  circInOut: _easing.circInOut,
  backIn: _easing.backIn,
  backOut: _easing.backOut,
  backInOut: _easing.backInOut,
  anticipate: _easing.anticipate
};
var auto = {
  test: function (v) {
    return v === 'auto';
  },
  parse: function (v) {
    return v;
  }
};
var valueTypeTests = [_styleValueTypes.number, _styleValueTypes.degrees, _styleValueTypes.percent, _styleValueTypes.px, _styleValueTypes.vw, _styleValueTypes.vh, auto];

var testValueType = function (v) {
  return function (type) {
    return type.test(v);
  };
};

var getValueType = function (v) {
  return valueTypeTests.find(testValueType(v));
};

var createPassiveValue = function (init, parent, transform$$1) {
  var raw = (0, _popmotion.value)(transform$$1(init));
  parent.raw.subscribe(function (v) {
    return raw.update(transform$$1(v));
  });
  return {
    raw: raw
  };
};

var createValue = function (init) {
  var type = getValueType(init);
  var raw = (0, _popmotion.value)(init);
  return {
    raw: raw,
    type: type
  };
};

var addActionDelay = function (delay$$1, transition) {
  if (delay$$1 === void 0) {
    delay$$1 = 0;
  }

  return (0, _popmotion.chain)((0, _popmotion.delay)(delay$$1), transition);
};

var isCubicBezierArgs = function (args) {
  return typeof args[0] === 'number';
};

var getAction = function (v, _a, _b) {
  var from = _b.from,
      to = _b.to,
      velocity = _b.velocity;

  var _c = _a.type,
      type = _c === void 0 ? 'tween' : _c,
      definedEase = _a.ease,
      def = __rest(_a, ["type", "ease"]);

  (0, _heyListen.invariant)(animationLookup[type] !== undefined, "Invalid transition type '" + type + "'. Valid transition types are: tween, spring, decay, physics and keyframes.");
  var ease;

  if (type === 'tween') {
    if (typeof definedEase !== 'function') {
      if (typeof definedEase === 'string') {
        (0, _heyListen.invariant)(easingLookup[definedEase] !== undefined, "Invalid easing type '" + definedEase + "'. popmotion.io/pose/api/config");
        ease = easingLookup[definedEase];
      } else if (Array.isArray(definedEase) && isCubicBezierArgs(definedEase)) {
        (0, _heyListen.invariant)(definedEase.length === 4, "Cubic bezier arrays must contain four numerical values.");
        var x1 = definedEase[0],
            y1 = definedEase[1],
            x2 = definedEase[2],
            y2 = definedEase[3];
        ease = (0, _easing.cubicBezier)(x1, y1, x2, y2);
      }
    }
  }

  ease = ease || definedEase;
  var baseProps = type !== 'keyframes' ? {
    from: from,
    to: to,
    velocity: velocity,
    ease: ease
  } : {
    ease: ease
  };
  return animationLookup[type](__assign({}, baseProps, def));
};

var isAction = function (action$$1) {
  return typeof action$$1.start !== 'undefined';
};

var pose = function (_a) {
  var transformPose = _a.transformPose,
      addListenerToValue = _a.addListenerToValue,
      extendAPI = _a.extendAPI,
      readValueFromSource = _a.readValueFromSource,
      posePriority = _a.posePriority,
      setValueNative = _a.setValueNative;
  return (0, _poseCore.default)({
    bindOnChange: function (values, onChange) {
      return function (key) {
        if (!values.has(key)) return;
        var raw = values.get(key).raw;
        raw.subscribe(onChange[key]);
      };
    },
    readValue: function (_a) {
      var raw = _a.raw;
      return raw.get();
    },
    setValue: function (_a, to) {
      var raw = _a.raw;
      return raw.update(to);
    },
    createValue: function (init, key, _a, _b) {
      var elementStyler = _a.elementStyler;

      var _c = _b === void 0 ? {} : _b,
          passiveParent = _c.passiveParent,
          passiveProps = _c.passiveProps;

      var val = passiveParent ? createPassiveValue(init, passiveParent, passiveProps) : createValue(init);
      val.raw.subscribe(addListenerToValue(key, elementStyler));
      return val;
    },
    convertValue: function (raw, key, _a) {
      var elementStyler = _a.elementStyler;
      raw.subscribe(addListenerToValue(key, elementStyler));
      return {
        raw: raw,
        type: getValueType(raw.get())
      };
    },
    getTransitionProps: function (_a, to) {
      var raw = _a.raw,
          type = _a.type;
      return {
        from: raw.get(),
        velocity: raw.getVelocity(),
        to: to,
        type: type
      };
    },
    resolveTarget: function (_, to) {
      return to;
    },
    selectValueToRead: function (_a) {
      var raw = _a.raw;
      return raw;
    },
    startAction: function (_a, action$$1, complete) {
      var raw = _a.raw;
      var reaction = {
        update: function (v) {
          return raw.update(v);
        },
        complete: complete
      };
      return action$$1.start(reaction);
    },
    stopAction: function (action$$1) {
      return action$$1.stop();
    },
    getInstantTransition: function (_, _a) {
      var to = _a.to;
      return just(to);
    },
    convertTransitionDefinition: function (val, def, props) {
      if (isAction(def)) return def;

      var delay$$1 = def.delay,
          min = def.min,
          max = def.max,
          round = def.round,
          remainingDef = __rest(def, ["delay", "min", "max", "round"]);

      var action$$1 = getAction(val, remainingDef, props);
      var outputPipe = [];
      if (delay$$1) action$$1 = addActionDelay(delay$$1, action$$1);
      if (min !== undefined) outputPipe.push(function (v) {
        return Math.max(v, min);
      });
      if (max !== undefined) outputPipe.push(function (v) {
        return Math.min(v, max);
      });
      if (round) outputPipe.push(Math.round);
      return outputPipe.length ? action$$1.pipe.apply(action$$1, outputPipe) : action$$1;
    },
    setValueNative: setValueNative,
    addActionDelay: addActionDelay,
    defaultTransitions: defaultTransitions,
    transformPose: transformPose,
    readValueFromSource: readValueFromSource,
    posePriority: posePriority,
    extendAPI: extendAPI
  });
};

var createDimensions = function (element) {
  var hasMeasured = false;
  var current = {
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    bottom: 0,
    right: 0
  };
  return {
    get: function (measurement) {
      return measurement ? current[measurement] : current;
    },
    measure: function () {
      current = element.getBoundingClientRect();
      hasMeasured = true;
      return current;
    },
    measurementAsPixels: function (measurement, value$$1, type) {
      return type === _styleValueTypes.percent ? (typeof value$$1 === 'string' ? parseFloat(value$$1) : value$$1) / 100 * current[measurement] : value$$1;
    },
    has: function () {
      return hasMeasured;
    }
  };
};

var makeUIEventApplicator = function (_a) {
  var startEvents = _a.startEvents,
      endEvents = _a.endEvents,
      startPose = _a.startPose,
      endPose = _a.endPose,
      startCallback = _a.startCallback,
      endCallback = _a.endCallback,
      useDocumentToEnd = _a.useDocumentToEnd,
      preventScroll = _a.preventScroll;
  return function (element, activeActions, poser, config) {
    var startListener = startPose + 'Start';
    var endListener = startPose + 'End';
    var moveListener = startPose + 'Move';

    if (preventScroll) {
      var touchMoveListener = (0, _popmotion.listen)(element, 'touchmove', {
        passive: false
      }).start(function (e) {
        e.preventDefault();
      });
      activeActions.set(moveListener, touchMoveListener);
    }

    var eventStartListener = (0, _popmotion.listen)(element, startEvents).start(function (startEvent) {
      poser.unset(endPose);
      poser.set(startPose);
      if (startCallback && config[startCallback]) config[startCallback](startEvent);
      var eventEndListener = (0, _popmotion.listen)(useDocumentToEnd ? document.documentElement : element, endEvents + (useDocumentToEnd ? ' mouseenter' : '')).start(function (endEvent) {
        if (useDocumentToEnd && endEvent.type === 'mouseenter' && endEvent.buttons === 1) {
          return;
        }

        activeActions.get(endListener).stop();
        poser.unset(startPose);
        poser.set(endPose);
        if (endCallback && config[endCallback]) config[endCallback](endEvent);
      });
      activeActions.set(endListener, eventEndListener);
    });
    activeActions.set(startListener, eventStartListener);
  };
};

var events = {
  draggable:
  /*#__PURE__*/
  makeUIEventApplicator({
    startEvents: 'mousedown touchstart',
    endEvents: 'mouseup touchend',
    startPose: 'drag',
    endPose: 'dragEnd',
    startCallback: 'onDragStart',
    endCallback: 'onDragEnd',
    useDocumentToEnd: true,
    preventScroll: true
  }),
  hoverable:
  /*#__PURE__*/
  makeUIEventApplicator({
    startEvents: 'mouseenter',
    endEvents: 'mouseleave',
    startPose: 'hover',
    endPose: 'hoverEnd'
  }),
  focusable:
  /*#__PURE__*/
  makeUIEventApplicator({
    startEvents: 'focus',
    endEvents: 'blur',
    startPose: 'focus',
    endPose: 'blur'
  }),
  pressable:
  /*#__PURE__*/
  makeUIEventApplicator({
    startEvents: 'mousedown touchstart',
    endEvents: 'mouseup touchend',
    startPose: 'press',
    endPose: 'pressEnd',
    startCallback: 'onPressStart',
    endCallback: 'onPressEnd',
    useDocumentToEnd: true
  })
};
var eventKeys =
/*#__PURE__*/
Object.keys(events);

var appendEventListeners = function (element, activeActions, poser, _a) {
  var props = _a.props;
  return eventKeys.forEach(function (key) {
    if (props[key]) events[key](element, activeActions, poser, props);
  });
};

var ORIGIN_START = 0;
var ORIGIN_CENTER = '50%';
var ORIGIN_END = '100%';

var findCenter = function (_a) {
  var top = _a.top,
      right = _a.right,
      bottom = _a.bottom,
      left = _a.left;
  return {
    x: (left + right) / 2,
    y: (top + bottom) / 2
  };
};

var positionalProps = ['width', 'height', 'top', 'left', 'bottom', 'right'];
var positionalPropsDict =
/*#__PURE__*/
new Set(positionalProps);

var checkPositionalProp = function (key) {
  return positionalPropsDict.has(key);
};

var hasPositionalProps = function (pose) {
  return Object.keys(pose).some(checkPositionalProp);
};

var isFlipPose = function (flip, key, state) {
  return state.props.element instanceof HTMLElement && (flip === true || key === 'flip');
};

var setValue = function (_a, key, to) {
  var values = _a.values,
      props = _a.props;

  if (values.has(key)) {
    var raw = values.get(key).raw;
    raw.update(to);
    raw.update(to);
  } else {
    values.set(key, {
      raw: (0, _popmotion.value)(to, function (v) {
        return props.elementStyler.set(key, v);
      })
    });
  }
};

var explicitlyFlipPose = function (state, nextPose) {
  var _a = state.props,
      dimensions = _a.dimensions,
      elementStyler = _a.elementStyler;
  dimensions.measure();

  var width = nextPose.width,
      height = nextPose.height,
      top = nextPose.top,
      left = nextPose.left,
      bottom = nextPose.bottom,
      right = nextPose.right,
      position = nextPose.position,
      remainingPose = __rest(nextPose, ["width", "height", "top", "left", "bottom", "right", "position"]);

  var propsToSet = positionalProps.concat('position').reduce(function (acc, key) {
    if (nextPose[key] !== undefined) {
      acc[key] = resolveProp(nextPose[key], state.props);
    }

    return acc;
  }, {});
  elementStyler.set(propsToSet).render();
  return implicitlyFlipPose(state, remainingPose);
};

var implicitlyFlipPose = function (state, nextPose) {
  var _a = state.props,
      dimensions = _a.dimensions,
      element = _a.element,
      elementStyler = _a.elementStyler;
  if (!dimensions.has()) return {};
  var prev = dimensions.get();
  var next = measureWithoutTransform(element);
  var originX = prev.left === next.left ? ORIGIN_START : prev.right === next.right ? ORIGIN_END : ORIGIN_CENTER;
  var originY = prev.top === next.top ? ORIGIN_START : prev.bottom === next.bottom ? ORIGIN_END : ORIGIN_CENTER;
  elementStyler.set({
    originX: originX,
    originY: originY
  });

  if (prev.width !== next.width) {
    setValue(state, 'scaleX', prev.width / next.width);
    nextPose.scaleX = 1;
  }

  if (prev.height !== next.height) {
    setValue(state, 'scaleY', prev.height / next.height);
    nextPose.scaleY = 1;
  }

  var prevCenter = findCenter(prev);
  var nextCenter = findCenter(next);

  if (originX === ORIGIN_CENTER) {
    setValue(state, 'x', prevCenter.x - nextCenter.x);
    nextPose.x = 0;
  }

  if (originY === ORIGIN_CENTER) {
    setValue(state, 'y', prevCenter.y - nextCenter.y);
    nextPose.y = 0;
  }

  elementStyler.render();
  return nextPose;
};

var flipPose = function (props, nextPose) {
  return hasPositionalProps(nextPose) ? explicitlyFlipPose(props, nextPose) : implicitlyFlipPose(props, nextPose);
};

var getPosFromMatrix = function (matrix, pos) {
  return parseFloat(matrix.split(', ')[pos]);
};

var getTranslateFromMatrix = function (pos2, pos3) {
  return function (element, bbox, _a) {
    var transform$$1 = _a.transform;
    if (transform$$1 === 'none') return 0;
    var matrix3d = transform$$1.match(/^matrix3d\((.+)\)$/);
    if (matrix3d) return getPosFromMatrix(matrix3d[1], pos3);
    return getPosFromMatrix(transform$$1.match(/^matrix\((.+)\)$/)[1], pos2);
  };
};

var positionalValues = {
  width: function (element, _a) {
    var width = _a.width;
    return width;
  },
  height: function (element, _a) {
    var height = _a.height;
    return height;
  },
  top: function (element, bbox, _a) {
    var top = _a.top;
    return parseFloat(top);
  },
  left: function (element, bbox, _a) {
    var left = _a.left;
    return parseFloat(left);
  },
  bottom: function (element, _a, _b) {
    var height = _a.height;
    var top = _b.top;
    return parseFloat(top) + height;
  },
  right: function (element, _a, _b) {
    var width = _a.width;
    var left = _b.left;
    return parseFloat(left) + width;
  },
  x:
  /*#__PURE__*/
  getTranslateFromMatrix(4, 13),
  y:
  /*#__PURE__*/
  getTranslateFromMatrix(5, 14)
};

var isPositionalKey = function (v) {
  return positionalValues[v] !== undefined;
};

var isPositional = function (pose) {
  return Object.keys(pose).some(isPositionalKey);
};

var convertPositionalUnits = function (state, nextPose) {
  var values = state.values,
      props = state.props;
  var element = props.element,
      elementStyler = props.elementStyler;
  var positionalPoseKeys = Object.keys(nextPose).filter(isPositionalKey);
  var changedPositionalKeys = [];
  var elementComputedStyle = getComputedStyle(element);
  var applyAtEndHasBeenCopied = false;
  positionalPoseKeys.forEach(function (key) {
    var value$$1 = values.get(key);
    var fromValueType = getValueType(value$$1.raw.get());
    var to = resolveProp(nextPose[key], props);
    var toValueType = getValueType(to);

    if (fromValueType !== toValueType) {
      changedPositionalKeys.push(key);

      if (!applyAtEndHasBeenCopied) {
        applyAtEndHasBeenCopied = true;
        nextPose.applyAtEnd = nextPose.applyAtEnd ? __assign({}, nextPose.applyAtEnd) : {};
      }

      nextPose.applyAtEnd[key] = nextPose.applyAtEnd[key] || nextPose[key];
      setValue(state, key, to);
    }
  });
  if (!changedPositionalKeys.length) return nextPose;
  var originBbox = element.getBoundingClientRect();
  var top = elementComputedStyle.top,
      left = elementComputedStyle.left,
      bottom = elementComputedStyle.bottom,
      right = elementComputedStyle.right,
      transform$$1 = elementComputedStyle.transform;
  var originComputedStyle = {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    transform: transform$$1
  };
  elementStyler.render();
  var targetBbox = element.getBoundingClientRect();
  changedPositionalKeys.forEach(function (key) {
    setValue(state, key, positionalValues[key](element, originBbox, originComputedStyle));
    nextPose[key] = positionalValues[key](element, targetBbox, elementComputedStyle);
  });
  elementStyler.render();
  return nextPose;
};

var getCurrent = function (prop) {
  return function (_a) {
    var elementStyler = _a.elementStyler;
    return elementStyler.get(prop);
  };
};

var dragPoses = function (draggable) {
  var drag = {
    preTransition: function (_a) {
      var dimensions = _a.dimensions;
      return dimensions.measure();
    }
  };
  var dragEnd = {};

  if (draggable === true || draggable === 'x') {
    drag.x = dragEnd.x = getCurrent('x');
  }

  if (draggable === true || draggable === 'y') {
    drag.y = dragEnd.y = getCurrent('y');
  }

  return {
    drag: drag,
    dragEnd: dragEnd
  };
};

var createPoseConfig = function (element, _a) {
  var onDragStart = _a.onDragStart,
      onDragEnd = _a.onDragEnd,
      onPressStart = _a.onPressStart,
      onPressEnd = _a.onPressEnd,
      draggable = _a.draggable,
      hoverable = _a.hoverable,
      focusable = _a.focusable,
      pressable = _a.pressable,
      dragBounds = _a.dragBounds,
      config = __rest(_a, ["onDragStart", "onDragEnd", "onPressStart", "onPressEnd", "draggable", "hoverable", "focusable", "pressable", "dragBounds"]);

  var poseConfig = __assign({
    flip: {}
  }, config, {
    props: __assign({}, config.props, {
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      onPressStart: onPressStart,
      onPressEnd: onPressEnd,
      dragBounds: dragBounds,
      draggable: draggable,
      hoverable: hoverable,
      focusable: focusable,
      pressable: pressable,
      element: element,
      elementStyler: (0, _popmotion.styler)(element, {
        preparseOutput: false
      }),
      dimensions: createDimensions(element)
    })
  });

  if (draggable) {
    var _b = dragPoses(draggable),
        drag = _b.drag,
        dragEnd = _b.dragEnd;

    poseConfig.drag = __assign({}, drag, poseConfig.drag);
    poseConfig.dragEnd = __assign({}, dragEnd, poseConfig.dragEnd);
  }

  return poseConfig;
};

var domPose =
/*#__PURE__*/
pose({
  posePriority: ['drag', 'press', 'focus', 'hover'],
  transformPose: function (_a, name, state) {
    var flip = _a.flip,
        pose$$1 = __rest(_a, ["flip"]);

    if (isFlipPose(flip, name, state)) {
      return flipPose(state, pose$$1);
    } else if (isPositional(pose$$1)) {
      return convertPositionalUnits(state, pose$$1);
    }

    return pose$$1;
  },
  forceRender: function (_a) {
    var elementStyler = _a.elementStyler;
    elementStyler.render();
  },
  addListenerToValue: function (key, elementStyler) {
    return function (v) {
      return elementStyler.set(key, v);
    };
  },
  readValueFromSource: function (key, _a) {
    var elementStyler = _a.elementStyler,
        dragBounds = _a.dragBounds;
    var value$$1 = elementStyler.get(key);

    if (dragBounds && (key === 'x' || key === 'y')) {
      var bound = key === 'x' ? dragBounds.left || dragBounds.right : dragBounds.top || dragBounds.bottom;

      if (bound) {
        var boundType = getValueType(bound);
        value$$1 = boundType.transform(value$$1);
      }
    }

    return isNaN(value$$1) ? value$$1 : parseFloat(value$$1);
  },
  setValueNative: function (key, to, _a) {
    var elementStyler = _a.elementStyler;
    return elementStyler.set(key, to);
  },
  extendAPI: function (api, _a, config) {
    var props = _a.props,
        activeActions = _a.activeActions;
    var measure = props.dimensions.measure;

    var poserApi = __assign({}, api, {
      addChild: function (element, childConfig) {
        return api._addChild(createPoseConfig(element, childConfig), domPose);
      },
      measure: measure,
      flip: function (op) {
        if (op) {
          measure();
          op();
        }

        return api.set('flip');
      }
    });

    props.elementStyler.render();
    appendEventListeners(props.element, activeActions, poserApi, config);
    return poserApi;
  }
});

var domPose$1 = function (element, config) {
  return domPose(createPoseConfig(element, config));
};

var _default = domPose$1;
exports.default = _default;
},{"popmotion":"../node_modules/popmotion/dist/popmotion.es.js","@popmotion/easing":"../node_modules/@popmotion/easing/dist/easing.es.js","style-value-types":"../node_modules/style-value-types/dist/style-value-types.es.js","pose-core":"../node_modules/pose-core/dist/pose-core.es.js","hey-listen":"../node_modules/hey-listen/dist/hey-listen.es.js"}],"../node_modules/@emotion/memoize/dist/memoize.browser.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var _default = memoize;
exports.default = _default;
},{}],"../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _memoize = _interopRequireDefault(require("@emotion/memoize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var index = (0, _memoize.default)(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);
var _default = index;
exports.default = _default;
},{"@emotion/memoize":"../node_modules/@emotion/memoize/dist/memoize.browser.esm.js"}],"../node_modules/react-pose/dist/react-pose.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PoseGroup = exports.Transition = exports.default = void 0;

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _popmotionPose = _interopRequireDefault(require("popmotion-pose"));

var _isPropValid = _interopRequireDefault(require("@emotion/is-prop-valid"));

var _heyListen = require("hey-listen");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var hasChanged = function (prev, next) {
  if (prev === next) return false;
  var prevIsArray = Array.isArray(prev);
  var nextIsArray = Array.isArray(next);

  if (prevIsArray !== nextIsArray || !prevIsArray && !nextIsArray) {
    return true;
  } else if (prevIsArray && nextIsArray) {
    var numPrev = prev.length;
    var numNext = next.length;
    if (numPrev !== numNext) return true;

    for (var i = 0; i < numPrev; i++) {
      if (prev[i] !== next[i]) return true;
    }
  }

  return false;
};

var pickAssign = function (shouldPick, sources) {
  return sources.reduce(function (picked, source) {
    for (var key in source) {
      if (shouldPick(key)) {
        picked[key] = source[key];
      }
    }

    return picked;
  }, {});
};

var _a = (0, _react.createContext)({}),
    PoseParentConsumer = _a.Consumer,
    PoseParentProvider = _a.Provider;

var calcPopFromFlowStyle = function (el) {
  var offsetTop = el.offsetTop,
      offsetLeft = el.offsetLeft,
      offsetWidth = el.offsetWidth,
      offsetHeight = el.offsetHeight;
  return {
    position: 'absolute',
    top: offsetTop,
    left: offsetLeft,
    width: offsetWidth,
    height: offsetHeight
  };
};

var hasPose = function (pose, key) {
  return Array.isArray(pose) ? pose.indexOf(key) !== -1 : pose === key;
};

var objectToMap = function (obj) {
  return Object.keys(obj).reduce(function (map, key) {
    map.set(key, {
      raw: obj[key]
    });
    return map;
  }, new Map());
};

var testAlwaysTrue = function () {
  return true;
};

var filterProps = function (_a) {
  var elementType = _a.elementType,
      poseConfig = _a.poseConfig,
      onValueChange = _a.onValueChange,
      innerRef = _a.innerRef,
      _pose = _a._pose,
      pose = _a.pose,
      initialPose = _a.initialPose,
      poseKey = _a.poseKey,
      onPoseComplete = _a.onPoseComplete,
      getParentPoseConfig = _a.getParentPoseConfig,
      registerChild = _a.registerChild,
      onUnmount = _a.onUnmount,
      getInitialPoseFromParent = _a.getInitialPoseFromParent,
      popFromFlow = _a.popFromFlow,
      values = _a.values,
      parentValues = _a.parentValues,
      onDragStart = _a.onDragStart,
      onDragEnd = _a.onDragEnd,
      onPressStart = _a.onPressStart,
      onPressEnd = _a.onPressEnd,
      props = (0, _tslib.__rest)(_a, ["elementType", "poseConfig", "onValueChange", "innerRef", "_pose", "pose", "initialPose", "poseKey", "onPoseComplete", "getParentPoseConfig", "registerChild", "onUnmount", "getInitialPoseFromParent", "popFromFlow", "values", "parentValues", "onDragStart", "onDragEnd", "onPressStart", "onPressEnd"]);
  return props;
};

var PoseElement = function (_super) {
  (0, _tslib.__extends)(PoseElement, _super);

  function PoseElement(props) {
    var _this = _super.call(this, props) || this;

    _this.children = new Set();
    _this.childrenHandlers = {
      registerChild: function (props) {
        _this.children.add(props);

        if (_this.poser) _this.flushChildren();
      },
      onUnmount: function (child) {
        return _this.poser.removeChild(child);
      },
      getParentPoseConfig: function () {
        return _this.poseConfig;
      },
      getInitialPoseFromParent: function () {
        return _this.getInitialPose();
      }
    };

    _this.setRef = function (ref) {
      (0, _heyListen.warning)(ref === null || ref instanceof Element && _this.ref === undefined, 'ref must be provided to the same DOM component for the entire lifecycle of a posed component.');
      _this.ref = ref;
      var innerRef = _this.props.innerRef;
      if (!innerRef) return;

      if (typeof innerRef === 'function') {
        innerRef(ref);
      } else {
        innerRef.current = ref;
      }
    };

    _this.shouldForwardProp = typeof _this.props.elementType === 'string' ? _isPropValid.default : testAlwaysTrue;
    var poseConfig = _this.props.poseConfig;
    _this.poseConfig = typeof poseConfig === 'function' ? poseConfig(filterProps(props)) : poseConfig;
    return _this;
  }

  PoseElement.prototype.getInitialPose = function () {
    var _a = this.props,
        getInitialPoseFromParent = _a.getInitialPoseFromParent,
        pose = _a.pose,
        _pose = _a._pose,
        initialPose = _a.initialPose;

    if (initialPose) {
      return initialPose;
    } else {
      var parentPose = getInitialPoseFromParent && getInitialPoseFromParent();
      var initialPoses = (Array.isArray(parentPose) ? parentPose : [parentPose]).concat(pose, _pose).filter(Boolean);
      return initialPoses.length > 0 ? initialPoses : undefined;
    }
  };

  PoseElement.prototype.getFirstPose = function () {
    var _a = this.props,
        initialPose = _a.initialPose,
        pose = _a.pose,
        _pose = _a._pose;
    if (!initialPose) return;
    var firstPose = (Array.isArray(pose) ? pose : [pose]).concat(_pose).filter(Boolean);
    return firstPose.length === 1 ? firstPose[0] : firstPose;
  };

  PoseElement.prototype.getSetProps = function () {
    var props = filterProps(this.props);

    if (this.props.popFromFlow && this.ref && this.ref instanceof HTMLElement) {
      if (!this.popStyle) {
        props.style = (0, _tslib.__assign)({}, props.style, calcPopFromFlowStyle(this.ref));
        this.popStyle = props.style;
      } else {
        props.style = this.popStyle;
      }
    } else {
      this.popStyle = null;
    }

    return props;
  };

  PoseElement.prototype.componentDidMount = function () {
    var _this = this;

    (0, _heyListen.invariant)(this.ref instanceof Element, "No valid DOM ref found. If you're converting an existing component via posed(Component), you must ensure you're passing the ref to the host DOM node via the React.forwardRef function.");
    var _a = this.props,
        onValueChange = _a.onValueChange,
        registerChild = _a.registerChild,
        values = _a.values,
        parentValues = _a.parentValues,
        onDragStart = _a.onDragStart,
        onDragEnd = _a.onDragEnd,
        onPressStart = _a.onPressStart,
        onPressEnd = _a.onPressEnd;
    var config = (0, _tslib.__assign)({}, this.poseConfig, {
      initialPose: this.getInitialPose(),
      values: values || this.poseConfig.values,
      parentValues: parentValues ? objectToMap(parentValues) : undefined,
      props: this.getSetProps(),
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      onPressStart: onPressStart,
      onPressEnd: onPressEnd,
      onChange: onValueChange
    });

    if (!registerChild) {
      this.initPoser((0, _popmotionPose.default)(this.ref, config));
    } else {
      registerChild({
        element: this.ref,
        poseConfig: config,
        onRegistered: function (poser) {
          return _this.initPoser(poser);
        }
      });
    }
  };

  PoseElement.prototype.getSnapshotBeforeUpdate = function () {
    var _a = this.props,
        pose = _a.pose,
        _pose = _a._pose;
    if (hasPose(pose, 'flip') || hasPose(_pose, 'flip')) this.poser.measure();
    return null;
  };

  PoseElement.prototype.componentDidUpdate = function (prevProps) {
    var _a = this.props,
        pose = _a.pose,
        _pose = _a._pose,
        poseKey = _a.poseKey;
    this.poser.setProps(this.getSetProps());

    if (poseKey !== prevProps.poseKey || hasChanged(prevProps.pose, pose) || pose === 'flip') {
      this.setPose(pose);
    }

    if (_pose !== prevProps._pose || _pose === 'flip') this.setPose(_pose);
  };

  PoseElement.prototype.componentWillUnmount = function () {
    if (!this.poser) return;
    var onUnmount = this.props.onUnmount;
    if (onUnmount) onUnmount(this.poser);
    this.poser.destroy();
  };

  PoseElement.prototype.initPoser = function (poser) {
    this.poser = poser;
    this.flushChildren();
    var firstPose = this.getFirstPose();
    if (firstPose) this.setPose(firstPose);
  };

  PoseElement.prototype.setPose = function (pose) {
    var _this = this;

    var onPoseComplete = this.props.onPoseComplete;
    var poseList = Array.isArray(pose) ? pose : [pose];
    Promise.all(poseList.map(function (key) {
      return key && _this.poser.set(key);
    })).then(function () {
      return onPoseComplete && onPoseComplete(pose);
    });
  };

  PoseElement.prototype.flushChildren = function () {
    var _this = this;

    this.children.forEach(function (_a) {
      var element = _a.element,
          poseConfig = _a.poseConfig,
          onRegistered = _a.onRegistered;
      return onRegistered(_this.poser.addChild(element, poseConfig));
    });
    this.children.clear();
  };

  PoseElement.prototype.render = function () {
    var elementType = this.props.elementType;
    return _react.default.createElement(PoseParentProvider, {
      value: this.childrenHandlers
    }, (0, _react.createElement)(elementType, pickAssign(this.shouldForwardProp, [this.getSetProps(), {
      ref: this.setRef
    }])));
  };

  return PoseElement;
}(_react.PureComponent);

var supportedElements = ['a', 'article', 'aside', 'audio', 'b', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dialog', 'div', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'i', 'iframe', 'img', 'input', 'label', 'legend', 'li', 'nav', 'object', 'ol', 'option', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'section', 'select', 'span', 'strong', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'ul', 'video', 'circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];
var componentCache = new Map();

var createComponentFactory = function (key) {
  var componentFactory = function (poseConfig) {
    if (poseConfig === void 0) {
      poseConfig = {};
    }

    return (0, _react.forwardRef)(function (_a, ref) {
      var _b = _a.withParent,
          withParent = _b === void 0 ? true : _b,
          props = (0, _tslib.__rest)(_a, ["withParent"]);
      (0, _heyListen.warning)(props.innerRef === undefined, 'innerRef is deprecated. Please use ref instead.');
      return !withParent || props.parentValues ? _react.default.createElement(PoseElement, (0, _tslib.__assign)({
        poseConfig: poseConfig,
        innerRef: ref,
        elementType: key
      }, props)) : _react.default.createElement(PoseParentConsumer, null, function (parentCtx) {
        return _react.default.createElement(PoseElement, (0, _tslib.__assign)({
          poseConfig: poseConfig,
          elementType: key,
          innerRef: ref
        }, props, parentCtx));
      });
    });
  };

  componentCache.set(key, componentFactory);
  return componentFactory;
};

var getComponentFactory = function (key) {
  return componentCache.has(key) ? componentCache.get(key) : createComponentFactory(key);
};

var posed = function (component) {
  return getComponentFactory(component);
};

supportedElements.reduce(function (acc, key) {
  acc[key] = createComponentFactory(key);
  return acc;
}, posed);

var getKey = function (child) {
  (0, _heyListen.invariant)(child && child.key !== null, 'Every child of Transition must be given a unique key');
  var childKey = typeof child.key === 'number' ? child.key.toString() : child.key;
  return childKey.replace('.$', '');
};

var prependProps = function (element, props) {
  return (0, _react.createElement)(element.type, (0, _tslib.__assign)({
    key: element.key,
    ref: element.ref
  }, props, element.props));
};

var handleTransition = function (_a, _b) {
  var displayedChildren = _b.displayedChildren,
      finishedLeaving = _b.finishedLeaving,
      hasInitialized = _b.hasInitialized,
      indexedChildren = _b.indexedChildren,
      scheduleChildRemoval = _b.scheduleChildRemoval;
  var incomingChildren = _a.children,
      preEnterPose = _a.preEnterPose,
      enterPose = _a.enterPose,
      exitPose = _a.exitPose,
      animateOnMount = _a.animateOnMount,
      enterAfterExit = _a.enterAfterExit,
      flipMove = _a.flipMove,
      onRest = _a.onRest,
      propsForChildren = (0, _tslib.__rest)(_a, ["children", "preEnterPose", "enterPose", "exitPose", "animateOnMount", "enterAfterExit", "flipMove", "onRest"]);
  var targetChildren = makeChildList(incomingChildren);
  var nextState = {
    displayedChildren: []
  };

  if ("development" !== 'production') {
    (0, _heyListen.warning)(!propsForChildren.onPoseComplete, "<Transition/> (or <PoseGroup/>) doesn't accept onPoseComplete prop.");
  }

  var prevKeys = displayedChildren.map(getKey);
  var nextKeys = targetChildren.map(getKey);
  var hasPropsForChildren = Object.keys(propsForChildren).length !== 0;
  var entering = new Set(nextKeys.filter(function (key) {
    return finishedLeaving.hasOwnProperty(key) || prevKeys.indexOf(key) === -1;
  }));
  entering.forEach(function (key) {
    return delete finishedLeaving[key];
  });
  var leaving = [];
  var newlyLeaving = {};
  prevKeys.forEach(function (key) {
    if (entering.has(key)) {
      return;
    }

    var isLeaving = finishedLeaving.hasOwnProperty(key);

    if (!isLeaving && nextKeys.indexOf(key) !== -1) {
      return;
    }

    leaving.push(key);

    if (!isLeaving) {
      finishedLeaving[key] = false;
      newlyLeaving[key] = true;
    }
  });
  var moving = new Set(prevKeys.filter(function (key, i) {
    return !entering.has(key) || leaving.indexOf(key) === -1;
  }));
  targetChildren.forEach(function (child) {
    var newChildProps = {};

    if (entering.has(child.key)) {
      if (hasInitialized || animateOnMount) {
        newChildProps.initialPose = preEnterPose;
      }

      newChildProps._pose = enterPose;
    } else if (moving.has(child.key) && flipMove) {
      newChildProps._pose = [enterPose, 'flip'];
    } else {
      newChildProps._pose = enterPose;
    }

    var newChild = (0, _react.cloneElement)(child, newChildProps);
    indexedChildren[child.key] = newChild;
    nextState.displayedChildren.push(hasPropsForChildren ? prependProps(newChild, propsForChildren) : newChild);
  });
  leaving.forEach(function (key) {
    var child = indexedChildren[key];
    var newChild = newlyLeaving[key] ? (0, _react.cloneElement)(child, {
      _pose: exitPose,
      onPoseComplete: function (pose) {
        if (pose === exitPose) scheduleChildRemoval(key);
        var onPoseComplete = child.props.onPoseComplete;
        if (onPoseComplete) onPoseComplete(pose);
      },
      popFromFlow: flipMove
    }) : child;
    var insertionIndex = prevKeys.indexOf(key);
    indexedChildren[child.key] = newChild;
    nextState.displayedChildren.splice(insertionIndex, 0, hasPropsForChildren ? prependProps(newChild, propsForChildren) : newChild);
  });
  return nextState;
};

var handleChildrenTransitions = function (props, state) {
  var newState = handleTransition(props, state);
  newState.hasInitialized = true;
  return newState;
};

var makeChildList = function (children) {
  var list = [];

  _react.Children.forEach(children, function (child) {
    return child && list.push(child);
  });

  return list;
};

var Transition = function (_super) {
  (0, _tslib.__extends)(Transition, _super);

  function Transition() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.state = {
      displayedChildren: [],
      finishedLeaving: {},
      hasInitialized: false,
      indexedChildren: {},
      scheduleChildRemoval: function (key) {
        return _this.removeChild(key);
      }
    };
    return _this;
  }

  Transition.prototype.removeChild = function (key) {
    var _a = this.state,
        displayedChildren = _a.displayedChildren,
        finishedLeaving = _a.finishedLeaving;
    var _b = this.props,
        enterAfterExit = _b.enterAfterExit,
        onRest = _b.onRest;
    if (!finishedLeaving.hasOwnProperty(key)) return;
    finishedLeaving[key] = true;

    if (!Object.keys(finishedLeaving).every(function (leavingKey) {
      return finishedLeaving[leavingKey];
    })) {
      return;
    }

    var targetChildren = displayedChildren.filter(function (child) {
      return !finishedLeaving.hasOwnProperty(child.key);
    });
    var newState = enterAfterExit ? (0, _tslib.__assign)({
      finishedLeaving: {}
    }, handleChildrenTransitions((0, _tslib.__assign)({}, this.props, {
      enterAfterExit: false
    }), (0, _tslib.__assign)({}, this.state, {
      displayedChildren: targetChildren
    }))) : {
      finishedLeaving: {},
      displayedChildren: targetChildren
    };
    this.setState(newState, onRest);
  };

  Transition.prototype.shouldComponentUpdate = function (nextProps, nextState) {
    return this.state !== nextState;
  };

  Transition.prototype.render = function () {
    return this.state.displayedChildren;
  };

  Transition.defaultProps = {
    flipMove: false,
    enterAfterExit: false,
    preEnterPose: 'exit',
    enterPose: 'enter',
    exitPose: 'exit'
  };
  Transition.getDerivedStateFromProps = handleChildrenTransitions;
  return Transition;
}(_react.Component);

exports.Transition = Transition;

var PoseGroup = function (_super) {
  (0, _tslib.__extends)(PoseGroup, _super);

  function PoseGroup() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  PoseGroup.prototype.render = function () {
    return (0, _react.createElement)(Transition, (0, _tslib.__assign)({}, this.props));
  };

  PoseGroup.defaultProps = {
    flipMove: true
  };
  return PoseGroup;
}(_react.Component);

exports.PoseGroup = PoseGroup;
var _default = posed;
exports.default = _default;
},{"tslib":"../node_modules/tslib/tslib.es6.js","react":"../node_modules/react/index.js","popmotion-pose":"../node_modules/popmotion-pose/dist/popmotion-pose.es.js","@emotion/is-prop-valid":"../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js","hey-listen":"../node_modules/hey-listen/dist/hey-listen.es.js"}],"../node_modules/react-rewards/build/index.js":[function(require,module,exports) {
var define;
(function(a,b){'object'==typeof exports&&'object'==typeof module?module.exports=b():'function'==typeof define&&define.amd?define('index',[],b):'object'==typeof exports?exports.index=b():a.index=b()})('undefined'==typeof self?this:self,function(){var a=Math.sin,b=Math.cos,c=Math.PI;return function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={i:d,l:!1,exports:{}};return a[d].call(e.exports,e,e.exports,b),e.l=!0,e.exports}var c={};return b.m=a,b.c=c,b.d=function(a,c,d){b.o(a,c)||Object.defineProperty(a,c,{configurable:!1,enumerable:!0,get:d})},b.n=function(a){var c=a&&a.__esModule?function(){return a['default']}:function(){return a};return b.d(c,'a',c),c},b.o=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)},b.p='./',b(b.s=13)}([function(d,e){'use strict';Object.defineProperty(e,'__esModule',{value:!0});const f=c,g=['#A45BF1','#25C6F6','#72F753','#F76C88','#F5F770'],h=(a,b,c,d,e)=>Array.from({length:b}).map((b,f)=>{const g=document.createElement('span'),h=e[f%e.length];return g.style['background-color']=h,g.style.width=`${c}px`,g.style.height=`${c}px`,g.style.position='absolute',g.style.zIndex=d,a.appendChild(g),g}),i=(a)=>a*(f/180),j=(a,b,c,d)=>{const e=i(a),g=i(b);return{x:0,y:0,wobble:10*d(),velocity:0.5*c+d()*c,angle2D:-e+(0.5*g-d()*g),angle3D:-(f/4)+d()*(f/2),tiltAngle:d()*f}},k=(c,d,e)=>{c.physics.x+=b(c.physics.angle2D)*c.physics.velocity,c.physics.y+=a(c.physics.angle2D)*c.physics.velocity,c.physics.z+=a(c.physics.angle3D)*c.physics.velocity,c.physics.wobble+=0.1,c.physics.velocity*=e,c.physics.y+=3,c.physics.tiltAngle+=0.1;var f=c.physics;const g=f.x,h=f.y,i=f.tiltAngle,j=f.wobble,k=g+10*b(j),l=h+10*a(j),m=`translate3d(${k}px, ${l}px, 0) rotate3d(1, 1, 1, ${i}rad)`;c.element.style.transform=m,c.element.style.opacity=1-d},l=(a,b,c,d)=>{const e=d;let f=0;const g=()=>{b.forEach((a)=>k(a,f/e,c)),f+=1,f<e?requestAnimationFrame(g):b.forEach((b)=>{if(b.element.parentNode===a)return a.removeChild(b.element)})};requestAnimationFrame(g)};e['default']=(a,{elementCount:b=50,elementSize:c=8,colors:d=g,angle:e=90,spread:f=45,decay:i=0.9,lifetime:k=200,startVelocity:m=35,zIndex:n=0,random:o=Math.random}={})=>{const p=h(a,b,c,n,d),q=p.map((a)=>({element:a,physics:j(e,f,m,o)}));l(a,q,i,k)}},function(d,e){'use strict';Object.defineProperty(e,'__esModule',{value:!0});const f=c,g=['\uD83D\uDC4D','\uD83D\uDE0A','\uD83C\uDF89'],h=(a,b,c,d,e)=>Array.from({length:b}).map((b,f)=>{const g=document.createElement('span'),h=e[f%e.length];return g.innerHTML=h,g.style.fontSize=`${c}px`,g.style.position='absolute',g.style.zIndex=d,a.appendChild(g),g}),i=(a)=>a*(f/180),j=(a,b,c,d)=>{const e=i(a),g=i(b);return{x:0,y:0,wobble:10*d(),velocity:0.5*c+d()*c,angle2D:-e+(0.5*g-d()*g),angle3D:-(f/4)+d()*(f/2),tiltAngle:d()*f}},k=(c,d,e)=>{c.physics.x+=b(c.physics.angle2D)*c.physics.velocity,c.physics.y+=a(c.physics.angle2D)*c.physics.velocity,c.physics.wobble+=0,c.physics.velocity*=e,c.physics.y+=5,c.physics.tiltAngle+=0.1;var f=c.physics;const g=f.x,h=f.y,i=f.tiltAngle,j=`translate3d(${g+0}px, ${h+0}px, 0) rotate(${i}rad)`;c.element.style.transform=j,c.element.style.opacity=1-d},l=(a,b,c,d)=>{const e=d;let f=0;const g=()=>{b.forEach((a)=>k(a,f/e,c)),f+=1,f<e?requestAnimationFrame(g):b.forEach((b)=>{if(b.element.parentNode===a)return a.removeChild(b.element)})};requestAnimationFrame(g)};e['default']=(a,{angle:b=90,decay:c=0.9,spread:d=45,startVelocity:e=35,elementCount:f=50,elementSize:i=25,lifetime:k=200,zIndex:m=0,emoji:n=g,random:o=Math.random}={})=>{const p=h(a,f,i,m,n),q=p.map((a)=>({element:a,physics:j(b,d,e,o)}));l(a,q,c,k)}},function(a,b,c){'use strict';Object.defineProperty(b,'__esModule',{value:!0});var d=c(3),e=c.n(d),f=c(4),g=c.n(f),h=c(5),i=c.n(h);b['default']=(a)=>{e.a.loadAnimation({container:a,renderer:'svg',rendererSettings:{className:'absolutePlayer'},loop:!1,autoplay:!0,animationData:g.a,onComplete:e.a.destroy()})}},function(a){a.exports=require('lottie-web')},function(a){a.exports={v:'5.4.1',fr:29.9700012207031,ip:0,op:75.0000030548126,w:1280,h:800,nm:'Confetti',ddd:0,assets:[{id:'comp_0',layers:[{ddd:0,ind:1,ty:4,nm:'elems Outlines',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[648,408,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[55,55,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0]],v:[[0,-56.517],[65.259,56.517],[-65.26,56.517]],c:!0},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0.96862745098,0.423529411765,0.533333333333,1],e:[0.701960802078,0.070588238537,0.090196080506,1]},{t:45.0000018328876}],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:25,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'tr',p:{a:1,k:[{i:{x:0.196,y:1},o:{x:0,y:0},n:'0p196_1_0_0',t:0,s:[632.987,391.08],e:[285.686,74.119],to:[-57.8834648132324,-52.8268241882324],ti:[57.8834648132324,52.8268241882324]},{t:60.0000024438501}],ix:2},a:{a:0,k:[0,18],ix:1},s:{a:1,k:[{i:{x:[0.833,0.833],y:[0.833,0.833]},o:{x:[1,1],y:[0,0]},n:['0p833_0p833_1_0','0p833_0p833_1_0'],t:0,s:[33.246,33.246],e:[0,0]},{t:60.0000024438501}],ix:3},r:{a:1,k:[{i:{x:[0.529],y:[1]},o:{x:[0.054],y:[0.039]},n:['0p529_1_0p054_0p039'],t:0,s:[0],e:[720]},{t:60.0000024438501}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:2,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-78.593,0],[0.001,-78.593],[78.594,0],[0.001,78.593]],c:!0},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0.643137276173,0.35686275363,0.945098042488,1],e:[0.61960786581,0.243137255311,0.996078431606,1]},{t:45.0000018328876}],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:25,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'tr',p:{a:1,k:[{i:{x:0.196,y:1},o:{x:0,y:0},n:'0p196_1_0_0',t:0,s:[632.987,391.08],e:[629.686,746.119],to:[-0.55013018846512,59.1731758117676],ti:[0.55013018846512,-59.1731758117676]},{t:60.0000024438501}],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:1,k:[{i:{x:[0.833,0.833],y:[0.833,0.833]},o:{x:[1,1],y:[0,0]},n:['0p833_0p833_1_0','0p833_0p833_1_0'],t:0,s:[33.246,33.246],e:[0,0]},{t:60.0000024438501}],ix:3},r:{a:1,k:[{i:{x:[0.529],y:[1]},o:{x:[0.054],y:[0.039]},n:['0p529_1_0p054_0p039'],t:0,s:[0],e:[720]},{t:60.0000024438501}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 3',np:2,cix:2,ix:2,mn:'ADBE Vector Group',hd:!1},{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[24.5,-23.5],[24.5,-81.5],[-23.5,-81.5],[-23.5,-23.5],[-81.5,-23.5],[-81.5,23.5],[-23.5,23.5],[-23.5,81.5],[24.5,81.5],[24.5,23.5],[81.5,23.5],[81.5,-23.5]],c:!0},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0.960784313725,0.96862745098,0.439215686275,1],e:[0.96928614378,0.919638156891,0.541258990765,1]},{t:45.0000018328876}],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:25,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'tr',p:{a:1,k:[{i:{x:0.196,y:1},o:{x:0,y:0},n:'0p196_1_0_0',t:0,s:[632.987,391.08],e:[1013.686,133.119],to:[63.4498710632324,-42.9934883117676],ti:[-63.4498710632324,42.9934883117676]},{t:60.0000024438501}],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:1,k:[{i:{x:[0.833,0.833],y:[0.833,0.833]},o:{x:[1,1],y:[0,0]},n:['0p833_0p833_1_0','0p833_0p833_1_0'],t:0,s:[33.246,33.246],e:[0,0]},{t:60.0000024438501}],ix:3},r:{a:1,k:[{i:{x:[0.529],y:[1]},o:{x:[0.054],y:[0.039]},n:['0p529_1_0p054_0p039'],t:0,s:[0],e:[720]},{t:60.0000024438501}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 5',np:2,cix:2,ix:3,mn:'ADBE Vector Group',hd:!1},{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[-43.406,0],[0,-43.406],[43.406,0],[0,43.406]],o:[[43.406,0],[0,43.406],[-43.406,0],[0,-43.406]],v:[[0,-78.593],[78.593,0],[0,78.593],[-78.593,0]],c:!0},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0.145098039216,0.776470588235,0.964705882353,1],e:[0.196078434587,0.745098054409,0.996078431606,1]},{t:45.0000018328876}],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:25,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'tr',p:{a:1,k:[{i:{x:0.196,y:1},o:{x:0,y:0},n:'0p196_1_0_0',t:0,s:[632.987,391.08],e:[137.686,622.119],to:[-82.5501327514648,38.5065116882324],ti:[82.5501327514648,-38.5065116882324]},{t:60.0000024438501}],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:1,k:[{i:{x:[0.833,0.833],y:[0.833,0.833]},o:{x:[1,1],y:[0,0]},n:['0p833_0p833_1_0','0p833_0p833_1_0'],t:0,s:[33.246,33.246],e:[0,0]},{t:60.0000024438501}],ix:3},r:{a:1,k:[{i:{x:[0.529],y:[1]},o:{x:[0.054],y:[0.039]},n:['0p529_1_0p054_0p039'],t:0,s:[0],e:[720]},{t:60.0000024438501}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 7',np:2,cix:2,ix:4,mn:'ADBE Vector Group',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:2,ty:4,nm:'elems greys',sr:1,ks:{o:{a:0,k:50,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[653,411,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[55,55,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0]],v:[[0,-56.517],[65.259,56.517],[-65.26,56.517]],c:!0},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.903109669685,0.903109669685,0.903109669685,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:25,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'tr',p:{a:1,k:[{i:{x:0.196,y:1},o:{x:0,y:0},n:'0p196_1_0_0',t:0,s:[632.987,391.08],e:[277.686,123.119],to:[-59.216796875,-44.66015625],ti:[59.216796875,44.66015625]},{t:60.0000024438501}],ix:2},a:{a:0,k:[0,18],ix:1},s:{a:1,k:[{i:{x:[0.833,0.833],y:[0.833,0.833]},o:{x:[1,1],y:[0,0]},n:['0p833_0p833_1_0','0p833_0p833_1_0'],t:0,s:[33.246,33.246],e:[0,0]},{t:60.0000024438501}],ix:3},r:{a:1,k:[{i:{x:[0.529],y:[1]},o:{x:[0.054],y:[0.039]},n:['0p529_1_0p054_0p039'],t:0,s:[0],e:[720]},{t:60.0000024438501}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:2,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-78.593,0],[0.001,-78.593],[78.594,0],[0.001,78.593]],c:!0},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.901960790157,0.901960790157,0.901960790157,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:25,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'tr',p:{a:1,k:[{i:{x:0.196,y:1},o:{x:0,y:0},n:'0p196_1_0_0',t:0,s:[632.987,391.08],e:[648.686,706.119],to:[2.61653637886047,52.5065116882324],ti:[-2.61653637886047,-52.5065116882324]},{t:60.0000024438501}],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:1,k:[{i:{x:[0.833,0.833],y:[0.833,0.833]},o:{x:[1,1],y:[0,0]},n:['0p833_0p833_1_0','0p833_0p833_1_0'],t:0,s:[33.246,33.246],e:[0,0]},{t:60.0000024438501}],ix:3},r:{a:1,k:[{i:{x:[0.529],y:[1]},o:{x:[0.054],y:[0.039]},n:['0p529_1_0p054_0p039'],t:0,s:[0],e:[720]},{t:60.0000024438501}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 3',np:2,cix:2,ix:2,mn:'ADBE Vector Group',hd:!1},{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[24.5,-23.5],[24.5,-81.5],[-23.5,-81.5],[-23.5,-23.5],[-81.5,-23.5],[-81.5,23.5],[-23.5,23.5],[-23.5,81.5],[24.5,81.5],[24.5,23.5],[81.5,23.5],[81.5,-23.5]],c:!0},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.901960790157,0.901960790157,0.901960790157,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:25,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'tr',p:{a:1,k:[{i:{x:0.196,y:1},o:{x:0,y:0},n:'0p196_1_0_0',t:0,s:[632.987,391.08],e:[992.686,193.119],to:[59.9498710632324,-32.9934883117676],ti:[-59.9498710632324,32.9934883117676]},{t:60.0000024438501}],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:1,k:[{i:{x:[0.833,0.833],y:[0.833,0.833]},o:{x:[1,1],y:[0,0]},n:['0p833_0p833_1_0','0p833_0p833_1_0'],t:0,s:[33.246,33.246],e:[0,0]},{t:60.0000024438501}],ix:3},r:{a:1,k:[{i:{x:[0.529],y:[1]},o:{x:[0.054],y:[0.039]},n:['0p529_1_0p054_0p039'],t:0,s:[0],e:[720]},{t:60.0000024438501}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 5',np:2,cix:2,ix:3,mn:'ADBE Vector Group',hd:!1},{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[-43.406,0],[0,-43.406],[43.406,0],[0,43.406]],o:[[43.406,0],[0,43.406],[-43.406,0],[0,-43.406]],v:[[0,-78.593],[78.593,0],[0,78.593],[-78.593,0]],c:!0},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.901960790157,0.901960790157,0.901960790157,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:25,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'tr',p:{a:1,k:[{i:{x:0.196,y:1},o:{x:0,y:0},n:'0p196_1_0_0',t:0,s:[632.987,391.08],e:[171.686,618.119],to:[-76.8834609985352,37.83984375],ti:[76.8834609985352,-37.83984375]},{t:60.0000024438501}],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:1,k:[{i:{x:[0.833,0.833],y:[0.833,0.833]},o:{x:[1,1],y:[0,0]},n:['0p833_0p833_1_0','0p833_0p833_1_0'],t:0,s:[33.246,33.246],e:[0,0]},{t:60.0000024438501}],ix:3},r:{a:1,k:[{i:{x:[0.529],y:[1]},o:{x:[0.054],y:[0.039]},n:['0p529_1_0p054_0p039'],t:0,s:[0],e:[720]},{t:60.0000024438501}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 7',np:2,cix:2,ix:4,mn:'ADBE Vector Group',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0}]},{id:'comp_1',layers:[{ddd:0,ind:1,ty:4,nm:'twiggle Outlines 10',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:20,ix:10},p:{a:0,k:[640,399,0],ix:2},a:{a:0,k:[545,457,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.901960790157,0.901960790157,0.901960790157,1],ix:3},o:{a:0,k:50,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:25,s:[0],e:[100]},{t:38.0000015477717}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:12,s:[0],e:[100]},{t:38.0000015477717}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:2,ty:4,nm:'twiggle Outlines 9',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:308,ix:10},p:{a:0,k:[640,399,0],ix:2},a:{a:0,k:[545,457,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.901960790157,0.901960790157,0.901960790157,1],ix:3},o:{a:0,k:50,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:25,s:[0],e:[100]},{t:38.0000015477717}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:12,s:[0],e:[100]},{t:38.0000015477717}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:3,ty:4,nm:'twiggle Outlines 8',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:236,ix:10},p:{a:0,k:[640,399,0],ix:2},a:{a:0,k:[545,457,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.901960790157,0.901960790157,0.901960790157,1],ix:3},o:{a:0,k:50,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:25,s:[0],e:[100]},{t:38.0000015477717}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:12,s:[0],e:[100]},{t:38.0000015477717}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:4,ty:4,nm:'twiggle Outlines 7',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:164,ix:10},p:{a:0,k:[640,399,0],ix:2},a:{a:0,k:[545,457,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.901960790157,0.901960790157,0.901960790157,1],ix:3},o:{a:0,k:50,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:25,s:[0],e:[100]},{t:38.0000015477717}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:12,s:[0],e:[100]},{t:38.0000015477717}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:5,ty:4,nm:'twiggle Outlines 6',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:92,ix:10},p:{a:0,k:[640,399,0],ix:2},a:{a:0,k:[545,457,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.901960790157,0.901960790157,0.901960790157,1],ix:3},o:{a:0,k:50,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:25,s:[0],e:[100]},{t:38.0000015477717}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:12,s:[0],e:[100]},{t:38.0000015477717}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:6,ty:4,nm:'twiggle Outlines 5',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:360,ix:10},p:{a:0,k:[640,400,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.96862745285,0.423529416323,0.533333361149,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:13,s:[0],e:[100]},{t:30.0000012219251}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0],e:[100]},{t:30.0000012219251}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:7,ty:4,nm:'twiggle Outlines 4',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:288,ix:10},p:{a:0,k:[640,400,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.643137276173,0.35686275363,0.945098042488,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:13,s:[0],e:[100]},{t:30.0000012219251}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0],e:[100]},{t:30.0000012219251}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:8,ty:4,nm:'twiggle Outlines 3',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:216,ix:10},p:{a:0,k:[640,400,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.447058826685,0.96862745285,0.32549020648,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:13,s:[0],e:[100]},{t:30.0000012219251}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0],e:[100]},{t:30.0000012219251}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:9,ty:4,nm:'twiggle Outlines 2',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:144,ix:10},p:{a:0,k:[640,400,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.145098039216,0.776470588235,0.964705882353,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:13,s:[0],e:[100]},{t:30.0000012219251}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0],e:[100]},{t:30.0000012219251}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:10,ty:4,nm:'twiggle Outlines',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:72,ix:10},p:{a:0,k:[640,400,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[74.124,74.124,100],ix:6}},ao:0,shapes:[{ty:'gr',it:[{ind:0,ty:'sh',ix:1,ks:{a:0,k:{i:[[0,0],[-54.167,-22.916],[-31.25,25],[-17.709,23.959],[-17.709,37.5],[0,0]],o:[[0,0],[54.166,22.917],[31.25,-25],[17.708,-23.958],[17.708,-37.5],[0,0]],v:[[-141.771,120.599],[-86.354,90.057],[-33.229,21.307],[48.021,-3.693],[60.281,-83.099],[141.771,-118.996]],c:!1},ix:2},nm:'Path 1',mn:'ADBE Vector Shape - Group',hd:!1},{ty:'st',c:{a:0,k:[0.960784316063,0.96862745285,0.439215689898,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:8,ix:5},lc:1,lj:1,ml:10,ml2:{a:0,k:10,ix:8},nm:'Stroke 1',mn:'ADBE Vector Graphic - Stroke',hd:!1},{ty:'fl',c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:'Fill 1',mn:'ADBE Vector Graphic - Fill',hd:!1},{ty:'tr',p:{a:0,k:[788.771,279.401],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:'Transform'}],nm:'Group 1',np:3,cix:2,ix:1,mn:'ADBE Vector Group',hd:!1},{ty:'tm',s:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:13,s:[0],e:[100]},{t:30.0000012219251}],ix:1},e:{a:1,k:[{i:{x:[0.833],y:[0.833]},o:{x:[0.167],y:[0.167]},n:['0p833_0p833_0p167_0p167'],t:0,s:[0],e:[100]},{t:30.0000012219251}],ix:2},o:{a:0,k:0,ix:3},m:1,ix:2,nm:'Trim Paths 1',mn:'ADBE Vector Filter - Trim',hd:!1}],ip:0,op:300.00001221925,st:0,bm:0}]}],layers:[{ddd:0,ind:2,ty:0,nm:'layer 1',refId:'comp_0',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[660,420,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[67.505,67.505,100],ix:6}},ao:0,w:1280,h:800,ip:0,op:300.00001221925,st:0,bm:0},{ddd:0,ind:3,ty:0,nm:'layer 1',refId:'comp_0',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:215,ix:10},p:{a:0,k:[660,420,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[67.505,67.505,100],ix:6}},ao:0,w:1280,h:800,ip:4.00000016292334,op:304.000012382174,st:4.00000016292334,bm:0},{ddd:0,ind:4,ty:0,nm:'layer 1',refId:'comp_0',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:58,ix:10},p:{a:0,k:[660,420,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[82.5,82.5,100],ix:6}},ao:0,w:1280,h:800,ip:9.00000036657752,op:309.000012585828,st:9.00000036657752,bm:0},{ddd:0,ind:6,ty:0,nm:'Twiggles',refId:'comp_1',sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[660,420,0],ix:2},a:{a:0,k:[640,400,0],ix:1},s:{a:0,k:[67.505,67.505,100],ix:6}},ao:0,w:1280,h:800,ip:6.00000024438501,op:306.000012463636,st:6.00000024438501,bm:0}],markers:[]}},function(){},function(a){a.exports=require('react')},function(a,b,c){'use strict';Object.defineProperty(b,'__esModule',{value:!0}),c.d(b,'default',function(){return n});var d=c(6),e=c.n(d),f=c(8),g=c.n(f),h=c(0),i=c(1),j=c(2),k=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a};const l={type:'spring',stiffness:200,damping:2},m=g.a.div({confetti:{y:5,transition:k({},l)},emoji:{y:5,transition:k({},l)},memphis:{scale:1.1,transition:k({},l)},punished:{x:5,transition:k({},l)},resting:{y:0,x:0,scale:1,transition:k({},l)}});class n extends d.Component{constructor(...a){var b;return b=super(...a),Object.defineProperty(this,'state',{enumerable:!0,writable:!0,value:{state:'resting'}}),Object.defineProperty(this,'rewardMe',{enumerable:!0,writable:!0,value:()=>{var a=this.props;const b=a.type,c=a.config,d=[this.container,c];switch(b){case'confetti':{this.handleAnimation(b),Object(h['default'])(...d);break}case'emoji':{this.handleAnimation(b),Object(i['default'])(...d);break}case'memphis':{this.handleAnimation(b),Object(j['default'])(...d);break}default:}}}),Object.defineProperty(this,'punishMe',{enumerable:!0,writable:!0,value:()=>{this.handlePunishAnimation()}}),Object.defineProperty(this,'rest',{enumerable:!0,writable:!0,value:()=>{setTimeout(()=>{this.setState({state:'resting'})},100)}}),Object.defineProperty(this,'handleAnimation',{enumerable:!0,writable:!0,value:(a)=>{this.setState({state:a},()=>{this.rest()})}}),Object.defineProperty(this,'handlePunishAnimation',{enumerable:!0,writable:!0,value:()=>{this.setState({state:'punished'},()=>{this.rest()})}}),b}render(){var a=this.props,b=a.config;const c=b===void 0?{}:b,e=a.children;var f=c.springAnimation;const g=this.state.state;return Object(d.createElement)('span',null,Object(d.createElement)('div',{ref:(a)=>{this.container=a}}),Object(d.createElement)(m,{pose:(!(f!==void 0)||f)&&g},e))}}},function(a){a.exports=require('react-pose')},,,,,function(a,b,c){a.exports=c(14)},function(a,b,c){'use strict';Object.defineProperty(b,'__esModule',{value:!0});var d=c(7);b['default']=d['default']}])});

},{"lottie-web":"../node_modules/lottie-web/build/player/lottie.js","react":"../node_modules/react/index.js","react-pose":"../node_modules/react-pose/dist/react-pose.es.js"}],"components/Verb/Info.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Info = function Info(props) {
  var infinitive = props.infinitive,
      infinitive_english = props.infinitive_english,
      tense_english = props.tense_english,
      mood_english = props.mood_english;
  return _react.default.createElement("div", {
    className: "verb-info"
  }, _react.default.createElement("div", {
    className: "twelve"
  }, "Verb:"), _react.default.createElement("div", {
    className: "twenty-four"
  }, infinitive, " ", _react.default.createElement("span", null, "(", infinitive_english, ")")), _react.default.createElement("div", {
    className: "twelve"
  }, "Tense:"), _react.default.createElement("div", {
    className: "twenty-four"
  }, tense_english, ' ', mood_english === 'Subjunctive' ? "(".concat(mood_english, ")") : null));
};

Info.propTypes = {
  infinitive: _propTypes.default.string,
  infinitive_english: _propTypes.default.string,
  tense_english: _propTypes.default.string,
  mood_english: _propTypes.default.string
};
var _default = Info;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js"}],"components/Verb/Person.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var personObj = {
  form_1s: 'Yo',
  form_2s: 'Tú',
  form_3s: 'El/Ella',
  form_1p: 'Nosotros',
  form_2p: 'Vosotros',
  form_3p: 'Ellos/Ellas'
};

var VerbPerson = function VerbPerson(props) {
  var randomPerson = props.randomPerson;
  return _react.default.createElement("div", {
    className: "person-flex"
  }, _react.default.createElement("div", null, personObj[randomPerson]));
};

VerbPerson.propTypes = {
  randomPerson: _propTypes.default.string
};
var _default = VerbPerson;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js"}],"components/Verb/AccentButtons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AccentButtons = function AccentButtons(props) {
  var addAccent = props.addAccent;
  return _react.default.createElement("div", {
    className: "accent-buttons"
  }, _react.default.createElement("button", {
    onClick: addAccent,
    type: "button",
    value: "\xE1"
  }, "\xE1"), _react.default.createElement("button", {
    onClick: addAccent,
    type: "button",
    value: "\xE9"
  }, "\xE9"), _react.default.createElement("button", {
    onClick: addAccent,
    type: "button",
    value: "\xED"
  }, "\xED"), _react.default.createElement("button", {
    onClick: addAccent,
    type: "button",
    value: "\xF1"
  }, "\xF1"), _react.default.createElement("button", {
    onClick: addAccent,
    type: "button",
    value: "\xF3"
  }, "\xF3"), _react.default.createElement("button", {
    onClick: addAccent,
    type: "button",
    value: "\xFA"
  }, "\xFA"));
};

AccentButtons.propTypes = {
  addAccent: _propTypes.default.func
};
var _default = AccentButtons;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js"}],"components/Checkmark/checkmark.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"components/Checkmark/Checkmark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

require("./checkmark.css");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Checkmark = function Checkmark(props) {
  var hide = 'checkmark-hide';
  var display = 'checkmark-display';
  var correct = props.correct;
  return _react.default.createElement("div", {
    className: correct ? display : hide
  }, _react.default.createElement("svg", {
    className: "checkmark",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 52 52"
  }, _react.default.createElement("circle", {
    className: "checkmark__circle",
    cx: "26",
    cy: "26",
    r: "25",
    fill: "none"
  }), _react.default.createElement("path", {
    className: "checkmark__check",
    fill: "none",
    d: "M14.1 27.2l7.1 7.2 16.7-16.8"
  })));
};

Checkmark.propTypes = {
  correct: _propTypes.default.bool
};
var _default = Checkmark;
exports.default = _default;
},{"react":"../node_modules/react/index.js","./checkmark.css":"components/Checkmark/checkmark.css","prop-types":"../node_modules/prop-types/index.js"}],"components/Verb/Input.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Person = _interopRequireDefault(require("./Person"));

var _AccentButtons = _interopRequireDefault(require("./AccentButtons"));

var _Checkmark = _interopRequireDefault(require("../Checkmark/Checkmark"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Input =
/*#__PURE__*/
function (_Component) {
  _inherits(Input, _Component);

  function Input() {
    _classCallCheck(this, Input);

    return _possibleConstructorReturn(this, _getPrototypeOf(Input).apply(this, arguments));
  }

  _createClass(Input, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          randomPerson = _this$props.randomPerson,
          value = _this$props.value,
          handleChange = _this$props.handleChange,
          correct = _this$props.correct,
          addAccent = _this$props.addAccent,
          handleExample = _this$props.handleExample,
          helperText = _this$props.helperText,
          handleSubmit = _this$props.handleSubmit,
          buttonText = _this$props.buttonText;
      return _react.default.createElement("div", null, _react.default.createElement("form", {
        onSubmit: this.handleSubmit
      }, _react.default.createElement("div", {
        className: "input-section"
      }, _react.default.createElement(_Person.default, {
        randomPerson: randomPerson[0]
      }), _react.default.createElement("input", {
        type: "text",
        defaultValue: value,
        placeholder: "Enter conjugated verb...",
        onChange: handleChange,
        className: "input"
      }), _react.default.createElement(_Checkmark.default, {
        correct: correct
      })), _react.default.createElement("div", {
        className: "text-under-input"
      }, _react.default.createElement(_AccentButtons.default, {
        addAccent: addAccent
      }), _react.default.createElement("div", {
        className: "hover-text",
        type: "button",
        role: "button",
        tabIndex: 0,
        onClick: handleExample
      }, "Show example ", _react.default.createElement("i", {
        className: "far fa-arrow-alt-circle-right"
      }))), _react.default.createElement("div", {
        className: "helper-text"
      }, helperText && _react.default.createElement("div", null, helperText), _react.default.createElement("button", {
        className: "submit-button",
        type: "submit",
        onClick: handleSubmit
      }, buttonText))));
    }
  }]);

  return Input;
}(_react.Component);

Input.propTypes = {
  randomPerson: _propTypes.default.array,
  value: _propTypes.default.string,
  handleChange: _propTypes.default.func,
  correct: _propTypes.default.bool,
  addAccent: _propTypes.default.func,
  handleExample: _propTypes.default.func,
  helperText: _propTypes.default.string,
  handleSubmit: _propTypes.default.func,
  buttonText: _propTypes.default.string
};
Input.defaultProps = {
  randomPerson: ['answer', 'answer'],
  value: '',
  correct: false,
  helperText: '',
  buttonText: ''
};
var _default = Input;
exports.default = _default;
},{"react":"../node_modules/react/index.js","prop-types":"../node_modules/prop-types/index.js","./Person":"components/Verb/Person.js","./AccentButtons":"components/Verb/AccentButtons.js","../Checkmark/Checkmark":"components/Checkmark/Checkmark.js"}],"components/Verb/Container.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRewards = _interopRequireDefault(require("react-rewards"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Info = _interopRequireDefault(require("./Info"));

var _Input = _interopRequireDefault(require("./Input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
  value: '',
  helperText: null,
  correct: false
};

var Container =
/*#__PURE__*/
function (_Component) {
  _inherits(Container, _Component);

  function Container(props) {
    var _this;

    _classCallCheck(this, Container);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (event) {
      _this.setState({
        correct: false,
        value: event.target.value
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSubmit", function (event) {
      var _this$state = _this.state,
          value = _this$state.value,
          answered = _this$state.answered;
      var _this$props = _this.props,
          randomPerson = _this$props.randomPerson,
          addCounter = _this$props.addCounter,
          resetCounter = _this$props.resetCounter;
      event.preventDefault();
      var userInput = value.toLowerCase();

      if (answered === true) {
        _this.setState(function (prevState) {
          return {
            totalAnswers: prevState.totalAnswers + 1
          };
        });

        _this.handleRefresh();

        _this.setState({
          answered: false
        });
      } else if (randomPerson[1] === userInput) {
        addCounter();

        _this.setState(function (prevState) {
          return {
            correctAnswers: prevState.correctAnswers + 1,
            totalAnswers: prevState.totalAnswers + 1
          };
        }); // alert('Correct!')


        _this.handleRefresh();

        _this.setState({
          correct: true
        });

        _this.addStreak();
      } else if (randomPerson[1] !== userInput) {
        _this.setState({
          helperText: "False, the correct answer is ".concat(randomPerson[1].toUpperCase(), "."),
          answered: true
        });

        resetCounter();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleExample", function (event) {
      var _this$props2 = _this.props,
          data = _this$props2.data,
          randomVerb = _this$props2.randomVerb;
      var hablar = data.filter(function (verb) {
        return verb.infinitive === 'hablar';
      });
      var hablarTense = hablar.filter(function (verb) {
        return verb.tense_english === randomVerb.tense_english;
      });
      var hablarMood = hablarTense.filter(function (verb) {
        return verb.mood_english === randomVerb.mood_english;
      });
      var hablarExample = hablarMood[0];
      event.preventDefault();

      _this.setState({
        helperText: "Yo + Hablar + ".concat(randomVerb.tense_english, " = YO ").concat(hablarExample.form_1s.toUpperCase())
      });
    });

    _defineProperty(_assertThisInitialized(_this), "addAccent", function (event) {
      event.preventDefault();
      var value = _this.state.value;
      var accent = event.target.value;

      _this.setState({
        value: value + accent
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleRefresh", function () {
      var randomize = _this.props.randomize;

      _this.setState(_objectSpread({}, initialState, {
        correct: false
      }));

      randomize();
    });

    _defineProperty(_assertThisInitialized(_this), "addStreak", function () {
      var bestStreak = _this.state.bestStreak;
      var count = _this.props.count;

      if (count >= bestStreak) {
        _this.setState(function (prevState) {
          return {
            bestStreak: prevState.bestStreak + 1
          };
        });

        if (bestStreak % 5 === 0) {
          _this.reward.rewardMe();
        }
      }
    });

    _this.state = {
      value: '',
      bestStreak: 0,
      totalAnswers: 0,
      correctAnswers: 0,
      answered: false
    };
    return _this;
  }

  _createClass(Container, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          randomPerson = _this$props3.randomPerson,
          randomVerb = _this$props3.randomVerb,
          count = _this$props3.count;
      var _this$state2 = this.state,
          helperText = _this$state2.helperText,
          value = _this$state2.value,
          answered = _this$state2.answered,
          bestStreak = _this$state2.bestStreak,
          correct = _this$state2.correct,
          totalAnswers = _this$state2.totalAnswers,
          correctAnswers = _this$state2.correctAnswers;
      var infinitive = randomVerb.infinitive,
          tense_english = randomVerb.tense_english,
          mood_english = randomVerb.mood_english,
          infinitive_english = randomVerb.infinitive_english;
      var buttonText = randomPerson[1] !== value.toLowerCase() && answered ? 'Next verb' : 'Submit';
      var percentage = totalAnswers < 1 ? 0 : (correctAnswers / totalAnswers * 100).toFixed(0);
      return _react.default.createElement("div", null, _react.default.createElement("div", {
        className: "verb-info-wrapper"
      }, _react.default.createElement("div", {
        className: "verb-streak"
      }, _react.default.createElement("div", {
        className: "current-best-streak"
      }, _react.default.createElement("div", {
        className: "streak"
      }, "current streak:"), _react.default.createElement("div", {
        className: "twenty-four"
      }, count)), _react.default.createElement(_reactRewards.default, {
        ref: function ref(_ref) {
          _this2.reward = _ref;
        },
        type: "emoji"
      }, _react.default.createElement("div", {
        className: "current-best-streak"
      }, _react.default.createElement("div", {
        className: "streak"
      }, "best streak:"), _react.default.createElement("div", {
        className: "twenty-four"
      }, bestStreak, ' ', _react.default.createElement("span", {
        role: "img",
        "aria-label": "salsa dancer"
      }, "\uD83D\uDC83")))), _react.default.createElement("div", {
        className: "current-best-streak"
      }, _react.default.createElement("div", {
        className: "streak"
      }, "percentage:"), _react.default.createElement("div", {
        className: "twenty-four"
      }, percentage, "%"))), _react.default.createElement(_Info.default, {
        infinitive: infinitive,
        infinitive_english: infinitive_english,
        tense_english: tense_english,
        mood_english: mood_english
      })), _react.default.createElement(_Input.default, {
        helperText: helperText,
        correct: correct,
        value: value,
        buttonText: buttonText,
        addAccent: this.addAccent,
        handleSubmit: this.handleSubmit,
        randomPerson: randomPerson,
        handleChange: this.handleChange
      }));
    }
  }]);

  return Container;
}(_react.Component);

Container.propTypes = {
  randomPerson: _propTypes.default.array,
  addCounter: _propTypes.default.func,
  resetCounter: _propTypes.default.func,
  data: _propTypes.default.array,
  randomVerb: _propTypes.default.object,
  randomize: _propTypes.default.func,
  count: _propTypes.default.number
};
Container.defaultProps = {
  randomPerson: ['answer', 'answer']
};
var _default = Container;
exports.default = _default;
},{"react":"../node_modules/react/index.js","react-rewards":"../node_modules/react-rewards/build/index.js","prop-types":"../node_modules/prop-types/index.js","./Info":"components/Verb/Info.js","./Input":"components/Verb/Input.js"}],"components/Verb/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

require("../../app.css");

var _Settings = _interopRequireDefault(require("../Settings/Settings"));

var _NumPersonFilters = require("../Filters/NumPersonFilters");

var _VerbTensesFilters = require("../Filters/VerbTensesFilters");

var _Container = _interopRequireDefault(require("./Container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
  correct: false,
  randomVerb: {},
  randomPerson: []
};

var Verb =
/*#__PURE__*/
function (_Component) {
  _inherits(Verb, _Component);

  function Verb(props) {
    var _this;

    _classCallCheck(this, Verb);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Verb).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "randomize", function () {
      var data = _this.state.data;
      var randomVerb = data[Math.floor(Math.random() * data.length)];
      var randomPerson = Object.entries(randomVerb)[Math.floor(Math.random() * 5) + 7]; // This do while loop check for an empty string or Imperative Negative and randomises the verb again if it's found

      do {
        randomVerb = data[Math.floor(Math.random() * data.length)];
        randomPerson = Object.entries(randomVerb)[Math.floor(Math.random() * 5) + 7];
      } while (randomPerson[1] === '' || randomVerb.mood_english === 'Imperative Negative');

      _this.setState({
        randomVerb: randomVerb,
        randomPerson: randomPerson
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleRefresh", function () {
      _this.setState(_objectSpread({}, initialState));

      _this.randomize();
    });

    _defineProperty(_assertThisInitialized(_this), "addCounter", function () {
      _this.setState(function (prevState) {
        return {
          count: prevState.count + 1
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "resetCounter", function () {
      _this.setState({
        count: 0
      });
    });

    _defineProperty(_assertThisInitialized(_this), "updateNumPerson", function (event) {
      _this.setState({
        NumberPerson: event.target.value
      });
    });

    _defineProperty(_assertThisInitialized(_this), "updateVerbTenses", function (event) {
      _this.setState({
        level: event.target.value
      });

      _this.handleRefresh();
    });

    _defineProperty(_assertThisInitialized(_this), "filterData", function (event) {
      event.preventDefault();
      var _this$state = _this.state,
          level = _this$state.level,
          NumberPerson = _this$state.NumberPerson;
      var Level = parseInt(level);

      if (NumberPerson === 'Spain') {
        var spainSpan = (0, _NumPersonFilters.spainSpanish)(_VerbTensesFilters.VerbTenseFilters[Level]);

        _this.setState({
          data: spainSpan
        });
      }

      if (NumberPerson === 'Latam') {
        var latamSpan = (0, _NumPersonFilters.latamSpanish)(_VerbTensesFilters.VerbTenseFilters[Level]);

        _this.setState({
          data: latamSpan
        });
      }

      _this.handleRefresh();
    });

    _this.state = _objectSpread({}, initialState, {
      data: (0, _NumPersonFilters.latamSpanish)(_VerbTensesFilters.VerbTenseFilters[0]),
      NumberPerson: 'Latam',
      level: 0,
      count: 0
    });
    return _this;
  }

  _createClass(Verb, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.randomize();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          randomVerb = _this$state2.randomVerb,
          randomPerson = _this$state2.randomPerson,
          data = _this$state2.data,
          count = _this$state2.count; // console.log('Answer:', randomPerson[1]);

      return _react.default.createElement("div", null, _react.default.createElement(_Container.default, {
        data: data,
        randomPerson: randomPerson,
        randomVerb: randomVerb,
        randomize: this.randomize,
        addCounter: this.addCounter,
        resetCounter: this.resetCounter,
        addStreak: this.addStreak,
        count: count
      }), _react.default.createElement(_Settings.default, {
        filterData: this.filterData,
        updateVerbTenses: this.updateVerbTenses,
        updateNumPerson: this.updateNumPerson
      }));
    }
  }]);

  return Verb;
}(_react.Component);

var _default = Verb;
exports.default = _default;
},{"react":"../node_modules/react/index.js","../../app.css":"app.css","../Settings/Settings":"components/Settings/Settings.js","../Filters/NumPersonFilters":"components/Filters/NumPersonFilters.js","../Filters/VerbTensesFilters":"components/Filters/VerbTensesFilters.js","./Container":"components/Verb/Container.js"}],"components/Modal/modal.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"assets/bf-profile.jpeg":[function(require,module,exports) {
module.exports = "/bf-profile.f72dc110.jpeg";
},{}],"assets/no-profile.jpeg":[function(require,module,exports) {
module.exports = "/no-profile.67d4b673.jpeg";
},{}],"components/Modal/Modal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

require("./modal.css");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bfProfile = _interopRequireDefault(require("../../assets/bf-profile.jpeg"));

var _noProfile = _interopRequireDefault(require("../../assets/no-profile.jpeg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Modal = function Modal(props) {
  var show = props.show,
      close = props.close;
  return _react.default.createElement("div", {
    className: "modal"
  }, _react.default.createElement("div", {
    className: "modal-wrapper",
    style: {
      top: show ? '15%' : '-100%',
      opacity: show ? '1' : '0'
    }
  }, _react.default.createElement("div", {
    className: "modal-header"
  }, _react.default.createElement("h3", null, "Hola, muchas gracias for visiting", ' ', _react.default.createElement("span", {
    className: "logo"
  }, "Spanish Conjugator", ' ', _react.default.createElement("span", {
    role: "img",
    "aria-label": "colombia"
  }, "\uD83C\uDDEA\uD83C\uDDF8")))), _react.default.createElement("div", {
    className: "modal-body"
  }, _react.default.createElement("div", null, _react.default.createElement("p", null, "Created by:"), _react.default.createElement("div", {
    className: "created-by"
  }, _react.default.createElement("div", null, _react.default.createElement("img", {
    src: _bfProfile.default,
    alt: "blake fletcher spanish conjugator"
  }), _react.default.createElement("div", null, "Blake Fletcher"), _react.default.createElement("p", null, "Find him on", ' ', _react.default.createElement("a", {
    href: "https://github.com/blkfltchr",
    target: "_blank",
    rel: "noopener noreferrer"
  }, "Github"), ",", ' ', _react.default.createElement("a", {
    href: "https://twitter.com/blkfltchr",
    target: "_blank",
    rel: "noopener noreferrer"
  }, "Twitter"), ' ', "or", ' ', _react.default.createElement("a", {
    href: "mailto:blkfltchr@gmail.com",
    target: "_blank",
    rel: "noopener noreferrer"
  }, "email"), ' ', "him.")), _react.default.createElement("div", null, _react.default.createElement("img", {
    src: _noProfile.default,
    alt: "nick o'ferrall spanish conjugator"
  }), _react.default.createElement("div", null, "Nick O'Ferrall"), _react.default.createElement("p", null, "Find him on", ' ', _react.default.createElement("a", {
    href: "https://github.com/nickoferrall",
    target: "_blank",
    rel: "noopener noreferrer"
  }, "Github"), ",", ' ', _react.default.createElement("a", {
    href: "https://twitter.com/nickoferrall",
    target: "_blank",
    rel: "noopener noreferrer"
  }, "Twitter"), ' ', "or", ' ', _react.default.createElement("a", {
    href: "mailto:nickoferrall@gmail.com",
    target: "_blank",
    rel: "noopener noreferrer"
  }, "email"), ' ', "him."))))), _react.default.createElement("div", {
    className: "modal-footer"
  }, _react.default.createElement("button", {
    type: "button",
    className: "btn-cancel",
    onClick: close
  }, "CLOSE"))));
};

Modal.propTypes = {
  show: _propTypes.default.bool,
  close: _propTypes.default.bool
};
var _default = Modal;
exports.default = _default;
},{"react":"../node_modules/react/index.js","./modal.css":"components/Modal/modal.css","prop-types":"../node_modules/prop-types/index.js","../../assets/bf-profile.jpeg":"assets/bf-profile.jpeg","../../assets/no-profile.jpeg":"assets/no-profile.jpeg"}],"App.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Header = _interopRequireDefault(require("./components/Layout/Header"));

var _index = _interopRequireDefault(require("./components/Verb/index"));

var _Modal = _interopRequireDefault(require("./components/Modal/Modal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var App =
/*#__PURE__*/
function (_Component) {
  _inherits(App, _Component);

  function App() {
    var _this;

    _classCallCheck(this, App);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));

    _defineProperty(_assertThisInitialized(_this), "openModalHandler", function () {
      _this.setState({
        isShowing: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "closeModalHandler", function () {
      _this.setState({
        isShowing: false
      });
    });

    _this.state = {
      isShowing: false
    };
    return _this;
  }

  _createClass(App, [{
    key: "render",
    value: function render() {
      var isShowing = this.state.isShowing;
      return _react.default.createElement("div", {
        className: "app"
      }, _react.default.createElement(_Header.default, null), _react.default.createElement("div", {
        className: "app-wrapper"
      }, isShowing ? _react.default.createElement("div", {
        onClick: this.closeModalHandler,
        className: "back-drop"
      }) : null, _react.default.createElement(_index.default, null), _react.default.createElement("div", {
        className: "made-with-love",
        onClick: this.openModalHandler
      }, "Made with", _react.default.createElement("span", {
        role: "img",
        "aria-label": "heart"
      }, "\u2764\uFE0F"), ' ', "in", _react.default.createElement("span", {
        role: "img",
        "aria-label": "colombia"
      }, "\uD83C\uDDE8\uD83C\uDDF4")), _react.default.createElement(_Modal.default, {
        show: isShowing,
        close: this.closeModalHandler
      })));
    }
  }]);

  return App;
}(_react.Component);

var _default = App;
exports.default = _default;
},{"react":"../node_modules/react/index.js","./components/Layout/Header":"components/Layout/Header.js","./components/Verb/index":"components/Verb/index.js","./components/Modal/Modal":"components/Modal/Modal.js"}],"index.js":[function(require,module,exports) {
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _reactRouterDom = require("react-router-dom");

var _App = _interopRequireDefault(require("./App"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_reactDom.default.render(_react.default.createElement(_reactRouterDom.BrowserRouter, null, _react.default.createElement(_App.default, null)), document.getElementById('root'));
},{"react":"../node_modules/react/index.js","react-dom":"../node_modules/react-dom/index.js","react-router-dom":"../node_modules/react-router-dom/es/index.js","./App":"App.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "53127" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/index.js.map